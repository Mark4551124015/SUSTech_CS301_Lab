
PA2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006370  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  08006558  08006558  00016558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068a8  080068a8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080068a8  080068a8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080068a8  080068a8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080068a8  080068a8  000168a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080068b0  080068b0  000168b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080068b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000af8  20000068  08006920  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b60  08006920  00020b60  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dcdd  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040c6  00000000  00000000  0003ddb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001150  00000000  00000000  00041e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d65  00000000  00000000  00042fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fb9c  00000000  00000000  00043d2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001588e  00000000  00000000  000638c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a58f8  00000000  00000000  00079157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000582c  00000000  00000000  0011ea50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0012427c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000068 	.word	0x20000068
 8000204:	00000000 	.word	0x00000000
 8000208:	08006540 	.word	0x08006540

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000006c 	.word	0x2000006c
 8000224:	08006540 	.word	0x08006540

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__gedf2>:
 80005b0:	f04f 3cff 	mov.w	ip, #4294967295
 80005b4:	e006      	b.n	80005c4 <__cmpdf2+0x4>
 80005b6:	bf00      	nop

080005b8 <__ledf2>:
 80005b8:	f04f 0c01 	mov.w	ip, #1
 80005bc:	e002      	b.n	80005c4 <__cmpdf2+0x4>
 80005be:	bf00      	nop

080005c0 <__cmpdf2>:
 80005c0:	f04f 0c01 	mov.w	ip, #1
 80005c4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80005c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005d4:	bf18      	it	ne
 80005d6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005da:	d01b      	beq.n	8000614 <__cmpdf2+0x54>
 80005dc:	b001      	add	sp, #4
 80005de:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005e2:	bf0c      	ite	eq
 80005e4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005e8:	ea91 0f03 	teqne	r1, r3
 80005ec:	bf02      	ittt	eq
 80005ee:	ea90 0f02 	teqeq	r0, r2
 80005f2:	2000      	moveq	r0, #0
 80005f4:	4770      	bxeq	lr
 80005f6:	f110 0f00 	cmn.w	r0, #0
 80005fa:	ea91 0f03 	teq	r1, r3
 80005fe:	bf58      	it	pl
 8000600:	4299      	cmppl	r1, r3
 8000602:	bf08      	it	eq
 8000604:	4290      	cmpeq	r0, r2
 8000606:	bf2c      	ite	cs
 8000608:	17d8      	asrcs	r0, r3, #31
 800060a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800060e:	f040 0001 	orr.w	r0, r0, #1
 8000612:	4770      	bx	lr
 8000614:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000618:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800061c:	d102      	bne.n	8000624 <__cmpdf2+0x64>
 800061e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000622:	d107      	bne.n	8000634 <__cmpdf2+0x74>
 8000624:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000628:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800062c:	d1d6      	bne.n	80005dc <__cmpdf2+0x1c>
 800062e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000632:	d0d3      	beq.n	80005dc <__cmpdf2+0x1c>
 8000634:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <__aeabi_cdrcmple>:
 800063c:	4684      	mov	ip, r0
 800063e:	4610      	mov	r0, r2
 8000640:	4662      	mov	r2, ip
 8000642:	468c      	mov	ip, r1
 8000644:	4619      	mov	r1, r3
 8000646:	4663      	mov	r3, ip
 8000648:	e000      	b.n	800064c <__aeabi_cdcmpeq>
 800064a:	bf00      	nop

0800064c <__aeabi_cdcmpeq>:
 800064c:	b501      	push	{r0, lr}
 800064e:	f7ff ffb7 	bl	80005c0 <__cmpdf2>
 8000652:	2800      	cmp	r0, #0
 8000654:	bf48      	it	mi
 8000656:	f110 0f00 	cmnmi.w	r0, #0
 800065a:	bd01      	pop	{r0, pc}

0800065c <__aeabi_dcmpeq>:
 800065c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000660:	f7ff fff4 	bl	800064c <__aeabi_cdcmpeq>
 8000664:	bf0c      	ite	eq
 8000666:	2001      	moveq	r0, #1
 8000668:	2000      	movne	r0, #0
 800066a:	f85d fb08 	ldr.w	pc, [sp], #8
 800066e:	bf00      	nop

08000670 <__aeabi_dcmplt>:
 8000670:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000674:	f7ff ffea 	bl	800064c <__aeabi_cdcmpeq>
 8000678:	bf34      	ite	cc
 800067a:	2001      	movcc	r0, #1
 800067c:	2000      	movcs	r0, #0
 800067e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000682:	bf00      	nop

08000684 <__aeabi_dcmple>:
 8000684:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000688:	f7ff ffe0 	bl	800064c <__aeabi_cdcmpeq>
 800068c:	bf94      	ite	ls
 800068e:	2001      	movls	r0, #1
 8000690:	2000      	movhi	r0, #0
 8000692:	f85d fb08 	ldr.w	pc, [sp], #8
 8000696:	bf00      	nop

08000698 <__aeabi_dcmpge>:
 8000698:	f84d ed08 	str.w	lr, [sp, #-8]!
 800069c:	f7ff ffce 	bl	800063c <__aeabi_cdrcmple>
 80006a0:	bf94      	ite	ls
 80006a2:	2001      	movls	r0, #1
 80006a4:	2000      	movhi	r0, #0
 80006a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006aa:	bf00      	nop

080006ac <__aeabi_dcmpgt>:
 80006ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b0:	f7ff ffc4 	bl	800063c <__aeabi_cdrcmple>
 80006b4:	bf34      	ite	cc
 80006b6:	2001      	movcc	r0, #1
 80006b8:	2000      	movcs	r0, #0
 80006ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80006be:	bf00      	nop

080006c0 <_ZN4GameC1Ev>:
#include "stm32f1xx.h"

using namespace std;

extern LED leddev;
Game::Game() {
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
    // this->counter = 0;
    this->time_remains = 0;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
    this->question_remains = 0;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2200      	movs	r2, #0
 80006d2:	605a      	str	r2, [r3, #4]
    this->current_answer = 0;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
}
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4618      	mov	r0, r3
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr

080006e6 <_ZN4Game4InitEv>:

void Game::Init() {
 80006e6:	b480      	push	{r7}
 80006e8:	b083      	sub	sp, #12
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
    this->time_remains = Default_Time;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	223c      	movs	r2, #60	; 0x3c
 80006f2:	601a      	str	r2, [r3, #0]
    this->question_remains = Default_Question_Cnt;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2205      	movs	r2, #5
 80006f8:	605a      	str	r2, [r3, #4]
    this->current_answer = 0xffffffff;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000700:	609a      	str	r2, [r3, #8]
    this->current_mode = plus;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2200      	movs	r2, #0
 8000706:	731a      	strb	r2, [r3, #12]
    this->current_state = playing;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2202      	movs	r2, #2
 800070c:	735a      	strb	r2, [r3, #13]
}
 800070e:	bf00      	nop
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr

08000718 <_ZN4Game4tickEv>:

void Game::tick() {
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
    if (this->current_state != playing) return;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	7b5b      	ldrb	r3, [r3, #13]
 8000724:	2b02      	cmp	r3, #2
 8000726:	d10c      	bne.n	8000742 <_ZN4Game4tickEv+0x2a>
    this->time_remains--;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	1e5a      	subs	r2, r3, #1
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	601a      	str	r2, [r3, #0]
    if (this->time_remains < 0) {
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	da04      	bge.n	8000744 <_ZN4Game4tickEv+0x2c>
        this->current_state = lose;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2201      	movs	r2, #1
 800073e:	735a      	strb	r2, [r3, #13]
 8000740:	e000      	b.n	8000744 <_ZN4Game4tickEv+0x2c>
    if (this->current_state != playing) return;
 8000742:	bf00      	nop
    }
}
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr

0800074c <_ZN4Game17generate_questionEv>:

void Game::set_question_cnt(int cnt) { this->question_remains = cnt; }

void Game::add_question_cnt(int cnt) { this->question_remains += cnt; }

void Game::generate_question() {
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
    if (this->current_state != playing) return;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	7b5b      	ldrb	r3, [r3, #13]
 8000758:	2b02      	cmp	r3, #2
 800075a:	f040 80bb 	bne.w	80008d4 <_ZN4Game17generate_questionEv+0x188>
    srand(HAL_GetTick());
 800075e:	f002 f8cf 	bl	8002900 <HAL_GetTick>
 8000762:	4603      	mov	r3, r0
 8000764:	4618      	mov	r0, r3
 8000766:	f004 fd2b 	bl	80051c0 <srand>
    char *out = new char[100];
 800076a:	2064      	movs	r0, #100	; 0x64
 800076c:	f004 fc4b 	bl	8005006 <_Znaj>
 8000770:	4603      	mov	r3, r0
 8000772:	617b      	str	r3, [r7, #20]
    int a = rand() % 100;
 8000774:	f004 fd52 	bl	800521c <rand>
 8000778:	4602      	mov	r2, r0
 800077a:	4b58      	ldr	r3, [pc, #352]	; (80008dc <_ZN4Game17generate_questionEv+0x190>)
 800077c:	fb83 1302 	smull	r1, r3, r3, r2
 8000780:	1159      	asrs	r1, r3, #5
 8000782:	17d3      	asrs	r3, r2, #31
 8000784:	1acb      	subs	r3, r1, r3
 8000786:	2164      	movs	r1, #100	; 0x64
 8000788:	fb01 f303 	mul.w	r3, r1, r3
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	613b      	str	r3, [r7, #16]
    int b = rand() % 100;
 8000790:	f004 fd44 	bl	800521c <rand>
 8000794:	4602      	mov	r2, r0
 8000796:	4b51      	ldr	r3, [pc, #324]	; (80008dc <_ZN4Game17generate_questionEv+0x190>)
 8000798:	fb83 1302 	smull	r1, r3, r3, r2
 800079c:	1159      	asrs	r1, r3, #5
 800079e:	17d3      	asrs	r3, r2, #31
 80007a0:	1acb      	subs	r3, r1, r3
 80007a2:	2164      	movs	r1, #100	; 0x64
 80007a4:	fb01 f303 	mul.w	r3, r1, r3
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	60fb      	str	r3, [r7, #12]

    switch (this->current_mode) {
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	7b1b      	ldrb	r3, [r3, #12]
 80007b0:	2b03      	cmp	r3, #3
 80007b2:	f200 808a 	bhi.w	80008ca <_ZN4Game17generate_questionEv+0x17e>
 80007b6:	a201      	add	r2, pc, #4	; (adr r2, 80007bc <_ZN4Game17generate_questionEv+0x70>)
 80007b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007bc:	080007cd 	.word	0x080007cd
 80007c0:	080007ff 	.word	0x080007ff
 80007c4:	0800082f 	.word	0x0800082f
 80007c8:	0800087d 	.word	0x0800087d
        case plus:
            if (a > b) {
 80007cc:	693a      	ldr	r2, [r7, #16]
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	dd04      	ble.n	80007de <_ZN4Game17generate_questionEv+0x92>
                a -= b;
 80007d4:	693a      	ldr	r2, [r7, #16]
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	e003      	b.n	80007e6 <_ZN4Game17generate_questionEv+0x9a>
            } else {
                b -= a;
 80007de:	68fa      	ldr	r2, [r7, #12]
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	1ad3      	subs	r3, r2, r3
 80007e4:	60fb      	str	r3, [r7, #12]
            }
            sprintf(out, "[INFO] %d + %d = ?\r\n", a, b);
 80007e6:	693a      	ldr	r2, [r7, #16]
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	493d      	ldr	r1, [pc, #244]	; (80008e0 <_ZN4Game17generate_questionEv+0x194>)
 80007ec:	6978      	ldr	r0, [r7, #20]
 80007ee:	f004 fe9d 	bl	800552c <siprintf>
            this->current_answer = a + b;
 80007f2:	693a      	ldr	r2, [r7, #16]
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	441a      	add	r2, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	609a      	str	r2, [r3, #8]
            break;
 80007fc:	e066      	b.n	80008cc <_ZN4Game17generate_questionEv+0x180>
        case minus:

            if (a < b) swap(a, b);
 80007fe:	693a      	ldr	r2, [r7, #16]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	429a      	cmp	r2, r3
 8000804:	da07      	bge.n	8000816 <_ZN4Game17generate_questionEv+0xca>
 8000806:	f107 020c 	add.w	r2, r7, #12
 800080a:	f107 0310 	add.w	r3, r7, #16
 800080e:	4611      	mov	r1, r2
 8000810:	4618      	mov	r0, r3
 8000812:	f000 f8f1 	bl	80009f8 <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
            sprintf(out, "[INFO] %d - %d = ?\r\n", a, b);
 8000816:	693a      	ldr	r2, [r7, #16]
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	4932      	ldr	r1, [pc, #200]	; (80008e4 <_ZN4Game17generate_questionEv+0x198>)
 800081c:	6978      	ldr	r0, [r7, #20]
 800081e:	f004 fe85 	bl	800552c <siprintf>
            this->current_answer = a - b;
 8000822:	693a      	ldr	r2, [r7, #16]
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	1ad2      	subs	r2, r2, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	609a      	str	r2, [r3, #8]
            break;
 800082c:	e04e      	b.n	80008cc <_ZN4Game17generate_questionEv+0x180>
        case multiply:
            a %= 10;
 800082e:	6939      	ldr	r1, [r7, #16]
 8000830:	4b2d      	ldr	r3, [pc, #180]	; (80008e8 <_ZN4Game17generate_questionEv+0x19c>)
 8000832:	fb83 2301 	smull	r2, r3, r3, r1
 8000836:	109a      	asrs	r2, r3, #2
 8000838:	17cb      	asrs	r3, r1, #31
 800083a:	1ad2      	subs	r2, r2, r3
 800083c:	4613      	mov	r3, r2
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	4413      	add	r3, r2
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	1aca      	subs	r2, r1, r3
 8000846:	613a      	str	r2, [r7, #16]
            b %= 10;
 8000848:	68f9      	ldr	r1, [r7, #12]
 800084a:	4b27      	ldr	r3, [pc, #156]	; (80008e8 <_ZN4Game17generate_questionEv+0x19c>)
 800084c:	fb83 2301 	smull	r2, r3, r3, r1
 8000850:	109a      	asrs	r2, r3, #2
 8000852:	17cb      	asrs	r3, r1, #31
 8000854:	1ad2      	subs	r2, r2, r3
 8000856:	4613      	mov	r3, r2
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	4413      	add	r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	1aca      	subs	r2, r1, r3
 8000860:	60fa      	str	r2, [r7, #12]
            sprintf(out, "[INFO] %d * %d = ?\r\n", a, b);
 8000862:	693a      	ldr	r2, [r7, #16]
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	4921      	ldr	r1, [pc, #132]	; (80008ec <_ZN4Game17generate_questionEv+0x1a0>)
 8000868:	6978      	ldr	r0, [r7, #20]
 800086a:	f004 fe5f 	bl	800552c <siprintf>
            this->current_answer = a * b;
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	68fa      	ldr	r2, [r7, #12]
 8000872:	fb03 f202 	mul.w	r2, r3, r2
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	609a      	str	r2, [r3, #8]
            break;
 800087a:	e027      	b.n	80008cc <_ZN4Game17generate_questionEv+0x180>
        case divide:
            a %= 10;
 800087c:	6939      	ldr	r1, [r7, #16]
 800087e:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <_ZN4Game17generate_questionEv+0x19c>)
 8000880:	fb83 2301 	smull	r2, r3, r3, r1
 8000884:	109a      	asrs	r2, r3, #2
 8000886:	17cb      	asrs	r3, r1, #31
 8000888:	1ad2      	subs	r2, r2, r3
 800088a:	4613      	mov	r3, r2
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	4413      	add	r3, r2
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	1aca      	subs	r2, r1, r3
 8000894:	613a      	str	r2, [r7, #16]
            b %= 10;
 8000896:	68f9      	ldr	r1, [r7, #12]
 8000898:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <_ZN4Game17generate_questionEv+0x19c>)
 800089a:	fb83 2301 	smull	r2, r3, r3, r1
 800089e:	109a      	asrs	r2, r3, #2
 80008a0:	17cb      	asrs	r3, r1, #31
 80008a2:	1ad2      	subs	r2, r2, r3
 80008a4:	4613      	mov	r3, r2
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	4413      	add	r3, r2
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	1aca      	subs	r2, r1, r3
 80008ae:	60fa      	str	r2, [r7, #12]
            sprintf(out, "[INFO] %d / %d = ?\r\n", a * b, b);
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	fb03 f202 	mul.w	r2, r3, r2
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	490d      	ldr	r1, [pc, #52]	; (80008f0 <_ZN4Game17generate_questionEv+0x1a4>)
 80008bc:	6978      	ldr	r0, [r7, #20]
 80008be:	f004 fe35 	bl	800552c <siprintf>
            this->current_answer = a;
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	609a      	str	r2, [r3, #8]
            break;
 80008c8:	e000      	b.n	80008cc <_ZN4Game17generate_questionEv+0x180>
        default:
            break;
 80008ca:	bf00      	nop
    }
    uart_print(out);
 80008cc:	6978      	ldr	r0, [r7, #20]
 80008ce:	f001 ff83 	bl	80027d8 <uart_print>
 80008d2:	e000      	b.n	80008d6 <_ZN4Game17generate_questionEv+0x18a>
    if (this->current_state != playing) return;
 80008d4:	bf00      	nop
}
 80008d6:	3718      	adds	r7, #24
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	51eb851f 	.word	0x51eb851f
 80008e0:	08006558 	.word	0x08006558
 80008e4:	08006570 	.word	0x08006570
 80008e8:	66666667 	.word	0x66666667
 80008ec:	08006588 	.word	0x08006588
 80008f0:	080065a0 	.word	0x080065a0
 80008f4:	00000000 	.word	0x00000000

080008f8 <_ZN4Game15answer_questionEPKc>:
bool Game::answer_question(const char *answer) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
    if (this->current_state != playing) return false;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	7b5b      	ldrb	r3, [r3, #13]
 8000906:	2b02      	cmp	r3, #2
 8000908:	d001      	beq.n	800090e <_ZN4Game15answer_questionEPKc+0x16>
 800090a:	2300      	movs	r3, #0
 800090c:	e055      	b.n	80009ba <_ZN4Game15answer_questionEPKc+0xc2>
    int ans = atoi(answer);
 800090e:	6838      	ldr	r0, [r7, #0]
 8000910:	f004 fb95 	bl	800503e <atoi>
 8000914:	6138      	str	r0, [r7, #16]
    char *output = new char[100];
 8000916:	2064      	movs	r0, #100	; 0x64
 8000918:	f004 fb75 	bl	8005006 <_Znaj>
 800091c:	4603      	mov	r3, r0
 800091e:	60fb      	str	r3, [r7, #12]

    sprintf(output, "[INFO] Your answer is %d\r\n", ans);
 8000920:	693a      	ldr	r2, [r7, #16]
 8000922:	492b      	ldr	r1, [pc, #172]	; (80009d0 <_ZN4Game15answer_questionEPKc+0xd8>)
 8000924:	68f8      	ldr	r0, [r7, #12]
 8000926:	f004 fe01 	bl	800552c <siprintf>
    uart_print(output);
 800092a:	68f8      	ldr	r0, [r7, #12]
 800092c:	f001 ff54 	bl	80027d8 <uart_print>

    if (abs(ans - this->current_answer) < eps) {
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	1ad3      	subs	r3, r2, r3
 8000938:	2b00      	cmp	r3, #0
 800093a:	bfb8      	it	lt
 800093c:	425b      	neglt	r3, r3
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff fdcc 	bl	80004dc <__aeabi_i2d>
 8000944:	a320      	add	r3, pc, #128	; (adr r3, 80009c8 <_ZN4Game15answer_questionEPKc+0xd0>)
 8000946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800094a:	f7ff fe91 	bl	8000670 <__aeabi_dcmplt>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d027      	beq.n	80009a4 <_ZN4Game15answer_questionEPKc+0xac>
        this->question_remains--;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	1e5a      	subs	r2, r3, #1
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	605a      	str	r2, [r3, #4]
        uart_print("[INFO] True! Do a good job!\r\n");
 800095e:	481d      	ldr	r0, [pc, #116]	; (80009d4 <_ZN4Game15answer_questionEPKc+0xdc>)
 8000960:	f001 ff3a 	bl	80027d8 <uart_print>
        leddev.append(BLINK_0);
 8000964:	2100      	movs	r1, #0
 8000966:	481c      	ldr	r0, [pc, #112]	; (80009d8 <_ZN4Game15answer_questionEPKc+0xe0>)
 8000968:	f000 f8be 	bl	8000ae8 <_ZN3LED6appendE6led_op>
        if (this->question_remains == 0) {
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d112      	bne.n	800099a <_ZN4Game15answer_questionEPKc+0xa2>
            this->current_state = win;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2200      	movs	r2, #0
 8000978:	735a      	strb	r2, [r3, #13]
            for (int i = 0; i < 10; i++) leddev.append(BLINK_BOTH_TWICE);
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
 800097e:	e006      	b.n	800098e <_ZN4Game15answer_questionEPKc+0x96>
 8000980:	2102      	movs	r1, #2
 8000982:	4815      	ldr	r0, [pc, #84]	; (80009d8 <_ZN4Game15answer_questionEPKc+0xe0>)
 8000984:	f000 f8b0 	bl	8000ae8 <_ZN3LED6appendE6led_op>
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	3301      	adds	r3, #1
 800098c:	617b      	str	r3, [r7, #20]
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	2b09      	cmp	r3, #9
 8000992:	ddf5      	ble.n	8000980 <_ZN4Game15answer_questionEPKc+0x88>
            uart_print("[INFO] You win!\r\n");
 8000994:	4811      	ldr	r0, [pc, #68]	; (80009dc <_ZN4Game15answer_questionEPKc+0xe4>)
 8000996:	f001 ff1f 	bl	80027d8 <uart_print>
        }
        this->generate_question();
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f7ff fed6 	bl	800074c <_ZN4Game17generate_questionEv>
        return true;
 80009a0:	2301      	movs	r3, #1
 80009a2:	e00a      	b.n	80009ba <_ZN4Game15answer_questionEPKc+0xc2>
    }
    leddev.append(BLINK_1);
 80009a4:	2101      	movs	r1, #1
 80009a6:	480c      	ldr	r0, [pc, #48]	; (80009d8 <_ZN4Game15answer_questionEPKc+0xe0>)
 80009a8:	f000 f89e 	bl	8000ae8 <_ZN3LED6appendE6led_op>
    this->generate_question();
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f7ff fecd 	bl	800074c <_ZN4Game17generate_questionEv>
    uart_print("[INFO] Wrong! Please try again!\r\n");
 80009b2:	480b      	ldr	r0, [pc, #44]	; (80009e0 <_ZN4Game15answer_questionEPKc+0xe8>)
 80009b4:	f001 ff10 	bl	80027d8 <uart_print>
    return false;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3718      	adds	r7, #24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	f3af 8000 	nop.w
 80009c8:	a0b5ed8d 	.word	0xa0b5ed8d
 80009cc:	3eb0c6f7 	.word	0x3eb0c6f7
 80009d0:	080065b8 	.word	0x080065b8
 80009d4:	080065d4 	.word	0x080065d4
 80009d8:	200005d4 	.word	0x200005d4
 80009dc:	080065f4 	.word	0x080065f4
 80009e0:	08006608 	.word	0x08006608

080009e4 <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4618      	mov	r0, r3
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr

080009f8 <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f7ff ffee 	bl	80009e4 <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8000a0e:	6838      	ldr	r0, [r7, #0]
 8000a10:	f7ff ffe8 	bl	80009e4 <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 8000a14:	4603      	mov	r3, r0
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff ffdf 	bl	80009e4 <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 8000a26:	4603      	mov	r3, r0
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	601a      	str	r2, [r3, #0]
    }
 8000a2e:	bf00      	nop
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000a36:	b480      	push	{r7}
 8000a38:	b083      	sub	sp, #12
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
 8000a3e:	6039      	str	r1, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	4618      	mov	r0, r3
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr

08000a4c <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a5a:	d205      	bcs.n	8000a68 <_ZSt16__deque_buf_sizej+0x1c>
 8000a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a66:	e000      	b.n	8000a6a <_ZSt16__deque_buf_sizej+0x1e>
 8000a68:	2301      	movs	r3, #1
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr

08000a74 <_ZN3LEDC1Ev>:
#include "main.h"

#define WAKE GPIO_PIN_RESET
#define DEAD GPIO_PIN_SET

LED::LED() {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 f997 	bl	8000db2 <_ZNSt5queueIhSt5dequeIhSaIhEEEC1IS2_vEEv>
    this->counter = 0;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2200      	movs	r2, #0
 8000a88:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, DEAD);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a90:	4806      	ldr	r0, [pc, #24]	; (8000aac <_ZN3LEDC1Ev+0x38>)
 8000a92:	f002 fb3a 	bl	800310a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, DEAD);
 8000a96:	2201      	movs	r2, #1
 8000a98:	2104      	movs	r1, #4
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <_ZN3LEDC1Ev+0x3c>)
 8000a9c:	f002 fb35 	bl	800310a <HAL_GPIO_WritePin>
}
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40010800 	.word	0x40010800
 8000ab0:	40011400 	.word	0x40011400

08000ab4 <_ZN3LED4InitEv>:

void LED::Init() {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
    this->counter = 0;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, DEAD);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac8:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <_ZN3LED4InitEv+0x2c>)
 8000aca:	f002 fb1e 	bl	800310a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, DEAD);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2104      	movs	r1, #4
 8000ad2:	4804      	ldr	r0, [pc, #16]	; (8000ae4 <_ZN3LED4InitEv+0x30>)
 8000ad4:	f002 fb19 	bl	800310a <HAL_GPIO_WritePin>

}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40010800 	.word	0x40010800
 8000ae4:	40011400 	.word	0x40011400

08000ae8 <_ZN3LED6appendE6led_op>:
void LED::append(led_op operand) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b088      	sub	sp, #32
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	460b      	mov	r3, r1
 8000af2:	70fb      	strb	r3, [r7, #3]
    switch (operand) {
 8000af4:	78fb      	ldrb	r3, [r7, #3]
 8000af6:	2b04      	cmp	r3, #4
 8000af8:	f200 80d9 	bhi.w	8000cae <_ZN3LED6appendE6led_op+0x1c6>
 8000afc:	a201      	add	r2, pc, #4	; (adr r2, 8000b04 <_ZN3LED6appendE6led_op+0x1c>)
 8000afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b02:	bf00      	nop
 8000b04:	08000b19 	.word	0x08000b19
 8000b08:	08000b3f 	.word	0x08000b3f
 8000b0c:	08000b65 	.word	0x08000b65
 8000b10:	08000bd3 	.word	0x08000bd3
 8000b14:	08000c41 	.word	0x08000c41
        case BLINK_0:
            this->op.push(WAKE0);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	72ba      	strb	r2, [r7, #10]
 8000b1e:	f107 020a 	add.w	r2, r7, #10
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 f958 	bl	8000dda <_ZNSt5queueIhSt5dequeIhSaIhEEE4pushEOh>
            this->op.push(KILL0);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	72fa      	strb	r2, [r7, #11]
 8000b30:	f107 020b 	add.w	r2, r7, #11
 8000b34:	4611      	mov	r1, r2
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f94f 	bl	8000dda <_ZNSt5queueIhSt5dequeIhSaIhEEE4pushEOh>
            break;
 8000b3c:	e0b8      	b.n	8000cb0 <_ZN3LED6appendE6led_op+0x1c8>
        case BLINK_1:
            this->op.push(WAKE1);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2202      	movs	r2, #2
 8000b42:	733a      	strb	r2, [r7, #12]
 8000b44:	f107 020c 	add.w	r2, r7, #12
 8000b48:	4611      	mov	r1, r2
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 f945 	bl	8000dda <_ZNSt5queueIhSt5dequeIhSaIhEEE4pushEOh>
            this->op.push(KILL1);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2203      	movs	r2, #3
 8000b54:	737a      	strb	r2, [r7, #13]
 8000b56:	f107 020d 	add.w	r2, r7, #13
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f000 f93c 	bl	8000dda <_ZNSt5queueIhSt5dequeIhSaIhEEE4pushEOh>
            break;
 8000b62:	e0a5      	b.n	8000cb0 <_ZN3LED6appendE6led_op+0x1c8>
        case BLINK_BOTH_TWICE:
            this->op.push(WAKEALL);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2204      	movs	r2, #4
 8000b68:	73ba      	strb	r2, [r7, #14]
 8000b6a:	f107 020e 	add.w	r2, r7, #14
 8000b6e:	4611      	mov	r1, r2
 8000b70:	4618      	mov	r0, r3
 8000b72:	f000 f932 	bl	8000dda <_ZNSt5queueIhSt5dequeIhSaIhEEE4pushEOh>
            this->op.push(KILLALL);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2205      	movs	r2, #5
 8000b7a:	73fa      	strb	r2, [r7, #15]
 8000b7c:	f107 020f 	add.w	r2, r7, #15
 8000b80:	4611      	mov	r1, r2
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 f929 	bl	8000dda <_ZNSt5queueIhSt5dequeIhSaIhEEE4pushEOh>
            this->op.push(WAKEALL);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2204      	movs	r2, #4
 8000b8c:	743a      	strb	r2, [r7, #16]
 8000b8e:	f107 0210 	add.w	r2, r7, #16
 8000b92:	4611      	mov	r1, r2
 8000b94:	4618      	mov	r0, r3
 8000b96:	f000 f920 	bl	8000dda <_ZNSt5queueIhSt5dequeIhSaIhEEE4pushEOh>
            this->op.push(KILLALL);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2205      	movs	r2, #5
 8000b9e:	747a      	strb	r2, [r7, #17]
 8000ba0:	f107 0211 	add.w	r2, r7, #17
 8000ba4:	4611      	mov	r1, r2
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 f917 	bl	8000dda <_ZNSt5queueIhSt5dequeIhSaIhEEE4pushEOh>
            this->op.push(WAKEALL);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2204      	movs	r2, #4
 8000bb0:	74ba      	strb	r2, [r7, #18]
 8000bb2:	f107 0212 	add.w	r2, r7, #18
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f000 f90e 	bl	8000dda <_ZNSt5queueIhSt5dequeIhSaIhEEE4pushEOh>
            this->op.push(KILLALL);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2205      	movs	r2, #5
 8000bc2:	74fa      	strb	r2, [r7, #19]
 8000bc4:	f107 0213 	add.w	r2, r7, #19
 8000bc8:	4611      	mov	r1, r2
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 f905 	bl	8000dda <_ZNSt5queueIhSt5dequeIhSaIhEEE4pushEOh>
            break;
 8000bd0:	e06e      	b.n	8000cb0 <_ZN3LED6appendE6led_op+0x1c8>
        case ERROR_ENCODE:
            this->op.push(WAKEALL);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2204      	movs	r2, #4
 8000bd6:	753a      	strb	r2, [r7, #20]
 8000bd8:	f107 0214 	add.w	r2, r7, #20
 8000bdc:	4611      	mov	r1, r2
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 f8fb 	bl	8000dda <_ZNSt5queueIhSt5dequeIhSaIhEEE4pushEOh>
            this->op.push(KILL0);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2201      	movs	r2, #1
 8000be8:	757a      	strb	r2, [r7, #21]
 8000bea:	f107 0215 	add.w	r2, r7, #21
 8000bee:	4611      	mov	r1, r2
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f000 f8f2 	bl	8000dda <_ZNSt5queueIhSt5dequeIhSaIhEEE4pushEOh>
            this->op.push(WAKE0);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	75ba      	strb	r2, [r7, #22]
 8000bfc:	f107 0216 	add.w	r2, r7, #22
 8000c00:	4611      	mov	r1, r2
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 f8e9 	bl	8000dda <_ZNSt5queueIhSt5dequeIhSaIhEEE4pushEOh>
            this->op.push(KILL0);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	75fa      	strb	r2, [r7, #23]
 8000c0e:	f107 0217 	add.w	r2, r7, #23
 8000c12:	4611      	mov	r1, r2
 8000c14:	4618      	mov	r0, r3
 8000c16:	f000 f8e0 	bl	8000dda <_ZNSt5queueIhSt5dequeIhSaIhEEE4pushEOh>
            this->op.push(WAKE0);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	763a      	strb	r2, [r7, #24]
 8000c20:	f107 0218 	add.w	r2, r7, #24
 8000c24:	4611      	mov	r1, r2
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 f8d7 	bl	8000dda <_ZNSt5queueIhSt5dequeIhSaIhEEE4pushEOh>
            this->op.push(KILLALL);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2205      	movs	r2, #5
 8000c30:	767a      	strb	r2, [r7, #25]
 8000c32:	f107 0219 	add.w	r2, r7, #25
 8000c36:	4611      	mov	r1, r2
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f000 f8ce 	bl	8000dda <_ZNSt5queueIhSt5dequeIhSaIhEEE4pushEOh>
            break;
 8000c3e:	e037      	b.n	8000cb0 <_ZN3LED6appendE6led_op+0x1c8>
        case ERROR_DECODE:
            this->op.push(WAKEALL);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2204      	movs	r2, #4
 8000c44:	76ba      	strb	r2, [r7, #26]
 8000c46:	f107 021a 	add.w	r2, r7, #26
 8000c4a:	4611      	mov	r1, r2
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f000 f8c4 	bl	8000dda <_ZNSt5queueIhSt5dequeIhSaIhEEE4pushEOh>
            this->op.push(KILL1);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2203      	movs	r2, #3
 8000c56:	76fa      	strb	r2, [r7, #27]
 8000c58:	f107 021b 	add.w	r2, r7, #27
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 f8bb 	bl	8000dda <_ZNSt5queueIhSt5dequeIhSaIhEEE4pushEOh>
            this->op.push(WAKE1);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2202      	movs	r2, #2
 8000c68:	773a      	strb	r2, [r7, #28]
 8000c6a:	f107 021c 	add.w	r2, r7, #28
 8000c6e:	4611      	mov	r1, r2
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 f8b2 	bl	8000dda <_ZNSt5queueIhSt5dequeIhSaIhEEE4pushEOh>
            this->op.push(KILL1);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2203      	movs	r2, #3
 8000c7a:	777a      	strb	r2, [r7, #29]
 8000c7c:	f107 021d 	add.w	r2, r7, #29
 8000c80:	4611      	mov	r1, r2
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f8a9 	bl	8000dda <_ZNSt5queueIhSt5dequeIhSaIhEEE4pushEOh>
            this->op.push(WAKE1);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2202      	movs	r2, #2
 8000c8c:	77ba      	strb	r2, [r7, #30]
 8000c8e:	f107 021e 	add.w	r2, r7, #30
 8000c92:	4611      	mov	r1, r2
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 f8a0 	bl	8000dda <_ZNSt5queueIhSt5dequeIhSaIhEEE4pushEOh>
            this->op.push(KILLALL);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2205      	movs	r2, #5
 8000c9e:	77fa      	strb	r2, [r7, #31]
 8000ca0:	f107 021f 	add.w	r2, r7, #31
 8000ca4:	4611      	mov	r1, r2
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 f897 	bl	8000dda <_ZNSt5queueIhSt5dequeIhSaIhEEE4pushEOh>
            break;
 8000cac:	e000      	b.n	8000cb0 <_ZN3LED6appendE6led_op+0x1c8>
        default:
            break;
 8000cae:	bf00      	nop
    }
}
 8000cb0:	bf00      	nop
 8000cb2:	3720      	adds	r7, #32
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <_ZN3LED4tickEv>:
void LED::tick() {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
    if (this->op.empty()) return;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 f89b 	bl	8000dfe <_ZNKSt5queueIhSt5dequeIhSaIhEEE5emptyEv>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d15b      	bne.n	8000d86 <_ZN3LED4tickEv+0xce>
    if (this->counter < TICK_MS) {
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	dc05      	bgt.n	8000ce2 <_ZN3LED4tickEv+0x2a>
        this->counter++;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cda:	1c5a      	adds	r2, r3, #1
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	629a      	str	r2, [r3, #40]	; 0x28
        return;
 8000ce0:	e052      	b.n	8000d88 <_ZN3LED4tickEv+0xd0>
    } 
    switch (this->op.front()) {
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 f897 	bl	8000e18 <_ZNSt5queueIhSt5dequeIhSaIhEEE5frontEv>
 8000cea:	4603      	mov	r3, r0
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b05      	cmp	r3, #5
 8000cf0:	d840      	bhi.n	8000d74 <_ZN3LED4tickEv+0xbc>
 8000cf2:	a201      	add	r2, pc, #4	; (adr r2, 8000cf8 <_ZN3LED4tickEv+0x40>)
 8000cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf8:	08000d11 	.word	0x08000d11
 8000cfc:	08000d1f 	.word	0x08000d1f
 8000d00:	08000d2d 	.word	0x08000d2d
 8000d04:	08000d39 	.word	0x08000d39
 8000d08:	08000d45 	.word	0x08000d45
 8000d0c:	08000d5d 	.word	0x08000d5d
        case WAKE0:
            HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, WAKE);
 8000d10:	2200      	movs	r2, #0
 8000d12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d16:	481e      	ldr	r0, [pc, #120]	; (8000d90 <_ZN3LED4tickEv+0xd8>)
 8000d18:	f002 f9f7 	bl	800310a <HAL_GPIO_WritePin>
            break;
 8000d1c:	e02b      	b.n	8000d76 <_ZN3LED4tickEv+0xbe>
        case KILL0:
            HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, DEAD);
 8000d1e:	2201      	movs	r2, #1
 8000d20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d24:	481a      	ldr	r0, [pc, #104]	; (8000d90 <_ZN3LED4tickEv+0xd8>)
 8000d26:	f002 f9f0 	bl	800310a <HAL_GPIO_WritePin>
            break;
 8000d2a:	e024      	b.n	8000d76 <_ZN3LED4tickEv+0xbe>
        case WAKE1:
            HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, WAKE);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2104      	movs	r1, #4
 8000d30:	4818      	ldr	r0, [pc, #96]	; (8000d94 <_ZN3LED4tickEv+0xdc>)
 8000d32:	f002 f9ea 	bl	800310a <HAL_GPIO_WritePin>
            break;
 8000d36:	e01e      	b.n	8000d76 <_ZN3LED4tickEv+0xbe>
        case KILL1:
            HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, DEAD);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	2104      	movs	r1, #4
 8000d3c:	4815      	ldr	r0, [pc, #84]	; (8000d94 <_ZN3LED4tickEv+0xdc>)
 8000d3e:	f002 f9e4 	bl	800310a <HAL_GPIO_WritePin>
            break;
 8000d42:	e018      	b.n	8000d76 <_ZN3LED4tickEv+0xbe>
        case WAKEALL:
            HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, WAKE);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2104      	movs	r1, #4
 8000d48:	4812      	ldr	r0, [pc, #72]	; (8000d94 <_ZN3LED4tickEv+0xdc>)
 8000d4a:	f002 f9de 	bl	800310a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, WAKE);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d54:	480e      	ldr	r0, [pc, #56]	; (8000d90 <_ZN3LED4tickEv+0xd8>)
 8000d56:	f002 f9d8 	bl	800310a <HAL_GPIO_WritePin>
            break;
 8000d5a:	e00c      	b.n	8000d76 <_ZN3LED4tickEv+0xbe>
        case KILLALL:
            HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, DEAD);
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d62:	480b      	ldr	r0, [pc, #44]	; (8000d90 <_ZN3LED4tickEv+0xd8>)
 8000d64:	f002 f9d1 	bl	800310a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, DEAD);
 8000d68:	2201      	movs	r2, #1
 8000d6a:	2104      	movs	r1, #4
 8000d6c:	4809      	ldr	r0, [pc, #36]	; (8000d94 <_ZN3LED4tickEv+0xdc>)
 8000d6e:	f002 f9cc 	bl	800310a <HAL_GPIO_WritePin>
            break;
 8000d72:	e000      	b.n	8000d76 <_ZN3LED4tickEv+0xbe>
        default:
            break;
 8000d74:	bf00      	nop
    }
    this->counter = 0;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	629a      	str	r2, [r3, #40]	; 0x28
    this->op.pop();
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f857 	bl	8000e32 <_ZNSt5queueIhSt5dequeIhSaIhEEE3popEv>
 8000d84:	e000      	b.n	8000d88 <_ZN3LED4tickEv+0xd0>
    if (this->op.empty()) return;
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40010800 	.word	0x40010800
 8000d94:	40011400 	.word	0x40011400

08000d98 <_ZNSt5dequeIhSaIhEEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 f851 	bl	8000e4a <_ZNSt11_Deque_baseIhSaIhEEC1Ev>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <_ZNSt5queueIhSt5dequeIhSaIhEEEC1IS2_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
	: c() { }
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	2328      	movs	r3, #40	; 0x28
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	f004 fc2f 	bl	8005626 <memset>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff ffe4 	bl	8000d98 <_ZNSt5dequeIhSaIhEEC1Ev>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <_ZNSt5queueIhSt5dequeIhSaIhEEE4pushEOh>:
      push(const value_type& __x)
      { c.push_back(__x); }

#if __cplusplus >= 201103L
      void
      push(value_type&& __x)
 8000dda:	b590      	push	{r4, r7, lr}
 8000ddc:	b083      	sub	sp, #12
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
 8000de2:	6039      	str	r1, [r7, #0]
      { c.push_back(std::move(__x)); }
 8000de4:	687c      	ldr	r4, [r7, #4]
 8000de6:	6838      	ldr	r0, [r7, #0]
 8000de8:	f000 f874 	bl	8000ed4 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8000dec:	4603      	mov	r3, r0
 8000dee:	4619      	mov	r1, r3
 8000df0:	4620      	mov	r0, r4
 8000df2:	f000 f879 	bl	8000ee8 <_ZNSt5dequeIhSaIhEE9push_backEOh>
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd90      	pop	{r4, r7, pc}

08000dfe <_ZNKSt5queueIhSt5dequeIhSaIhEEE5emptyEv>:
      empty() const
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f000 f87e 	bl	8000f0a <_ZNKSt5dequeIhSaIhEE5emptyEv>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	4618      	mov	r0, r3
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <_ZNSt5queueIhSt5dequeIhSaIhEEE5frontEv>:
      front()
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	return c.front();
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 f883 	bl	8000f2e <_ZNSt5dequeIhSaIhEE5frontEv>
 8000e28:	4603      	mov	r3, r0
      }
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <_ZNSt5queueIhSt5dequeIhSaIhEEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 f88a 	bl	8000f56 <_ZNSt5dequeIhSaIhEE9pop_frontEv>
      }
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <_ZNSt11_Deque_baseIhSaIhEEC1Ev>:
      _Deque_base()
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 f8a1 	bl	8000f9c <_ZNSt11_Deque_baseIhSaIhEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f000 f8ad 	bl	8000fbc <_ZNSt11_Deque_baseIhSaIhEE17_M_initialize_mapEj>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4618      	mov	r0, r3
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <_ZNSt5dequeIhSaIhEE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	3308      	adds	r3, #8
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f000 f80e 	bl	8000e9e <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <_ZNSt11_Deque_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4618      	mov	r0, r3
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr

08000e9e <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8000e9e:	b480      	push	{r7}
 8000ea0:	b083      	sub	sp, #12
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
 8000ea6:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685a      	ldr	r2, [r3, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	605a      	str	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	689a      	ldr	r2, [r3, #8]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	68da      	ldr	r2, [r3, #12]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	60da      	str	r2, [r3, #12]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr

08000ed4 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr

08000ee8 <_ZNSt5dequeIhSaIhEE9push_backEOh>:
	  _M_push_back_aux(__x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8000ef2:	6838      	ldr	r0, [r7, #0]
 8000ef4:	f7ff ffee 	bl	8000ed4 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	4619      	mov	r1, r3
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f000 f8da 	bl	80010b6 <_ZNSt5dequeIhSaIhEE12emplace_backIJhEEEvDpOT_>
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <_ZNKSt5dequeIhSaIhEE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f103 0218 	add.w	r2, r3, #24
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3308      	adds	r3, #8
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4610      	mov	r0, r2
 8000f20:	f000 f8f3 	bl	800110a <_ZSteqRKSt15_Deque_iteratorIhRhPhES4_>
 8000f24:	4603      	mov	r3, r0
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <_ZNSt5dequeIhSaIhEE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b086      	sub	sp, #24
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
	return *begin();
 8000f36:	f107 0308 	add.w	r3, r7, #8
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff95 	bl	8000e6c <_ZNSt5dequeIhSaIhEE5beginEv>
 8000f42:	f107 0308 	add.w	r3, r7, #8
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f8f2 	bl	8001130 <_ZNKSt15_Deque_iteratorIhRhPhEdeEv>
 8000f4c:	4603      	mov	r3, r0
      }
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <_ZNSt5dequeIhSaIhEE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	691b      	ldr	r3, [r3, #16]
 8000f66:	3b01      	subs	r3, #1
	if (this->_M_impl._M_start._M_cur
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d010      	beq.n	8000f8e <_ZNSt5dequeIhSaIhEE9pop_frontEv+0x38>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff ff8b 	bl	8000e8a <_ZNSt11_Deque_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8000f74:	4602      	mov	r2, r0
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	f000 f8e2 	bl	8001146 <_ZNSt16allocator_traitsISaIhEE7destroyIhEEvRS0_PT_>
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	1c5a      	adds	r2, r3, #1
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_pop_front_aux();
      }
 8000f8c:	e002      	b.n	8000f94 <_ZNSt5dequeIhSaIhEE9pop_frontEv+0x3e>
	  _M_pop_front_aux();
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f000 f8e6 	bl	8001160 <_ZNSt5dequeIhSaIhEE16_M_pop_front_auxEv>
      }
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <_ZNSt11_Deque_baseIhSaIhEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f000 f903 	bl	80011b0 <_ZNSaIhEC1Ev>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 f90b 	bl	80011c8 <_ZNSt11_Deque_baseIhSaIhEE16_Deque_impl_dataC1Ev>
	{ }
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <_ZNSt11_Deque_baseIhSaIhEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b089      	sub	sp, #36	; 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	f7ff fd40 	bl	8000a4c <_ZSt16__deque_buf_sizej>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8000fd8:	2308      	movs	r3, #8
 8000fda:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	3302      	adds	r3, #2
 8000fe0:	613b      	str	r3, [r7, #16]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8000fe2:	f107 0210 	add.w	r2, r7, #16
 8000fe6:	f107 030c 	add.w	r3, r7, #12
 8000fea:	4611      	mov	r1, r2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 f904 	bl	80011fa <_ZSt3maxIjERKT_S2_S2_>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	4619      	mov	r1, r3
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 f90d 	bl	8001220 <_ZNSt11_Deque_baseIhSaIhEE15_M_allocate_mapEj>
 8001006:	4602      	mov	r2, r0
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6859      	ldr	r1, [r3, #4]
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	1acb      	subs	r3, r1, r3
 8001018:	085b      	lsrs	r3, r3, #1
 800101a:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 800101c:	4413      	add	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4413      	add	r3, r2
 8001028:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 800102a:	697a      	ldr	r2, [r7, #20]
 800102c:	69b9      	ldr	r1, [r7, #24]
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f000 f913 	bl	800125a <_ZNSt11_Deque_baseIhSaIhEE15_M_create_nodesEPPhS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3308      	adds	r3, #8
 8001038:	69b9      	ldr	r1, [r7, #24]
 800103a:	4618      	mov	r0, r3
 800103c:	f000 f928 	bl	8001290 <_ZNSt15_Deque_iteratorIhRhPhE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f103 0218 	add.w	r2, r3, #24
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	3b04      	subs	r3, #4
 800104a:	4619      	mov	r1, r3
 800104c:	4610      	mov	r0, r2
 800104e:	f000 f91f 	bl	8001290 <_ZNSt15_Deque_iteratorIhRhPhE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	68da      	ldr	r2, [r3, #12]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 800105e:	2001      	movs	r0, #1
 8001060:	f7ff fcf4 	bl	8000a4c <_ZSt16__deque_buf_sizej>
 8001064:	4602      	mov	r2, r0
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	fbb3 f1f2 	udiv	r1, r3, r2
 800106c:	fb01 f202 	mul.w	r2, r1, r2
 8001070:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8001072:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	619a      	str	r2, [r3, #24]
    }
 8001078:	bf00      	nop
 800107a:	3724      	adds	r7, #36	; 0x24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd90      	pop	{r4, r7, pc}

08001080 <_ZNSt11_Deque_baseIhSaIhEE17_M_deallocate_mapEPPhj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	68f9      	ldr	r1, [r7, #12]
 8001092:	4618      	mov	r0, r3
 8001094:	f000 f927 	bl	80012e6 <_ZNKSt11_Deque_baseIhSaIhEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	68b9      	ldr	r1, [r7, #8]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 f93d 	bl	8001320 <_ZNSt16allocator_traitsISaIPhEE10deallocateERS1_PS0_j>
      }
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 f92c 	bl	8001308 <_ZNSaIPhED1Ev>
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <_ZNSt5dequeIhSaIhEE12emplace_backIJhEEEvDpOT_>:
#if __cplusplus > 201402L
      typename deque<_Tp, _Alloc>::reference
#else
      void
#endif
      deque<_Tp, _Alloc>::
 80010b6:	b5b0      	push	{r4, r5, r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
 80010be:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish._M_cur
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a1b      	ldr	r3, [r3, #32]
 80010c8:	3b01      	subs	r3, #1
	if (this->_M_impl._M_finish._M_cur
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d011      	beq.n	80010f2 <_ZNSt5dequeIhSaIhEE12emplace_backIJhEEEvDpOT_+0x3c>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 80010ce:	687c      	ldr	r4, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	699d      	ldr	r5, [r3, #24]
 80010d4:	6838      	ldr	r0, [r7, #0]
 80010d6:	f000 f932 	bl	800133e <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 80010da:	4603      	mov	r3, r0
 80010dc:	461a      	mov	r2, r3
 80010de:	4629      	mov	r1, r5
 80010e0:	4620      	mov	r0, r4
 80010e2:	f000 f936 	bl	8001352 <_ZNSt16allocator_traitsISaIhEE9constructIhJhEEEvRS0_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish._M_cur;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	1c5a      	adds	r2, r3, #1
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	619a      	str	r2, [r3, #24]
	else
	  _M_push_back_aux(std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 80010f0:	e007      	b.n	8001102 <_ZNSt5dequeIhSaIhEE12emplace_backIJhEEEvDpOT_+0x4c>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 80010f2:	6838      	ldr	r0, [r7, #0]
 80010f4:	f000 f923 	bl	800133e <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 80010f8:	4603      	mov	r3, r0
 80010fa:	4619      	mov	r1, r3
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f000 f93b 	bl	8001378 <_ZNSt5dequeIhSaIhEE16_M_push_back_auxIJhEEEvDpOT_>
      }
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bdb0      	pop	{r4, r5, r7, pc}

0800110a <_ZSteqRKSt15_Deque_iteratorIhRhPhES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
 8001112:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	429a      	cmp	r2, r3
 800111e:	bf0c      	ite	eq
 8001120:	2301      	moveq	r3, #1
 8001122:	2300      	movne	r3, #0
 8001124:	b2db      	uxtb	r3, r3
 8001126:	4618      	mov	r0, r3
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr

08001130 <_ZNKSt15_Deque_iteratorIhRhPhEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr

08001146 <_ZNSt16allocator_traitsISaIhEE7destroyIhEEvRS0_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 8001150:	6839      	ldr	r1, [r7, #0]
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f000 f954 	bl	8001400 <_ZN9__gnu_cxx13new_allocatorIhE7destroyIhEEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <_ZNSt5dequeIhSaIhEE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fe8d 	bl	8000e8a <_ZNSt11_Deque_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8001170:	4602      	mov	r2, r0
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	4619      	mov	r1, r3
 8001178:	4610      	mov	r0, r2
 800117a:	f7ff ffe4 	bl	8001146 <_ZNSt16allocator_traitsISaIhEE7destroyIhEEvRS0_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	4619      	mov	r1, r3
 8001186:	4610      	mov	r0, r2
 8001188:	f000 f89a 	bl	80012c0 <_ZNSt11_Deque_baseIhSaIhEE18_M_deallocate_nodeEPh>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f103 0208 	add.w	r2, r3, #8
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	3304      	adds	r3, #4
 8001198:	4619      	mov	r1, r3
 800119a:	4610      	mov	r0, r2
 800119c:	f000 f878 	bl	8001290 <_ZNSt15_Deque_iteratorIhRhPhE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68da      	ldr	r2, [r3, #12]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	609a      	str	r2, [r3, #8]
    }
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <_ZNSaIhEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 f92b 	bl	8001414 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4618      	mov	r0, r3
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <_ZNSt11_Deque_baseIhSaIhEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3308      	adds	r3, #8
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 f921 	bl	8001428 <_ZNSt15_Deque_iteratorIhRhPhEC1Ev>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3318      	adds	r3, #24
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 f91c 	bl	8001428 <_ZNSt15_Deque_iteratorIhRhPhEC1Ev>
	{ }
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
 8001202:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	429a      	cmp	r2, r3
 800120e:	d201      	bcs.n	8001214 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	e000      	b.n	8001216 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8001214:	687b      	ldr	r3, [r7, #4]
    }
 8001216:	4618      	mov	r0, r3
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr

08001220 <_ZNSt11_Deque_baseIhSaIhEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800122a:	f107 030c 	add.w	r3, r7, #12
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	4618      	mov	r0, r3
 8001232:	f000 f858 	bl	80012e6 <_ZNKSt11_Deque_baseIhSaIhEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8001236:	f107 030c 	add.w	r3, r7, #12
 800123a:	6839      	ldr	r1, [r7, #0]
 800123c:	4618      	mov	r0, r3
 800123e:	f000 f909 	bl	8001454 <_ZNSt16allocator_traitsISaIPhEE8allocateERS1_j>
 8001242:	4604      	mov	r4, r0
 8001244:	bf00      	nop
      }
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	4618      	mov	r0, r3
 800124c:	f000 f85c 	bl	8001308 <_ZNSaIPhED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8001250:	4623      	mov	r3, r4
      }
 8001252:	4618      	mov	r0, r3
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	bd90      	pop	{r4, r7, pc}

0800125a <_ZNSt11_Deque_baseIhSaIhEE15_M_create_nodesEPPhS3_>:
    _Deque_base<_Tp, _Alloc>::
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	617b      	str	r3, [r7, #20]
 800126a:	e008      	b.n	800127e <_ZNSt11_Deque_baseIhSaIhEE15_M_create_nodesEPPhS3_+0x24>
	    *__cur = this->_M_allocate_node();
 800126c:	68f8      	ldr	r0, [r7, #12]
 800126e:	f000 f900 	bl	8001472 <_ZNSt11_Deque_baseIhSaIhEE16_M_allocate_nodeEv>
 8001272:	4602      	mov	r2, r0
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	3304      	adds	r3, #4
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	697a      	ldr	r2, [r7, #20]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	429a      	cmp	r2, r3
 8001284:	d3f2      	bcc.n	800126c <_ZNSt11_Deque_baseIhSaIhEE15_M_create_nodesEPPhS3_+0x12>
    }
 8001286:	bf00      	nop
 8001288:	bf00      	nop
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <_ZNSt15_Deque_iteratorIhRhPhE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8001290:	b590      	push	{r4, r7, lr}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685c      	ldr	r4, [r3, #4]
 80012ac:	f000 f8f3 	bl	8001496 <_ZNSt15_Deque_iteratorIhRhPhE14_S_buffer_sizeEv>
 80012b0:	4603      	mov	r3, r0
 80012b2:	18e2      	adds	r2, r4, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	609a      	str	r2, [r3, #8]
      }
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd90      	pop	{r4, r7, pc}

080012c0 <_ZNSt11_Deque_baseIhSaIhEE18_M_deallocate_nodeEPh>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 80012ca:	687c      	ldr	r4, [r7, #4]
 80012cc:	2001      	movs	r0, #1
 80012ce:	f7ff fbbd 	bl	8000a4c <_ZSt16__deque_buf_sizej>
 80012d2:	4603      	mov	r3, r0
 80012d4:	461a      	mov	r2, r3
 80012d6:	6839      	ldr	r1, [r7, #0]
 80012d8:	4620      	mov	r0, r4
 80012da:	f000 f8e4 	bl	80014a6 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>
      }
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd90      	pop	{r4, r7, pc}

080012e6 <_ZNKSt11_Deque_baseIhSaIhEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
 80012ee:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 80012f0:	6838      	ldr	r0, [r7, #0]
 80012f2:	f000 f8e7 	bl	80014c4 <_ZNKSt11_Deque_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80012f6:	4603      	mov	r3, r0
 80012f8:	4619      	mov	r1, r3
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 f8ec 	bl	80014d8 <_ZNSaIPhEC1IhEERKSaIT_E>
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <_ZNSaIPhED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f000 f8ee 	bl	80014f2 <_ZN9__gnu_cxx13new_allocatorIPhED1Ev>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <_ZNSt16allocator_traitsISaIPhEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	68b9      	ldr	r1, [r7, #8]
 8001330:	68f8      	ldr	r0, [r7, #12]
 8001332:	f000 f8e8 	bl	8001506 <_ZN9__gnu_cxx13new_allocatorIPhE10deallocateEPS1_j>
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4618      	mov	r0, r3
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr

08001352 <_ZNSt16allocator_traitsISaIhEE9constructIhJhEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8001352:	b580      	push	{r7, lr}
 8001354:	b084      	sub	sp, #16
 8001356:	af00      	add	r7, sp, #0
 8001358:	60f8      	str	r0, [r7, #12]
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff ffed 	bl	800133e <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8001364:	4603      	mov	r3, r0
 8001366:	461a      	mov	r2, r3
 8001368:	68b9      	ldr	r1, [r7, #8]
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f000 f8db 	bl	8001526 <_ZN9__gnu_cxx13new_allocatorIhE9constructIhJhEEEvPT_DpOT0_>
	}
 8001370:	bf00      	nop
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <_ZNSt5dequeIhSaIhEE16_M_push_back_auxIJhEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8001378:	b5b0      	push	{r4, r5, r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 f8e6 	bl	8001554 <_ZNKSt5dequeIhSaIhEE4sizeEv>
 8001388:	4604      	mov	r4, r0
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 f8f4 	bl	8001578 <_ZNKSt5dequeIhSaIhEE8max_sizeEv>
 8001390:	4603      	mov	r3, r0
 8001392:	429c      	cmp	r4, r3
 8001394:	bf0c      	ite	eq
 8001396:	2301      	moveq	r3, #1
 8001398:	2300      	movne	r3, #0
 800139a:	b2db      	uxtb	r3, r3
 800139c:	2b00      	cmp	r3, #0
 800139e:	d002      	beq.n	80013a6 <_ZNSt5dequeIhSaIhEE16_M_push_back_auxIJhEEEvDpOT_+0x2e>
	  __throw_length_error(
 80013a0:	4816      	ldr	r0, [pc, #88]	; (80013fc <_ZNSt5dequeIhSaIhEE16_M_push_back_auxIJhEEEvDpOT_+0x84>)
 80013a2:	f003 fe38 	bl	8005016 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 80013a6:	2101      	movs	r1, #1
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f000 f8f6 	bl	800159a <_ZNSt5dequeIhSaIhEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b4:	1d1c      	adds	r4, r3, #4
 80013b6:	4610      	mov	r0, r2
 80013b8:	f000 f85b 	bl	8001472 <_ZNSt11_Deque_baseIhSaIhEE16_M_allocate_nodeEv>
 80013bc:	4603      	mov	r3, r0
 80013be:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 80013c0:	687c      	ldr	r4, [r7, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	699d      	ldr	r5, [r3, #24]
 80013c6:	6838      	ldr	r0, [r7, #0]
 80013c8:	f7ff ffb9 	bl	800133e <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 80013cc:	4603      	mov	r3, r0
 80013ce:	461a      	mov	r2, r3
 80013d0:	4629      	mov	r1, r5
 80013d2:	4620      	mov	r0, r4
 80013d4:	f7ff ffbd 	bl	8001352 <_ZNSt16allocator_traitsISaIhEE9constructIhJhEEEvRS0_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f103 0218 	add.w	r2, r3, #24
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e2:	3304      	adds	r3, #4
 80013e4:	4619      	mov	r1, r3
 80013e6:	4610      	mov	r0, r2
 80013e8:	f7ff ff52 	bl	8001290 <_ZNSt15_Deque_iteratorIhRhPhE11_M_set_nodeEPS1_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	69da      	ldr	r2, [r3, #28]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	619a      	str	r2, [r3, #24]
      }
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bdb0      	pop	{r4, r5, r7, pc}
 80013fc:	0800662c 	.word	0x0800662c

08001400 <_ZN9__gnu_cxx13new_allocatorIhE7destroyIhEEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <_ZNSt15_Deque_iteratorIhRhPhEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4618      	mov	r0, r3
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr

08001454 <_ZNSt16allocator_traitsISaIPhEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800145e:	2200      	movs	r2, #0
 8001460:	6839      	ldr	r1, [r7, #0]
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 f8bf 	bl	80015e6 <_ZN9__gnu_cxx13new_allocatorIPhE8allocateEjPKv>
 8001468:	4603      	mov	r3, r0
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <_ZNSt11_Deque_baseIhSaIhEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8001472:	b590      	push	{r4, r7, lr}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 800147a:	687c      	ldr	r4, [r7, #4]
 800147c:	2001      	movs	r0, #1
 800147e:	f7ff fae5 	bl	8000a4c <_ZSt16__deque_buf_sizej>
 8001482:	4603      	mov	r3, r0
 8001484:	4619      	mov	r1, r3
 8001486:	4620      	mov	r0, r4
 8001488:	f000 f8d6 	bl	8001638 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>
 800148c:	4603      	mov	r3, r0
      }
 800148e:	4618      	mov	r0, r3
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	bd90      	pop	{r4, r7, pc}

08001496 <_ZNSt15_Deque_iteratorIhRhPhE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8001496:	b580      	push	{r7, lr}
 8001498:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 800149a:	2001      	movs	r0, #1
 800149c:	f7ff fad6 	bl	8000a4c <_ZSt16__deque_buf_sizej>
 80014a0:	4603      	mov	r3, r0
 80014a2:	4618      	mov	r0, r3
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b084      	sub	sp, #16
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	60f8      	str	r0, [r7, #12]
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f000 f8cd 	bl	8001656 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 80014bc:	bf00      	nop
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <_ZNKSt11_Deque_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4618      	mov	r0, r3
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr

080014d8 <_ZNSaIPhEC1IhEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 f8c5 	bl	8001672 <_ZN9__gnu_cxx13new_allocatorIPhEC1Ev>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <_ZN9__gnu_cxx13new_allocatorIPhED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4618      	mov	r0, r3
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr

08001506 <_ZN9__gnu_cxx13new_allocatorIPhE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8001506:	b580      	push	{r7, lr}
 8001508:	b084      	sub	sp, #16
 800150a:	af00      	add	r7, sp, #0
 800150c:	60f8      	str	r0, [r7, #12]
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4619      	mov	r1, r3
 8001518:	68b8      	ldr	r0, [r7, #8]
 800151a:	f003 fd61 	bl	8004fe0 <_ZdlPvj>
      }
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <_ZN9__gnu_cxx13new_allocatorIhE9constructIhJhEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8001526:	b590      	push	{r4, r7, lr}
 8001528:	b085      	sub	sp, #20
 800152a:	af00      	add	r7, sp, #0
 800152c:	60f8      	str	r0, [r7, #12]
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff ff03 	bl	800133e <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8001538:	4603      	mov	r3, r0
 800153a:	781c      	ldrb	r4, [r3, #0]
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	4619      	mov	r1, r3
 8001540:	2001      	movs	r0, #1
 8001542:	f7ff fa78 	bl	8000a36 <_ZnwjPv>
 8001546:	4603      	mov	r3, r0
 8001548:	4622      	mov	r2, r4
 800154a:	701a      	strb	r2, [r3, #0]
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	bd90      	pop	{r4, r7, pc}

08001554 <_ZNKSt5dequeIhSaIhEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f103 0218 	add.w	r2, r3, #24
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	3308      	adds	r3, #8
 8001566:	4619      	mov	r1, r3
 8001568:	4610      	mov	r0, r2
 800156a:	f000 f88c 	bl	8001686 <_ZStmiRKSt15_Deque_iteratorIhRhPhES4_>
 800156e:	4603      	mov	r3, r0
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <_ZNKSt5dequeIhSaIhEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff ff9e 	bl	80014c4 <_ZNKSt11_Deque_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8001588:	4603      	mov	r3, r0
 800158a:	4618      	mov	r0, r3
 800158c:	f000 f8a5 	bl	80016da <_ZNSt5dequeIhSaIhEE11_S_max_sizeERKS0_>
 8001590:	4603      	mov	r3, r0
 8001592:	4618      	mov	r0, r3
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <_ZNSt5dequeIhSaIhEE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
 80015a2:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	1c5a      	adds	r2, r3, #1
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 80015ac:	6879      	ldr	r1, [r7, #4]
 80015ae:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	6809      	ldr	r1, [r1, #0]
 80015b4:	1a41      	subs	r1, r0, r1
 80015b6:	1089      	asrs	r1, r1, #2
 80015b8:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d904      	bls.n	80015c8 <_ZNSt5dequeIhSaIhEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 80015be:	2200      	movs	r2, #0
 80015c0:	6839      	ldr	r1, [r7, #0]
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f000 f8a3 	bl	800170e <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb>
      }
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <_ZNK9__gnu_cxx13new_allocatorIPhE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80015d8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr

080015e6 <_ZN9__gnu_cxx13new_allocatorIPhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b084      	sub	sp, #16
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	60f8      	str	r0, [r7, #12]
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f7ff ffec 	bl	80015d0 <_ZNK9__gnu_cxx13new_allocatorIPhE11_M_max_sizeEv>
 80015f8:	4602      	mov	r2, r0
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	4293      	cmp	r3, r2
 80015fe:	bf8c      	ite	hi
 8001600:	2301      	movhi	r3, #1
 8001602:	2300      	movls	r3, #0
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	bf14      	ite	ne
 800160a:	2301      	movne	r3, #1
 800160c:	2300      	moveq	r3, #0
 800160e:	b2db      	uxtb	r3, r3
 8001610:	2b00      	cmp	r3, #0
 8001612:	d007      	beq.n	8001624 <_ZN9__gnu_cxx13new_allocatorIPhE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800161a:	d301      	bcc.n	8001620 <_ZN9__gnu_cxx13new_allocatorIPhE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800161c:	f003 fcf8 	bl	8005010 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8001620:	f003 fcf3 	bl	800500a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4618      	mov	r0, r3
 800162a:	f003 fcdb 	bl	8004fe4 <_Znwj>
 800162e:	4603      	mov	r3, r0
      }
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001642:	2200      	movs	r2, #0
 8001644:	6839      	ldr	r1, [r7, #0]
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 f906 	bl	8001858 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 800164c:	4603      	mov	r3, r0
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8001656:	b580      	push	{r7, lr}
 8001658:	b084      	sub	sp, #16
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	68b8      	ldr	r0, [r7, #8]
 8001666:	f003 fcbb 	bl	8004fe0 <_ZdlPvj>
      }
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <_ZN9__gnu_cxx13new_allocatorIPhEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001672:	b480      	push	{r7}
 8001674:	b083      	sub	sp, #12
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4618      	mov	r0, r3
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr

08001686 <_ZStmiRKSt15_Deque_iteratorIhRhPhES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
 800168e:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8001690:	f7ff ff01 	bl	8001496 <_ZNSt15_Deque_iteratorIhRhPhE14_S_buffer_sizeEv>
 8001694:	4603      	mov	r3, r0
 8001696:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - bool(__x._M_node))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68da      	ldr	r2, [r3, #12]
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	109b      	asrs	r3, r3, #2
 80016a4:	461a      	mov	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	bf14      	ite	ne
 80016ae:	2301      	movne	r3, #1
 80016b0:	2300      	moveq	r3, #0
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	fb03 f201 	mul.w	r2, r3, r1
	  + (__x._M_cur - __x._M_first)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6819      	ldr	r1, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	1acb      	subs	r3, r1, r3
 80016c4:	441a      	add	r2, r3
	  + (__y._M_last - __y._M_cur);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	6899      	ldr	r1, [r3, #8]
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	1acb      	subs	r3, r1, r3
 80016d0:	4413      	add	r3, r2
      }
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <_ZNSt5dequeIhSaIhEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80016da:	b580      	push	{r7, lr}
 80016dc:	b084      	sub	sp, #16
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 80016e2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80016e6:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 f8d6 	bl	800189a <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>
 80016ee:	4603      	mov	r3, r0
 80016f0:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80016f2:	f107 0208 	add.w	r2, r7, #8
 80016f6:	f107 030c 	add.w	r3, r7, #12
 80016fa:	4611      	mov	r1, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f000 f8d8 	bl	80018b2 <_ZSt3minIjERKT_S2_S2_>
 8001702:	4603      	mov	r3, r0
 8001704:	681b      	ldr	r3, [r3, #0]
      }
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 800170e:	b590      	push	{r4, r7, lr}
 8001710:	b08b      	sub	sp, #44	; 0x2c
 8001712:	af00      	add	r7, sp, #0
 8001714:	60f8      	str	r0, [r7, #12]
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	4613      	mov	r3, r2
 800171a:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	109b      	asrs	r3, r3, #2
 8001728:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 800172a:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	6a3a      	ldr	r2, [r7, #32]
 8001730:	4413      	add	r3, r2
 8001732:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	429a      	cmp	r2, r3
 800173e:	d92d      	bls.n	800179c <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	1acb      	subs	r3, r1, r3
 800174c:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800174e:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d002      	beq.n	800175c <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb+0x4e>
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	e000      	b.n	800175e <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb+0x50>
 800175c:	2300      	movs	r3, #0
 800175e:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8001760:	4413      	add	r3, r2
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800176a:	429a      	cmp	r2, r3
 800176c:	d209      	bcs.n	8001782 <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8001776:	3304      	adds	r3, #4
 8001778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800177a:	4619      	mov	r1, r3
 800177c:	f000 f8ac 	bl	80018d8 <_ZSt4copyIPPhS1_ET0_T_S3_S2_>
 8001780:	e048      	b.n	8001814 <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800178a:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 800178c:	6a3b      	ldr	r3, [r7, #32]
 800178e:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8001790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001792:	4413      	add	r3, r2
 8001794:	461a      	mov	r2, r3
 8001796:	f000 f8b7 	bl	8001908 <_ZSt13copy_backwardIPPhS1_ET0_T_S3_S2_>
 800179a:	e03b      	b.n	8001814 <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	3304      	adds	r3, #4
 80017a4:	f107 0208 	add.w	r2, r7, #8
 80017a8:	4611      	mov	r1, r2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fd25 	bl	80011fa <_ZSt3maxIjERKT_S2_S2_>
 80017b0:	4603      	mov	r3, r0
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 80017b6:	3302      	adds	r3, #2
 80017b8:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	69b9      	ldr	r1, [r7, #24]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fd2e 	bl	8001220 <_ZNSt11_Deque_baseIhSaIhEE15_M_allocate_mapEj>
 80017c4:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	085b      	lsrs	r3, r3, #1
 80017ce:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d002      	beq.n	80017dc <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb+0xce>
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	e000      	b.n	80017de <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb+0xd0>
 80017dc:	2300      	movs	r3, #0
 80017de:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	4413      	add	r3, r2
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80017ee:	3304      	adds	r3, #4
 80017f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017f2:	4619      	mov	r1, r3
 80017f4:	f000 f870 	bl	80018d8 <_ZSt4copyIPPhS1_ET0_T_S3_S2_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80017f8:	68f8      	ldr	r0, [r7, #12]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6819      	ldr	r1, [r3, #0]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	461a      	mov	r2, r3
 8001804:	f7ff fc3c 	bl	8001080 <_ZNSt11_Deque_baseIhSaIhEE17_M_deallocate_mapEPPhj>

	  this->_M_impl._M_map = __new_map;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	3308      	adds	r3, #8
 8001818:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff fd38 	bl	8001290 <_ZNSt15_Deque_iteratorIhRhPhE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f103 0018 	add.w	r0, r3, #24
 8001826:	6a3b      	ldr	r3, [r7, #32]
 8001828:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800182c:	3b01      	subs	r3, #1
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001832:	4413      	add	r3, r2
 8001834:	4619      	mov	r1, r3
 8001836:	f7ff fd2b 	bl	8001290 <_ZNSt15_Deque_iteratorIhRhPhE11_M_set_nodeEPS1_>
    }
 800183a:	bf00      	nop
 800183c:	372c      	adds	r7, #44	; 0x2c
 800183e:	46bd      	mov	sp, r7
 8001840:	bd90      	pop	{r4, r7, pc}

08001842 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800184a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
      }
 800184e:	4618      	mov	r0, r3
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8001864:	68f8      	ldr	r0, [r7, #12]
 8001866:	f7ff ffec 	bl	8001842 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 800186a:	4602      	mov	r2, r0
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	4293      	cmp	r3, r2
 8001870:	bf8c      	ite	hi
 8001872:	2301      	movhi	r3, #1
 8001874:	2300      	movls	r3, #0
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b00      	cmp	r3, #0
 800187a:	bf14      	ite	ne
 800187c:	2301      	movne	r3, #1
 800187e:	2300      	moveq	r3, #0
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x32>
	    std::__throw_bad_alloc();
 8001886:	f003 fbc0 	bl	800500a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800188a:	68b8      	ldr	r0, [r7, #8]
 800188c:	f003 fbaa 	bl	8004fe4 <_Znwj>
 8001890:	4603      	mov	r3, r0
      }
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static _GLIBCXX20_CONSTEXPR size_type
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus <= 201703L
	return __a.max_size();
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 f848 	bl	8001938 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 80018a8:	4603      	mov	r3, r0
#else
	return size_t(-1) / sizeof(value_type);
#endif
      }
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d201      	bcs.n	80018cc <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	e000      	b.n	80018ce <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80018cc:	687b      	ldr	r3, [r7, #4]
    }
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr

080018d8 <_ZSt4copyIPPhS1_ET0_T_S3_S2_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80018d8:	b590      	push	{r4, r7, lr}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f000 f833 	bl	8001950 <_ZSt12__miter_baseIPPhET_S2_>
 80018ea:	4604      	mov	r4, r0
 80018ec:	68b8      	ldr	r0, [r7, #8]
 80018ee:	f000 f82f 	bl	8001950 <_ZSt12__miter_baseIPPhET_S2_>
 80018f2:	4603      	mov	r3, r0
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	4619      	mov	r1, r3
 80018f8:	4620      	mov	r0, r4
 80018fa:	f000 f833 	bl	8001964 <_ZSt13__copy_move_aILb0EPPhS1_ET1_T0_S3_S2_>
 80018fe:	4603      	mov	r3, r0
    }
 8001900:	4618      	mov	r0, r3
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	bd90      	pop	{r4, r7, pc}

08001908 <_ZSt13copy_backwardIPPhS1_ET0_T_S3_S2_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f000 f81b 	bl	8001950 <_ZSt12__miter_baseIPPhET_S2_>
 800191a:	4604      	mov	r4, r0
 800191c:	68b8      	ldr	r0, [r7, #8]
 800191e:	f000 f817 	bl	8001950 <_ZSt12__miter_baseIPPhET_S2_>
 8001922:	4603      	mov	r3, r0
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	4619      	mov	r1, r3
 8001928:	4620      	mov	r0, r4
 800192a:	f000 f83e 	bl	80019aa <_ZSt22__copy_move_backward_aILb0EPPhS1_ET1_T0_S3_S2_>
 800192e:	4603      	mov	r3, r0
    }
 8001930:	4618      	mov	r0, r3
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	bd90      	pop	{r4, r7, pc}

08001938 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff ff7e 	bl	8001842 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 8001946:	4603      	mov	r3, r0
 8001948:	4618      	mov	r0, r3
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <_ZSt12__miter_baseIPPhET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr

08001964 <_ZSt13__copy_move_aILb0EPPhS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8001964:	b5b0      	push	{r4, r5, r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f000 f83d 	bl	80019f0 <_ZSt12__niter_baseIPPhET_S2_>
 8001976:	4604      	mov	r4, r0
 8001978:	68b8      	ldr	r0, [r7, #8]
 800197a:	f000 f839 	bl	80019f0 <_ZSt12__niter_baseIPPhET_S2_>
 800197e:	4605      	mov	r5, r0
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4618      	mov	r0, r3
 8001984:	f000 f834 	bl	80019f0 <_ZSt12__niter_baseIPPhET_S2_>
 8001988:	4603      	mov	r3, r0
 800198a:	461a      	mov	r2, r3
 800198c:	4629      	mov	r1, r5
 800198e:	4620      	mov	r0, r4
 8001990:	f000 f838 	bl	8001a04 <_ZSt14__copy_move_a1ILb0EPPhS1_ET1_T0_S3_S2_>
 8001994:	4602      	mov	r2, r0
 8001996:	1d3b      	adds	r3, r7, #4
 8001998:	4611      	mov	r1, r2
 800199a:	4618      	mov	r0, r3
 800199c:	f000 f842 	bl	8001a24 <_ZSt12__niter_wrapIPPhET_RKS2_S2_>
 80019a0:	4603      	mov	r3, r0
    }
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bdb0      	pop	{r4, r5, r7, pc}

080019aa <_ZSt22__copy_move_backward_aILb0EPPhS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 80019aa:	b5b0      	push	{r4, r5, r7, lr}
 80019ac:	b084      	sub	sp, #16
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	60f8      	str	r0, [r7, #12]
 80019b2:	60b9      	str	r1, [r7, #8]
 80019b4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f000 f81a 	bl	80019f0 <_ZSt12__niter_baseIPPhET_S2_>
 80019bc:	4604      	mov	r4, r0
 80019be:	68b8      	ldr	r0, [r7, #8]
 80019c0:	f000 f816 	bl	80019f0 <_ZSt12__niter_baseIPPhET_S2_>
 80019c4:	4605      	mov	r5, r0
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 f811 	bl	80019f0 <_ZSt12__niter_baseIPPhET_S2_>
 80019ce:	4603      	mov	r3, r0
 80019d0:	461a      	mov	r2, r3
 80019d2:	4629      	mov	r1, r5
 80019d4:	4620      	mov	r0, r4
 80019d6:	f000 f830 	bl	8001a3a <_ZSt23__copy_move_backward_a1ILb0EPPhS1_ET1_T0_S3_S2_>
 80019da:	4602      	mov	r2, r0
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	4611      	mov	r1, r2
 80019e0:	4618      	mov	r0, r3
 80019e2:	f000 f81f 	bl	8001a24 <_ZSt12__niter_wrapIPPhET_RKS2_S2_>
 80019e6:	4603      	mov	r3, r0
    }
 80019e8:	4618      	mov	r0, r3
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bdb0      	pop	{r4, r5, r7, pc}

080019f0 <_ZSt12__niter_baseIPPhET_S2_>:
    __niter_base(_Iterator __it)
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
    { return __it; }
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4618      	mov	r0, r3
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <_ZSt14__copy_move_a1ILb0EPPhS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	68b9      	ldr	r1, [r7, #8]
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f000 f820 	bl	8001a5a <_ZSt14__copy_move_a2ILb0EPPhS1_ET1_T0_S3_S2_>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <_ZSt12__niter_wrapIPPhET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
    { return __res; }
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr

08001a3a <_ZSt23__copy_move_backward_a1ILb0EPPhS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b084      	sub	sp, #16
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	60f8      	str	r0, [r7, #12]
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	68b9      	ldr	r1, [r7, #8]
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f000 f815 	bl	8001a7a <_ZSt23__copy_move_backward_a2ILb0EPPhS1_ET1_T0_S3_S2_>
 8001a50:	4603      	mov	r3, r0
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <_ZSt14__copy_move_a2ILb0EPPhS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b084      	sub	sp, #16
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	60f8      	str	r0, [r7, #12]
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	68b9      	ldr	r1, [r7, #8]
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f000 f815 	bl	8001a9a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPhEEPT_PKS4_S7_S5_>
 8001a70:	4603      	mov	r3, r0
    }
 8001a72:	4618      	mov	r0, r3
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <_ZSt23__copy_move_backward_a2ILb0EPPhS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b084      	sub	sp, #16
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	60f8      	str	r0, [r7, #12]
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	68b9      	ldr	r1, [r7, #8]
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	f000 f822 	bl	8001ad4 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPhEEPT_PKS4_S7_S5_>
 8001a90:	4603      	mov	r3, r0
    }
 8001a92:	4618      	mov	r0, r3
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPhEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b086      	sub	sp, #24
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	60f8      	str	r0, [r7, #12]
 8001aa2:	60b9      	str	r1, [r7, #8]
 8001aa4:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	109b      	asrs	r3, r3, #2
 8001aae:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d006      	beq.n	8001ac4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPhEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	461a      	mov	r2, r3
 8001abc:	68f9      	ldr	r1, [r7, #12]
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f003 fd97 	bl	80055f2 <memmove>
	  return __result + _Num;
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	4413      	add	r3, r2
	}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPhEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8001ae0:	68ba      	ldr	r2, [r7, #8]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	109b      	asrs	r3, r3, #2
 8001ae8:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d00a      	beq.n	8001b06 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPhEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	425b      	negs	r3, r3
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	18d0      	adds	r0, r2, r3
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	461a      	mov	r2, r3
 8001b00:	68f9      	ldr	r1, [r7, #12]
 8001b02:	f003 fd76 	bl	80055f2 <memmove>
	  return __result - _Num;
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	425b      	negs	r3, r3
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	4413      	add	r3, r2
	}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
    /* MCU
     * Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the
     * Systick. */
    HAL_Init();
 8001b1c:	f000 fe98 	bl	8002850 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001b20:	f000 f832 	bl	8001b88 <_Z18SystemClock_Configv>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001b24:	f000 f9e6 	bl	8001ef4 <_ZL12MX_GPIO_Initv>
    MX_IWDG_Init();
 8001b28:	f000 f880 	bl	8001c2c <_ZL12MX_IWDG_Initv>
    MX_TIM2_Init();
 8001b2c:	f000 f89e 	bl	8001c6c <_ZL12MX_TIM2_Initv>
    MX_TIM3_Init();
 8001b30:	f000 f8f8 	bl	8001d24 <_ZL12MX_TIM3_Initv>
    MX_TIM4_Init();
 8001b34:	f000 f952 	bl	8001ddc <_ZL12MX_TIM4_Initv>

    HAL_TIM_Base_Start_IT(&htim2);
 8001b38:	480d      	ldr	r0, [pc, #52]	; (8001b70 <main+0x58>)
 8001b3a:	f001 ffc9 	bl	8003ad0 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim3);
 8001b3e:	480d      	ldr	r0, [pc, #52]	; (8001b74 <main+0x5c>)
 8001b40:	f001 ffc6 	bl	8003ad0 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim4);
 8001b44:	480c      	ldr	r0, [pc, #48]	; (8001b78 <main+0x60>)
 8001b46:	f001 ffc3 	bl	8003ad0 <HAL_TIM_Base_Start_IT>

    MX_USART1_UART_Init();
 8001b4a:	f000 f9a5 	bl	8001e98 <_ZL19MX_USART1_UART_Initv>
    leddev.Init();
 8001b4e:	480b      	ldr	r0, [pc, #44]	; (8001b7c <main+0x64>)
 8001b50:	f7fe ffb0 	bl	8000ab4 <_ZN3LED4InitEv>
    game.Init();
 8001b54:	480a      	ldr	r0, [pc, #40]	; (8001b80 <main+0x68>)
 8001b56:	f7fe fdc6 	bl	80006e6 <_ZN4Game4InitEv>

    /* USER CODE BEGIN 2 */
    leddev.append(BLINK_BOTH_TWICE);
 8001b5a:	2102      	movs	r1, #2
 8001b5c:	4807      	ldr	r0, [pc, #28]	; (8001b7c <main+0x64>)
 8001b5e:	f7fe ffc3 	bl	8000ae8 <_ZN3LED6appendE6led_op>
    uart_print("Hello World\r\n");
 8001b62:	4808      	ldr	r0, [pc, #32]	; (8001b84 <main+0x6c>)
 8001b64:	f000 fe38 	bl	80027d8 <uart_print>
    game.generate_question();
 8001b68:	4805      	ldr	r0, [pc, #20]	; (8001b80 <main+0x68>)
 8001b6a:	f7fe fdef 	bl	800074c <_ZN4Game17generate_questionEv>
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1) {
 8001b6e:	e7fe      	b.n	8001b6e <main+0x56>
 8001b70:	20000090 	.word	0x20000090
 8001b74:	200000d8 	.word	0x200000d8
 8001b78:	20000120 	.word	0x20000120
 8001b7c:	200005d4 	.word	0x200005d4
 8001b80:	20000168 	.word	0x20000168
 8001b84:	0800665c 	.word	0x0800665c

08001b88 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b090      	sub	sp, #64	; 0x40
 8001b8c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b8e:	f107 0318 	add.w	r3, r7, #24
 8001b92:	2228      	movs	r2, #40	; 0x28
 8001b94:	2100      	movs	r1, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f003 fd45 	bl	8005626 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b9c:	1d3b      	adds	r3, r7, #4
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	609a      	str	r2, [r3, #8]
 8001ba6:	60da      	str	r2, [r3, #12]
 8001ba8:	611a      	str	r2, [r3, #16]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType =
 8001baa:	2309      	movs	r3, #9
 8001bac:	61bb      	str	r3, [r7, #24]
        RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bb2:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bc8:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001bca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001bce:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001bd0:	f107 0318 	add.w	r3, r7, #24
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f001 fb1b 	bl	8003210 <HAL_RCC_OscConfig>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	bf14      	ite	ne
 8001be0:	2301      	movne	r3, #1
 8001be2:	2300      	moveq	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <_Z18SystemClock_Configv+0x66>
        Error_Handler();
 8001bea:	f000 fa27 	bl	800203c <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8001bee:	230f      	movs	r3, #15
 8001bf0:	607b      	str	r3, [r7, #4]
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bfe:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	2102      	movs	r1, #2
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f001 fd83 	bl	8003714 <HAL_RCC_ClockConfig>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	bf14      	ite	ne
 8001c14:	2301      	movne	r3, #1
 8001c16:	2300      	moveq	r3, #0
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <_Z18SystemClock_Configv+0x9a>
        Error_Handler();
 8001c1e:	f000 fa0d 	bl	800203c <Error_Handler>
    }
}
 8001c22:	bf00      	nop
 8001c24:	3740      	adds	r7, #64	; 0x40
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <_ZL12MX_IWDG_Initv>:
/**
 * @brief IWDG Initialization Function
 * @param None
 * @retval None
 */
static void MX_IWDG_Init(void) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
    /* USER CODE END IWDG_Init 0 */

    /* USER CODE BEGIN IWDG_Init 1 */

    /* USER CODE END IWDG_Init 1 */
    hiwdg.Instance = IWDG;
 8001c30:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <_ZL12MX_IWDG_Initv+0x38>)
 8001c32:	4a0d      	ldr	r2, [pc, #52]	; (8001c68 <_ZL12MX_IWDG_Initv+0x3c>)
 8001c34:	601a      	str	r2, [r3, #0]
    hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8001c36:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <_ZL12MX_IWDG_Initv+0x38>)
 8001c38:	2204      	movs	r2, #4
 8001c3a:	605a      	str	r2, [r3, #4]
    hiwdg.Init.Reload = 1250;
 8001c3c:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <_ZL12MX_IWDG_Initv+0x38>)
 8001c3e:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001c42:	609a      	str	r2, [r3, #8]
    if (HAL_IWDG_Init(&hiwdg) != HAL_OK) {
 8001c44:	4807      	ldr	r0, [pc, #28]	; (8001c64 <_ZL12MX_IWDG_Initv+0x38>)
 8001c46:	f001 fa91 	bl	800316c <HAL_IWDG_Init>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	bf14      	ite	ne
 8001c50:	2301      	movne	r3, #1
 8001c52:	2300      	moveq	r3, #0
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <_ZL12MX_IWDG_Initv+0x32>
        Error_Handler();
 8001c5a:	f000 f9ef 	bl	800203c <Error_Handler>
    }
    /* USER CODE BEGIN IWDG_Init 2 */

    /* USER CODE END IWDG_Init 2 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000084 	.word	0x20000084
 8001c68:	40003000 	.word	0x40003000

08001c6c <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c72:	f107 0308 	add.w	r3, r7, #8
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]
 8001c7c:	609a      	str	r2, [r3, #8]
 8001c7e:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c80:	463b      	mov	r3, r7
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 8001c88:	4b25      	ldr	r3, [pc, #148]	; (8001d20 <_ZL12MX_TIM2_Initv+0xb4>)
 8001c8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c8e:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 7199;
 8001c90:	4b23      	ldr	r3, [pc, #140]	; (8001d20 <_ZL12MX_TIM2_Initv+0xb4>)
 8001c92:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001c96:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c98:	4b21      	ldr	r3, [pc, #132]	; (8001d20 <_ZL12MX_TIM2_Initv+0xb4>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 499;
 8001c9e:	4b20      	ldr	r3, [pc, #128]	; (8001d20 <_ZL12MX_TIM2_Initv+0xb4>)
 8001ca0:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001ca4:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca6:	4b1e      	ldr	r3, [pc, #120]	; (8001d20 <_ZL12MX_TIM2_Initv+0xb4>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cac:	4b1c      	ldr	r3, [pc, #112]	; (8001d20 <_ZL12MX_TIM2_Initv+0xb4>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001cb2:	481b      	ldr	r0, [pc, #108]	; (8001d20 <_ZL12MX_TIM2_Initv+0xb4>)
 8001cb4:	f001 febc 	bl	8003a30 <HAL_TIM_Base_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	bf14      	ite	ne
 8001cbe:	2301      	movne	r3, #1
 8001cc0:	2300      	moveq	r3, #0
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <_ZL12MX_TIM2_Initv+0x60>
        Error_Handler();
 8001cc8:	f000 f9b8 	bl	800203c <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd0:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001cd2:	f107 0308 	add.w	r3, r7, #8
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4811      	ldr	r0, [pc, #68]	; (8001d20 <_ZL12MX_TIM2_Initv+0xb4>)
 8001cda:	f002 f88f 	bl	8003dfc <HAL_TIM_ConfigClockSource>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	bf14      	ite	ne
 8001ce4:	2301      	movne	r3, #1
 8001ce6:	2300      	moveq	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <_ZL12MX_TIM2_Initv+0x86>
        Error_Handler();
 8001cee:	f000 f9a5 	bl	800203c <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) !=
 8001cfa:	463b      	mov	r3, r7
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4808      	ldr	r0, [pc, #32]	; (8001d20 <_ZL12MX_TIM2_Initv+0xb4>)
 8001d00:	f002 fa78 	bl	80041f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	bf14      	ite	ne
 8001d0a:	2301      	movne	r3, #1
 8001d0c:	2300      	moveq	r3, #0
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <_ZL12MX_TIM2_Initv+0xac>
        HAL_OK) {
        Error_Handler();
 8001d14:	f000 f992 	bl	800203c <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */
}
 8001d18:	bf00      	nop
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000090 	.word	0x20000090

08001d24 <_ZL12MX_TIM3_Initv>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d2a:	f107 0308 	add.w	r3, r7, #8
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]
 8001d34:	609a      	str	r2, [r3, #8]
 8001d36:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d38:	463b      	mov	r3, r7
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 8001d40:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001d42:	4a25      	ldr	r2, [pc, #148]	; (8001dd8 <_ZL12MX_TIM3_Initv+0xb4>)
 8001d44:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 7199;
 8001d46:	4b23      	ldr	r3, [pc, #140]	; (8001dd4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001d48:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001d4c:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d4e:	4b21      	ldr	r3, [pc, #132]	; (8001dd4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 99;
 8001d54:	4b1f      	ldr	r3, [pc, #124]	; (8001dd4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001d56:	2263      	movs	r2, #99	; 0x63
 8001d58:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d5a:	4b1e      	ldr	r3, [pc, #120]	; (8001dd4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d60:	4b1c      	ldr	r3, [pc, #112]	; (8001dd4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001d66:	481b      	ldr	r0, [pc, #108]	; (8001dd4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001d68:	f001 fe62 	bl	8003a30 <HAL_TIM_Base_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	bf14      	ite	ne
 8001d72:	2301      	movne	r3, #1
 8001d74:	2300      	moveq	r3, #0
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <_ZL12MX_TIM3_Initv+0x5c>
        Error_Handler();
 8001d7c:	f000 f95e 	bl	800203c <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d84:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001d86:	f107 0308 	add.w	r3, r7, #8
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4811      	ldr	r0, [pc, #68]	; (8001dd4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001d8e:	f002 f835 	bl	8003dfc <HAL_TIM_ConfigClockSource>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	bf14      	ite	ne
 8001d98:	2301      	movne	r3, #1
 8001d9a:	2300      	moveq	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <_ZL12MX_TIM3_Initv+0x82>
        Error_Handler();
 8001da2:	f000 f94b 	bl	800203c <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da6:	2300      	movs	r3, #0
 8001da8:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001daa:	2300      	movs	r3, #0
 8001dac:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) !=
 8001dae:	463b      	mov	r3, r7
 8001db0:	4619      	mov	r1, r3
 8001db2:	4808      	ldr	r0, [pc, #32]	; (8001dd4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001db4:	f002 fa1e 	bl	80041f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	bf14      	ite	ne
 8001dbe:	2301      	movne	r3, #1
 8001dc0:	2300      	moveq	r3, #0
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <_ZL12MX_TIM3_Initv+0xa8>
        HAL_OK) {
        Error_Handler();
 8001dc8:	f000 f938 	bl	800203c <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */
}
 8001dcc:	bf00      	nop
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	200000d8 	.word	0x200000d8
 8001dd8:	40000400 	.word	0x40000400

08001ddc <_ZL12MX_TIM4_Initv>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM4_Init 0 */

    /* USER CODE END TIM4_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001de2:	f107 0308 	add.w	r3, r7, #8
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]
 8001dec:	609a      	str	r2, [r3, #8]
 8001dee:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df0:	463b      	mov	r3, r7
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM4_Init 1 */

    /* USER CODE END TIM4_Init 1 */
    htim4.Instance = TIM4;
 8001df8:	4b25      	ldr	r3, [pc, #148]	; (8001e90 <_ZL12MX_TIM4_Initv+0xb4>)
 8001dfa:	4a26      	ldr	r2, [pc, #152]	; (8001e94 <_ZL12MX_TIM4_Initv+0xb8>)
 8001dfc:	601a      	str	r2, [r3, #0]
    htim4.Init.Prescaler = 7199;
 8001dfe:	4b24      	ldr	r3, [pc, #144]	; (8001e90 <_ZL12MX_TIM4_Initv+0xb4>)
 8001e00:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001e04:	605a      	str	r2, [r3, #4]
    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e06:	4b22      	ldr	r3, [pc, #136]	; (8001e90 <_ZL12MX_TIM4_Initv+0xb4>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
    htim4.Init.Period = 9999;
 8001e0c:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <_ZL12MX_TIM4_Initv+0xb4>)
 8001e0e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e12:	60da      	str	r2, [r3, #12]
    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e14:	4b1e      	ldr	r3, [pc, #120]	; (8001e90 <_ZL12MX_TIM4_Initv+0xb4>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	611a      	str	r2, [r3, #16]
    htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e1a:	4b1d      	ldr	r3, [pc, #116]	; (8001e90 <_ZL12MX_TIM4_Initv+0xb4>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001e20:	481b      	ldr	r0, [pc, #108]	; (8001e90 <_ZL12MX_TIM4_Initv+0xb4>)
 8001e22:	f001 fe05 	bl	8003a30 <HAL_TIM_Base_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	bf14      	ite	ne
 8001e2c:	2301      	movne	r3, #1
 8001e2e:	2300      	moveq	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <_ZL12MX_TIM4_Initv+0x5e>
        Error_Handler();
 8001e36:	f000 f901 	bl	800203c <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e3e:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8001e40:	f107 0308 	add.w	r3, r7, #8
 8001e44:	4619      	mov	r1, r3
 8001e46:	4812      	ldr	r0, [pc, #72]	; (8001e90 <_ZL12MX_TIM4_Initv+0xb4>)
 8001e48:	f001 ffd8 	bl	8003dfc <HAL_TIM_ConfigClockSource>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	bf14      	ite	ne
 8001e52:	2301      	movne	r3, #1
 8001e54:	2300      	moveq	r3, #0
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <_ZL12MX_TIM4_Initv+0x84>
        Error_Handler();
 8001e5c:	f000 f8ee 	bl	800203c <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e60:	2300      	movs	r3, #0
 8001e62:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e64:	2300      	movs	r3, #0
 8001e66:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) !=
 8001e68:	463b      	mov	r3, r7
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4808      	ldr	r0, [pc, #32]	; (8001e90 <_ZL12MX_TIM4_Initv+0xb4>)
 8001e6e:	f002 f9c1 	bl	80041f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	bf14      	ite	ne
 8001e78:	2301      	movne	r3, #1
 8001e7a:	2300      	moveq	r3, #0
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <_ZL12MX_TIM4_Initv+0xaa>
        HAL_OK) {
        Error_Handler();
 8001e82:	f000 f8db 	bl	800203c <Error_Handler>
    }
    /* USER CODE BEGIN TIM4_Init 2 */

    /* USER CODE END TIM4_Init 2 */
}
 8001e86:	bf00      	nop
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000120 	.word	0x20000120
 8001e94:	40000800 	.word	0x40000800

08001e98 <_ZL19MX_USART1_UART_Initv>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8001e9c:	4b13      	ldr	r3, [pc, #76]	; (8001eec <_ZL19MX_USART1_UART_Initv+0x54>)
 8001e9e:	4a14      	ldr	r2, [pc, #80]	; (8001ef0 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001ea0:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8001ea2:	4b12      	ldr	r3, [pc, #72]	; (8001eec <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ea4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ea8:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001eaa:	4b10      	ldr	r3, [pc, #64]	; (8001eec <_ZL19MX_USART1_UART_Initv+0x54>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8001eb0:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <_ZL19MX_USART1_UART_Initv+0x54>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8001eb6:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <_ZL19MX_USART1_UART_Initv+0x54>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <_ZL19MX_USART1_UART_Initv+0x54>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001ece:	4807      	ldr	r0, [pc, #28]	; (8001eec <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ed0:	f002 fa0e 	bl	80042f0 <HAL_UART_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	bf14      	ite	ne
 8001eda:	2301      	movne	r3, #1
 8001edc:	2300      	moveq	r3, #0
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <_ZL19MX_USART1_UART_Initv+0x50>
        Error_Handler();
 8001ee4:	f000 f8aa 	bl	800203c <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */
}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20000178 	.word	0x20000178
 8001ef0:	40013800 	.word	0x40013800

08001ef4 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b088      	sub	sp, #32
 8001ef8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efa:	f107 0310 	add.w	r3, r7, #16
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	605a      	str	r2, [r3, #4]
 8001f04:	609a      	str	r2, [r3, #8]
 8001f06:	60da      	str	r2, [r3, #12]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f08:	4b46      	ldr	r3, [pc, #280]	; (8002024 <_ZL12MX_GPIO_Initv+0x130>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	4a45      	ldr	r2, [pc, #276]	; (8002024 <_ZL12MX_GPIO_Initv+0x130>)
 8001f0e:	f043 0320 	orr.w	r3, r3, #32
 8001f12:	6193      	str	r3, [r2, #24]
 8001f14:	4b43      	ldr	r3, [pc, #268]	; (8002024 <_ZL12MX_GPIO_Initv+0x130>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f003 0320 	and.w	r3, r3, #32
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f20:	4b40      	ldr	r3, [pc, #256]	; (8002024 <_ZL12MX_GPIO_Initv+0x130>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	4a3f      	ldr	r2, [pc, #252]	; (8002024 <_ZL12MX_GPIO_Initv+0x130>)
 8001f26:	f043 0304 	orr.w	r3, r3, #4
 8001f2a:	6193      	str	r3, [r2, #24]
 8001f2c:	4b3d      	ldr	r3, [pc, #244]	; (8002024 <_ZL12MX_GPIO_Initv+0x130>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	60bb      	str	r3, [r7, #8]
 8001f36:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f38:	4b3a      	ldr	r3, [pc, #232]	; (8002024 <_ZL12MX_GPIO_Initv+0x130>)
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	4a39      	ldr	r2, [pc, #228]	; (8002024 <_ZL12MX_GPIO_Initv+0x130>)
 8001f3e:	f043 0310 	orr.w	r3, r3, #16
 8001f42:	6193      	str	r3, [r2, #24]
 8001f44:	4b37      	ldr	r3, [pc, #220]	; (8002024 <_ZL12MX_GPIO_Initv+0x130>)
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	f003 0310 	and.w	r3, r3, #16
 8001f4c:	607b      	str	r3, [r7, #4]
 8001f4e:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8001f50:	2201      	movs	r2, #1
 8001f52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f56:	4834      	ldr	r0, [pc, #208]	; (8002028 <_ZL12MX_GPIO_Initv+0x134>)
 8001f58:	f001 f8d7 	bl	800310a <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	2104      	movs	r1, #4
 8001f60:	4832      	ldr	r0, [pc, #200]	; (800202c <_ZL12MX_GPIO_Initv+0x138>)
 8001f62:	f001 f8d2 	bl	800310a <HAL_GPIO_WritePin>

    /*Configure GPIO pin : KEY_WK_Pin */
    GPIO_InitStruct.Pin = KEY_WK_Pin;
 8001f66:	2301      	movs	r3, #1
 8001f68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f6a:	4b31      	ldr	r3, [pc, #196]	; (8002030 <_ZL12MX_GPIO_Initv+0x13c>)
 8001f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(KEY_WK_GPIO_Port, &GPIO_InitStruct);
 8001f72:	f107 0310 	add.w	r3, r7, #16
 8001f76:	4619      	mov	r1, r3
 8001f78:	482b      	ldr	r0, [pc, #172]	; (8002028 <_ZL12MX_GPIO_Initv+0x134>)
 8001f7a:	f000 ff1b 	bl	8002db4 <HAL_GPIO_Init>

    /*Configure GPIO pin : KEY0_Pin */
    GPIO_InitStruct.Pin = KEY0_Pin;
 8001f7e:	2320      	movs	r3, #32
 8001f80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f82:	4b2c      	ldr	r3, [pc, #176]	; (8002034 <_ZL12MX_GPIO_Initv+0x140>)
 8001f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f86:	2301      	movs	r3, #1
 8001f88:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 8001f8a:	f107 0310 	add.w	r3, r7, #16
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4829      	ldr	r0, [pc, #164]	; (8002038 <_ZL12MX_GPIO_Initv+0x144>)
 8001f92:	f000 ff0f 	bl	8002db4 <HAL_GPIO_Init>

    /*Configure GPIO pin : LED0_Pin */
    GPIO_InitStruct.Pin = LED0_Pin;
 8001f96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8001fa8:	f107 0310 	add.w	r3, r7, #16
 8001fac:	4619      	mov	r1, r3
 8001fae:	481e      	ldr	r0, [pc, #120]	; (8002028 <_ZL12MX_GPIO_Initv+0x134>)
 8001fb0:	f000 ff00 	bl	8002db4 <HAL_GPIO_Init>

    /*Configure GPIO pin : KEY1_Pin */
    GPIO_InitStruct.Pin = KEY1_Pin;
 8001fb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fb8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fba:	4b1e      	ldr	r3, [pc, #120]	; (8002034 <_ZL12MX_GPIO_Initv+0x140>)
 8001fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8001fc2:	f107 0310 	add.w	r3, r7, #16
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4817      	ldr	r0, [pc, #92]	; (8002028 <_ZL12MX_GPIO_Initv+0x134>)
 8001fca:	f000 fef3 	bl	8002db4 <HAL_GPIO_Init>

    /*Configure GPIO pin : LED1_Pin */
    GPIO_InitStruct.Pin = LED1_Pin;
 8001fce:	2304      	movs	r3, #4
 8001fd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001fde:	f107 0310 	add.w	r3, r7, #16
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4811      	ldr	r0, [pc, #68]	; (800202c <_ZL12MX_GPIO_Initv+0x138>)
 8001fe6:	f000 fee5 	bl	8002db4 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8001fea:	2200      	movs	r2, #0
 8001fec:	2102      	movs	r1, #2
 8001fee:	2006      	movs	r0, #6
 8001ff0:	f000 fd67 	bl	8002ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001ff4:	2006      	movs	r0, #6
 8001ff6:	f000 fd80 	bl	8002afa <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 1);
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	2102      	movs	r1, #2
 8001ffe:	2017      	movs	r0, #23
 8002000:	f000 fd5f 	bl	8002ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002004:	2017      	movs	r0, #23
 8002006:	f000 fd78 	bl	8002afa <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 2);
 800200a:	2202      	movs	r2, #2
 800200c:	2102      	movs	r1, #2
 800200e:	2028      	movs	r0, #40	; 0x28
 8002010:	f000 fd57 	bl	8002ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002014:	2028      	movs	r0, #40	; 0x28
 8002016:	f000 fd70 	bl	8002afa <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 800201a:	bf00      	nop
 800201c:	3720      	adds	r7, #32
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40021000 	.word	0x40021000
 8002028:	40010800 	.word	0x40010800
 800202c:	40011400 	.word	0x40011400
 8002030:	10110000 	.word	0x10110000
 8002034:	10210000 	.word	0x10210000
 8002038:	40011000 	.word	0x40011000

0800203c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002040:	b672      	cpsid	i
}
 8002042:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state
     */
    __disable_irq();
    while (1) {
 8002044:	e7fe      	b.n	8002044 <Error_Handler+0x8>

08002046 <_ZNSt5queueIhSt5dequeIhSaIhEEED1Ev>:
    class queue
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4618      	mov	r0, r3
 8002052:	f000 f839 	bl	80020c8 <_ZNSt5dequeIhSaIhEED1Ev>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4618      	mov	r0, r3
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <_ZN3LEDD1Ev>:
#ifdef __cplusplus  // 使用C语言的方式编译方法名。
extern "C" {
#endif
enum led_op { BLINK_0, BLINK_1, BLINK_BOTH_TWICE, ERROR_ENCODE, ERROR_DECODE };

class LED {
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff ffeb 	bl	8002046 <_ZNSt5queueIhSt5dequeIhSaIhEEED1Ev>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <_Z41__static_initialization_and_destruction_0ii>:
    }
    /* USER CODE END Error_Handler_Debug */
}
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d10a      	bne.n	80020a2 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002092:	4293      	cmp	r3, r2
 8002094:	d105      	bne.n	80020a2 <_Z41__static_initialization_and_destruction_0ii+0x26>
Game game;
 8002096:	480a      	ldr	r0, [pc, #40]	; (80020c0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8002098:	f7fe fb12 	bl	80006c0 <_ZN4GameC1Ev>
LED leddev;
 800209c:	4809      	ldr	r0, [pc, #36]	; (80020c4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800209e:	f7fe fce9 	bl	8000a74 <_ZN3LEDC1Ev>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d107      	bne.n	80020b8 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d102      	bne.n	80020b8 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80020b2:	4804      	ldr	r0, [pc, #16]	; (80020c4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80020b4:	f7ff ffd4 	bl	8002060 <_ZN3LEDD1Ev>
}
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20000168 	.word	0x20000168
 80020c4:	200005d4 	.word	0x200005d4

080020c8 <_ZNSt5dequeIhSaIhEED1Ev>:
      ~deque()
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08a      	sub	sp, #40	; 0x28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 80020d0:	f107 0308 	add.w	r3, r7, #8
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe fec8 	bl	8000e6c <_ZNSt5dequeIhSaIhEE5beginEv>
 80020dc:	f107 0318 	add.w	r3, r7, #24
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 f843 	bl	800216e <_ZNSt5dequeIhSaIhEE3endEv>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe fecd 	bl	8000e8a <_ZNSt11_Deque_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80020f0:	4603      	mov	r3, r0
 80020f2:	f107 0218 	add.w	r2, r7, #24
 80020f6:	f107 0108 	add.w	r1, r7, #8
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f846 	bl	800218c <_ZNSt5dequeIhSaIhEE15_M_destroy_dataESt15_Deque_iteratorIhRhPhES5_RKS0_>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4618      	mov	r0, r3
 8002104:	f000 f811 	bl	800212a <_ZNSt11_Deque_baseIhSaIhEED1Ev>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4618      	mov	r0, r3
 800210c:	3728      	adds	r7, #40	; 0x28
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <_ZNSt11_Deque_baseIhSaIhEE11_Deque_implD1Ev>:
      struct _Deque_impl
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f842 	bl	80021a4 <_ZNSaIhED1Ev>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <_ZNSt11_Deque_baseIhSaIhEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 800212a:	b580      	push	{r7, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d010      	beq.n	800215c <_ZNSt11_Deque_baseIhSaIhEED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8002142:	3304      	adds	r3, #4
 8002144:	461a      	mov	r2, r3
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f838 	bl	80021bc <_ZNSt11_Deque_baseIhSaIhEE16_M_destroy_nodesEPPhS3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6819      	ldr	r1, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	461a      	mov	r2, r3
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7fe ff92 	bl	8001080 <_ZNSt11_Deque_baseIhSaIhEE17_M_deallocate_mapEPPhj>
    }
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff ffd7 	bl	8002112 <_ZNSt11_Deque_baseIhSaIhEE11_Deque_implD1Ev>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <_ZNSt5dequeIhSaIhEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	3318      	adds	r3, #24
 800217c:	4619      	mov	r1, r3
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7fe fe8d 	bl	8000e9e <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <_ZNSt5dequeIhSaIhEE15_M_destroy_dataESt15_Deque_iteratorIhRhPhES5_RKS0_>:
      _M_destroy_data(iterator __first, iterator __last,
 800218c:	b480      	push	{r7}
 800218e:	b08d      	sub	sp, #52	; 0x34
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
 8002198:	603b      	str	r3, [r7, #0]
      }
 800219a:	bf00      	nop
 800219c:	3734      	adds	r7, #52	; 0x34
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <_ZNSaIhED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 f820 	bl	80021f2 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4618      	mov	r0, r3
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <_ZNSt11_Deque_baseIhSaIhEE16_M_destroy_nodesEPPhS3_>:
    _Deque_base<_Tp, _Alloc>::
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	e008      	b.n	80021e0 <_ZNSt11_Deque_baseIhSaIhEE16_M_destroy_nodesEPPhS3_+0x24>
	_M_deallocate_node(*__n);
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4619      	mov	r1, r3
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f7ff f873 	bl	80012c0 <_ZNSt11_Deque_baseIhSaIhEE18_M_deallocate_nodeEPh>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	3304      	adds	r3, #4
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d3f2      	bcc.n	80021ce <_ZNSt11_Deque_baseIhSaIhEE16_M_destroy_nodesEPPhS3_+0x12>
    }
 80021e8:	bf00      	nop
 80021ea:	bf00      	nop
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4618      	mov	r0, r3
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr

08002206 <_GLOBAL__sub_I_hiwdg>:
 8002206:	b580      	push	{r7, lr}
 8002208:	af00      	add	r7, sp, #0
 800220a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800220e:	2001      	movs	r0, #1
 8002210:	f7ff ff34 	bl	800207c <_Z41__static_initialization_and_destruction_0ii>
 8002214:	bd80      	pop	{r7, pc}

08002216 <_GLOBAL__sub_D_hiwdg>:
 8002216:	b580      	push	{r7, lr}
 8002218:	af00      	add	r7, sp, #0
 800221a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800221e:	2000      	movs	r0, #0
 8002220:	f7ff ff2c 	bl	800207c <_Z41__static_initialization_and_destruction_0ii>
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800222e:	4b16      	ldr	r3, [pc, #88]	; (8002288 <HAL_MspInit+0x60>)
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	4a15      	ldr	r2, [pc, #84]	; (8002288 <HAL_MspInit+0x60>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6193      	str	r3, [r2, #24]
 800223a:	4b13      	ldr	r3, [pc, #76]	; (8002288 <HAL_MspInit+0x60>)
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002246:	4b10      	ldr	r3, [pc, #64]	; (8002288 <HAL_MspInit+0x60>)
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	4a0f      	ldr	r2, [pc, #60]	; (8002288 <HAL_MspInit+0x60>)
 800224c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002250:	61d3      	str	r3, [r2, #28]
 8002252:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <HAL_MspInit+0x60>)
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225a:	607b      	str	r3, [r7, #4]
 800225c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800225e:	2005      	movs	r0, #5
 8002260:	f000 fc24 	bl	8002aac <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002264:	4b09      	ldr	r3, [pc, #36]	; (800228c <HAL_MspInit+0x64>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	4a04      	ldr	r2, [pc, #16]	; (800228c <HAL_MspInit+0x64>)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002280:	bf00      	nop
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40021000 	.word	0x40021000
 800228c:	40010000 	.word	0x40010000

08002290 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a0:	d114      	bne.n	80022cc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022a2:	4b26      	ldr	r3, [pc, #152]	; (800233c <HAL_TIM_Base_MspInit+0xac>)
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	4a25      	ldr	r2, [pc, #148]	; (800233c <HAL_TIM_Base_MspInit+0xac>)
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	61d3      	str	r3, [r2, #28]
 80022ae:	4b23      	ldr	r3, [pc, #140]	; (800233c <HAL_TIM_Base_MspInit+0xac>)
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80022ba:	2200      	movs	r2, #0
 80022bc:	2101      	movs	r1, #1
 80022be:	201c      	movs	r0, #28
 80022c0:	f000 fbff 	bl	8002ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022c4:	201c      	movs	r0, #28
 80022c6:	f000 fc18 	bl	8002afa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80022ca:	e032      	b.n	8002332 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a1b      	ldr	r2, [pc, #108]	; (8002340 <HAL_TIM_Base_MspInit+0xb0>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d114      	bne.n	8002300 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022d6:	4b19      	ldr	r3, [pc, #100]	; (800233c <HAL_TIM_Base_MspInit+0xac>)
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	4a18      	ldr	r2, [pc, #96]	; (800233c <HAL_TIM_Base_MspInit+0xac>)
 80022dc:	f043 0302 	orr.w	r3, r3, #2
 80022e0:	61d3      	str	r3, [r2, #28]
 80022e2:	4b16      	ldr	r3, [pc, #88]	; (800233c <HAL_TIM_Base_MspInit+0xac>)
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80022ee:	2200      	movs	r2, #0
 80022f0:	2101      	movs	r1, #1
 80022f2:	201d      	movs	r0, #29
 80022f4:	f000 fbe5 	bl	8002ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022f8:	201d      	movs	r0, #29
 80022fa:	f000 fbfe 	bl	8002afa <HAL_NVIC_EnableIRQ>
}
 80022fe:	e018      	b.n	8002332 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a0f      	ldr	r2, [pc, #60]	; (8002344 <HAL_TIM_Base_MspInit+0xb4>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d113      	bne.n	8002332 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800230a:	4b0c      	ldr	r3, [pc, #48]	; (800233c <HAL_TIM_Base_MspInit+0xac>)
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	4a0b      	ldr	r2, [pc, #44]	; (800233c <HAL_TIM_Base_MspInit+0xac>)
 8002310:	f043 0304 	orr.w	r3, r3, #4
 8002314:	61d3      	str	r3, [r2, #28]
 8002316:	4b09      	ldr	r3, [pc, #36]	; (800233c <HAL_TIM_Base_MspInit+0xac>)
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8002322:	2200      	movs	r2, #0
 8002324:	2101      	movs	r1, #1
 8002326:	201e      	movs	r0, #30
 8002328:	f000 fbcb 	bl	8002ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800232c:	201e      	movs	r0, #30
 800232e:	f000 fbe4 	bl	8002afa <HAL_NVIC_EnableIRQ>
}
 8002332:	bf00      	nop
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000
 8002340:	40000400 	.word	0x40000400
 8002344:	40000800 	.word	0x40000800

08002348 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	f107 0310 	add.w	r3, r7, #16
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a20      	ldr	r2, [pc, #128]	; (80023e4 <HAL_UART_MspInit+0x9c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d139      	bne.n	80023dc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002368:	4b1f      	ldr	r3, [pc, #124]	; (80023e8 <HAL_UART_MspInit+0xa0>)
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	4a1e      	ldr	r2, [pc, #120]	; (80023e8 <HAL_UART_MspInit+0xa0>)
 800236e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002372:	6193      	str	r3, [r2, #24]
 8002374:	4b1c      	ldr	r3, [pc, #112]	; (80023e8 <HAL_UART_MspInit+0xa0>)
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002380:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <HAL_UART_MspInit+0xa0>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	4a18      	ldr	r2, [pc, #96]	; (80023e8 <HAL_UART_MspInit+0xa0>)
 8002386:	f043 0304 	orr.w	r3, r3, #4
 800238a:	6193      	str	r3, [r2, #24]
 800238c:	4b16      	ldr	r3, [pc, #88]	; (80023e8 <HAL_UART_MspInit+0xa0>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002398:	f44f 7300 	mov.w	r3, #512	; 0x200
 800239c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239e:	2302      	movs	r3, #2
 80023a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023a2:	2303      	movs	r3, #3
 80023a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a6:	f107 0310 	add.w	r3, r7, #16
 80023aa:	4619      	mov	r1, r3
 80023ac:	480f      	ldr	r0, [pc, #60]	; (80023ec <HAL_UART_MspInit+0xa4>)
 80023ae:	f000 fd01 	bl	8002db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c0:	f107 0310 	add.w	r3, r7, #16
 80023c4:	4619      	mov	r1, r3
 80023c6:	4809      	ldr	r0, [pc, #36]	; (80023ec <HAL_UART_MspInit+0xa4>)
 80023c8:	f000 fcf4 	bl	8002db4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023cc:	2200      	movs	r2, #0
 80023ce:	2100      	movs	r1, #0
 80023d0:	2025      	movs	r0, #37	; 0x25
 80023d2:	f000 fb76 	bl	8002ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023d6:	2025      	movs	r0, #37	; 0x25
 80023d8:	f000 fb8f 	bl	8002afa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80023dc:	bf00      	nop
 80023de:	3720      	adds	r7, #32
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40013800 	.word	0x40013800
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40010800 	.word	0x40010800

080023f0 <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 80023f4:	e7fe      	b.n	80023f4 <NMI_Handler+0x4>

080023f6 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80023f6:	b480      	push	{r7}
 80023f8:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1) {
 80023fa:	e7fe      	b.n	80023fa <HardFault_Handler+0x4>

080023fc <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1) {
 8002400:	e7fe      	b.n	8002400 <MemManage_Handler+0x4>

08002402 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8002402:	b480      	push	{r7}
 8002404:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1) {
 8002406:	e7fe      	b.n	8002406 <BusFault_Handler+0x4>

08002408 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1) {
 800240c:	e7fe      	b.n	800240c <UsageFault_Handler+0x4>

0800240e <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 800240e:	b480      	push	{r7}
 8002410:	af00      	add	r7, sp, #0

    /* USER CODE END SVCall_IRQn 0 */
    /* USER CODE BEGIN SVCall_IRQn 1 */

    /* USER CODE END SVCall_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr

0800241a <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr

08002426 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8002426:	b480      	push	{r7}
 8002428:	af00      	add	r7, sp, #0

    /* USER CODE END PendSV_IRQn 0 */
    /* USER CODE BEGIN PendSV_IRQn 1 */

    /* USER CODE END PendSV_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr

08002432 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8002432:	b580      	push	{r7, lr}
 8002434:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 8002436:	f000 fa51 	bl	80028dc <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}

0800243e <EXTI0_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line0 interrupt.
 */
void EXTI0_IRQHandler(void) {
 800243e:	b580      	push	{r7, lr}
 8002440:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN EXTI0_IRQn 0 */

    /* USER CODE END EXTI0_IRQn 0 */
    HAL_GPIO_EXTI_IRQHandler(KEY_WK_Pin);
 8002442:	2001      	movs	r0, #1
 8002444:	f000 fe7a 	bl	800313c <HAL_GPIO_EXTI_IRQHandler>
    /* USER CODE BEGIN EXTI0_IRQn 1 */

    /* USER CODE END EXTI0_IRQn 1 */
}
 8002448:	bf00      	nop
 800244a:	bd80      	pop	{r7, pc}

0800244c <EXTI9_5_IRQHandler>:

/**
 * @brief This function handles EXTI line[9:5] interrupts.
 */
void EXTI9_5_IRQHandler(void) {
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN EXTI9_5_IRQn 0 */

    /* USER CODE END EXTI9_5_IRQn 0 */
    HAL_GPIO_EXTI_IRQHandler(KEY0_Pin);
 8002450:	2020      	movs	r0, #32
 8002452:	f000 fe73 	bl	800313c <HAL_GPIO_EXTI_IRQHandler>
    /* USER CODE BEGIN EXTI9_5_IRQn 1 */

    /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM2_IRQn 0 */

    /* USER CODE END TIM2_IRQn 0 */
    HAL_TIM_IRQHandler(&htim2);
 8002460:	4802      	ldr	r0, [pc, #8]	; (800246c <TIM2_IRQHandler+0x10>)
 8002462:	f001 fbc3 	bl	8003bec <HAL_TIM_IRQHandler>
    /* USER CODE BEGIN TIM2_IRQn 1 */

    /* USER CODE END TIM2_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000090 	.word	0x20000090

08002470 <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void) {
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM3_IRQn 0 */

    /* USER CODE END TIM3_IRQn 0 */
    HAL_TIM_IRQHandler(&htim3);
 8002474:	4802      	ldr	r0, [pc, #8]	; (8002480 <TIM3_IRQHandler+0x10>)
 8002476:	f001 fbb9 	bl	8003bec <HAL_TIM_IRQHandler>
    /* USER CODE BEGIN TIM3_IRQn 1 */

    /* USER CODE END TIM3_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	200000d8 	.word	0x200000d8

08002484 <TIM4_IRQHandler>:

/**
 * @brief This function handles TIM4 global interrupt.
 */
void TIM4_IRQHandler(void) {
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM4_IRQn 0 */

    /* USER CODE END TIM4_IRQn 0 */
    HAL_TIM_IRQHandler(&htim4);
 8002488:	4802      	ldr	r0, [pc, #8]	; (8002494 <TIM4_IRQHandler+0x10>)
 800248a:	f001 fbaf 	bl	8003bec <HAL_TIM_IRQHandler>
    /* USER CODE BEGIN TIM4_IRQn 1 */

    /* USER CODE END TIM4_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20000120 	.word	0x20000120

08002498 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void) {
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART1_IRQn 0 */

    /* USER CODE END USART1_IRQn 0 */
    HAL_UART_IRQHandler(&huart1);
 800249c:	4804      	ldr	r0, [pc, #16]	; (80024b0 <USART1_IRQHandler+0x18>)
 800249e:	f002 f81f 	bl	80044e0 <HAL_UART_IRQHandler>
    /* USER CODE BEGIN USART1_IRQn 1 */
    HAL_UART_Receive_IT(&huart1, (uint8_t *)rxBuffer, 1);
 80024a2:	2201      	movs	r2, #1
 80024a4:	4903      	ldr	r1, [pc, #12]	; (80024b4 <USART1_IRQHandler+0x1c>)
 80024a6:	4802      	ldr	r0, [pc, #8]	; (80024b0 <USART1_IRQHandler+0x18>)
 80024a8:	f001 fff5 	bl	8004496 <HAL_UART_Receive_IT>
    /* USER CODE END USART1_IRQn 1 */
}
 80024ac:	bf00      	nop
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	20000178 	.word	0x20000178
 80024b4:	200001c0 	.word	0x200001c0

080024b8 <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void) {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN EXTI15_10_IRQn 0 */

    /* USER CODE END EXTI15_10_IRQn 0 */
    HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 80024bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80024c0:	f000 fe3c 	bl	800313c <HAL_GPIO_EXTI_IRQHandler>
    /* USER CODE BEGIN EXTI15_10_IRQn 1 */

    /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024c4:	bf00      	nop
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == KEY0_Pin || GPIO_Pin == KEY1_Pin) {
 80024d2:	88fb      	ldrh	r3, [r7, #6]
 80024d4:	2b20      	cmp	r3, #32
 80024d6:	d003      	beq.n	80024e0 <HAL_GPIO_EXTI_Callback+0x18>
 80024d8:	88fb      	ldrh	r3, [r7, #6]
 80024da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024de:	d10a      	bne.n	80024f6 <HAL_GPIO_EXTI_Callback+0x2e>
        current = GPIO_Pin == KEY0_Pin ? KEY0 : KEY1;
 80024e0:	88fb      	ldrh	r3, [r7, #6]
 80024e2:	2b20      	cmp	r3, #32
 80024e4:	d101      	bne.n	80024ea <HAL_GPIO_EXTI_Callback+0x22>
 80024e6:	2200      	movs	r2, #0
 80024e8:	e000      	b.n	80024ec <HAL_GPIO_EXTI_Callback+0x24>
 80024ea:	2202      	movs	r2, #2
 80024ec:	4b04      	ldr	r3, [pc, #16]	; (8002500 <HAL_GPIO_EXTI_Callback+0x38>)
 80024ee:	701a      	strb	r2, [r3, #0]
        HAL_TIM_Base_Start_IT(&htim3);
 80024f0:	4804      	ldr	r0, [pc, #16]	; (8002504 <HAL_GPIO_EXTI_Callback+0x3c>)
 80024f2:	f001 faed 	bl	8003ad0 <HAL_TIM_Base_Start_IT>
    }
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000600 	.word	0x20000600
 8002504:	200000d8 	.word	0x200000d8

08002508 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a15      	ldr	r2, [pc, #84]	; (800256c <HAL_UART_RxCpltCallback+0x64>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d124      	bne.n	8002564 <HAL_UART_RxCpltCallback+0x5c>
        static unsigned char uRx_Data[1024] = {0};
        static unsigned char uLength = 0;
        uart_print("Received: \r\n");
 800251a:	4815      	ldr	r0, [pc, #84]	; (8002570 <HAL_UART_RxCpltCallback+0x68>)
 800251c:	f000 f95c 	bl	80027d8 <uart_print>
        if (rxBuffer[0] == '\n') {
 8002520:	4b14      	ldr	r3, [pc, #80]	; (8002574 <HAL_UART_RxCpltCallback+0x6c>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b0a      	cmp	r3, #10
 8002526:	d110      	bne.n	800254a <HAL_UART_RxCpltCallback+0x42>
            uLength = 0;
 8002528:	4b13      	ldr	r3, [pc, #76]	; (8002578 <HAL_UART_RxCpltCallback+0x70>)
 800252a:	2200      	movs	r2, #0
 800252c:	701a      	strb	r2, [r3, #0]
            memcpy(Rx_Data, uRx_Data,sizeof(Rx_Data));
 800252e:	4a13      	ldr	r2, [pc, #76]	; (800257c <HAL_UART_RxCpltCallback+0x74>)
 8002530:	4b13      	ldr	r3, [pc, #76]	; (8002580 <HAL_UART_RxCpltCallback+0x78>)
 8002532:	4610      	mov	r0, r2
 8002534:	4619      	mov	r1, r3
 8002536:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800253a:	461a      	mov	r2, r3
 800253c:	f003 f943 	bl	80057c6 <memcpy>
            game.answer_question((char *) Rx_Data);
 8002540:	490e      	ldr	r1, [pc, #56]	; (800257c <HAL_UART_RxCpltCallback+0x74>)
 8002542:	4810      	ldr	r0, [pc, #64]	; (8002584 <HAL_UART_RxCpltCallback+0x7c>)
 8002544:	f7fe f9d8 	bl	80008f8 <_ZN4Game15answer_questionEPKc>
        } else {
            uRx_Data[uLength] = rxBuffer[0];
            uLength++;
        }
    }
}
 8002548:	e00c      	b.n	8002564 <HAL_UART_RxCpltCallback+0x5c>
            uRx_Data[uLength] = rxBuffer[0];
 800254a:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <HAL_UART_RxCpltCallback+0x70>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	461a      	mov	r2, r3
 8002550:	4b08      	ldr	r3, [pc, #32]	; (8002574 <HAL_UART_RxCpltCallback+0x6c>)
 8002552:	7819      	ldrb	r1, [r3, #0]
 8002554:	4b0a      	ldr	r3, [pc, #40]	; (8002580 <HAL_UART_RxCpltCallback+0x78>)
 8002556:	5499      	strb	r1, [r3, r2]
            uLength++;
 8002558:	4b07      	ldr	r3, [pc, #28]	; (8002578 <HAL_UART_RxCpltCallback+0x70>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	3301      	adds	r3, #1
 800255e:	b2da      	uxtb	r2, r3
 8002560:	4b05      	ldr	r3, [pc, #20]	; (8002578 <HAL_UART_RxCpltCallback+0x70>)
 8002562:	701a      	strb	r2, [r3, #0]
}
 8002564:	bf00      	nop
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40013800 	.word	0x40013800
 8002570:	0800666c 	.word	0x0800666c
 8002574:	200001c0 	.word	0x200001c0
 8002578:	20000a04 	.word	0x20000a04
 800257c:	200001d4 	.word	0x200001d4
 8002580:	20000604 	.word	0x20000604
 8002584:	20000168 	.word	0x20000168

08002588 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
    if (htim == (&htim2)) {
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a23      	ldr	r2, [pc, #140]	; (8002620 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d102      	bne.n	800259e <HAL_TIM_PeriodElapsedCallback+0x16>
        // LED tick
        leddev.tick();
 8002598:	4822      	ldr	r0, [pc, #136]	; (8002624 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800259a:	f7fe fb8d 	bl	8000cb8 <_ZN3LED4tickEv>
    }
    if (htim == (&htim3)) {
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a21      	ldr	r2, [pc, #132]	; (8002628 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d12d      	bne.n	8002602 <HAL_TIM_PeriodElapsedCallback+0x7a>
        HAL_TIM_Base_Stop_IT(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f001 faf2 	bl	8003b90 <HAL_TIM_Base_Stop_IT>
        switch (current) {
 80025ac:	4b1f      	ldr	r3, [pc, #124]	; (800262c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d002      	beq.n	80025ba <HAL_TIM_PeriodElapsedCallback+0x32>
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d010      	beq.n	80025da <HAL_TIM_PeriodElapsedCallback+0x52>
                    break;
                }
            }
            break;
            default:
                break;
 80025b8:	e023      	b.n	8002602 <HAL_TIM_PeriodElapsedCallback+0x7a>
                if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) ==
 80025ba:	2120      	movs	r1, #32
 80025bc:	481c      	ldr	r0, [pc, #112]	; (8002630 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80025be:	f000 fd8d 	bl	80030dc <HAL_GPIO_ReadPin>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	bf0c      	ite	eq
 80025c8:	2301      	moveq	r3, #1
 80025ca:	2300      	movne	r3, #0
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d014      	beq.n	80025fc <HAL_TIM_PeriodElapsedCallback+0x74>
                    uart_print("KEY0 pressed\r\n");
 80025d2:	4818      	ldr	r0, [pc, #96]	; (8002634 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80025d4:	f000 f900 	bl	80027d8 <uart_print>
                break;
 80025d8:	e010      	b.n	80025fc <HAL_TIM_PeriodElapsedCallback+0x74>
                if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == RESET) {
 80025da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025de:	4816      	ldr	r0, [pc, #88]	; (8002638 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80025e0:	f000 fd7c 	bl	80030dc <HAL_GPIO_ReadPin>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	bf0c      	ite	eq
 80025ea:	2301      	moveq	r3, #1
 80025ec:	2300      	movne	r3, #0
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d005      	beq.n	8002600 <HAL_TIM_PeriodElapsedCallback+0x78>
                    uart_print("KEY1 pressed\r\n");
 80025f4:	4811      	ldr	r0, [pc, #68]	; (800263c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80025f6:	f000 f8ef 	bl	80027d8 <uart_print>
                    break;
 80025fa:	e002      	b.n	8002602 <HAL_TIM_PeriodElapsedCallback+0x7a>
                break;
 80025fc:	bf00      	nop
 80025fe:	e000      	b.n	8002602 <HAL_TIM_PeriodElapsedCallback+0x7a>
            break;
 8002600:	bf00      	nop
        }
    }

    if (htim == (&htim4)) {
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a0e      	ldr	r2, [pc, #56]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d105      	bne.n	8002616 <HAL_TIM_PeriodElapsedCallback+0x8e>
        game.tick();
 800260a:	480e      	ldr	r0, [pc, #56]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800260c:	f7fe f884 	bl	8000718 <_ZN4Game4tickEv>
        HAL_IWDG_Refresh(&hiwdg);
 8002610:	480d      	ldr	r0, [pc, #52]	; (8002648 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002612:	f000 fded 	bl	80031f0 <HAL_IWDG_Refresh>
    }
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000090 	.word	0x20000090
 8002624:	200005d4 	.word	0x200005d4
 8002628:	200000d8 	.word	0x200000d8
 800262c:	20000600 	.word	0x20000600
 8002630:	40011000 	.word	0x40011000
 8002634:	0800667c 	.word	0x0800667c
 8002638:	40010800 	.word	0x40010800
 800263c:	0800668c 	.word	0x0800668c
 8002640:	20000120 	.word	0x20000120
 8002644:	20000168 	.word	0x20000168
 8002648:	20000084 	.word	0x20000084

0800264c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  return 1;
 8002650:	2301      	movs	r3, #1
}
 8002652:	4618      	mov	r0, r3
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr

0800265a <_kill>:

int _kill(int pid, int sig)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002664:	f003 f882 	bl	800576c <__errno>
 8002668:	4603      	mov	r3, r0
 800266a:	2216      	movs	r2, #22
 800266c:	601a      	str	r2, [r3, #0]
  return -1;
 800266e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <_exit>:

void _exit (int status)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b082      	sub	sp, #8
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002682:	f04f 31ff 	mov.w	r1, #4294967295
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7ff ffe7 	bl	800265a <_kill>
  while (1) {}    /* Make sure we hang here */
 800268c:	e7fe      	b.n	800268c <_exit+0x12>

0800268e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b086      	sub	sp, #24
 8002692:	af00      	add	r7, sp, #0
 8002694:	60f8      	str	r0, [r7, #12]
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
 800269e:	e00a      	b.n	80026b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026a0:	f3af 8000 	nop.w
 80026a4:	4601      	mov	r1, r0
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	60ba      	str	r2, [r7, #8]
 80026ac:	b2ca      	uxtb	r2, r1
 80026ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	3301      	adds	r3, #1
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	dbf0      	blt.n	80026a0 <_read+0x12>
  }

  return len;
 80026be:	687b      	ldr	r3, [r7, #4]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d4:	2300      	movs	r3, #0
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	e009      	b.n	80026ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	60ba      	str	r2, [r7, #8]
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	3301      	adds	r3, #1
 80026ec:	617b      	str	r3, [r7, #20]
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	dbf1      	blt.n	80026da <_write+0x12>
  }
  return len;
 80026f6:	687b      	ldr	r3, [r7, #4]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <_close>:

int _close(int file)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002708:	f04f 33ff 	mov.w	r3, #4294967295
}
 800270c:	4618      	mov	r0, r3
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	bc80      	pop	{r7}
 8002714:	4770      	bx	lr

08002716 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
 800271e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002726:	605a      	str	r2, [r3, #4]
  return 0;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr

08002734 <_isatty>:

int _isatty(int file)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800273c:	2301      	movs	r3, #1
}
 800273e:	4618      	mov	r0, r3
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr

08002748 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr

08002760 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002768:	4a14      	ldr	r2, [pc, #80]	; (80027bc <_sbrk+0x5c>)
 800276a:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <_sbrk+0x60>)
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002774:	4b13      	ldr	r3, [pc, #76]	; (80027c4 <_sbrk+0x64>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d102      	bne.n	8002782 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800277c:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <_sbrk+0x64>)
 800277e:	4a12      	ldr	r2, [pc, #72]	; (80027c8 <_sbrk+0x68>)
 8002780:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002782:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <_sbrk+0x64>)
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4413      	add	r3, r2
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	429a      	cmp	r2, r3
 800278e:	d207      	bcs.n	80027a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002790:	f002 ffec 	bl	800576c <__errno>
 8002794:	4603      	mov	r3, r0
 8002796:	220c      	movs	r2, #12
 8002798:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800279a:	f04f 33ff 	mov.w	r3, #4294967295
 800279e:	e009      	b.n	80027b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027a0:	4b08      	ldr	r3, [pc, #32]	; (80027c4 <_sbrk+0x64>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027a6:	4b07      	ldr	r3, [pc, #28]	; (80027c4 <_sbrk+0x64>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4413      	add	r3, r2
 80027ae:	4a05      	ldr	r2, [pc, #20]	; (80027c4 <_sbrk+0x64>)
 80027b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027b2:	68fb      	ldr	r3, [r7, #12]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	2000c000 	.word	0x2000c000
 80027c0:	00000400 	.word	0x00000400
 80027c4:	20000a08 	.word	0x20000a08
 80027c8:	20000b60 	.word	0x20000b60

080027cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr

080027d8 <uart_print>:
#include "utils.h"
#include <sstream>
#include "string.h"

extern UART_HandleTypeDef huart1;
void uart_print(const char *str) {
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen(str), 0xFFFF);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f7fd fd21 	bl	8000228 <strlen>
 80027e6:	4603      	mov	r3, r0
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	4803      	ldr	r0, [pc, #12]	; (8002800 <uart_print+0x28>)
 80027f2:	f001 fdcd 	bl	8004390 <HAL_UART_Transmit>
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20000178 	.word	0x20000178

08002804 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002804:	f7ff ffe2 	bl	80027cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002808:	480b      	ldr	r0, [pc, #44]	; (8002838 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800280a:	490c      	ldr	r1, [pc, #48]	; (800283c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800280c:	4a0c      	ldr	r2, [pc, #48]	; (8002840 <LoopFillZerobss+0x16>)
  movs r3, #0
 800280e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002810:	e002      	b.n	8002818 <LoopCopyDataInit>

08002812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002816:	3304      	adds	r3, #4

08002818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800281a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800281c:	d3f9      	bcc.n	8002812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800281e:	4a09      	ldr	r2, [pc, #36]	; (8002844 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002820:	4c09      	ldr	r4, [pc, #36]	; (8002848 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002824:	e001      	b.n	800282a <LoopFillZerobss>

08002826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002828:	3204      	adds	r2, #4

0800282a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800282a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800282c:	d3fb      	bcc.n	8002826 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800282e:	f002 ffa3 	bl	8005778 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002832:	f7ff f971 	bl	8001b18 <main>
  bx lr
 8002836:	4770      	bx	lr
  ldr r0, =_sdata
 8002838:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800283c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002840:	080068b8 	.word	0x080068b8
  ldr r2, =_sbss
 8002844:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002848:	20000b60 	.word	0x20000b60

0800284c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800284c:	e7fe      	b.n	800284c <ADC1_2_IRQHandler>
	...

08002850 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002854:	4b08      	ldr	r3, [pc, #32]	; (8002878 <HAL_Init+0x28>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a07      	ldr	r2, [pc, #28]	; (8002878 <HAL_Init+0x28>)
 800285a:	f043 0310 	orr.w	r3, r3, #16
 800285e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002860:	2003      	movs	r0, #3
 8002862:	f000 f923 	bl	8002aac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002866:	2003      	movs	r0, #3
 8002868:	f000 f808 	bl	800287c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800286c:	f7ff fcdc 	bl	8002228 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40022000 	.word	0x40022000

0800287c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002884:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <HAL_InitTick+0x54>)
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <HAL_InitTick+0x58>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	4619      	mov	r1, r3
 800288e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002892:	fbb3 f3f1 	udiv	r3, r3, r1
 8002896:	fbb2 f3f3 	udiv	r3, r2, r3
 800289a:	4618      	mov	r0, r3
 800289c:	f000 f93b 	bl	8002b16 <HAL_SYSTICK_Config>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e00e      	b.n	80028c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b0f      	cmp	r3, #15
 80028ae:	d80a      	bhi.n	80028c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028b0:	2200      	movs	r2, #0
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	f04f 30ff 	mov.w	r0, #4294967295
 80028b8:	f000 f903 	bl	8002ac2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028bc:	4a06      	ldr	r2, [pc, #24]	; (80028d8 <HAL_InitTick+0x5c>)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	e000      	b.n	80028c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	20000000 	.word	0x20000000
 80028d4:	20000008 	.word	0x20000008
 80028d8:	20000004 	.word	0x20000004

080028dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <HAL_IncTick+0x1c>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	461a      	mov	r2, r3
 80028e6:	4b05      	ldr	r3, [pc, #20]	; (80028fc <HAL_IncTick+0x20>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4413      	add	r3, r2
 80028ec:	4a03      	ldr	r2, [pc, #12]	; (80028fc <HAL_IncTick+0x20>)
 80028ee:	6013      	str	r3, [r2, #0]
}
 80028f0:	bf00      	nop
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr
 80028f8:	20000008 	.word	0x20000008
 80028fc:	20000a0c 	.word	0x20000a0c

08002900 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return uwTick;
 8002904:	4b02      	ldr	r3, [pc, #8]	; (8002910 <HAL_GetTick+0x10>)
 8002906:	681b      	ldr	r3, [r3, #0]
}
 8002908:	4618      	mov	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr
 8002910:	20000a0c 	.word	0x20000a0c

08002914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002924:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <__NVIC_SetPriorityGrouping+0x44>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002930:	4013      	ands	r3, r2
 8002932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800293c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002946:	4a04      	ldr	r2, [pc, #16]	; (8002958 <__NVIC_SetPriorityGrouping+0x44>)
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	60d3      	str	r3, [r2, #12]
}
 800294c:	bf00      	nop
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	e000ed00 	.word	0xe000ed00

0800295c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002960:	4b04      	ldr	r3, [pc, #16]	; (8002974 <__NVIC_GetPriorityGrouping+0x18>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	0a1b      	lsrs	r3, r3, #8
 8002966:	f003 0307 	and.w	r3, r3, #7
}
 800296a:	4618      	mov	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	e000ed00 	.word	0xe000ed00

08002978 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002986:	2b00      	cmp	r3, #0
 8002988:	db0b      	blt.n	80029a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	f003 021f 	and.w	r2, r3, #31
 8002990:	4906      	ldr	r1, [pc, #24]	; (80029ac <__NVIC_EnableIRQ+0x34>)
 8002992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002996:	095b      	lsrs	r3, r3, #5
 8002998:	2001      	movs	r0, #1
 800299a:	fa00 f202 	lsl.w	r2, r0, r2
 800299e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr
 80029ac:	e000e100 	.word	0xe000e100

080029b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	4603      	mov	r3, r0
 80029b8:	6039      	str	r1, [r7, #0]
 80029ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	db0a      	blt.n	80029da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	b2da      	uxtb	r2, r3
 80029c8:	490c      	ldr	r1, [pc, #48]	; (80029fc <__NVIC_SetPriority+0x4c>)
 80029ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ce:	0112      	lsls	r2, r2, #4
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	440b      	add	r3, r1
 80029d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029d8:	e00a      	b.n	80029f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	4908      	ldr	r1, [pc, #32]	; (8002a00 <__NVIC_SetPriority+0x50>)
 80029e0:	79fb      	ldrb	r3, [r7, #7]
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	3b04      	subs	r3, #4
 80029e8:	0112      	lsls	r2, r2, #4
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	440b      	add	r3, r1
 80029ee:	761a      	strb	r2, [r3, #24]
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	e000e100 	.word	0xe000e100
 8002a00:	e000ed00 	.word	0xe000ed00

08002a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b089      	sub	sp, #36	; 0x24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	f1c3 0307 	rsb	r3, r3, #7
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	bf28      	it	cs
 8002a22:	2304      	movcs	r3, #4
 8002a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	3304      	adds	r3, #4
 8002a2a:	2b06      	cmp	r3, #6
 8002a2c:	d902      	bls.n	8002a34 <NVIC_EncodePriority+0x30>
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	3b03      	subs	r3, #3
 8002a32:	e000      	b.n	8002a36 <NVIC_EncodePriority+0x32>
 8002a34:	2300      	movs	r3, #0
 8002a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a38:	f04f 32ff 	mov.w	r2, #4294967295
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	43da      	mvns	r2, r3
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	401a      	ands	r2, r3
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	fa01 f303 	lsl.w	r3, r1, r3
 8002a56:	43d9      	mvns	r1, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a5c:	4313      	orrs	r3, r2
         );
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3724      	adds	r7, #36	; 0x24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr

08002a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a78:	d301      	bcc.n	8002a7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e00f      	b.n	8002a9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a7e:	4a0a      	ldr	r2, [pc, #40]	; (8002aa8 <SysTick_Config+0x40>)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a86:	210f      	movs	r1, #15
 8002a88:	f04f 30ff 	mov.w	r0, #4294967295
 8002a8c:	f7ff ff90 	bl	80029b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <SysTick_Config+0x40>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a96:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <SysTick_Config+0x40>)
 8002a98:	2207      	movs	r2, #7
 8002a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	e000e010 	.word	0xe000e010

08002aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7ff ff2d 	bl	8002914 <__NVIC_SetPriorityGrouping>
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b086      	sub	sp, #24
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	4603      	mov	r3, r0
 8002aca:	60b9      	str	r1, [r7, #8]
 8002acc:	607a      	str	r2, [r7, #4]
 8002ace:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ad4:	f7ff ff42 	bl	800295c <__NVIC_GetPriorityGrouping>
 8002ad8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	68b9      	ldr	r1, [r7, #8]
 8002ade:	6978      	ldr	r0, [r7, #20]
 8002ae0:	f7ff ff90 	bl	8002a04 <NVIC_EncodePriority>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aea:	4611      	mov	r1, r2
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff ff5f 	bl	80029b0 <__NVIC_SetPriority>
}
 8002af2:	bf00      	nop
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	4603      	mov	r3, r0
 8002b02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff ff35 	bl	8002978 <__NVIC_EnableIRQ>
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7ff ffa2 	bl	8002a68 <SysTick_Config>
 8002b24:	4603      	mov	r3, r0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b085      	sub	sp, #20
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d008      	beq.n	8002b58 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2204      	movs	r2, #4
 8002b4a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e020      	b.n	8002b9a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 020e 	bic.w	r2, r2, #14
 8002b66:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0201 	bic.w	r2, r2, #1
 8002b76:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b80:	2101      	movs	r1, #1
 8002b82:	fa01 f202 	lsl.w	r2, r1, r2
 8002b86:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bac:	2300      	movs	r3, #0
 8002bae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d005      	beq.n	8002bc8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2204      	movs	r2, #4
 8002bc0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	73fb      	strb	r3, [r7, #15]
 8002bc6:	e0d6      	b.n	8002d76 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 020e 	bic.w	r2, r2, #14
 8002bd6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0201 	bic.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	4b64      	ldr	r3, [pc, #400]	; (8002d80 <HAL_DMA_Abort_IT+0x1dc>)
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d958      	bls.n	8002ca6 <HAL_DMA_Abort_IT+0x102>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a62      	ldr	r2, [pc, #392]	; (8002d84 <HAL_DMA_Abort_IT+0x1e0>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d04f      	beq.n	8002c9e <HAL_DMA_Abort_IT+0xfa>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a61      	ldr	r2, [pc, #388]	; (8002d88 <HAL_DMA_Abort_IT+0x1e4>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d048      	beq.n	8002c9a <HAL_DMA_Abort_IT+0xf6>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a5f      	ldr	r2, [pc, #380]	; (8002d8c <HAL_DMA_Abort_IT+0x1e8>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d040      	beq.n	8002c94 <HAL_DMA_Abort_IT+0xf0>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a5e      	ldr	r2, [pc, #376]	; (8002d90 <HAL_DMA_Abort_IT+0x1ec>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d038      	beq.n	8002c8e <HAL_DMA_Abort_IT+0xea>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a5c      	ldr	r2, [pc, #368]	; (8002d94 <HAL_DMA_Abort_IT+0x1f0>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d030      	beq.n	8002c88 <HAL_DMA_Abort_IT+0xe4>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a5b      	ldr	r2, [pc, #364]	; (8002d98 <HAL_DMA_Abort_IT+0x1f4>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d028      	beq.n	8002c82 <HAL_DMA_Abort_IT+0xde>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a52      	ldr	r2, [pc, #328]	; (8002d80 <HAL_DMA_Abort_IT+0x1dc>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d020      	beq.n	8002c7c <HAL_DMA_Abort_IT+0xd8>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a57      	ldr	r2, [pc, #348]	; (8002d9c <HAL_DMA_Abort_IT+0x1f8>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d019      	beq.n	8002c78 <HAL_DMA_Abort_IT+0xd4>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a55      	ldr	r2, [pc, #340]	; (8002da0 <HAL_DMA_Abort_IT+0x1fc>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d012      	beq.n	8002c74 <HAL_DMA_Abort_IT+0xd0>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a54      	ldr	r2, [pc, #336]	; (8002da4 <HAL_DMA_Abort_IT+0x200>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d00a      	beq.n	8002c6e <HAL_DMA_Abort_IT+0xca>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a52      	ldr	r2, [pc, #328]	; (8002da8 <HAL_DMA_Abort_IT+0x204>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d102      	bne.n	8002c68 <HAL_DMA_Abort_IT+0xc4>
 8002c62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c66:	e01b      	b.n	8002ca0 <HAL_DMA_Abort_IT+0xfc>
 8002c68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c6c:	e018      	b.n	8002ca0 <HAL_DMA_Abort_IT+0xfc>
 8002c6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c72:	e015      	b.n	8002ca0 <HAL_DMA_Abort_IT+0xfc>
 8002c74:	2310      	movs	r3, #16
 8002c76:	e013      	b.n	8002ca0 <HAL_DMA_Abort_IT+0xfc>
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e011      	b.n	8002ca0 <HAL_DMA_Abort_IT+0xfc>
 8002c7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c80:	e00e      	b.n	8002ca0 <HAL_DMA_Abort_IT+0xfc>
 8002c82:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c86:	e00b      	b.n	8002ca0 <HAL_DMA_Abort_IT+0xfc>
 8002c88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c8c:	e008      	b.n	8002ca0 <HAL_DMA_Abort_IT+0xfc>
 8002c8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c92:	e005      	b.n	8002ca0 <HAL_DMA_Abort_IT+0xfc>
 8002c94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c98:	e002      	b.n	8002ca0 <HAL_DMA_Abort_IT+0xfc>
 8002c9a:	2310      	movs	r3, #16
 8002c9c:	e000      	b.n	8002ca0 <HAL_DMA_Abort_IT+0xfc>
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	4a42      	ldr	r2, [pc, #264]	; (8002dac <HAL_DMA_Abort_IT+0x208>)
 8002ca2:	6053      	str	r3, [r2, #4]
 8002ca4:	e057      	b.n	8002d56 <HAL_DMA_Abort_IT+0x1b2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a36      	ldr	r2, [pc, #216]	; (8002d84 <HAL_DMA_Abort_IT+0x1e0>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d04f      	beq.n	8002d50 <HAL_DMA_Abort_IT+0x1ac>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a34      	ldr	r2, [pc, #208]	; (8002d88 <HAL_DMA_Abort_IT+0x1e4>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d048      	beq.n	8002d4c <HAL_DMA_Abort_IT+0x1a8>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a33      	ldr	r2, [pc, #204]	; (8002d8c <HAL_DMA_Abort_IT+0x1e8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d040      	beq.n	8002d46 <HAL_DMA_Abort_IT+0x1a2>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a31      	ldr	r2, [pc, #196]	; (8002d90 <HAL_DMA_Abort_IT+0x1ec>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d038      	beq.n	8002d40 <HAL_DMA_Abort_IT+0x19c>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a30      	ldr	r2, [pc, #192]	; (8002d94 <HAL_DMA_Abort_IT+0x1f0>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d030      	beq.n	8002d3a <HAL_DMA_Abort_IT+0x196>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a2e      	ldr	r2, [pc, #184]	; (8002d98 <HAL_DMA_Abort_IT+0x1f4>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d028      	beq.n	8002d34 <HAL_DMA_Abort_IT+0x190>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a26      	ldr	r2, [pc, #152]	; (8002d80 <HAL_DMA_Abort_IT+0x1dc>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d020      	beq.n	8002d2e <HAL_DMA_Abort_IT+0x18a>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a2a      	ldr	r2, [pc, #168]	; (8002d9c <HAL_DMA_Abort_IT+0x1f8>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d019      	beq.n	8002d2a <HAL_DMA_Abort_IT+0x186>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a29      	ldr	r2, [pc, #164]	; (8002da0 <HAL_DMA_Abort_IT+0x1fc>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d012      	beq.n	8002d26 <HAL_DMA_Abort_IT+0x182>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a27      	ldr	r2, [pc, #156]	; (8002da4 <HAL_DMA_Abort_IT+0x200>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d00a      	beq.n	8002d20 <HAL_DMA_Abort_IT+0x17c>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a26      	ldr	r2, [pc, #152]	; (8002da8 <HAL_DMA_Abort_IT+0x204>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d102      	bne.n	8002d1a <HAL_DMA_Abort_IT+0x176>
 8002d14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d18:	e01b      	b.n	8002d52 <HAL_DMA_Abort_IT+0x1ae>
 8002d1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d1e:	e018      	b.n	8002d52 <HAL_DMA_Abort_IT+0x1ae>
 8002d20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d24:	e015      	b.n	8002d52 <HAL_DMA_Abort_IT+0x1ae>
 8002d26:	2310      	movs	r3, #16
 8002d28:	e013      	b.n	8002d52 <HAL_DMA_Abort_IT+0x1ae>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e011      	b.n	8002d52 <HAL_DMA_Abort_IT+0x1ae>
 8002d2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d32:	e00e      	b.n	8002d52 <HAL_DMA_Abort_IT+0x1ae>
 8002d34:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d38:	e00b      	b.n	8002d52 <HAL_DMA_Abort_IT+0x1ae>
 8002d3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d3e:	e008      	b.n	8002d52 <HAL_DMA_Abort_IT+0x1ae>
 8002d40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d44:	e005      	b.n	8002d52 <HAL_DMA_Abort_IT+0x1ae>
 8002d46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d4a:	e002      	b.n	8002d52 <HAL_DMA_Abort_IT+0x1ae>
 8002d4c:	2310      	movs	r3, #16
 8002d4e:	e000      	b.n	8002d52 <HAL_DMA_Abort_IT+0x1ae>
 8002d50:	2301      	movs	r3, #1
 8002d52:	4a17      	ldr	r2, [pc, #92]	; (8002db0 <HAL_DMA_Abort_IT+0x20c>)
 8002d54:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	4798      	blx	r3
    } 
  }
  return status;
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40020080 	.word	0x40020080
 8002d84:	40020008 	.word	0x40020008
 8002d88:	4002001c 	.word	0x4002001c
 8002d8c:	40020030 	.word	0x40020030
 8002d90:	40020044 	.word	0x40020044
 8002d94:	40020058 	.word	0x40020058
 8002d98:	4002006c 	.word	0x4002006c
 8002d9c:	40020408 	.word	0x40020408
 8002da0:	4002041c 	.word	0x4002041c
 8002da4:	40020430 	.word	0x40020430
 8002da8:	40020444 	.word	0x40020444
 8002dac:	40020400 	.word	0x40020400
 8002db0:	40020000 	.word	0x40020000

08002db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b08b      	sub	sp, #44	; 0x2c
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dc6:	e179      	b.n	80030bc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002dc8:	2201      	movs	r2, #1
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	69fa      	ldr	r2, [r7, #28]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	f040 8168 	bne.w	80030b6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	4a96      	ldr	r2, [pc, #600]	; (8003044 <HAL_GPIO_Init+0x290>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d05e      	beq.n	8002eae <HAL_GPIO_Init+0xfa>
 8002df0:	4a94      	ldr	r2, [pc, #592]	; (8003044 <HAL_GPIO_Init+0x290>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d875      	bhi.n	8002ee2 <HAL_GPIO_Init+0x12e>
 8002df6:	4a94      	ldr	r2, [pc, #592]	; (8003048 <HAL_GPIO_Init+0x294>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d058      	beq.n	8002eae <HAL_GPIO_Init+0xfa>
 8002dfc:	4a92      	ldr	r2, [pc, #584]	; (8003048 <HAL_GPIO_Init+0x294>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d86f      	bhi.n	8002ee2 <HAL_GPIO_Init+0x12e>
 8002e02:	4a92      	ldr	r2, [pc, #584]	; (800304c <HAL_GPIO_Init+0x298>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d052      	beq.n	8002eae <HAL_GPIO_Init+0xfa>
 8002e08:	4a90      	ldr	r2, [pc, #576]	; (800304c <HAL_GPIO_Init+0x298>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d869      	bhi.n	8002ee2 <HAL_GPIO_Init+0x12e>
 8002e0e:	4a90      	ldr	r2, [pc, #576]	; (8003050 <HAL_GPIO_Init+0x29c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d04c      	beq.n	8002eae <HAL_GPIO_Init+0xfa>
 8002e14:	4a8e      	ldr	r2, [pc, #568]	; (8003050 <HAL_GPIO_Init+0x29c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d863      	bhi.n	8002ee2 <HAL_GPIO_Init+0x12e>
 8002e1a:	4a8e      	ldr	r2, [pc, #568]	; (8003054 <HAL_GPIO_Init+0x2a0>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d046      	beq.n	8002eae <HAL_GPIO_Init+0xfa>
 8002e20:	4a8c      	ldr	r2, [pc, #560]	; (8003054 <HAL_GPIO_Init+0x2a0>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d85d      	bhi.n	8002ee2 <HAL_GPIO_Init+0x12e>
 8002e26:	2b12      	cmp	r3, #18
 8002e28:	d82a      	bhi.n	8002e80 <HAL_GPIO_Init+0xcc>
 8002e2a:	2b12      	cmp	r3, #18
 8002e2c:	d859      	bhi.n	8002ee2 <HAL_GPIO_Init+0x12e>
 8002e2e:	a201      	add	r2, pc, #4	; (adr r2, 8002e34 <HAL_GPIO_Init+0x80>)
 8002e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e34:	08002eaf 	.word	0x08002eaf
 8002e38:	08002e89 	.word	0x08002e89
 8002e3c:	08002e9b 	.word	0x08002e9b
 8002e40:	08002edd 	.word	0x08002edd
 8002e44:	08002ee3 	.word	0x08002ee3
 8002e48:	08002ee3 	.word	0x08002ee3
 8002e4c:	08002ee3 	.word	0x08002ee3
 8002e50:	08002ee3 	.word	0x08002ee3
 8002e54:	08002ee3 	.word	0x08002ee3
 8002e58:	08002ee3 	.word	0x08002ee3
 8002e5c:	08002ee3 	.word	0x08002ee3
 8002e60:	08002ee3 	.word	0x08002ee3
 8002e64:	08002ee3 	.word	0x08002ee3
 8002e68:	08002ee3 	.word	0x08002ee3
 8002e6c:	08002ee3 	.word	0x08002ee3
 8002e70:	08002ee3 	.word	0x08002ee3
 8002e74:	08002ee3 	.word	0x08002ee3
 8002e78:	08002e91 	.word	0x08002e91
 8002e7c:	08002ea5 	.word	0x08002ea5
 8002e80:	4a75      	ldr	r2, [pc, #468]	; (8003058 <HAL_GPIO_Init+0x2a4>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d013      	beq.n	8002eae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e86:	e02c      	b.n	8002ee2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	623b      	str	r3, [r7, #32]
          break;
 8002e8e:	e029      	b.n	8002ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	3304      	adds	r3, #4
 8002e96:	623b      	str	r3, [r7, #32]
          break;
 8002e98:	e024      	b.n	8002ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	3308      	adds	r3, #8
 8002ea0:	623b      	str	r3, [r7, #32]
          break;
 8002ea2:	e01f      	b.n	8002ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	330c      	adds	r3, #12
 8002eaa:	623b      	str	r3, [r7, #32]
          break;
 8002eac:	e01a      	b.n	8002ee4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d102      	bne.n	8002ebc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002eb6:	2304      	movs	r3, #4
 8002eb8:	623b      	str	r3, [r7, #32]
          break;
 8002eba:	e013      	b.n	8002ee4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d105      	bne.n	8002ed0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ec4:	2308      	movs	r3, #8
 8002ec6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69fa      	ldr	r2, [r7, #28]
 8002ecc:	611a      	str	r2, [r3, #16]
          break;
 8002ece:	e009      	b.n	8002ee4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ed0:	2308      	movs	r3, #8
 8002ed2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69fa      	ldr	r2, [r7, #28]
 8002ed8:	615a      	str	r2, [r3, #20]
          break;
 8002eda:	e003      	b.n	8002ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002edc:	2300      	movs	r3, #0
 8002ede:	623b      	str	r3, [r7, #32]
          break;
 8002ee0:	e000      	b.n	8002ee4 <HAL_GPIO_Init+0x130>
          break;
 8002ee2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	2bff      	cmp	r3, #255	; 0xff
 8002ee8:	d801      	bhi.n	8002eee <HAL_GPIO_Init+0x13a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	e001      	b.n	8002ef2 <HAL_GPIO_Init+0x13e>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	2bff      	cmp	r3, #255	; 0xff
 8002ef8:	d802      	bhi.n	8002f00 <HAL_GPIO_Init+0x14c>
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	e002      	b.n	8002f06 <HAL_GPIO_Init+0x152>
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	3b08      	subs	r3, #8
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	210f      	movs	r1, #15
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	fa01 f303 	lsl.w	r3, r1, r3
 8002f14:	43db      	mvns	r3, r3
 8002f16:	401a      	ands	r2, r3
 8002f18:	6a39      	ldr	r1, [r7, #32]
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f20:	431a      	orrs	r2, r3
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 80c1 	beq.w	80030b6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f34:	4b49      	ldr	r3, [pc, #292]	; (800305c <HAL_GPIO_Init+0x2a8>)
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	4a48      	ldr	r2, [pc, #288]	; (800305c <HAL_GPIO_Init+0x2a8>)
 8002f3a:	f043 0301 	orr.w	r3, r3, #1
 8002f3e:	6193      	str	r3, [r2, #24]
 8002f40:	4b46      	ldr	r3, [pc, #280]	; (800305c <HAL_GPIO_Init+0x2a8>)
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f4c:	4a44      	ldr	r2, [pc, #272]	; (8003060 <HAL_GPIO_Init+0x2ac>)
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	089b      	lsrs	r3, r3, #2
 8002f52:	3302      	adds	r3, #2
 8002f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	f003 0303 	and.w	r3, r3, #3
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	220f      	movs	r2, #15
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a3c      	ldr	r2, [pc, #240]	; (8003064 <HAL_GPIO_Init+0x2b0>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d01f      	beq.n	8002fb8 <HAL_GPIO_Init+0x204>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a3b      	ldr	r2, [pc, #236]	; (8003068 <HAL_GPIO_Init+0x2b4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d019      	beq.n	8002fb4 <HAL_GPIO_Init+0x200>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a3a      	ldr	r2, [pc, #232]	; (800306c <HAL_GPIO_Init+0x2b8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d013      	beq.n	8002fb0 <HAL_GPIO_Init+0x1fc>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a39      	ldr	r2, [pc, #228]	; (8003070 <HAL_GPIO_Init+0x2bc>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d00d      	beq.n	8002fac <HAL_GPIO_Init+0x1f8>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a38      	ldr	r2, [pc, #224]	; (8003074 <HAL_GPIO_Init+0x2c0>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d007      	beq.n	8002fa8 <HAL_GPIO_Init+0x1f4>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a37      	ldr	r2, [pc, #220]	; (8003078 <HAL_GPIO_Init+0x2c4>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d101      	bne.n	8002fa4 <HAL_GPIO_Init+0x1f0>
 8002fa0:	2305      	movs	r3, #5
 8002fa2:	e00a      	b.n	8002fba <HAL_GPIO_Init+0x206>
 8002fa4:	2306      	movs	r3, #6
 8002fa6:	e008      	b.n	8002fba <HAL_GPIO_Init+0x206>
 8002fa8:	2304      	movs	r3, #4
 8002faa:	e006      	b.n	8002fba <HAL_GPIO_Init+0x206>
 8002fac:	2303      	movs	r3, #3
 8002fae:	e004      	b.n	8002fba <HAL_GPIO_Init+0x206>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e002      	b.n	8002fba <HAL_GPIO_Init+0x206>
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <HAL_GPIO_Init+0x206>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fbc:	f002 0203 	and.w	r2, r2, #3
 8002fc0:	0092      	lsls	r2, r2, #2
 8002fc2:	4093      	lsls	r3, r2
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002fca:	4925      	ldr	r1, [pc, #148]	; (8003060 <HAL_GPIO_Init+0x2ac>)
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	089b      	lsrs	r3, r3, #2
 8002fd0:	3302      	adds	r3, #2
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d006      	beq.n	8002ff2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002fe4:	4b25      	ldr	r3, [pc, #148]	; (800307c <HAL_GPIO_Init+0x2c8>)
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	4924      	ldr	r1, [pc, #144]	; (800307c <HAL_GPIO_Init+0x2c8>)
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	608b      	str	r3, [r1, #8]
 8002ff0:	e006      	b.n	8003000 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ff2:	4b22      	ldr	r3, [pc, #136]	; (800307c <HAL_GPIO_Init+0x2c8>)
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	4920      	ldr	r1, [pc, #128]	; (800307c <HAL_GPIO_Init+0x2c8>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d006      	beq.n	800301a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800300c:	4b1b      	ldr	r3, [pc, #108]	; (800307c <HAL_GPIO_Init+0x2c8>)
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	491a      	ldr	r1, [pc, #104]	; (800307c <HAL_GPIO_Init+0x2c8>)
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	4313      	orrs	r3, r2
 8003016:	60cb      	str	r3, [r1, #12]
 8003018:	e006      	b.n	8003028 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800301a:	4b18      	ldr	r3, [pc, #96]	; (800307c <HAL_GPIO_Init+0x2c8>)
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	43db      	mvns	r3, r3
 8003022:	4916      	ldr	r1, [pc, #88]	; (800307c <HAL_GPIO_Init+0x2c8>)
 8003024:	4013      	ands	r3, r2
 8003026:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d025      	beq.n	8003080 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003034:	4b11      	ldr	r3, [pc, #68]	; (800307c <HAL_GPIO_Init+0x2c8>)
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	4910      	ldr	r1, [pc, #64]	; (800307c <HAL_GPIO_Init+0x2c8>)
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	4313      	orrs	r3, r2
 800303e:	604b      	str	r3, [r1, #4]
 8003040:	e025      	b.n	800308e <HAL_GPIO_Init+0x2da>
 8003042:	bf00      	nop
 8003044:	10320000 	.word	0x10320000
 8003048:	10310000 	.word	0x10310000
 800304c:	10220000 	.word	0x10220000
 8003050:	10210000 	.word	0x10210000
 8003054:	10120000 	.word	0x10120000
 8003058:	10110000 	.word	0x10110000
 800305c:	40021000 	.word	0x40021000
 8003060:	40010000 	.word	0x40010000
 8003064:	40010800 	.word	0x40010800
 8003068:	40010c00 	.word	0x40010c00
 800306c:	40011000 	.word	0x40011000
 8003070:	40011400 	.word	0x40011400
 8003074:	40011800 	.word	0x40011800
 8003078:	40011c00 	.word	0x40011c00
 800307c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003080:	4b15      	ldr	r3, [pc, #84]	; (80030d8 <HAL_GPIO_Init+0x324>)
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	43db      	mvns	r3, r3
 8003088:	4913      	ldr	r1, [pc, #76]	; (80030d8 <HAL_GPIO_Init+0x324>)
 800308a:	4013      	ands	r3, r2
 800308c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d006      	beq.n	80030a8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800309a:	4b0f      	ldr	r3, [pc, #60]	; (80030d8 <HAL_GPIO_Init+0x324>)
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	490e      	ldr	r1, [pc, #56]	; (80030d8 <HAL_GPIO_Init+0x324>)
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	600b      	str	r3, [r1, #0]
 80030a6:	e006      	b.n	80030b6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030a8:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <HAL_GPIO_Init+0x324>)
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	43db      	mvns	r3, r3
 80030b0:	4909      	ldr	r1, [pc, #36]	; (80030d8 <HAL_GPIO_Init+0x324>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	3301      	adds	r3, #1
 80030ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	fa22 f303 	lsr.w	r3, r2, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f47f ae7e 	bne.w	8002dc8 <HAL_GPIO_Init+0x14>
  }
}
 80030cc:	bf00      	nop
 80030ce:	bf00      	nop
 80030d0:	372c      	adds	r7, #44	; 0x2c
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bc80      	pop	{r7}
 80030d6:	4770      	bx	lr
 80030d8:	40010400 	.word	0x40010400

080030dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	887b      	ldrh	r3, [r7, #2]
 80030ee:	4013      	ands	r3, r2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d002      	beq.n	80030fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030f4:	2301      	movs	r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
 80030f8:	e001      	b.n	80030fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030fa:	2300      	movs	r3, #0
 80030fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003100:	4618      	mov	r0, r3
 8003102:	3714      	adds	r7, #20
 8003104:	46bd      	mov	sp, r7
 8003106:	bc80      	pop	{r7}
 8003108:	4770      	bx	lr

0800310a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
 8003112:	460b      	mov	r3, r1
 8003114:	807b      	strh	r3, [r7, #2]
 8003116:	4613      	mov	r3, r2
 8003118:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800311a:	787b      	ldrb	r3, [r7, #1]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003120:	887a      	ldrh	r2, [r7, #2]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003126:	e003      	b.n	8003130 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003128:	887b      	ldrh	r3, [r7, #2]
 800312a:	041a      	lsls	r2, r3, #16
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	611a      	str	r2, [r3, #16]
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr
	...

0800313c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003146:	4b08      	ldr	r3, [pc, #32]	; (8003168 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003148:	695a      	ldr	r2, [r3, #20]
 800314a:	88fb      	ldrh	r3, [r7, #6]
 800314c:	4013      	ands	r3, r2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d006      	beq.n	8003160 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003152:	4a05      	ldr	r2, [pc, #20]	; (8003168 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003154:	88fb      	ldrh	r3, [r7, #6]
 8003156:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003158:	88fb      	ldrh	r3, [r7, #6]
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff f9b4 	bl	80024c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003160:	bf00      	nop
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40010400 	.word	0x40010400

0800316c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e034      	b.n	80031e8 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003186:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f245 5255 	movw	r2, #21845	; 0x5555
 8003190:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6852      	ldr	r2, [r2, #4]
 800319a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6892      	ldr	r2, [r2, #8]
 80031a4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80031a6:	f7ff fbab 	bl	8002900 <HAL_GetTick>
 80031aa:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80031ac:	e00f      	b.n	80031ce <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80031ae:	f7ff fba7 	bl	8002900 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b27      	cmp	r3, #39	; 0x27
 80031ba:	d908      	bls.n	80031ce <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e00c      	b.n	80031e8 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f003 0303 	and.w	r3, r3, #3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1e8      	bne.n	80031ae <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80031e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003200:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	bc80      	pop	{r7}
 800320c:	4770      	bx	lr
	...

08003210 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e272      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 8087 	beq.w	800333e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003230:	4b92      	ldr	r3, [pc, #584]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 030c 	and.w	r3, r3, #12
 8003238:	2b04      	cmp	r3, #4
 800323a:	d00c      	beq.n	8003256 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800323c:	4b8f      	ldr	r3, [pc, #572]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f003 030c 	and.w	r3, r3, #12
 8003244:	2b08      	cmp	r3, #8
 8003246:	d112      	bne.n	800326e <HAL_RCC_OscConfig+0x5e>
 8003248:	4b8c      	ldr	r3, [pc, #560]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003254:	d10b      	bne.n	800326e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003256:	4b89      	ldr	r3, [pc, #548]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d06c      	beq.n	800333c <HAL_RCC_OscConfig+0x12c>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d168      	bne.n	800333c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e24c      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003276:	d106      	bne.n	8003286 <HAL_RCC_OscConfig+0x76>
 8003278:	4b80      	ldr	r3, [pc, #512]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a7f      	ldr	r2, [pc, #508]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 800327e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	e02e      	b.n	80032e4 <HAL_RCC_OscConfig+0xd4>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10c      	bne.n	80032a8 <HAL_RCC_OscConfig+0x98>
 800328e:	4b7b      	ldr	r3, [pc, #492]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a7a      	ldr	r2, [pc, #488]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	4b78      	ldr	r3, [pc, #480]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a77      	ldr	r2, [pc, #476]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032a4:	6013      	str	r3, [r2, #0]
 80032a6:	e01d      	b.n	80032e4 <HAL_RCC_OscConfig+0xd4>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032b0:	d10c      	bne.n	80032cc <HAL_RCC_OscConfig+0xbc>
 80032b2:	4b72      	ldr	r3, [pc, #456]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a71      	ldr	r2, [pc, #452]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	4b6f      	ldr	r3, [pc, #444]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a6e      	ldr	r2, [pc, #440]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	e00b      	b.n	80032e4 <HAL_RCC_OscConfig+0xd4>
 80032cc:	4b6b      	ldr	r3, [pc, #428]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a6a      	ldr	r2, [pc, #424]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032d6:	6013      	str	r3, [r2, #0]
 80032d8:	4b68      	ldr	r3, [pc, #416]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a67      	ldr	r2, [pc, #412]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d013      	beq.n	8003314 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ec:	f7ff fb08 	bl	8002900 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f4:	f7ff fb04 	bl	8002900 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b64      	cmp	r3, #100	; 0x64
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e200      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003306:	4b5d      	ldr	r3, [pc, #372]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0f0      	beq.n	80032f4 <HAL_RCC_OscConfig+0xe4>
 8003312:	e014      	b.n	800333e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003314:	f7ff faf4 	bl	8002900 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800331c:	f7ff faf0 	bl	8002900 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b64      	cmp	r3, #100	; 0x64
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e1ec      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800332e:	4b53      	ldr	r3, [pc, #332]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f0      	bne.n	800331c <HAL_RCC_OscConfig+0x10c>
 800333a:	e000      	b.n	800333e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800333c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d063      	beq.n	8003412 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800334a:	4b4c      	ldr	r3, [pc, #304]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00b      	beq.n	800336e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003356:	4b49      	ldr	r3, [pc, #292]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f003 030c 	and.w	r3, r3, #12
 800335e:	2b08      	cmp	r3, #8
 8003360:	d11c      	bne.n	800339c <HAL_RCC_OscConfig+0x18c>
 8003362:	4b46      	ldr	r3, [pc, #280]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d116      	bne.n	800339c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800336e:	4b43      	ldr	r3, [pc, #268]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d005      	beq.n	8003386 <HAL_RCC_OscConfig+0x176>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d001      	beq.n	8003386 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e1c0      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003386:	4b3d      	ldr	r3, [pc, #244]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	4939      	ldr	r1, [pc, #228]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003396:	4313      	orrs	r3, r2
 8003398:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800339a:	e03a      	b.n	8003412 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d020      	beq.n	80033e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033a4:	4b36      	ldr	r3, [pc, #216]	; (8003480 <HAL_RCC_OscConfig+0x270>)
 80033a6:	2201      	movs	r2, #1
 80033a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033aa:	f7ff faa9 	bl	8002900 <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033b2:	f7ff faa5 	bl	8002900 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e1a1      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c4:	4b2d      	ldr	r3, [pc, #180]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0f0      	beq.n	80033b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d0:	4b2a      	ldr	r3, [pc, #168]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	4927      	ldr	r1, [pc, #156]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	600b      	str	r3, [r1, #0]
 80033e4:	e015      	b.n	8003412 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033e6:	4b26      	ldr	r3, [pc, #152]	; (8003480 <HAL_RCC_OscConfig+0x270>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ec:	f7ff fa88 	bl	8002900 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f4:	f7ff fa84 	bl	8002900 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e180      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003406:	4b1d      	ldr	r3, [pc, #116]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f0      	bne.n	80033f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0308 	and.w	r3, r3, #8
 800341a:	2b00      	cmp	r3, #0
 800341c:	d03a      	beq.n	8003494 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d019      	beq.n	800345a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003426:	4b17      	ldr	r3, [pc, #92]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 8003428:	2201      	movs	r2, #1
 800342a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800342c:	f7ff fa68 	bl	8002900 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003434:	f7ff fa64 	bl	8002900 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e160      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003446:	4b0d      	ldr	r3, [pc, #52]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003452:	2001      	movs	r0, #1
 8003454:	f000 face 	bl	80039f4 <RCC_Delay>
 8003458:	e01c      	b.n	8003494 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800345a:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003460:	f7ff fa4e 	bl	8002900 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003466:	e00f      	b.n	8003488 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003468:	f7ff fa4a 	bl	8002900 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d908      	bls.n	8003488 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e146      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
 800347a:	bf00      	nop
 800347c:	40021000 	.word	0x40021000
 8003480:	42420000 	.word	0x42420000
 8003484:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003488:	4b92      	ldr	r3, [pc, #584]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1e9      	bne.n	8003468 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 80a6 	beq.w	80035ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034a2:	2300      	movs	r3, #0
 80034a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034a6:	4b8b      	ldr	r3, [pc, #556]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10d      	bne.n	80034ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b2:	4b88      	ldr	r3, [pc, #544]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	4a87      	ldr	r2, [pc, #540]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80034b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034bc:	61d3      	str	r3, [r2, #28]
 80034be:	4b85      	ldr	r3, [pc, #532]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c6:	60bb      	str	r3, [r7, #8]
 80034c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ca:	2301      	movs	r3, #1
 80034cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ce:	4b82      	ldr	r3, [pc, #520]	; (80036d8 <HAL_RCC_OscConfig+0x4c8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d118      	bne.n	800350c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034da:	4b7f      	ldr	r3, [pc, #508]	; (80036d8 <HAL_RCC_OscConfig+0x4c8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a7e      	ldr	r2, [pc, #504]	; (80036d8 <HAL_RCC_OscConfig+0x4c8>)
 80034e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034e6:	f7ff fa0b 	bl	8002900 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ee:	f7ff fa07 	bl	8002900 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b64      	cmp	r3, #100	; 0x64
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e103      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003500:	4b75      	ldr	r3, [pc, #468]	; (80036d8 <HAL_RCC_OscConfig+0x4c8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0f0      	beq.n	80034ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d106      	bne.n	8003522 <HAL_RCC_OscConfig+0x312>
 8003514:	4b6f      	ldr	r3, [pc, #444]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	4a6e      	ldr	r2, [pc, #440]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800351a:	f043 0301 	orr.w	r3, r3, #1
 800351e:	6213      	str	r3, [r2, #32]
 8003520:	e02d      	b.n	800357e <HAL_RCC_OscConfig+0x36e>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10c      	bne.n	8003544 <HAL_RCC_OscConfig+0x334>
 800352a:	4b6a      	ldr	r3, [pc, #424]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	4a69      	ldr	r2, [pc, #420]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003530:	f023 0301 	bic.w	r3, r3, #1
 8003534:	6213      	str	r3, [r2, #32]
 8003536:	4b67      	ldr	r3, [pc, #412]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	4a66      	ldr	r2, [pc, #408]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800353c:	f023 0304 	bic.w	r3, r3, #4
 8003540:	6213      	str	r3, [r2, #32]
 8003542:	e01c      	b.n	800357e <HAL_RCC_OscConfig+0x36e>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	2b05      	cmp	r3, #5
 800354a:	d10c      	bne.n	8003566 <HAL_RCC_OscConfig+0x356>
 800354c:	4b61      	ldr	r3, [pc, #388]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	4a60      	ldr	r2, [pc, #384]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003552:	f043 0304 	orr.w	r3, r3, #4
 8003556:	6213      	str	r3, [r2, #32]
 8003558:	4b5e      	ldr	r3, [pc, #376]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	4a5d      	ldr	r2, [pc, #372]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800355e:	f043 0301 	orr.w	r3, r3, #1
 8003562:	6213      	str	r3, [r2, #32]
 8003564:	e00b      	b.n	800357e <HAL_RCC_OscConfig+0x36e>
 8003566:	4b5b      	ldr	r3, [pc, #364]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	4a5a      	ldr	r2, [pc, #360]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800356c:	f023 0301 	bic.w	r3, r3, #1
 8003570:	6213      	str	r3, [r2, #32]
 8003572:	4b58      	ldr	r3, [pc, #352]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	4a57      	ldr	r2, [pc, #348]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003578:	f023 0304 	bic.w	r3, r3, #4
 800357c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d015      	beq.n	80035b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003586:	f7ff f9bb 	bl	8002900 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800358c:	e00a      	b.n	80035a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358e:	f7ff f9b7 	bl	8002900 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	f241 3288 	movw	r2, #5000	; 0x1388
 800359c:	4293      	cmp	r3, r2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e0b1      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a4:	4b4b      	ldr	r3, [pc, #300]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0ee      	beq.n	800358e <HAL_RCC_OscConfig+0x37e>
 80035b0:	e014      	b.n	80035dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b2:	f7ff f9a5 	bl	8002900 <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b8:	e00a      	b.n	80035d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ba:	f7ff f9a1 	bl	8002900 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e09b      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035d0:	4b40      	ldr	r3, [pc, #256]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1ee      	bne.n	80035ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035dc:	7dfb      	ldrb	r3, [r7, #23]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d105      	bne.n	80035ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e2:	4b3c      	ldr	r3, [pc, #240]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	4a3b      	ldr	r2, [pc, #236]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80035e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 8087 	beq.w	8003706 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035f8:	4b36      	ldr	r3, [pc, #216]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 030c 	and.w	r3, r3, #12
 8003600:	2b08      	cmp	r3, #8
 8003602:	d061      	beq.n	80036c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	2b02      	cmp	r3, #2
 800360a:	d146      	bne.n	800369a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800360c:	4b33      	ldr	r3, [pc, #204]	; (80036dc <HAL_RCC_OscConfig+0x4cc>)
 800360e:	2200      	movs	r2, #0
 8003610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003612:	f7ff f975 	bl	8002900 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800361a:	f7ff f971 	bl	8002900 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e06d      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800362c:	4b29      	ldr	r3, [pc, #164]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1f0      	bne.n	800361a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003640:	d108      	bne.n	8003654 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003642:	4b24      	ldr	r3, [pc, #144]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	4921      	ldr	r1, [pc, #132]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003650:	4313      	orrs	r3, r2
 8003652:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003654:	4b1f      	ldr	r3, [pc, #124]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a19      	ldr	r1, [r3, #32]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	430b      	orrs	r3, r1
 8003666:	491b      	ldr	r1, [pc, #108]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003668:	4313      	orrs	r3, r2
 800366a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800366c:	4b1b      	ldr	r3, [pc, #108]	; (80036dc <HAL_RCC_OscConfig+0x4cc>)
 800366e:	2201      	movs	r2, #1
 8003670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003672:	f7ff f945 	bl	8002900 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800367a:	f7ff f941 	bl	8002900 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e03d      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800368c:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0f0      	beq.n	800367a <HAL_RCC_OscConfig+0x46a>
 8003698:	e035      	b.n	8003706 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369a:	4b10      	ldr	r3, [pc, #64]	; (80036dc <HAL_RCC_OscConfig+0x4cc>)
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a0:	f7ff f92e 	bl	8002900 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a8:	f7ff f92a 	bl	8002900 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e026      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ba:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f0      	bne.n	80036a8 <HAL_RCC_OscConfig+0x498>
 80036c6:	e01e      	b.n	8003706 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d107      	bne.n	80036e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e019      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
 80036d4:	40021000 	.word	0x40021000
 80036d8:	40007000 	.word	0x40007000
 80036dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036e0:	4b0b      	ldr	r3, [pc, #44]	; (8003710 <HAL_RCC_OscConfig+0x500>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d106      	bne.n	8003702 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036fe:	429a      	cmp	r2, r3
 8003700:	d001      	beq.n	8003706 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e000      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40021000 	.word	0x40021000

08003714 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e0d0      	b.n	80038ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003728:	4b6a      	ldr	r3, [pc, #424]	; (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d910      	bls.n	8003758 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003736:	4b67      	ldr	r3, [pc, #412]	; (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f023 0207 	bic.w	r2, r3, #7
 800373e:	4965      	ldr	r1, [pc, #404]	; (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	4313      	orrs	r3, r2
 8003744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003746:	4b63      	ldr	r3, [pc, #396]	; (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	429a      	cmp	r2, r3
 8003752:	d001      	beq.n	8003758 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e0b8      	b.n	80038ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d020      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003770:	4b59      	ldr	r3, [pc, #356]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	4a58      	ldr	r2, [pc, #352]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003776:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800377a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b00      	cmp	r3, #0
 8003786:	d005      	beq.n	8003794 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003788:	4b53      	ldr	r3, [pc, #332]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	4a52      	ldr	r2, [pc, #328]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 800378e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003792:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003794:	4b50      	ldr	r3, [pc, #320]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	494d      	ldr	r1, [pc, #308]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d040      	beq.n	8003834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d107      	bne.n	80037ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ba:	4b47      	ldr	r3, [pc, #284]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d115      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e07f      	b.n	80038ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d107      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d2:	4b41      	ldr	r3, [pc, #260]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d109      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e073      	b.n	80038ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e2:	4b3d      	ldr	r3, [pc, #244]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e06b      	b.n	80038ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037f2:	4b39      	ldr	r3, [pc, #228]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f023 0203 	bic.w	r2, r3, #3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	4936      	ldr	r1, [pc, #216]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003800:	4313      	orrs	r3, r2
 8003802:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003804:	f7ff f87c 	bl	8002900 <HAL_GetTick>
 8003808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380a:	e00a      	b.n	8003822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800380c:	f7ff f878 	bl	8002900 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	f241 3288 	movw	r2, #5000	; 0x1388
 800381a:	4293      	cmp	r3, r2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e053      	b.n	80038ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003822:	4b2d      	ldr	r3, [pc, #180]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f003 020c 	and.w	r2, r3, #12
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	429a      	cmp	r2, r3
 8003832:	d1eb      	bne.n	800380c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003834:	4b27      	ldr	r3, [pc, #156]	; (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d210      	bcs.n	8003864 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003842:	4b24      	ldr	r3, [pc, #144]	; (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f023 0207 	bic.w	r2, r3, #7
 800384a:	4922      	ldr	r1, [pc, #136]	; (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	4313      	orrs	r3, r2
 8003850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003852:	4b20      	ldr	r3, [pc, #128]	; (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d001      	beq.n	8003864 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e032      	b.n	80038ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b00      	cmp	r3, #0
 800386e:	d008      	beq.n	8003882 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003870:	4b19      	ldr	r3, [pc, #100]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	4916      	ldr	r1, [pc, #88]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 800387e:	4313      	orrs	r3, r2
 8003880:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d009      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800388e:	4b12      	ldr	r3, [pc, #72]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	490e      	ldr	r1, [pc, #56]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038a2:	f000 f821 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 80038a6:	4602      	mov	r2, r0
 80038a8:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	091b      	lsrs	r3, r3, #4
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	490a      	ldr	r1, [pc, #40]	; (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 80038b4:	5ccb      	ldrb	r3, [r1, r3]
 80038b6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ba:	4a09      	ldr	r2, [pc, #36]	; (80038e0 <HAL_RCC_ClockConfig+0x1cc>)
 80038bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038be:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <HAL_RCC_ClockConfig+0x1d0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fe ffda 	bl	800287c <HAL_InitTick>

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40022000 	.word	0x40022000
 80038d8:	40021000 	.word	0x40021000
 80038dc:	0800669c 	.word	0x0800669c
 80038e0:	20000000 	.word	0x20000000
 80038e4:	20000004 	.word	0x20000004

080038e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	2300      	movs	r3, #0
 80038f4:	60bb      	str	r3, [r7, #8]
 80038f6:	2300      	movs	r3, #0
 80038f8:	617b      	str	r3, [r7, #20]
 80038fa:	2300      	movs	r3, #0
 80038fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003902:	4b1e      	ldr	r3, [pc, #120]	; (800397c <HAL_RCC_GetSysClockFreq+0x94>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f003 030c 	and.w	r3, r3, #12
 800390e:	2b04      	cmp	r3, #4
 8003910:	d002      	beq.n	8003918 <HAL_RCC_GetSysClockFreq+0x30>
 8003912:	2b08      	cmp	r3, #8
 8003914:	d003      	beq.n	800391e <HAL_RCC_GetSysClockFreq+0x36>
 8003916:	e027      	b.n	8003968 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003918:	4b19      	ldr	r3, [pc, #100]	; (8003980 <HAL_RCC_GetSysClockFreq+0x98>)
 800391a:	613b      	str	r3, [r7, #16]
      break;
 800391c:	e027      	b.n	800396e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	0c9b      	lsrs	r3, r3, #18
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	4a17      	ldr	r2, [pc, #92]	; (8003984 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003928:	5cd3      	ldrb	r3, [r2, r3]
 800392a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d010      	beq.n	8003958 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003936:	4b11      	ldr	r3, [pc, #68]	; (800397c <HAL_RCC_GetSysClockFreq+0x94>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	0c5b      	lsrs	r3, r3, #17
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	4a11      	ldr	r2, [pc, #68]	; (8003988 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003942:	5cd3      	ldrb	r3, [r2, r3]
 8003944:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a0d      	ldr	r2, [pc, #52]	; (8003980 <HAL_RCC_GetSysClockFreq+0x98>)
 800394a:	fb03 f202 	mul.w	r2, r3, r2
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	fbb2 f3f3 	udiv	r3, r2, r3
 8003954:	617b      	str	r3, [r7, #20]
 8003956:	e004      	b.n	8003962 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a0c      	ldr	r2, [pc, #48]	; (800398c <HAL_RCC_GetSysClockFreq+0xa4>)
 800395c:	fb02 f303 	mul.w	r3, r2, r3
 8003960:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	613b      	str	r3, [r7, #16]
      break;
 8003966:	e002      	b.n	800396e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003968:	4b05      	ldr	r3, [pc, #20]	; (8003980 <HAL_RCC_GetSysClockFreq+0x98>)
 800396a:	613b      	str	r3, [r7, #16]
      break;
 800396c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800396e:	693b      	ldr	r3, [r7, #16]
}
 8003970:	4618      	mov	r0, r3
 8003972:	371c      	adds	r7, #28
 8003974:	46bd      	mov	sp, r7
 8003976:	bc80      	pop	{r7}
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	40021000 	.word	0x40021000
 8003980:	007a1200 	.word	0x007a1200
 8003984:	080066b4 	.word	0x080066b4
 8003988:	080066c4 	.word	0x080066c4
 800398c:	003d0900 	.word	0x003d0900

08003990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003994:	4b02      	ldr	r3, [pc, #8]	; (80039a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003996:	681b      	ldr	r3, [r3, #0]
}
 8003998:	4618      	mov	r0, r3
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr
 80039a0:	20000000 	.word	0x20000000

080039a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039a8:	f7ff fff2 	bl	8003990 <HAL_RCC_GetHCLKFreq>
 80039ac:	4602      	mov	r2, r0
 80039ae:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	0a1b      	lsrs	r3, r3, #8
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	4903      	ldr	r1, [pc, #12]	; (80039c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ba:	5ccb      	ldrb	r3, [r1, r3]
 80039bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40021000 	.word	0x40021000
 80039c8:	080066ac 	.word	0x080066ac

080039cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039d0:	f7ff ffde 	bl	8003990 <HAL_RCC_GetHCLKFreq>
 80039d4:	4602      	mov	r2, r0
 80039d6:	4b05      	ldr	r3, [pc, #20]	; (80039ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	0adb      	lsrs	r3, r3, #11
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	4903      	ldr	r1, [pc, #12]	; (80039f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039e2:	5ccb      	ldrb	r3, [r1, r3]
 80039e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40021000 	.word	0x40021000
 80039f0:	080066ac 	.word	0x080066ac

080039f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039fc:	4b0a      	ldr	r3, [pc, #40]	; (8003a28 <RCC_Delay+0x34>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a0a      	ldr	r2, [pc, #40]	; (8003a2c <RCC_Delay+0x38>)
 8003a02:	fba2 2303 	umull	r2, r3, r2, r3
 8003a06:	0a5b      	lsrs	r3, r3, #9
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	fb02 f303 	mul.w	r3, r2, r3
 8003a0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a10:	bf00      	nop
  }
  while (Delay --);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	1e5a      	subs	r2, r3, #1
 8003a16:	60fa      	str	r2, [r7, #12]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1f9      	bne.n	8003a10 <RCC_Delay+0x1c>
}
 8003a1c:	bf00      	nop
 8003a1e:	bf00      	nop
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bc80      	pop	{r7}
 8003a26:	4770      	bx	lr
 8003a28:	20000000 	.word	0x20000000
 8003a2c:	10624dd3 	.word	0x10624dd3

08003a30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e041      	b.n	8003ac6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7fe fc1a 	bl	8002290 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4610      	mov	r0, r2
 8003a70:	f000 fab0 	bl	8003fd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
	...

08003ad0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d001      	beq.n	8003ae8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e044      	b.n	8003b72 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0201 	orr.w	r2, r2, #1
 8003afe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a1d      	ldr	r2, [pc, #116]	; (8003b7c <HAL_TIM_Base_Start_IT+0xac>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d018      	beq.n	8003b3c <HAL_TIM_Base_Start_IT+0x6c>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a1c      	ldr	r2, [pc, #112]	; (8003b80 <HAL_TIM_Base_Start_IT+0xb0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d013      	beq.n	8003b3c <HAL_TIM_Base_Start_IT+0x6c>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b1c:	d00e      	beq.n	8003b3c <HAL_TIM_Base_Start_IT+0x6c>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a18      	ldr	r2, [pc, #96]	; (8003b84 <HAL_TIM_Base_Start_IT+0xb4>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d009      	beq.n	8003b3c <HAL_TIM_Base_Start_IT+0x6c>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a16      	ldr	r2, [pc, #88]	; (8003b88 <HAL_TIM_Base_Start_IT+0xb8>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d004      	beq.n	8003b3c <HAL_TIM_Base_Start_IT+0x6c>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a15      	ldr	r2, [pc, #84]	; (8003b8c <HAL_TIM_Base_Start_IT+0xbc>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d111      	bne.n	8003b60 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 0307 	and.w	r3, r3, #7
 8003b46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2b06      	cmp	r3, #6
 8003b4c:	d010      	beq.n	8003b70 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f042 0201 	orr.w	r2, r2, #1
 8003b5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b5e:	e007      	b.n	8003b70 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0201 	orr.w	r2, r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bc80      	pop	{r7}
 8003b7a:	4770      	bx	lr
 8003b7c:	40012c00 	.word	0x40012c00
 8003b80:	40013400 	.word	0x40013400
 8003b84:	40000400 	.word	0x40000400
 8003b88:	40000800 	.word	0x40000800
 8003b8c:	40000c00 	.word	0x40000c00

08003b90 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0201 	bic.w	r2, r2, #1
 8003ba6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6a1a      	ldr	r2, [r3, #32]
 8003bae:	f241 1311 	movw	r3, #4369	; 0x1111
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10f      	bne.n	8003bd8 <HAL_TIM_Base_Stop_IT+0x48>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6a1a      	ldr	r2, [r3, #32]
 8003bbe:	f240 4344 	movw	r3, #1092	; 0x444
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d107      	bne.n	8003bd8 <HAL_TIM_Base_Stop_IT+0x48>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0201 	bic.w	r2, r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr

08003bec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d122      	bne.n	8003c48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d11b      	bne.n	8003c48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f06f 0202 	mvn.w	r2, #2
 8003c18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	f003 0303 	and.w	r3, r3, #3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f9b4 	bl	8003f9c <HAL_TIM_IC_CaptureCallback>
 8003c34:	e005      	b.n	8003c42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f9a7 	bl	8003f8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f9b6 	bl	8003fae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	f003 0304 	and.w	r3, r3, #4
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d122      	bne.n	8003c9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b04      	cmp	r3, #4
 8003c62:	d11b      	bne.n	8003c9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f06f 0204 	mvn.w	r2, #4
 8003c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2202      	movs	r2, #2
 8003c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f98a 	bl	8003f9c <HAL_TIM_IC_CaptureCallback>
 8003c88:	e005      	b.n	8003c96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f97d 	bl	8003f8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f98c 	bl	8003fae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	f003 0308 	and.w	r3, r3, #8
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	d122      	bne.n	8003cf0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f003 0308 	and.w	r3, r3, #8
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	d11b      	bne.n	8003cf0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f06f 0208 	mvn.w	r2, #8
 8003cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2204      	movs	r2, #4
 8003cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	f003 0303 	and.w	r3, r3, #3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f960 	bl	8003f9c <HAL_TIM_IC_CaptureCallback>
 8003cdc:	e005      	b.n	8003cea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f953 	bl	8003f8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f962 	bl	8003fae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	f003 0310 	and.w	r3, r3, #16
 8003cfa:	2b10      	cmp	r3, #16
 8003cfc:	d122      	bne.n	8003d44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f003 0310 	and.w	r3, r3, #16
 8003d08:	2b10      	cmp	r3, #16
 8003d0a:	d11b      	bne.n	8003d44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f06f 0210 	mvn.w	r2, #16
 8003d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2208      	movs	r2, #8
 8003d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f936 	bl	8003f9c <HAL_TIM_IC_CaptureCallback>
 8003d30:	e005      	b.n	8003d3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f929 	bl	8003f8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 f938 	bl	8003fae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d10e      	bne.n	8003d70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d107      	bne.n	8003d70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f06f 0201 	mvn.w	r2, #1
 8003d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7fe fc0c 	bl	8002588 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d7a:	2b80      	cmp	r3, #128	; 0x80
 8003d7c:	d10e      	bne.n	8003d9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d88:	2b80      	cmp	r3, #128	; 0x80
 8003d8a:	d107      	bne.n	8003d9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 faa1 	bl	80042de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da6:	2b40      	cmp	r3, #64	; 0x40
 8003da8:	d10e      	bne.n	8003dc8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db4:	2b40      	cmp	r3, #64	; 0x40
 8003db6:	d107      	bne.n	8003dc8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f8fc 	bl	8003fc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b20      	cmp	r3, #32
 8003dd4:	d10e      	bne.n	8003df4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f003 0320 	and.w	r3, r3, #32
 8003de0:	2b20      	cmp	r3, #32
 8003de2:	d107      	bne.n	8003df4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f06f 0220 	mvn.w	r2, #32
 8003dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 fa6c 	bl	80042cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003df4:	bf00      	nop
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e06:	2300      	movs	r3, #0
 8003e08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d101      	bne.n	8003e18 <HAL_TIM_ConfigClockSource+0x1c>
 8003e14:	2302      	movs	r3, #2
 8003e16:	e0b4      	b.n	8003f82 <HAL_TIM_ConfigClockSource+0x186>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e50:	d03e      	beq.n	8003ed0 <HAL_TIM_ConfigClockSource+0xd4>
 8003e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e56:	f200 8087 	bhi.w	8003f68 <HAL_TIM_ConfigClockSource+0x16c>
 8003e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e5e:	f000 8086 	beq.w	8003f6e <HAL_TIM_ConfigClockSource+0x172>
 8003e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e66:	d87f      	bhi.n	8003f68 <HAL_TIM_ConfigClockSource+0x16c>
 8003e68:	2b70      	cmp	r3, #112	; 0x70
 8003e6a:	d01a      	beq.n	8003ea2 <HAL_TIM_ConfigClockSource+0xa6>
 8003e6c:	2b70      	cmp	r3, #112	; 0x70
 8003e6e:	d87b      	bhi.n	8003f68 <HAL_TIM_ConfigClockSource+0x16c>
 8003e70:	2b60      	cmp	r3, #96	; 0x60
 8003e72:	d050      	beq.n	8003f16 <HAL_TIM_ConfigClockSource+0x11a>
 8003e74:	2b60      	cmp	r3, #96	; 0x60
 8003e76:	d877      	bhi.n	8003f68 <HAL_TIM_ConfigClockSource+0x16c>
 8003e78:	2b50      	cmp	r3, #80	; 0x50
 8003e7a:	d03c      	beq.n	8003ef6 <HAL_TIM_ConfigClockSource+0xfa>
 8003e7c:	2b50      	cmp	r3, #80	; 0x50
 8003e7e:	d873      	bhi.n	8003f68 <HAL_TIM_ConfigClockSource+0x16c>
 8003e80:	2b40      	cmp	r3, #64	; 0x40
 8003e82:	d058      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0x13a>
 8003e84:	2b40      	cmp	r3, #64	; 0x40
 8003e86:	d86f      	bhi.n	8003f68 <HAL_TIM_ConfigClockSource+0x16c>
 8003e88:	2b30      	cmp	r3, #48	; 0x30
 8003e8a:	d064      	beq.n	8003f56 <HAL_TIM_ConfigClockSource+0x15a>
 8003e8c:	2b30      	cmp	r3, #48	; 0x30
 8003e8e:	d86b      	bhi.n	8003f68 <HAL_TIM_ConfigClockSource+0x16c>
 8003e90:	2b20      	cmp	r3, #32
 8003e92:	d060      	beq.n	8003f56 <HAL_TIM_ConfigClockSource+0x15a>
 8003e94:	2b20      	cmp	r3, #32
 8003e96:	d867      	bhi.n	8003f68 <HAL_TIM_ConfigClockSource+0x16c>
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d05c      	beq.n	8003f56 <HAL_TIM_ConfigClockSource+0x15a>
 8003e9c:	2b10      	cmp	r3, #16
 8003e9e:	d05a      	beq.n	8003f56 <HAL_TIM_ConfigClockSource+0x15a>
 8003ea0:	e062      	b.n	8003f68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003eb2:	f000 f980 	bl	80041b6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ec4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	609a      	str	r2, [r3, #8]
      break;
 8003ece:	e04f      	b.n	8003f70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ee0:	f000 f969 	bl	80041b6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689a      	ldr	r2, [r3, #8]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ef2:	609a      	str	r2, [r3, #8]
      break;
 8003ef4:	e03c      	b.n	8003f70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f02:	461a      	mov	r2, r3
 8003f04:	f000 f8e0 	bl	80040c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2150      	movs	r1, #80	; 0x50
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 f937 	bl	8004182 <TIM_ITRx_SetConfig>
      break;
 8003f14:	e02c      	b.n	8003f70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f22:	461a      	mov	r2, r3
 8003f24:	f000 f8fe 	bl	8004124 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2160      	movs	r1, #96	; 0x60
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 f927 	bl	8004182 <TIM_ITRx_SetConfig>
      break;
 8003f34:	e01c      	b.n	8003f70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f42:	461a      	mov	r2, r3
 8003f44:	f000 f8c0 	bl	80040c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2140      	movs	r1, #64	; 0x40
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 f917 	bl	8004182 <TIM_ITRx_SetConfig>
      break;
 8003f54:	e00c      	b.n	8003f70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4610      	mov	r0, r2
 8003f62:	f000 f90e 	bl	8004182 <TIM_ITRx_SetConfig>
      break;
 8003f66:	e003      	b.n	8003f70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f6c:	e000      	b.n	8003f70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bc80      	pop	{r7}
 8003f9a:	4770      	bx	lr

08003f9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bc80      	pop	{r7}
 8003fac:	4770      	bx	lr

08003fae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bc80      	pop	{r7}
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bc80      	pop	{r7}
 8003fd0:	4770      	bx	lr
	...

08003fd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a33      	ldr	r2, [pc, #204]	; (80040b4 <TIM_Base_SetConfig+0xe0>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d013      	beq.n	8004014 <TIM_Base_SetConfig+0x40>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a32      	ldr	r2, [pc, #200]	; (80040b8 <TIM_Base_SetConfig+0xe4>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d00f      	beq.n	8004014 <TIM_Base_SetConfig+0x40>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ffa:	d00b      	beq.n	8004014 <TIM_Base_SetConfig+0x40>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a2f      	ldr	r2, [pc, #188]	; (80040bc <TIM_Base_SetConfig+0xe8>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d007      	beq.n	8004014 <TIM_Base_SetConfig+0x40>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a2e      	ldr	r2, [pc, #184]	; (80040c0 <TIM_Base_SetConfig+0xec>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d003      	beq.n	8004014 <TIM_Base_SetConfig+0x40>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a2d      	ldr	r2, [pc, #180]	; (80040c4 <TIM_Base_SetConfig+0xf0>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d108      	bne.n	8004026 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800401a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	4313      	orrs	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a22      	ldr	r2, [pc, #136]	; (80040b4 <TIM_Base_SetConfig+0xe0>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d013      	beq.n	8004056 <TIM_Base_SetConfig+0x82>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a21      	ldr	r2, [pc, #132]	; (80040b8 <TIM_Base_SetConfig+0xe4>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d00f      	beq.n	8004056 <TIM_Base_SetConfig+0x82>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800403c:	d00b      	beq.n	8004056 <TIM_Base_SetConfig+0x82>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a1e      	ldr	r2, [pc, #120]	; (80040bc <TIM_Base_SetConfig+0xe8>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d007      	beq.n	8004056 <TIM_Base_SetConfig+0x82>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a1d      	ldr	r2, [pc, #116]	; (80040c0 <TIM_Base_SetConfig+0xec>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d003      	beq.n	8004056 <TIM_Base_SetConfig+0x82>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a1c      	ldr	r2, [pc, #112]	; (80040c4 <TIM_Base_SetConfig+0xf0>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d108      	bne.n	8004068 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800405c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	4313      	orrs	r3, r2
 8004066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	4313      	orrs	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a09      	ldr	r2, [pc, #36]	; (80040b4 <TIM_Base_SetConfig+0xe0>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d003      	beq.n	800409c <TIM_Base_SetConfig+0xc8>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a08      	ldr	r2, [pc, #32]	; (80040b8 <TIM_Base_SetConfig+0xe4>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d103      	bne.n	80040a4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	691a      	ldr	r2, [r3, #16]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	615a      	str	r2, [r3, #20]
}
 80040aa:	bf00      	nop
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr
 80040b4:	40012c00 	.word	0x40012c00
 80040b8:	40013400 	.word	0x40013400
 80040bc:	40000400 	.word	0x40000400
 80040c0:	40000800 	.word	0x40000800
 80040c4:	40000c00 	.word	0x40000c00

080040c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	f023 0201 	bic.w	r2, r3, #1
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f023 030a 	bic.w	r3, r3, #10
 8004104:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	4313      	orrs	r3, r2
 800410c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	621a      	str	r2, [r3, #32]
}
 800411a:	bf00      	nop
 800411c:	371c      	adds	r7, #28
 800411e:	46bd      	mov	sp, r7
 8004120:	bc80      	pop	{r7}
 8004122:	4770      	bx	lr

08004124 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004124:	b480      	push	{r7}
 8004126:	b087      	sub	sp, #28
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	f023 0210 	bic.w	r2, r3, #16
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800414e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	031b      	lsls	r3, r3, #12
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	4313      	orrs	r3, r2
 8004158:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004160:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	4313      	orrs	r3, r2
 800416a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	621a      	str	r2, [r3, #32]
}
 8004178:	bf00      	nop
 800417a:	371c      	adds	r7, #28
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr

08004182 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004182:	b480      	push	{r7}
 8004184:	b085      	sub	sp, #20
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
 800418a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004198:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4313      	orrs	r3, r2
 80041a0:	f043 0307 	orr.w	r3, r3, #7
 80041a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	609a      	str	r2, [r3, #8]
}
 80041ac:	bf00      	nop
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bc80      	pop	{r7}
 80041b4:	4770      	bx	lr

080041b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b087      	sub	sp, #28
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	607a      	str	r2, [r7, #4]
 80041c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	021a      	lsls	r2, r3, #8
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	431a      	orrs	r2, r3
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	4313      	orrs	r3, r2
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	609a      	str	r2, [r3, #8]
}
 80041ea:	bf00      	nop
 80041ec:	371c      	adds	r7, #28
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr

080041f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004204:	2b01      	cmp	r3, #1
 8004206:	d101      	bne.n	800420c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004208:	2302      	movs	r3, #2
 800420a:	e050      	b.n	80042ae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004232:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	4313      	orrs	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a1b      	ldr	r2, [pc, #108]	; (80042b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d018      	beq.n	8004282 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a19      	ldr	r2, [pc, #100]	; (80042bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d013      	beq.n	8004282 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004262:	d00e      	beq.n	8004282 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a15      	ldr	r2, [pc, #84]	; (80042c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d009      	beq.n	8004282 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a14      	ldr	r2, [pc, #80]	; (80042c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d004      	beq.n	8004282 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a12      	ldr	r2, [pc, #72]	; (80042c8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d10c      	bne.n	800429c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004288:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	4313      	orrs	r3, r2
 8004292:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr
 80042b8:	40012c00 	.word	0x40012c00
 80042bc:	40013400 	.word	0x40013400
 80042c0:	40000400 	.word	0x40000400
 80042c4:	40000800 	.word	0x40000800
 80042c8:	40000c00 	.word	0x40000c00

080042cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc80      	pop	{r7}
 80042dc:	4770      	bx	lr

080042de <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bc80      	pop	{r7}
 80042ee:	4770      	bx	lr

080042f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e042      	b.n	8004388 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d106      	bne.n	800431c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7fe f816 	bl	8002348 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2224      	movs	r2, #36	; 0x24
 8004320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68da      	ldr	r2, [r3, #12]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004332:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 fdc5 	bl	8004ec4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	691a      	ldr	r2, [r3, #16]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004348:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	695a      	ldr	r2, [r3, #20]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004358:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68da      	ldr	r2, [r3, #12]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004368:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2220      	movs	r2, #32
 8004374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b08a      	sub	sp, #40	; 0x28
 8004394:	af02      	add	r7, sp, #8
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	603b      	str	r3, [r7, #0]
 800439c:	4613      	mov	r3, r2
 800439e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043a0:	2300      	movs	r3, #0
 80043a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b20      	cmp	r3, #32
 80043ae:	d16d      	bne.n	800448c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d002      	beq.n	80043bc <HAL_UART_Transmit+0x2c>
 80043b6:	88fb      	ldrh	r3, [r7, #6]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e066      	b.n	800448e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2221      	movs	r2, #33	; 0x21
 80043ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043ce:	f7fe fa97 	bl	8002900 <HAL_GetTick>
 80043d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	88fa      	ldrh	r2, [r7, #6]
 80043d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	88fa      	ldrh	r2, [r7, #6]
 80043de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043e8:	d108      	bne.n	80043fc <HAL_UART_Transmit+0x6c>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d104      	bne.n	80043fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80043f2:	2300      	movs	r3, #0
 80043f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	61bb      	str	r3, [r7, #24]
 80043fa:	e003      	b.n	8004404 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004400:	2300      	movs	r3, #0
 8004402:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004404:	e02a      	b.n	800445c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2200      	movs	r2, #0
 800440e:	2180      	movs	r1, #128	; 0x80
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 fb14 	bl	8004a3e <UART_WaitOnFlagUntilTimeout>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e036      	b.n	800448e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10b      	bne.n	800443e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	461a      	mov	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004434:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	3302      	adds	r3, #2
 800443a:	61bb      	str	r3, [r7, #24]
 800443c:	e007      	b.n	800444e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	781a      	ldrb	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	3301      	adds	r3, #1
 800444c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004452:	b29b      	uxth	r3, r3
 8004454:	3b01      	subs	r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1cf      	bne.n	8004406 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	2200      	movs	r2, #0
 800446e:	2140      	movs	r1, #64	; 0x40
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 fae4 	bl	8004a3e <UART_WaitOnFlagUntilTimeout>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e006      	b.n	800448e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2220      	movs	r2, #32
 8004484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004488:	2300      	movs	r3, #0
 800448a:	e000      	b.n	800448e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800448c:	2302      	movs	r3, #2
  }
}
 800448e:	4618      	mov	r0, r3
 8004490:	3720      	adds	r7, #32
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b084      	sub	sp, #16
 800449a:	af00      	add	r7, sp, #0
 800449c:	60f8      	str	r0, [r7, #12]
 800449e:	60b9      	str	r1, [r7, #8]
 80044a0:	4613      	mov	r3, r2
 80044a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b20      	cmp	r3, #32
 80044ae:	d112      	bne.n	80044d6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d002      	beq.n	80044bc <HAL_UART_Receive_IT+0x26>
 80044b6:	88fb      	ldrh	r3, [r7, #6]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e00b      	b.n	80044d8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80044c6:	88fb      	ldrh	r3, [r7, #6]
 80044c8:	461a      	mov	r2, r3
 80044ca:	68b9      	ldr	r1, [r7, #8]
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 fb24 	bl	8004b1a <UART_Start_Receive_IT>
 80044d2:	4603      	mov	r3, r0
 80044d4:	e000      	b.n	80044d8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80044d6:	2302      	movs	r3, #2
  }
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b0ba      	sub	sp, #232	; 0xe8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004506:	2300      	movs	r3, #0
 8004508:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800450c:	2300      	movs	r3, #0
 800450e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004516:	f003 030f 	and.w	r3, r3, #15
 800451a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800451e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10f      	bne.n	8004546 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800452a:	f003 0320 	and.w	r3, r3, #32
 800452e:	2b00      	cmp	r3, #0
 8004530:	d009      	beq.n	8004546 <HAL_UART_IRQHandler+0x66>
 8004532:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004536:	f003 0320 	and.w	r3, r3, #32
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 fc01 	bl	8004d46 <UART_Receive_IT>
      return;
 8004544:	e25b      	b.n	80049fe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004546:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 80de 	beq.w	800470c <HAL_UART_IRQHandler+0x22c>
 8004550:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b00      	cmp	r3, #0
 800455a:	d106      	bne.n	800456a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800455c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004560:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 80d1 	beq.w	800470c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800456a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00b      	beq.n	800458e <HAL_UART_IRQHandler+0xae>
 8004576:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800457a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457e:	2b00      	cmp	r3, #0
 8004580:	d005      	beq.n	800458e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004586:	f043 0201 	orr.w	r2, r3, #1
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800458e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004592:	f003 0304 	and.w	r3, r3, #4
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00b      	beq.n	80045b2 <HAL_UART_IRQHandler+0xd2>
 800459a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d005      	beq.n	80045b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045aa:	f043 0202 	orr.w	r2, r3, #2
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00b      	beq.n	80045d6 <HAL_UART_IRQHandler+0xf6>
 80045be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d005      	beq.n	80045d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ce:	f043 0204 	orr.w	r2, r3, #4
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80045d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045da:	f003 0308 	and.w	r3, r3, #8
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d011      	beq.n	8004606 <HAL_UART_IRQHandler+0x126>
 80045e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045e6:	f003 0320 	and.w	r3, r3, #32
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d105      	bne.n	80045fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80045ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d005      	beq.n	8004606 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fe:	f043 0208 	orr.w	r2, r3, #8
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 81f2 	beq.w	80049f4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004614:	f003 0320 	and.w	r3, r3, #32
 8004618:	2b00      	cmp	r3, #0
 800461a:	d008      	beq.n	800462e <HAL_UART_IRQHandler+0x14e>
 800461c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004620:	f003 0320 	and.w	r3, r3, #32
 8004624:	2b00      	cmp	r3, #0
 8004626:	d002      	beq.n	800462e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 fb8c 	bl	8004d46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004638:	2b00      	cmp	r3, #0
 800463a:	bf14      	ite	ne
 800463c:	2301      	movne	r3, #1
 800463e:	2300      	moveq	r3, #0
 8004640:	b2db      	uxtb	r3, r3
 8004642:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464a:	f003 0308 	and.w	r3, r3, #8
 800464e:	2b00      	cmp	r3, #0
 8004650:	d103      	bne.n	800465a <HAL_UART_IRQHandler+0x17a>
 8004652:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004656:	2b00      	cmp	r3, #0
 8004658:	d04f      	beq.n	80046fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 fa96 	bl	8004b8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466a:	2b00      	cmp	r3, #0
 800466c:	d041      	beq.n	80046f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	3314      	adds	r3, #20
 8004674:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004678:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800467c:	e853 3f00 	ldrex	r3, [r3]
 8004680:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004684:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004688:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800468c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	3314      	adds	r3, #20
 8004696:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800469a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800469e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80046a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80046aa:	e841 2300 	strex	r3, r2, [r1]
 80046ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80046b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1d9      	bne.n	800466e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d013      	beq.n	80046ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c6:	4a7e      	ldr	r2, [pc, #504]	; (80048c0 <HAL_UART_IRQHandler+0x3e0>)
 80046c8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fe fa68 	bl	8002ba4 <HAL_DMA_Abort_IT>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d016      	beq.n	8004708 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80046e4:	4610      	mov	r0, r2
 80046e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046e8:	e00e      	b.n	8004708 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f993 	bl	8004a16 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f0:	e00a      	b.n	8004708 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f98f 	bl	8004a16 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f8:	e006      	b.n	8004708 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f98b 	bl	8004a16 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004706:	e175      	b.n	80049f4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004708:	bf00      	nop
    return;
 800470a:	e173      	b.n	80049f4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004710:	2b01      	cmp	r3, #1
 8004712:	f040 814f 	bne.w	80049b4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800471a:	f003 0310 	and.w	r3, r3, #16
 800471e:	2b00      	cmp	r3, #0
 8004720:	f000 8148 	beq.w	80049b4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004728:	f003 0310 	and.w	r3, r3, #16
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 8141 	beq.w	80049b4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004732:	2300      	movs	r3, #0
 8004734:	60bb      	str	r3, [r7, #8]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	60bb      	str	r3, [r7, #8]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	60bb      	str	r3, [r7, #8]
 8004746:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004752:	2b00      	cmp	r3, #0
 8004754:	f000 80b6 	beq.w	80048c4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004764:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 8145 	beq.w	80049f8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004772:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004776:	429a      	cmp	r2, r3
 8004778:	f080 813e 	bcs.w	80049f8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004782:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	2b20      	cmp	r3, #32
 800478c:	f000 8088 	beq.w	80048a0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	330c      	adds	r3, #12
 8004796:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800479e:	e853 3f00 	ldrex	r3, [r3]
 80047a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80047a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	330c      	adds	r3, #12
 80047b8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80047bc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80047c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80047cc:	e841 2300 	strex	r3, r2, [r1]
 80047d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80047d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1d9      	bne.n	8004790 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	3314      	adds	r3, #20
 80047e2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047e6:	e853 3f00 	ldrex	r3, [r3]
 80047ea:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80047ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047ee:	f023 0301 	bic.w	r3, r3, #1
 80047f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3314      	adds	r3, #20
 80047fc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004800:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004804:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004806:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004808:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800480c:	e841 2300 	strex	r3, r2, [r1]
 8004810:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004812:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1e1      	bne.n	80047dc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3314      	adds	r3, #20
 800481e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004820:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004822:	e853 3f00 	ldrex	r3, [r3]
 8004826:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004828:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800482a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800482e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	3314      	adds	r3, #20
 8004838:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800483c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800483e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004840:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004842:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004844:	e841 2300 	strex	r3, r2, [r1]
 8004848:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800484a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1e3      	bne.n	8004818 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2220      	movs	r2, #32
 8004854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	330c      	adds	r3, #12
 8004864:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004868:	e853 3f00 	ldrex	r3, [r3]
 800486c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800486e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004870:	f023 0310 	bic.w	r3, r3, #16
 8004874:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	330c      	adds	r3, #12
 800487e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004882:	65ba      	str	r2, [r7, #88]	; 0x58
 8004884:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004886:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004888:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800488a:	e841 2300 	strex	r3, r2, [r1]
 800488e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1e3      	bne.n	800485e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800489a:	4618      	mov	r0, r3
 800489c:	f7fe f947 	bl	8002b2e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2202      	movs	r2, #2
 80048a4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	4619      	mov	r1, r3
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f8b6 	bl	8004a28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048bc:	e09c      	b.n	80049f8 <HAL_UART_IRQHandler+0x518>
 80048be:	bf00      	nop
 80048c0:	08004c51 	.word	0x08004c51
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 808e 	beq.w	80049fc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80048e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 8089 	beq.w	80049fc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	330c      	adds	r3, #12
 80048f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f4:	e853 3f00 	ldrex	r3, [r3]
 80048f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004900:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	330c      	adds	r3, #12
 800490a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800490e:	647a      	str	r2, [r7, #68]	; 0x44
 8004910:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004912:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004914:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004916:	e841 2300 	strex	r3, r2, [r1]
 800491a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800491c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1e3      	bne.n	80048ea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	3314      	adds	r3, #20
 8004928:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	e853 3f00 	ldrex	r3, [r3]
 8004930:	623b      	str	r3, [r7, #32]
   return(result);
 8004932:	6a3b      	ldr	r3, [r7, #32]
 8004934:	f023 0301 	bic.w	r3, r3, #1
 8004938:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	3314      	adds	r3, #20
 8004942:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004946:	633a      	str	r2, [r7, #48]	; 0x30
 8004948:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800494c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800494e:	e841 2300 	strex	r3, r2, [r1]
 8004952:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1e3      	bne.n	8004922 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2220      	movs	r2, #32
 800495e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	330c      	adds	r3, #12
 800496e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	e853 3f00 	ldrex	r3, [r3]
 8004976:	60fb      	str	r3, [r7, #12]
   return(result);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 0310 	bic.w	r3, r3, #16
 800497e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	330c      	adds	r3, #12
 8004988:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800498c:	61fa      	str	r2, [r7, #28]
 800498e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004990:	69b9      	ldr	r1, [r7, #24]
 8004992:	69fa      	ldr	r2, [r7, #28]
 8004994:	e841 2300 	strex	r3, r2, [r1]
 8004998:	617b      	str	r3, [r7, #20]
   return(result);
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1e3      	bne.n	8004968 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049aa:	4619      	mov	r1, r3
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 f83b 	bl	8004a28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049b2:	e023      	b.n	80049fc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d009      	beq.n	80049d4 <HAL_UART_IRQHandler+0x4f4>
 80049c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d003      	beq.n	80049d4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f953 	bl	8004c78 <UART_Transmit_IT>
    return;
 80049d2:	e014      	b.n	80049fe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00e      	beq.n	80049fe <HAL_UART_IRQHandler+0x51e>
 80049e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d008      	beq.n	80049fe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 f992 	bl	8004d16 <UART_EndTransmit_IT>
    return;
 80049f2:	e004      	b.n	80049fe <HAL_UART_IRQHandler+0x51e>
    return;
 80049f4:	bf00      	nop
 80049f6:	e002      	b.n	80049fe <HAL_UART_IRQHandler+0x51e>
      return;
 80049f8:	bf00      	nop
 80049fa:	e000      	b.n	80049fe <HAL_UART_IRQHandler+0x51e>
      return;
 80049fc:	bf00      	nop
  }
}
 80049fe:	37e8      	adds	r7, #232	; 0xe8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bc80      	pop	{r7}
 8004a14:	4770      	bx	lr

08004a16 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bc80      	pop	{r7}
 8004a26:	4770      	bx	lr

08004a28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bc80      	pop	{r7}
 8004a3c:	4770      	bx	lr

08004a3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b090      	sub	sp, #64	; 0x40
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	60f8      	str	r0, [r7, #12]
 8004a46:	60b9      	str	r1, [r7, #8]
 8004a48:	603b      	str	r3, [r7, #0]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a4e:	e050      	b.n	8004af2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a56:	d04c      	beq.n	8004af2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d007      	beq.n	8004a6e <UART_WaitOnFlagUntilTimeout+0x30>
 8004a5e:	f7fd ff4f 	bl	8002900 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d241      	bcs.n	8004af2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	330c      	adds	r3, #12
 8004a74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a78:	e853 3f00 	ldrex	r3, [r3]
 8004a7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	330c      	adds	r3, #12
 8004a8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a8e:	637a      	str	r2, [r7, #52]	; 0x34
 8004a90:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a96:	e841 2300 	strex	r3, r2, [r1]
 8004a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1e5      	bne.n	8004a6e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	3314      	adds	r3, #20
 8004aa8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	e853 3f00 	ldrex	r3, [r3]
 8004ab0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	f023 0301 	bic.w	r3, r3, #1
 8004ab8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	3314      	adds	r3, #20
 8004ac0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ac2:	623a      	str	r2, [r7, #32]
 8004ac4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac6:	69f9      	ldr	r1, [r7, #28]
 8004ac8:	6a3a      	ldr	r2, [r7, #32]
 8004aca:	e841 2300 	strex	r3, r2, [r1]
 8004ace:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1e5      	bne.n	8004aa2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e00f      	b.n	8004b12 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	4013      	ands	r3, r2
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	bf0c      	ite	eq
 8004b02:	2301      	moveq	r3, #1
 8004b04:	2300      	movne	r3, #0
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	461a      	mov	r2, r3
 8004b0a:	79fb      	ldrb	r3, [r7, #7]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d09f      	beq.n	8004a50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3740      	adds	r7, #64	; 0x40
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b085      	sub	sp, #20
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	60f8      	str	r0, [r7, #12]
 8004b22:	60b9      	str	r1, [r7, #8]
 8004b24:	4613      	mov	r3, r2
 8004b26:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	88fa      	ldrh	r2, [r7, #6]
 8004b32:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	88fa      	ldrh	r2, [r7, #6]
 8004b38:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2222      	movs	r2, #34	; 0x22
 8004b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d007      	beq.n	8004b60 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68da      	ldr	r2, [r3, #12]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b5e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	695a      	ldr	r2, [r3, #20]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f042 0201 	orr.w	r2, r2, #1
 8004b6e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68da      	ldr	r2, [r3, #12]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f042 0220 	orr.w	r2, r2, #32
 8004b7e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bc80      	pop	{r7}
 8004b8a:	4770      	bx	lr

08004b8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b095      	sub	sp, #84	; 0x54
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	330c      	adds	r3, #12
 8004b9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b9e:	e853 3f00 	ldrex	r3, [r3]
 8004ba2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004baa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	330c      	adds	r3, #12
 8004bb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bb4:	643a      	str	r2, [r7, #64]	; 0x40
 8004bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004bba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bbc:	e841 2300 	strex	r3, r2, [r1]
 8004bc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1e5      	bne.n	8004b94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	3314      	adds	r3, #20
 8004bce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	e853 3f00 	ldrex	r3, [r3]
 8004bd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	f023 0301 	bic.w	r3, r3, #1
 8004bde:	64bb      	str	r3, [r7, #72]	; 0x48
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	3314      	adds	r3, #20
 8004be6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004be8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bf0:	e841 2300 	strex	r3, r2, [r1]
 8004bf4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1e5      	bne.n	8004bc8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d119      	bne.n	8004c38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	330c      	adds	r3, #12
 8004c0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	e853 3f00 	ldrex	r3, [r3]
 8004c12:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	f023 0310 	bic.w	r3, r3, #16
 8004c1a:	647b      	str	r3, [r7, #68]	; 0x44
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	330c      	adds	r3, #12
 8004c22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c24:	61ba      	str	r2, [r7, #24]
 8004c26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c28:	6979      	ldr	r1, [r7, #20]
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	e841 2300 	strex	r3, r2, [r1]
 8004c30:	613b      	str	r3, [r7, #16]
   return(result);
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1e5      	bne.n	8004c04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c46:	bf00      	nop
 8004c48:	3754      	adds	r7, #84	; 0x54
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bc80      	pop	{r7}
 8004c4e:	4770      	bx	lr

08004c50 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f7ff fed3 	bl	8004a16 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c70:	bf00      	nop
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b21      	cmp	r3, #33	; 0x21
 8004c8a:	d13e      	bne.n	8004d0a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c94:	d114      	bne.n	8004cc0 <UART_Transmit_IT+0x48>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d110      	bne.n	8004cc0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	881b      	ldrh	r3, [r3, #0]
 8004ca8:	461a      	mov	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cb2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	1c9a      	adds	r2, r3, #2
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	621a      	str	r2, [r3, #32]
 8004cbe:	e008      	b.n	8004cd2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	1c59      	adds	r1, r3, #1
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6211      	str	r1, [r2, #32]
 8004cca:	781a      	ldrb	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	4619      	mov	r1, r3
 8004ce0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10f      	bne.n	8004d06 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68da      	ldr	r2, [r3, #12]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cf4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68da      	ldr	r2, [r3, #12]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d04:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d06:	2300      	movs	r3, #0
 8004d08:	e000      	b.n	8004d0c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d0a:	2302      	movs	r3, #2
  }
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3714      	adds	r7, #20
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bc80      	pop	{r7}
 8004d14:	4770      	bx	lr

08004d16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b082      	sub	sp, #8
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68da      	ldr	r2, [r3, #12]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2220      	movs	r2, #32
 8004d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7ff fe64 	bl	8004a04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b08c      	sub	sp, #48	; 0x30
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b22      	cmp	r3, #34	; 0x22
 8004d58:	f040 80ae 	bne.w	8004eb8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d64:	d117      	bne.n	8004d96 <UART_Receive_IT+0x50>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d113      	bne.n	8004d96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d76:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8e:	1c9a      	adds	r2, r3, #2
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	629a      	str	r2, [r3, #40]	; 0x28
 8004d94:	e026      	b.n	8004de4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004da8:	d007      	beq.n	8004dba <UART_Receive_IT+0x74>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10a      	bne.n	8004dc8 <UART_Receive_IT+0x82>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d106      	bne.n	8004dc8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc4:	701a      	strb	r2, [r3, #0]
 8004dc6:	e008      	b.n	8004dda <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dd4:	b2da      	uxtb	r2, r3
 8004dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dde:	1c5a      	adds	r2, r3, #1
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	3b01      	subs	r3, #1
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	4619      	mov	r1, r3
 8004df2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d15d      	bne.n	8004eb4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f022 0220 	bic.w	r2, r2, #32
 8004e06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68da      	ldr	r2, [r3, #12]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	695a      	ldr	r2, [r3, #20]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 0201 	bic.w	r2, r2, #1
 8004e26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d135      	bne.n	8004eaa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	330c      	adds	r3, #12
 8004e4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	e853 3f00 	ldrex	r3, [r3]
 8004e52:	613b      	str	r3, [r7, #16]
   return(result);
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	f023 0310 	bic.w	r3, r3, #16
 8004e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	330c      	adds	r3, #12
 8004e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e64:	623a      	str	r2, [r7, #32]
 8004e66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e68:	69f9      	ldr	r1, [r7, #28]
 8004e6a:	6a3a      	ldr	r2, [r7, #32]
 8004e6c:	e841 2300 	strex	r3, r2, [r1]
 8004e70:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1e5      	bne.n	8004e44 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0310 	and.w	r3, r3, #16
 8004e82:	2b10      	cmp	r3, #16
 8004e84:	d10a      	bne.n	8004e9c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e86:	2300      	movs	r3, #0
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	60fb      	str	r3, [r7, #12]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7ff fdc0 	bl	8004a28 <HAL_UARTEx_RxEventCallback>
 8004ea8:	e002      	b.n	8004eb0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7fd fb2c 	bl	8002508 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	e002      	b.n	8004eba <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	e000      	b.n	8004eba <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004eb8:	2302      	movs	r3, #2
  }
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3730      	adds	r7, #48	; 0x30
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
	...

08004ec4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68da      	ldr	r2, [r3, #12]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689a      	ldr	r2, [r3, #8]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	431a      	orrs	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004efe:	f023 030c 	bic.w	r3, r3, #12
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6812      	ldr	r2, [r2, #0]
 8004f06:	68b9      	ldr	r1, [r7, #8]
 8004f08:	430b      	orrs	r3, r1
 8004f0a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699a      	ldr	r2, [r3, #24]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a2c      	ldr	r2, [pc, #176]	; (8004fd8 <UART_SetConfig+0x114>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d103      	bne.n	8004f34 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f2c:	f7fe fd4e 	bl	80039cc <HAL_RCC_GetPCLK2Freq>
 8004f30:	60f8      	str	r0, [r7, #12]
 8004f32:	e002      	b.n	8004f3a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f34:	f7fe fd36 	bl	80039a4 <HAL_RCC_GetPCLK1Freq>
 8004f38:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	009a      	lsls	r2, r3, #2
 8004f44:	441a      	add	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f50:	4a22      	ldr	r2, [pc, #136]	; (8004fdc <UART_SetConfig+0x118>)
 8004f52:	fba2 2303 	umull	r2, r3, r2, r3
 8004f56:	095b      	lsrs	r3, r3, #5
 8004f58:	0119      	lsls	r1, r3, #4
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	009a      	lsls	r2, r3, #2
 8004f64:	441a      	add	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f70:	4b1a      	ldr	r3, [pc, #104]	; (8004fdc <UART_SetConfig+0x118>)
 8004f72:	fba3 0302 	umull	r0, r3, r3, r2
 8004f76:	095b      	lsrs	r3, r3, #5
 8004f78:	2064      	movs	r0, #100	; 0x64
 8004f7a:	fb00 f303 	mul.w	r3, r0, r3
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	011b      	lsls	r3, r3, #4
 8004f82:	3332      	adds	r3, #50	; 0x32
 8004f84:	4a15      	ldr	r2, [pc, #84]	; (8004fdc <UART_SetConfig+0x118>)
 8004f86:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8a:	095b      	lsrs	r3, r3, #5
 8004f8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f90:	4419      	add	r1, r3
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	4613      	mov	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	009a      	lsls	r2, r3, #2
 8004f9c:	441a      	add	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fa8:	4b0c      	ldr	r3, [pc, #48]	; (8004fdc <UART_SetConfig+0x118>)
 8004faa:	fba3 0302 	umull	r0, r3, r3, r2
 8004fae:	095b      	lsrs	r3, r3, #5
 8004fb0:	2064      	movs	r0, #100	; 0x64
 8004fb2:	fb00 f303 	mul.w	r3, r0, r3
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	011b      	lsls	r3, r3, #4
 8004fba:	3332      	adds	r3, #50	; 0x32
 8004fbc:	4a07      	ldr	r2, [pc, #28]	; (8004fdc <UART_SetConfig+0x118>)
 8004fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc2:	095b      	lsrs	r3, r3, #5
 8004fc4:	f003 020f 	and.w	r2, r3, #15
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	440a      	add	r2, r1
 8004fce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004fd0:	bf00      	nop
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	40013800 	.word	0x40013800
 8004fdc:	51eb851f 	.word	0x51eb851f

08004fe0 <_ZdlPvj>:
 8004fe0:	f000 b81c 	b.w	800501c <_ZdlPv>

08004fe4 <_Znwj>:
 8004fe4:	2801      	cmp	r0, #1
 8004fe6:	bf38      	it	cc
 8004fe8:	2001      	movcc	r0, #1
 8004fea:	b510      	push	{r4, lr}
 8004fec:	4604      	mov	r4, r0
 8004fee:	4620      	mov	r0, r4
 8004ff0:	f000 f82a 	bl	8005048 <malloc>
 8004ff4:	b100      	cbz	r0, 8004ff8 <_Znwj+0x14>
 8004ff6:	bd10      	pop	{r4, pc}
 8004ff8:	f000 f812 	bl	8005020 <_ZSt15get_new_handlerv>
 8004ffc:	b908      	cbnz	r0, 8005002 <_Znwj+0x1e>
 8004ffe:	f000 f817 	bl	8005030 <abort>
 8005002:	4780      	blx	r0
 8005004:	e7f3      	b.n	8004fee <_Znwj+0xa>

08005006 <_Znaj>:
 8005006:	f7ff bfed 	b.w	8004fe4 <_Znwj>

0800500a <_ZSt17__throw_bad_allocv>:
 800500a:	b508      	push	{r3, lr}
 800500c:	f000 f810 	bl	8005030 <abort>

08005010 <_ZSt28__throw_bad_array_new_lengthv>:
 8005010:	b508      	push	{r3, lr}
 8005012:	f000 f80d 	bl	8005030 <abort>

08005016 <_ZSt20__throw_length_errorPKc>:
 8005016:	b508      	push	{r3, lr}
 8005018:	f000 f80a 	bl	8005030 <abort>

0800501c <_ZdlPv>:
 800501c:	f000 b81c 	b.w	8005058 <free>

08005020 <_ZSt15get_new_handlerv>:
 8005020:	4b02      	ldr	r3, [pc, #8]	; (800502c <_ZSt15get_new_handlerv+0xc>)
 8005022:	6818      	ldr	r0, [r3, #0]
 8005024:	f3bf 8f5b 	dmb	ish
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	20000a10 	.word	0x20000a10

08005030 <abort>:
 8005030:	2006      	movs	r0, #6
 8005032:	b508      	push	{r3, lr}
 8005034:	f000 fb28 	bl	8005688 <raise>
 8005038:	2001      	movs	r0, #1
 800503a:	f7fd fb1e 	bl	800267a <_exit>

0800503e <atoi>:
 800503e:	220a      	movs	r2, #10
 8005040:	2100      	movs	r1, #0
 8005042:	f000 b9a7 	b.w	8005394 <strtol>
	...

08005048 <malloc>:
 8005048:	4b02      	ldr	r3, [pc, #8]	; (8005054 <malloc+0xc>)
 800504a:	4601      	mov	r1, r0
 800504c:	6818      	ldr	r0, [r3, #0]
 800504e:	f000 b82b 	b.w	80050a8 <_malloc_r>
 8005052:	bf00      	nop
 8005054:	20000064 	.word	0x20000064

08005058 <free>:
 8005058:	4b02      	ldr	r3, [pc, #8]	; (8005064 <free+0xc>)
 800505a:	4601      	mov	r1, r0
 800505c:	6818      	ldr	r0, [r3, #0]
 800505e:	f000 bbdf 	b.w	8005820 <_free_r>
 8005062:	bf00      	nop
 8005064:	20000064 	.word	0x20000064

08005068 <sbrk_aligned>:
 8005068:	b570      	push	{r4, r5, r6, lr}
 800506a:	4e0e      	ldr	r6, [pc, #56]	; (80050a4 <sbrk_aligned+0x3c>)
 800506c:	460c      	mov	r4, r1
 800506e:	6831      	ldr	r1, [r6, #0]
 8005070:	4605      	mov	r5, r0
 8005072:	b911      	cbnz	r1, 800507a <sbrk_aligned+0x12>
 8005074:	f000 fb58 	bl	8005728 <_sbrk_r>
 8005078:	6030      	str	r0, [r6, #0]
 800507a:	4621      	mov	r1, r4
 800507c:	4628      	mov	r0, r5
 800507e:	f000 fb53 	bl	8005728 <_sbrk_r>
 8005082:	1c43      	adds	r3, r0, #1
 8005084:	d00a      	beq.n	800509c <sbrk_aligned+0x34>
 8005086:	1cc4      	adds	r4, r0, #3
 8005088:	f024 0403 	bic.w	r4, r4, #3
 800508c:	42a0      	cmp	r0, r4
 800508e:	d007      	beq.n	80050a0 <sbrk_aligned+0x38>
 8005090:	1a21      	subs	r1, r4, r0
 8005092:	4628      	mov	r0, r5
 8005094:	f000 fb48 	bl	8005728 <_sbrk_r>
 8005098:	3001      	adds	r0, #1
 800509a:	d101      	bne.n	80050a0 <sbrk_aligned+0x38>
 800509c:	f04f 34ff 	mov.w	r4, #4294967295
 80050a0:	4620      	mov	r0, r4
 80050a2:	bd70      	pop	{r4, r5, r6, pc}
 80050a4:	20000a18 	.word	0x20000a18

080050a8 <_malloc_r>:
 80050a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050ac:	1ccd      	adds	r5, r1, #3
 80050ae:	f025 0503 	bic.w	r5, r5, #3
 80050b2:	3508      	adds	r5, #8
 80050b4:	2d0c      	cmp	r5, #12
 80050b6:	bf38      	it	cc
 80050b8:	250c      	movcc	r5, #12
 80050ba:	2d00      	cmp	r5, #0
 80050bc:	4607      	mov	r7, r0
 80050be:	db01      	blt.n	80050c4 <_malloc_r+0x1c>
 80050c0:	42a9      	cmp	r1, r5
 80050c2:	d905      	bls.n	80050d0 <_malloc_r+0x28>
 80050c4:	230c      	movs	r3, #12
 80050c6:	2600      	movs	r6, #0
 80050c8:	603b      	str	r3, [r7, #0]
 80050ca:	4630      	mov	r0, r6
 80050cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80051a4 <_malloc_r+0xfc>
 80050d4:	f000 f868 	bl	80051a8 <__malloc_lock>
 80050d8:	f8d8 3000 	ldr.w	r3, [r8]
 80050dc:	461c      	mov	r4, r3
 80050de:	bb5c      	cbnz	r4, 8005138 <_malloc_r+0x90>
 80050e0:	4629      	mov	r1, r5
 80050e2:	4638      	mov	r0, r7
 80050e4:	f7ff ffc0 	bl	8005068 <sbrk_aligned>
 80050e8:	1c43      	adds	r3, r0, #1
 80050ea:	4604      	mov	r4, r0
 80050ec:	d155      	bne.n	800519a <_malloc_r+0xf2>
 80050ee:	f8d8 4000 	ldr.w	r4, [r8]
 80050f2:	4626      	mov	r6, r4
 80050f4:	2e00      	cmp	r6, #0
 80050f6:	d145      	bne.n	8005184 <_malloc_r+0xdc>
 80050f8:	2c00      	cmp	r4, #0
 80050fa:	d048      	beq.n	800518e <_malloc_r+0xe6>
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	4631      	mov	r1, r6
 8005100:	4638      	mov	r0, r7
 8005102:	eb04 0903 	add.w	r9, r4, r3
 8005106:	f000 fb0f 	bl	8005728 <_sbrk_r>
 800510a:	4581      	cmp	r9, r0
 800510c:	d13f      	bne.n	800518e <_malloc_r+0xe6>
 800510e:	6821      	ldr	r1, [r4, #0]
 8005110:	4638      	mov	r0, r7
 8005112:	1a6d      	subs	r5, r5, r1
 8005114:	4629      	mov	r1, r5
 8005116:	f7ff ffa7 	bl	8005068 <sbrk_aligned>
 800511a:	3001      	adds	r0, #1
 800511c:	d037      	beq.n	800518e <_malloc_r+0xe6>
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	442b      	add	r3, r5
 8005122:	6023      	str	r3, [r4, #0]
 8005124:	f8d8 3000 	ldr.w	r3, [r8]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d038      	beq.n	800519e <_malloc_r+0xf6>
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	42a2      	cmp	r2, r4
 8005130:	d12b      	bne.n	800518a <_malloc_r+0xe2>
 8005132:	2200      	movs	r2, #0
 8005134:	605a      	str	r2, [r3, #4]
 8005136:	e00f      	b.n	8005158 <_malloc_r+0xb0>
 8005138:	6822      	ldr	r2, [r4, #0]
 800513a:	1b52      	subs	r2, r2, r5
 800513c:	d41f      	bmi.n	800517e <_malloc_r+0xd6>
 800513e:	2a0b      	cmp	r2, #11
 8005140:	d917      	bls.n	8005172 <_malloc_r+0xca>
 8005142:	1961      	adds	r1, r4, r5
 8005144:	42a3      	cmp	r3, r4
 8005146:	6025      	str	r5, [r4, #0]
 8005148:	bf18      	it	ne
 800514a:	6059      	strne	r1, [r3, #4]
 800514c:	6863      	ldr	r3, [r4, #4]
 800514e:	bf08      	it	eq
 8005150:	f8c8 1000 	streq.w	r1, [r8]
 8005154:	5162      	str	r2, [r4, r5]
 8005156:	604b      	str	r3, [r1, #4]
 8005158:	4638      	mov	r0, r7
 800515a:	f104 060b 	add.w	r6, r4, #11
 800515e:	f000 f829 	bl	80051b4 <__malloc_unlock>
 8005162:	f026 0607 	bic.w	r6, r6, #7
 8005166:	1d23      	adds	r3, r4, #4
 8005168:	1af2      	subs	r2, r6, r3
 800516a:	d0ae      	beq.n	80050ca <_malloc_r+0x22>
 800516c:	1b9b      	subs	r3, r3, r6
 800516e:	50a3      	str	r3, [r4, r2]
 8005170:	e7ab      	b.n	80050ca <_malloc_r+0x22>
 8005172:	42a3      	cmp	r3, r4
 8005174:	6862      	ldr	r2, [r4, #4]
 8005176:	d1dd      	bne.n	8005134 <_malloc_r+0x8c>
 8005178:	f8c8 2000 	str.w	r2, [r8]
 800517c:	e7ec      	b.n	8005158 <_malloc_r+0xb0>
 800517e:	4623      	mov	r3, r4
 8005180:	6864      	ldr	r4, [r4, #4]
 8005182:	e7ac      	b.n	80050de <_malloc_r+0x36>
 8005184:	4634      	mov	r4, r6
 8005186:	6876      	ldr	r6, [r6, #4]
 8005188:	e7b4      	b.n	80050f4 <_malloc_r+0x4c>
 800518a:	4613      	mov	r3, r2
 800518c:	e7cc      	b.n	8005128 <_malloc_r+0x80>
 800518e:	230c      	movs	r3, #12
 8005190:	4638      	mov	r0, r7
 8005192:	603b      	str	r3, [r7, #0]
 8005194:	f000 f80e 	bl	80051b4 <__malloc_unlock>
 8005198:	e797      	b.n	80050ca <_malloc_r+0x22>
 800519a:	6025      	str	r5, [r4, #0]
 800519c:	e7dc      	b.n	8005158 <_malloc_r+0xb0>
 800519e:	605b      	str	r3, [r3, #4]
 80051a0:	deff      	udf	#255	; 0xff
 80051a2:	bf00      	nop
 80051a4:	20000a14 	.word	0x20000a14

080051a8 <__malloc_lock>:
 80051a8:	4801      	ldr	r0, [pc, #4]	; (80051b0 <__malloc_lock+0x8>)
 80051aa:	f000 bb0a 	b.w	80057c2 <__retarget_lock_acquire_recursive>
 80051ae:	bf00      	nop
 80051b0:	20000b5c 	.word	0x20000b5c

080051b4 <__malloc_unlock>:
 80051b4:	4801      	ldr	r0, [pc, #4]	; (80051bc <__malloc_unlock+0x8>)
 80051b6:	f000 bb05 	b.w	80057c4 <__retarget_lock_release_recursive>
 80051ba:	bf00      	nop
 80051bc:	20000b5c 	.word	0x20000b5c

080051c0 <srand>:
 80051c0:	b538      	push	{r3, r4, r5, lr}
 80051c2:	4b10      	ldr	r3, [pc, #64]	; (8005204 <srand+0x44>)
 80051c4:	4604      	mov	r4, r0
 80051c6:	681d      	ldr	r5, [r3, #0]
 80051c8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80051ca:	b9b3      	cbnz	r3, 80051fa <srand+0x3a>
 80051cc:	2018      	movs	r0, #24
 80051ce:	f7ff ff3b 	bl	8005048 <malloc>
 80051d2:	4602      	mov	r2, r0
 80051d4:	6328      	str	r0, [r5, #48]	; 0x30
 80051d6:	b920      	cbnz	r0, 80051e2 <srand+0x22>
 80051d8:	2146      	movs	r1, #70	; 0x46
 80051da:	4b0b      	ldr	r3, [pc, #44]	; (8005208 <srand+0x48>)
 80051dc:	480b      	ldr	r0, [pc, #44]	; (800520c <srand+0x4c>)
 80051de:	f000 fb01 	bl	80057e4 <__assert_func>
 80051e2:	490b      	ldr	r1, [pc, #44]	; (8005210 <srand+0x50>)
 80051e4:	4b0b      	ldr	r3, [pc, #44]	; (8005214 <srand+0x54>)
 80051e6:	e9c0 1300 	strd	r1, r3, [r0]
 80051ea:	4b0b      	ldr	r3, [pc, #44]	; (8005218 <srand+0x58>)
 80051ec:	2100      	movs	r1, #0
 80051ee:	6083      	str	r3, [r0, #8]
 80051f0:	230b      	movs	r3, #11
 80051f2:	8183      	strh	r3, [r0, #12]
 80051f4:	2001      	movs	r0, #1
 80051f6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80051fa:	2200      	movs	r2, #0
 80051fc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80051fe:	611c      	str	r4, [r3, #16]
 8005200:	615a      	str	r2, [r3, #20]
 8005202:	bd38      	pop	{r3, r4, r5, pc}
 8005204:	20000064 	.word	0x20000064
 8005208:	080066c6 	.word	0x080066c6
 800520c:	080066dd 	.word	0x080066dd
 8005210:	abcd330e 	.word	0xabcd330e
 8005214:	e66d1234 	.word	0xe66d1234
 8005218:	0005deec 	.word	0x0005deec

0800521c <rand>:
 800521c:	4b16      	ldr	r3, [pc, #88]	; (8005278 <rand+0x5c>)
 800521e:	b510      	push	{r4, lr}
 8005220:	681c      	ldr	r4, [r3, #0]
 8005222:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005224:	b9b3      	cbnz	r3, 8005254 <rand+0x38>
 8005226:	2018      	movs	r0, #24
 8005228:	f7ff ff0e 	bl	8005048 <malloc>
 800522c:	4602      	mov	r2, r0
 800522e:	6320      	str	r0, [r4, #48]	; 0x30
 8005230:	b920      	cbnz	r0, 800523c <rand+0x20>
 8005232:	2152      	movs	r1, #82	; 0x52
 8005234:	4b11      	ldr	r3, [pc, #68]	; (800527c <rand+0x60>)
 8005236:	4812      	ldr	r0, [pc, #72]	; (8005280 <rand+0x64>)
 8005238:	f000 fad4 	bl	80057e4 <__assert_func>
 800523c:	4911      	ldr	r1, [pc, #68]	; (8005284 <rand+0x68>)
 800523e:	4b12      	ldr	r3, [pc, #72]	; (8005288 <rand+0x6c>)
 8005240:	e9c0 1300 	strd	r1, r3, [r0]
 8005244:	4b11      	ldr	r3, [pc, #68]	; (800528c <rand+0x70>)
 8005246:	2100      	movs	r1, #0
 8005248:	6083      	str	r3, [r0, #8]
 800524a:	230b      	movs	r3, #11
 800524c:	8183      	strh	r3, [r0, #12]
 800524e:	2001      	movs	r0, #1
 8005250:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005254:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005256:	480e      	ldr	r0, [pc, #56]	; (8005290 <rand+0x74>)
 8005258:	690b      	ldr	r3, [r1, #16]
 800525a:	694c      	ldr	r4, [r1, #20]
 800525c:	4358      	muls	r0, r3
 800525e:	4a0d      	ldr	r2, [pc, #52]	; (8005294 <rand+0x78>)
 8005260:	fb02 0004 	mla	r0, r2, r4, r0
 8005264:	fba3 3202 	umull	r3, r2, r3, r2
 8005268:	3301      	adds	r3, #1
 800526a:	eb40 0002 	adc.w	r0, r0, r2
 800526e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8005272:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005276:	bd10      	pop	{r4, pc}
 8005278:	20000064 	.word	0x20000064
 800527c:	080066c6 	.word	0x080066c6
 8005280:	080066dd 	.word	0x080066dd
 8005284:	abcd330e 	.word	0xabcd330e
 8005288:	e66d1234 	.word	0xe66d1234
 800528c:	0005deec 	.word	0x0005deec
 8005290:	5851f42d 	.word	0x5851f42d
 8005294:	4c957f2d 	.word	0x4c957f2d

08005298 <_strtol_l.constprop.0>:
 8005298:	2b01      	cmp	r3, #1
 800529a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800529e:	4686      	mov	lr, r0
 80052a0:	4690      	mov	r8, r2
 80052a2:	d001      	beq.n	80052a8 <_strtol_l.constprop.0+0x10>
 80052a4:	2b24      	cmp	r3, #36	; 0x24
 80052a6:	d906      	bls.n	80052b6 <_strtol_l.constprop.0+0x1e>
 80052a8:	f000 fa60 	bl	800576c <__errno>
 80052ac:	2316      	movs	r3, #22
 80052ae:	6003      	str	r3, [r0, #0]
 80052b0:	2000      	movs	r0, #0
 80052b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052b6:	460d      	mov	r5, r1
 80052b8:	4835      	ldr	r0, [pc, #212]	; (8005390 <_strtol_l.constprop.0+0xf8>)
 80052ba:	462a      	mov	r2, r5
 80052bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80052c0:	5d06      	ldrb	r6, [r0, r4]
 80052c2:	f016 0608 	ands.w	r6, r6, #8
 80052c6:	d1f8      	bne.n	80052ba <_strtol_l.constprop.0+0x22>
 80052c8:	2c2d      	cmp	r4, #45	; 0x2d
 80052ca:	d12e      	bne.n	800532a <_strtol_l.constprop.0+0x92>
 80052cc:	2601      	movs	r6, #1
 80052ce:	782c      	ldrb	r4, [r5, #0]
 80052d0:	1c95      	adds	r5, r2, #2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d057      	beq.n	8005386 <_strtol_l.constprop.0+0xee>
 80052d6:	2b10      	cmp	r3, #16
 80052d8:	d109      	bne.n	80052ee <_strtol_l.constprop.0+0x56>
 80052da:	2c30      	cmp	r4, #48	; 0x30
 80052dc:	d107      	bne.n	80052ee <_strtol_l.constprop.0+0x56>
 80052de:	782a      	ldrb	r2, [r5, #0]
 80052e0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80052e4:	2a58      	cmp	r2, #88	; 0x58
 80052e6:	d149      	bne.n	800537c <_strtol_l.constprop.0+0xe4>
 80052e8:	2310      	movs	r3, #16
 80052ea:	786c      	ldrb	r4, [r5, #1]
 80052ec:	3502      	adds	r5, #2
 80052ee:	2200      	movs	r2, #0
 80052f0:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 80052f4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80052f8:	fbbc f9f3 	udiv	r9, ip, r3
 80052fc:	4610      	mov	r0, r2
 80052fe:	fb03 ca19 	mls	sl, r3, r9, ip
 8005302:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005306:	2f09      	cmp	r7, #9
 8005308:	d814      	bhi.n	8005334 <_strtol_l.constprop.0+0x9c>
 800530a:	463c      	mov	r4, r7
 800530c:	42a3      	cmp	r3, r4
 800530e:	dd20      	ble.n	8005352 <_strtol_l.constprop.0+0xba>
 8005310:	1c57      	adds	r7, r2, #1
 8005312:	d007      	beq.n	8005324 <_strtol_l.constprop.0+0x8c>
 8005314:	4581      	cmp	r9, r0
 8005316:	d319      	bcc.n	800534c <_strtol_l.constprop.0+0xb4>
 8005318:	d101      	bne.n	800531e <_strtol_l.constprop.0+0x86>
 800531a:	45a2      	cmp	sl, r4
 800531c:	db16      	blt.n	800534c <_strtol_l.constprop.0+0xb4>
 800531e:	2201      	movs	r2, #1
 8005320:	fb00 4003 	mla	r0, r0, r3, r4
 8005324:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005328:	e7eb      	b.n	8005302 <_strtol_l.constprop.0+0x6a>
 800532a:	2c2b      	cmp	r4, #43	; 0x2b
 800532c:	bf04      	itt	eq
 800532e:	782c      	ldrbeq	r4, [r5, #0]
 8005330:	1c95      	addeq	r5, r2, #2
 8005332:	e7ce      	b.n	80052d2 <_strtol_l.constprop.0+0x3a>
 8005334:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005338:	2f19      	cmp	r7, #25
 800533a:	d801      	bhi.n	8005340 <_strtol_l.constprop.0+0xa8>
 800533c:	3c37      	subs	r4, #55	; 0x37
 800533e:	e7e5      	b.n	800530c <_strtol_l.constprop.0+0x74>
 8005340:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005344:	2f19      	cmp	r7, #25
 8005346:	d804      	bhi.n	8005352 <_strtol_l.constprop.0+0xba>
 8005348:	3c57      	subs	r4, #87	; 0x57
 800534a:	e7df      	b.n	800530c <_strtol_l.constprop.0+0x74>
 800534c:	f04f 32ff 	mov.w	r2, #4294967295
 8005350:	e7e8      	b.n	8005324 <_strtol_l.constprop.0+0x8c>
 8005352:	1c53      	adds	r3, r2, #1
 8005354:	d108      	bne.n	8005368 <_strtol_l.constprop.0+0xd0>
 8005356:	2322      	movs	r3, #34	; 0x22
 8005358:	4660      	mov	r0, ip
 800535a:	f8ce 3000 	str.w	r3, [lr]
 800535e:	f1b8 0f00 	cmp.w	r8, #0
 8005362:	d0a6      	beq.n	80052b2 <_strtol_l.constprop.0+0x1a>
 8005364:	1e69      	subs	r1, r5, #1
 8005366:	e006      	b.n	8005376 <_strtol_l.constprop.0+0xde>
 8005368:	b106      	cbz	r6, 800536c <_strtol_l.constprop.0+0xd4>
 800536a:	4240      	negs	r0, r0
 800536c:	f1b8 0f00 	cmp.w	r8, #0
 8005370:	d09f      	beq.n	80052b2 <_strtol_l.constprop.0+0x1a>
 8005372:	2a00      	cmp	r2, #0
 8005374:	d1f6      	bne.n	8005364 <_strtol_l.constprop.0+0xcc>
 8005376:	f8c8 1000 	str.w	r1, [r8]
 800537a:	e79a      	b.n	80052b2 <_strtol_l.constprop.0+0x1a>
 800537c:	2430      	movs	r4, #48	; 0x30
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1b5      	bne.n	80052ee <_strtol_l.constprop.0+0x56>
 8005382:	2308      	movs	r3, #8
 8005384:	e7b3      	b.n	80052ee <_strtol_l.constprop.0+0x56>
 8005386:	2c30      	cmp	r4, #48	; 0x30
 8005388:	d0a9      	beq.n	80052de <_strtol_l.constprop.0+0x46>
 800538a:	230a      	movs	r3, #10
 800538c:	e7af      	b.n	80052ee <_strtol_l.constprop.0+0x56>
 800538e:	bf00      	nop
 8005390:	08006736 	.word	0x08006736

08005394 <strtol>:
 8005394:	4613      	mov	r3, r2
 8005396:	460a      	mov	r2, r1
 8005398:	4601      	mov	r1, r0
 800539a:	4802      	ldr	r0, [pc, #8]	; (80053a4 <strtol+0x10>)
 800539c:	6800      	ldr	r0, [r0, #0]
 800539e:	f7ff bf7b 	b.w	8005298 <_strtol_l.constprop.0>
 80053a2:	bf00      	nop
 80053a4:	20000064 	.word	0x20000064

080053a8 <std>:
 80053a8:	2300      	movs	r3, #0
 80053aa:	b510      	push	{r4, lr}
 80053ac:	4604      	mov	r4, r0
 80053ae:	e9c0 3300 	strd	r3, r3, [r0]
 80053b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053b6:	6083      	str	r3, [r0, #8]
 80053b8:	8181      	strh	r1, [r0, #12]
 80053ba:	6643      	str	r3, [r0, #100]	; 0x64
 80053bc:	81c2      	strh	r2, [r0, #14]
 80053be:	6183      	str	r3, [r0, #24]
 80053c0:	4619      	mov	r1, r3
 80053c2:	2208      	movs	r2, #8
 80053c4:	305c      	adds	r0, #92	; 0x5c
 80053c6:	f000 f92e 	bl	8005626 <memset>
 80053ca:	4b0d      	ldr	r3, [pc, #52]	; (8005400 <std+0x58>)
 80053cc:	6224      	str	r4, [r4, #32]
 80053ce:	6263      	str	r3, [r4, #36]	; 0x24
 80053d0:	4b0c      	ldr	r3, [pc, #48]	; (8005404 <std+0x5c>)
 80053d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80053d4:	4b0c      	ldr	r3, [pc, #48]	; (8005408 <std+0x60>)
 80053d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80053d8:	4b0c      	ldr	r3, [pc, #48]	; (800540c <std+0x64>)
 80053da:	6323      	str	r3, [r4, #48]	; 0x30
 80053dc:	4b0c      	ldr	r3, [pc, #48]	; (8005410 <std+0x68>)
 80053de:	429c      	cmp	r4, r3
 80053e0:	d006      	beq.n	80053f0 <std+0x48>
 80053e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80053e6:	4294      	cmp	r4, r2
 80053e8:	d002      	beq.n	80053f0 <std+0x48>
 80053ea:	33d0      	adds	r3, #208	; 0xd0
 80053ec:	429c      	cmp	r4, r3
 80053ee:	d105      	bne.n	80053fc <std+0x54>
 80053f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80053f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053f8:	f000 b9e2 	b.w	80057c0 <__retarget_lock_init_recursive>
 80053fc:	bd10      	pop	{r4, pc}
 80053fe:	bf00      	nop
 8005400:	0800556d 	.word	0x0800556d
 8005404:	0800558f 	.word	0x0800558f
 8005408:	080055c7 	.word	0x080055c7
 800540c:	080055eb 	.word	0x080055eb
 8005410:	20000a1c 	.word	0x20000a1c

08005414 <stdio_exit_handler>:
 8005414:	4a02      	ldr	r2, [pc, #8]	; (8005420 <stdio_exit_handler+0xc>)
 8005416:	4903      	ldr	r1, [pc, #12]	; (8005424 <stdio_exit_handler+0x10>)
 8005418:	4803      	ldr	r0, [pc, #12]	; (8005428 <stdio_exit_handler+0x14>)
 800541a:	f000 b869 	b.w	80054f0 <_fwalk_sglue>
 800541e:	bf00      	nop
 8005420:	2000000c 	.word	0x2000000c
 8005424:	08005f8d 	.word	0x08005f8d
 8005428:	20000018 	.word	0x20000018

0800542c <cleanup_stdio>:
 800542c:	6841      	ldr	r1, [r0, #4]
 800542e:	4b0c      	ldr	r3, [pc, #48]	; (8005460 <cleanup_stdio+0x34>)
 8005430:	b510      	push	{r4, lr}
 8005432:	4299      	cmp	r1, r3
 8005434:	4604      	mov	r4, r0
 8005436:	d001      	beq.n	800543c <cleanup_stdio+0x10>
 8005438:	f000 fda8 	bl	8005f8c <_fflush_r>
 800543c:	68a1      	ldr	r1, [r4, #8]
 800543e:	4b09      	ldr	r3, [pc, #36]	; (8005464 <cleanup_stdio+0x38>)
 8005440:	4299      	cmp	r1, r3
 8005442:	d002      	beq.n	800544a <cleanup_stdio+0x1e>
 8005444:	4620      	mov	r0, r4
 8005446:	f000 fda1 	bl	8005f8c <_fflush_r>
 800544a:	68e1      	ldr	r1, [r4, #12]
 800544c:	4b06      	ldr	r3, [pc, #24]	; (8005468 <cleanup_stdio+0x3c>)
 800544e:	4299      	cmp	r1, r3
 8005450:	d004      	beq.n	800545c <cleanup_stdio+0x30>
 8005452:	4620      	mov	r0, r4
 8005454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005458:	f000 bd98 	b.w	8005f8c <_fflush_r>
 800545c:	bd10      	pop	{r4, pc}
 800545e:	bf00      	nop
 8005460:	20000a1c 	.word	0x20000a1c
 8005464:	20000a84 	.word	0x20000a84
 8005468:	20000aec 	.word	0x20000aec

0800546c <global_stdio_init.part.0>:
 800546c:	b510      	push	{r4, lr}
 800546e:	4b0b      	ldr	r3, [pc, #44]	; (800549c <global_stdio_init.part.0+0x30>)
 8005470:	4c0b      	ldr	r4, [pc, #44]	; (80054a0 <global_stdio_init.part.0+0x34>)
 8005472:	4a0c      	ldr	r2, [pc, #48]	; (80054a4 <global_stdio_init.part.0+0x38>)
 8005474:	4620      	mov	r0, r4
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	2104      	movs	r1, #4
 800547a:	2200      	movs	r2, #0
 800547c:	f7ff ff94 	bl	80053a8 <std>
 8005480:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005484:	2201      	movs	r2, #1
 8005486:	2109      	movs	r1, #9
 8005488:	f7ff ff8e 	bl	80053a8 <std>
 800548c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005490:	2202      	movs	r2, #2
 8005492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005496:	2112      	movs	r1, #18
 8005498:	f7ff bf86 	b.w	80053a8 <std>
 800549c:	20000b54 	.word	0x20000b54
 80054a0:	20000a1c 	.word	0x20000a1c
 80054a4:	08005415 	.word	0x08005415

080054a8 <__sfp_lock_acquire>:
 80054a8:	4801      	ldr	r0, [pc, #4]	; (80054b0 <__sfp_lock_acquire+0x8>)
 80054aa:	f000 b98a 	b.w	80057c2 <__retarget_lock_acquire_recursive>
 80054ae:	bf00      	nop
 80054b0:	20000b5d 	.word	0x20000b5d

080054b4 <__sfp_lock_release>:
 80054b4:	4801      	ldr	r0, [pc, #4]	; (80054bc <__sfp_lock_release+0x8>)
 80054b6:	f000 b985 	b.w	80057c4 <__retarget_lock_release_recursive>
 80054ba:	bf00      	nop
 80054bc:	20000b5d 	.word	0x20000b5d

080054c0 <__sinit>:
 80054c0:	b510      	push	{r4, lr}
 80054c2:	4604      	mov	r4, r0
 80054c4:	f7ff fff0 	bl	80054a8 <__sfp_lock_acquire>
 80054c8:	6a23      	ldr	r3, [r4, #32]
 80054ca:	b11b      	cbz	r3, 80054d4 <__sinit+0x14>
 80054cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054d0:	f7ff bff0 	b.w	80054b4 <__sfp_lock_release>
 80054d4:	4b04      	ldr	r3, [pc, #16]	; (80054e8 <__sinit+0x28>)
 80054d6:	6223      	str	r3, [r4, #32]
 80054d8:	4b04      	ldr	r3, [pc, #16]	; (80054ec <__sinit+0x2c>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1f5      	bne.n	80054cc <__sinit+0xc>
 80054e0:	f7ff ffc4 	bl	800546c <global_stdio_init.part.0>
 80054e4:	e7f2      	b.n	80054cc <__sinit+0xc>
 80054e6:	bf00      	nop
 80054e8:	0800542d 	.word	0x0800542d
 80054ec:	20000b54 	.word	0x20000b54

080054f0 <_fwalk_sglue>:
 80054f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054f4:	4607      	mov	r7, r0
 80054f6:	4688      	mov	r8, r1
 80054f8:	4614      	mov	r4, r2
 80054fa:	2600      	movs	r6, #0
 80054fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005500:	f1b9 0901 	subs.w	r9, r9, #1
 8005504:	d505      	bpl.n	8005512 <_fwalk_sglue+0x22>
 8005506:	6824      	ldr	r4, [r4, #0]
 8005508:	2c00      	cmp	r4, #0
 800550a:	d1f7      	bne.n	80054fc <_fwalk_sglue+0xc>
 800550c:	4630      	mov	r0, r6
 800550e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005512:	89ab      	ldrh	r3, [r5, #12]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d907      	bls.n	8005528 <_fwalk_sglue+0x38>
 8005518:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800551c:	3301      	adds	r3, #1
 800551e:	d003      	beq.n	8005528 <_fwalk_sglue+0x38>
 8005520:	4629      	mov	r1, r5
 8005522:	4638      	mov	r0, r7
 8005524:	47c0      	blx	r8
 8005526:	4306      	orrs	r6, r0
 8005528:	3568      	adds	r5, #104	; 0x68
 800552a:	e7e9      	b.n	8005500 <_fwalk_sglue+0x10>

0800552c <siprintf>:
 800552c:	b40e      	push	{r1, r2, r3}
 800552e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005532:	b500      	push	{lr}
 8005534:	b09c      	sub	sp, #112	; 0x70
 8005536:	ab1d      	add	r3, sp, #116	; 0x74
 8005538:	9002      	str	r0, [sp, #8]
 800553a:	9006      	str	r0, [sp, #24]
 800553c:	9107      	str	r1, [sp, #28]
 800553e:	9104      	str	r1, [sp, #16]
 8005540:	4808      	ldr	r0, [pc, #32]	; (8005564 <siprintf+0x38>)
 8005542:	4909      	ldr	r1, [pc, #36]	; (8005568 <siprintf+0x3c>)
 8005544:	f853 2b04 	ldr.w	r2, [r3], #4
 8005548:	9105      	str	r1, [sp, #20]
 800554a:	6800      	ldr	r0, [r0, #0]
 800554c:	a902      	add	r1, sp, #8
 800554e:	9301      	str	r3, [sp, #4]
 8005550:	f000 fa08 	bl	8005964 <_svfiprintf_r>
 8005554:	2200      	movs	r2, #0
 8005556:	9b02      	ldr	r3, [sp, #8]
 8005558:	701a      	strb	r2, [r3, #0]
 800555a:	b01c      	add	sp, #112	; 0x70
 800555c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005560:	b003      	add	sp, #12
 8005562:	4770      	bx	lr
 8005564:	20000064 	.word	0x20000064
 8005568:	ffff0208 	.word	0xffff0208

0800556c <__sread>:
 800556c:	b510      	push	{r4, lr}
 800556e:	460c      	mov	r4, r1
 8005570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005574:	f000 f8b2 	bl	80056dc <_read_r>
 8005578:	2800      	cmp	r0, #0
 800557a:	bfab      	itete	ge
 800557c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800557e:	89a3      	ldrhlt	r3, [r4, #12]
 8005580:	181b      	addge	r3, r3, r0
 8005582:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005586:	bfac      	ite	ge
 8005588:	6563      	strge	r3, [r4, #84]	; 0x54
 800558a:	81a3      	strhlt	r3, [r4, #12]
 800558c:	bd10      	pop	{r4, pc}

0800558e <__swrite>:
 800558e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005592:	461f      	mov	r7, r3
 8005594:	898b      	ldrh	r3, [r1, #12]
 8005596:	4605      	mov	r5, r0
 8005598:	05db      	lsls	r3, r3, #23
 800559a:	460c      	mov	r4, r1
 800559c:	4616      	mov	r6, r2
 800559e:	d505      	bpl.n	80055ac <__swrite+0x1e>
 80055a0:	2302      	movs	r3, #2
 80055a2:	2200      	movs	r2, #0
 80055a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055a8:	f000 f886 	bl	80056b8 <_lseek_r>
 80055ac:	89a3      	ldrh	r3, [r4, #12]
 80055ae:	4632      	mov	r2, r6
 80055b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055b4:	81a3      	strh	r3, [r4, #12]
 80055b6:	4628      	mov	r0, r5
 80055b8:	463b      	mov	r3, r7
 80055ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055c2:	f000 b8c1 	b.w	8005748 <_write_r>

080055c6 <__sseek>:
 80055c6:	b510      	push	{r4, lr}
 80055c8:	460c      	mov	r4, r1
 80055ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ce:	f000 f873 	bl	80056b8 <_lseek_r>
 80055d2:	1c43      	adds	r3, r0, #1
 80055d4:	89a3      	ldrh	r3, [r4, #12]
 80055d6:	bf15      	itete	ne
 80055d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80055da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80055de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80055e2:	81a3      	strheq	r3, [r4, #12]
 80055e4:	bf18      	it	ne
 80055e6:	81a3      	strhne	r3, [r4, #12]
 80055e8:	bd10      	pop	{r4, pc}

080055ea <__sclose>:
 80055ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ee:	f000 b853 	b.w	8005698 <_close_r>

080055f2 <memmove>:
 80055f2:	4288      	cmp	r0, r1
 80055f4:	b510      	push	{r4, lr}
 80055f6:	eb01 0402 	add.w	r4, r1, r2
 80055fa:	d902      	bls.n	8005602 <memmove+0x10>
 80055fc:	4284      	cmp	r4, r0
 80055fe:	4623      	mov	r3, r4
 8005600:	d807      	bhi.n	8005612 <memmove+0x20>
 8005602:	1e43      	subs	r3, r0, #1
 8005604:	42a1      	cmp	r1, r4
 8005606:	d008      	beq.n	800561a <memmove+0x28>
 8005608:	f811 2b01 	ldrb.w	r2, [r1], #1
 800560c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005610:	e7f8      	b.n	8005604 <memmove+0x12>
 8005612:	4601      	mov	r1, r0
 8005614:	4402      	add	r2, r0
 8005616:	428a      	cmp	r2, r1
 8005618:	d100      	bne.n	800561c <memmove+0x2a>
 800561a:	bd10      	pop	{r4, pc}
 800561c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005620:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005624:	e7f7      	b.n	8005616 <memmove+0x24>

08005626 <memset>:
 8005626:	4603      	mov	r3, r0
 8005628:	4402      	add	r2, r0
 800562a:	4293      	cmp	r3, r2
 800562c:	d100      	bne.n	8005630 <memset+0xa>
 800562e:	4770      	bx	lr
 8005630:	f803 1b01 	strb.w	r1, [r3], #1
 8005634:	e7f9      	b.n	800562a <memset+0x4>

08005636 <_raise_r>:
 8005636:	291f      	cmp	r1, #31
 8005638:	b538      	push	{r3, r4, r5, lr}
 800563a:	4604      	mov	r4, r0
 800563c:	460d      	mov	r5, r1
 800563e:	d904      	bls.n	800564a <_raise_r+0x14>
 8005640:	2316      	movs	r3, #22
 8005642:	6003      	str	r3, [r0, #0]
 8005644:	f04f 30ff 	mov.w	r0, #4294967295
 8005648:	bd38      	pop	{r3, r4, r5, pc}
 800564a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800564c:	b112      	cbz	r2, 8005654 <_raise_r+0x1e>
 800564e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005652:	b94b      	cbnz	r3, 8005668 <_raise_r+0x32>
 8005654:	4620      	mov	r0, r4
 8005656:	f000 f865 	bl	8005724 <_getpid_r>
 800565a:	462a      	mov	r2, r5
 800565c:	4601      	mov	r1, r0
 800565e:	4620      	mov	r0, r4
 8005660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005664:	f000 b84c 	b.w	8005700 <_kill_r>
 8005668:	2b01      	cmp	r3, #1
 800566a:	d00a      	beq.n	8005682 <_raise_r+0x4c>
 800566c:	1c59      	adds	r1, r3, #1
 800566e:	d103      	bne.n	8005678 <_raise_r+0x42>
 8005670:	2316      	movs	r3, #22
 8005672:	6003      	str	r3, [r0, #0]
 8005674:	2001      	movs	r0, #1
 8005676:	e7e7      	b.n	8005648 <_raise_r+0x12>
 8005678:	2400      	movs	r4, #0
 800567a:	4628      	mov	r0, r5
 800567c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005680:	4798      	blx	r3
 8005682:	2000      	movs	r0, #0
 8005684:	e7e0      	b.n	8005648 <_raise_r+0x12>
	...

08005688 <raise>:
 8005688:	4b02      	ldr	r3, [pc, #8]	; (8005694 <raise+0xc>)
 800568a:	4601      	mov	r1, r0
 800568c:	6818      	ldr	r0, [r3, #0]
 800568e:	f7ff bfd2 	b.w	8005636 <_raise_r>
 8005692:	bf00      	nop
 8005694:	20000064 	.word	0x20000064

08005698 <_close_r>:
 8005698:	b538      	push	{r3, r4, r5, lr}
 800569a:	2300      	movs	r3, #0
 800569c:	4d05      	ldr	r5, [pc, #20]	; (80056b4 <_close_r+0x1c>)
 800569e:	4604      	mov	r4, r0
 80056a0:	4608      	mov	r0, r1
 80056a2:	602b      	str	r3, [r5, #0]
 80056a4:	f7fd f82c 	bl	8002700 <_close>
 80056a8:	1c43      	adds	r3, r0, #1
 80056aa:	d102      	bne.n	80056b2 <_close_r+0x1a>
 80056ac:	682b      	ldr	r3, [r5, #0]
 80056ae:	b103      	cbz	r3, 80056b2 <_close_r+0x1a>
 80056b0:	6023      	str	r3, [r4, #0]
 80056b2:	bd38      	pop	{r3, r4, r5, pc}
 80056b4:	20000b58 	.word	0x20000b58

080056b8 <_lseek_r>:
 80056b8:	b538      	push	{r3, r4, r5, lr}
 80056ba:	4604      	mov	r4, r0
 80056bc:	4608      	mov	r0, r1
 80056be:	4611      	mov	r1, r2
 80056c0:	2200      	movs	r2, #0
 80056c2:	4d05      	ldr	r5, [pc, #20]	; (80056d8 <_lseek_r+0x20>)
 80056c4:	602a      	str	r2, [r5, #0]
 80056c6:	461a      	mov	r2, r3
 80056c8:	f7fd f83e 	bl	8002748 <_lseek>
 80056cc:	1c43      	adds	r3, r0, #1
 80056ce:	d102      	bne.n	80056d6 <_lseek_r+0x1e>
 80056d0:	682b      	ldr	r3, [r5, #0]
 80056d2:	b103      	cbz	r3, 80056d6 <_lseek_r+0x1e>
 80056d4:	6023      	str	r3, [r4, #0]
 80056d6:	bd38      	pop	{r3, r4, r5, pc}
 80056d8:	20000b58 	.word	0x20000b58

080056dc <_read_r>:
 80056dc:	b538      	push	{r3, r4, r5, lr}
 80056de:	4604      	mov	r4, r0
 80056e0:	4608      	mov	r0, r1
 80056e2:	4611      	mov	r1, r2
 80056e4:	2200      	movs	r2, #0
 80056e6:	4d05      	ldr	r5, [pc, #20]	; (80056fc <_read_r+0x20>)
 80056e8:	602a      	str	r2, [r5, #0]
 80056ea:	461a      	mov	r2, r3
 80056ec:	f7fc ffcf 	bl	800268e <_read>
 80056f0:	1c43      	adds	r3, r0, #1
 80056f2:	d102      	bne.n	80056fa <_read_r+0x1e>
 80056f4:	682b      	ldr	r3, [r5, #0]
 80056f6:	b103      	cbz	r3, 80056fa <_read_r+0x1e>
 80056f8:	6023      	str	r3, [r4, #0]
 80056fa:	bd38      	pop	{r3, r4, r5, pc}
 80056fc:	20000b58 	.word	0x20000b58

08005700 <_kill_r>:
 8005700:	b538      	push	{r3, r4, r5, lr}
 8005702:	2300      	movs	r3, #0
 8005704:	4d06      	ldr	r5, [pc, #24]	; (8005720 <_kill_r+0x20>)
 8005706:	4604      	mov	r4, r0
 8005708:	4608      	mov	r0, r1
 800570a:	4611      	mov	r1, r2
 800570c:	602b      	str	r3, [r5, #0]
 800570e:	f7fc ffa4 	bl	800265a <_kill>
 8005712:	1c43      	adds	r3, r0, #1
 8005714:	d102      	bne.n	800571c <_kill_r+0x1c>
 8005716:	682b      	ldr	r3, [r5, #0]
 8005718:	b103      	cbz	r3, 800571c <_kill_r+0x1c>
 800571a:	6023      	str	r3, [r4, #0]
 800571c:	bd38      	pop	{r3, r4, r5, pc}
 800571e:	bf00      	nop
 8005720:	20000b58 	.word	0x20000b58

08005724 <_getpid_r>:
 8005724:	f7fc bf92 	b.w	800264c <_getpid>

08005728 <_sbrk_r>:
 8005728:	b538      	push	{r3, r4, r5, lr}
 800572a:	2300      	movs	r3, #0
 800572c:	4d05      	ldr	r5, [pc, #20]	; (8005744 <_sbrk_r+0x1c>)
 800572e:	4604      	mov	r4, r0
 8005730:	4608      	mov	r0, r1
 8005732:	602b      	str	r3, [r5, #0]
 8005734:	f7fd f814 	bl	8002760 <_sbrk>
 8005738:	1c43      	adds	r3, r0, #1
 800573a:	d102      	bne.n	8005742 <_sbrk_r+0x1a>
 800573c:	682b      	ldr	r3, [r5, #0]
 800573e:	b103      	cbz	r3, 8005742 <_sbrk_r+0x1a>
 8005740:	6023      	str	r3, [r4, #0]
 8005742:	bd38      	pop	{r3, r4, r5, pc}
 8005744:	20000b58 	.word	0x20000b58

08005748 <_write_r>:
 8005748:	b538      	push	{r3, r4, r5, lr}
 800574a:	4604      	mov	r4, r0
 800574c:	4608      	mov	r0, r1
 800574e:	4611      	mov	r1, r2
 8005750:	2200      	movs	r2, #0
 8005752:	4d05      	ldr	r5, [pc, #20]	; (8005768 <_write_r+0x20>)
 8005754:	602a      	str	r2, [r5, #0]
 8005756:	461a      	mov	r2, r3
 8005758:	f7fc ffb6 	bl	80026c8 <_write>
 800575c:	1c43      	adds	r3, r0, #1
 800575e:	d102      	bne.n	8005766 <_write_r+0x1e>
 8005760:	682b      	ldr	r3, [r5, #0]
 8005762:	b103      	cbz	r3, 8005766 <_write_r+0x1e>
 8005764:	6023      	str	r3, [r4, #0]
 8005766:	bd38      	pop	{r3, r4, r5, pc}
 8005768:	20000b58 	.word	0x20000b58

0800576c <__errno>:
 800576c:	4b01      	ldr	r3, [pc, #4]	; (8005774 <__errno+0x8>)
 800576e:	6818      	ldr	r0, [r3, #0]
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	20000064 	.word	0x20000064

08005778 <__libc_init_array>:
 8005778:	b570      	push	{r4, r5, r6, lr}
 800577a:	2600      	movs	r6, #0
 800577c:	4d0c      	ldr	r5, [pc, #48]	; (80057b0 <__libc_init_array+0x38>)
 800577e:	4c0d      	ldr	r4, [pc, #52]	; (80057b4 <__libc_init_array+0x3c>)
 8005780:	1b64      	subs	r4, r4, r5
 8005782:	10a4      	asrs	r4, r4, #2
 8005784:	42a6      	cmp	r6, r4
 8005786:	d109      	bne.n	800579c <__libc_init_array+0x24>
 8005788:	f000 feda 	bl	8006540 <_init>
 800578c:	2600      	movs	r6, #0
 800578e:	4d0a      	ldr	r5, [pc, #40]	; (80057b8 <__libc_init_array+0x40>)
 8005790:	4c0a      	ldr	r4, [pc, #40]	; (80057bc <__libc_init_array+0x44>)
 8005792:	1b64      	subs	r4, r4, r5
 8005794:	10a4      	asrs	r4, r4, #2
 8005796:	42a6      	cmp	r6, r4
 8005798:	d105      	bne.n	80057a6 <__libc_init_array+0x2e>
 800579a:	bd70      	pop	{r4, r5, r6, pc}
 800579c:	f855 3b04 	ldr.w	r3, [r5], #4
 80057a0:	4798      	blx	r3
 80057a2:	3601      	adds	r6, #1
 80057a4:	e7ee      	b.n	8005784 <__libc_init_array+0xc>
 80057a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80057aa:	4798      	blx	r3
 80057ac:	3601      	adds	r6, #1
 80057ae:	e7f2      	b.n	8005796 <__libc_init_array+0x1e>
 80057b0:	080068a8 	.word	0x080068a8
 80057b4:	080068a8 	.word	0x080068a8
 80057b8:	080068a8 	.word	0x080068a8
 80057bc:	080068b0 	.word	0x080068b0

080057c0 <__retarget_lock_init_recursive>:
 80057c0:	4770      	bx	lr

080057c2 <__retarget_lock_acquire_recursive>:
 80057c2:	4770      	bx	lr

080057c4 <__retarget_lock_release_recursive>:
 80057c4:	4770      	bx	lr

080057c6 <memcpy>:
 80057c6:	440a      	add	r2, r1
 80057c8:	4291      	cmp	r1, r2
 80057ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80057ce:	d100      	bne.n	80057d2 <memcpy+0xc>
 80057d0:	4770      	bx	lr
 80057d2:	b510      	push	{r4, lr}
 80057d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057d8:	4291      	cmp	r1, r2
 80057da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057de:	d1f9      	bne.n	80057d4 <memcpy+0xe>
 80057e0:	bd10      	pop	{r4, pc}
	...

080057e4 <__assert_func>:
 80057e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80057e6:	4614      	mov	r4, r2
 80057e8:	461a      	mov	r2, r3
 80057ea:	4b09      	ldr	r3, [pc, #36]	; (8005810 <__assert_func+0x2c>)
 80057ec:	4605      	mov	r5, r0
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68d8      	ldr	r0, [r3, #12]
 80057f2:	b14c      	cbz	r4, 8005808 <__assert_func+0x24>
 80057f4:	4b07      	ldr	r3, [pc, #28]	; (8005814 <__assert_func+0x30>)
 80057f6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80057fa:	9100      	str	r1, [sp, #0]
 80057fc:	462b      	mov	r3, r5
 80057fe:	4906      	ldr	r1, [pc, #24]	; (8005818 <__assert_func+0x34>)
 8005800:	f000 fbec 	bl	8005fdc <fiprintf>
 8005804:	f7ff fc14 	bl	8005030 <abort>
 8005808:	4b04      	ldr	r3, [pc, #16]	; (800581c <__assert_func+0x38>)
 800580a:	461c      	mov	r4, r3
 800580c:	e7f3      	b.n	80057f6 <__assert_func+0x12>
 800580e:	bf00      	nop
 8005810:	20000064 	.word	0x20000064
 8005814:	08006836 	.word	0x08006836
 8005818:	08006843 	.word	0x08006843
 800581c:	08006871 	.word	0x08006871

08005820 <_free_r>:
 8005820:	b538      	push	{r3, r4, r5, lr}
 8005822:	4605      	mov	r5, r0
 8005824:	2900      	cmp	r1, #0
 8005826:	d040      	beq.n	80058aa <_free_r+0x8a>
 8005828:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800582c:	1f0c      	subs	r4, r1, #4
 800582e:	2b00      	cmp	r3, #0
 8005830:	bfb8      	it	lt
 8005832:	18e4      	addlt	r4, r4, r3
 8005834:	f7ff fcb8 	bl	80051a8 <__malloc_lock>
 8005838:	4a1c      	ldr	r2, [pc, #112]	; (80058ac <_free_r+0x8c>)
 800583a:	6813      	ldr	r3, [r2, #0]
 800583c:	b933      	cbnz	r3, 800584c <_free_r+0x2c>
 800583e:	6063      	str	r3, [r4, #4]
 8005840:	6014      	str	r4, [r2, #0]
 8005842:	4628      	mov	r0, r5
 8005844:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005848:	f7ff bcb4 	b.w	80051b4 <__malloc_unlock>
 800584c:	42a3      	cmp	r3, r4
 800584e:	d908      	bls.n	8005862 <_free_r+0x42>
 8005850:	6820      	ldr	r0, [r4, #0]
 8005852:	1821      	adds	r1, r4, r0
 8005854:	428b      	cmp	r3, r1
 8005856:	bf01      	itttt	eq
 8005858:	6819      	ldreq	r1, [r3, #0]
 800585a:	685b      	ldreq	r3, [r3, #4]
 800585c:	1809      	addeq	r1, r1, r0
 800585e:	6021      	streq	r1, [r4, #0]
 8005860:	e7ed      	b.n	800583e <_free_r+0x1e>
 8005862:	461a      	mov	r2, r3
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	b10b      	cbz	r3, 800586c <_free_r+0x4c>
 8005868:	42a3      	cmp	r3, r4
 800586a:	d9fa      	bls.n	8005862 <_free_r+0x42>
 800586c:	6811      	ldr	r1, [r2, #0]
 800586e:	1850      	adds	r0, r2, r1
 8005870:	42a0      	cmp	r0, r4
 8005872:	d10b      	bne.n	800588c <_free_r+0x6c>
 8005874:	6820      	ldr	r0, [r4, #0]
 8005876:	4401      	add	r1, r0
 8005878:	1850      	adds	r0, r2, r1
 800587a:	4283      	cmp	r3, r0
 800587c:	6011      	str	r1, [r2, #0]
 800587e:	d1e0      	bne.n	8005842 <_free_r+0x22>
 8005880:	6818      	ldr	r0, [r3, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	4408      	add	r0, r1
 8005886:	6010      	str	r0, [r2, #0]
 8005888:	6053      	str	r3, [r2, #4]
 800588a:	e7da      	b.n	8005842 <_free_r+0x22>
 800588c:	d902      	bls.n	8005894 <_free_r+0x74>
 800588e:	230c      	movs	r3, #12
 8005890:	602b      	str	r3, [r5, #0]
 8005892:	e7d6      	b.n	8005842 <_free_r+0x22>
 8005894:	6820      	ldr	r0, [r4, #0]
 8005896:	1821      	adds	r1, r4, r0
 8005898:	428b      	cmp	r3, r1
 800589a:	bf01      	itttt	eq
 800589c:	6819      	ldreq	r1, [r3, #0]
 800589e:	685b      	ldreq	r3, [r3, #4]
 80058a0:	1809      	addeq	r1, r1, r0
 80058a2:	6021      	streq	r1, [r4, #0]
 80058a4:	6063      	str	r3, [r4, #4]
 80058a6:	6054      	str	r4, [r2, #4]
 80058a8:	e7cb      	b.n	8005842 <_free_r+0x22>
 80058aa:	bd38      	pop	{r3, r4, r5, pc}
 80058ac:	20000a14 	.word	0x20000a14

080058b0 <__ssputs_r>:
 80058b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058b4:	461f      	mov	r7, r3
 80058b6:	688e      	ldr	r6, [r1, #8]
 80058b8:	4682      	mov	sl, r0
 80058ba:	42be      	cmp	r6, r7
 80058bc:	460c      	mov	r4, r1
 80058be:	4690      	mov	r8, r2
 80058c0:	680b      	ldr	r3, [r1, #0]
 80058c2:	d82c      	bhi.n	800591e <__ssputs_r+0x6e>
 80058c4:	898a      	ldrh	r2, [r1, #12]
 80058c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058ca:	d026      	beq.n	800591a <__ssputs_r+0x6a>
 80058cc:	6965      	ldr	r5, [r4, #20]
 80058ce:	6909      	ldr	r1, [r1, #16]
 80058d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058d4:	eba3 0901 	sub.w	r9, r3, r1
 80058d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058dc:	1c7b      	adds	r3, r7, #1
 80058de:	444b      	add	r3, r9
 80058e0:	106d      	asrs	r5, r5, #1
 80058e2:	429d      	cmp	r5, r3
 80058e4:	bf38      	it	cc
 80058e6:	461d      	movcc	r5, r3
 80058e8:	0553      	lsls	r3, r2, #21
 80058ea:	d527      	bpl.n	800593c <__ssputs_r+0x8c>
 80058ec:	4629      	mov	r1, r5
 80058ee:	f7ff fbdb 	bl	80050a8 <_malloc_r>
 80058f2:	4606      	mov	r6, r0
 80058f4:	b360      	cbz	r0, 8005950 <__ssputs_r+0xa0>
 80058f6:	464a      	mov	r2, r9
 80058f8:	6921      	ldr	r1, [r4, #16]
 80058fa:	f7ff ff64 	bl	80057c6 <memcpy>
 80058fe:	89a3      	ldrh	r3, [r4, #12]
 8005900:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005908:	81a3      	strh	r3, [r4, #12]
 800590a:	6126      	str	r6, [r4, #16]
 800590c:	444e      	add	r6, r9
 800590e:	6026      	str	r6, [r4, #0]
 8005910:	463e      	mov	r6, r7
 8005912:	6165      	str	r5, [r4, #20]
 8005914:	eba5 0509 	sub.w	r5, r5, r9
 8005918:	60a5      	str	r5, [r4, #8]
 800591a:	42be      	cmp	r6, r7
 800591c:	d900      	bls.n	8005920 <__ssputs_r+0x70>
 800591e:	463e      	mov	r6, r7
 8005920:	4632      	mov	r2, r6
 8005922:	4641      	mov	r1, r8
 8005924:	6820      	ldr	r0, [r4, #0]
 8005926:	f7ff fe64 	bl	80055f2 <memmove>
 800592a:	2000      	movs	r0, #0
 800592c:	68a3      	ldr	r3, [r4, #8]
 800592e:	1b9b      	subs	r3, r3, r6
 8005930:	60a3      	str	r3, [r4, #8]
 8005932:	6823      	ldr	r3, [r4, #0]
 8005934:	4433      	add	r3, r6
 8005936:	6023      	str	r3, [r4, #0]
 8005938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800593c:	462a      	mov	r2, r5
 800593e:	f000 fb6d 	bl	800601c <_realloc_r>
 8005942:	4606      	mov	r6, r0
 8005944:	2800      	cmp	r0, #0
 8005946:	d1e0      	bne.n	800590a <__ssputs_r+0x5a>
 8005948:	4650      	mov	r0, sl
 800594a:	6921      	ldr	r1, [r4, #16]
 800594c:	f7ff ff68 	bl	8005820 <_free_r>
 8005950:	230c      	movs	r3, #12
 8005952:	f8ca 3000 	str.w	r3, [sl]
 8005956:	89a3      	ldrh	r3, [r4, #12]
 8005958:	f04f 30ff 	mov.w	r0, #4294967295
 800595c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005960:	81a3      	strh	r3, [r4, #12]
 8005962:	e7e9      	b.n	8005938 <__ssputs_r+0x88>

08005964 <_svfiprintf_r>:
 8005964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005968:	4698      	mov	r8, r3
 800596a:	898b      	ldrh	r3, [r1, #12]
 800596c:	4607      	mov	r7, r0
 800596e:	061b      	lsls	r3, r3, #24
 8005970:	460d      	mov	r5, r1
 8005972:	4614      	mov	r4, r2
 8005974:	b09d      	sub	sp, #116	; 0x74
 8005976:	d50e      	bpl.n	8005996 <_svfiprintf_r+0x32>
 8005978:	690b      	ldr	r3, [r1, #16]
 800597a:	b963      	cbnz	r3, 8005996 <_svfiprintf_r+0x32>
 800597c:	2140      	movs	r1, #64	; 0x40
 800597e:	f7ff fb93 	bl	80050a8 <_malloc_r>
 8005982:	6028      	str	r0, [r5, #0]
 8005984:	6128      	str	r0, [r5, #16]
 8005986:	b920      	cbnz	r0, 8005992 <_svfiprintf_r+0x2e>
 8005988:	230c      	movs	r3, #12
 800598a:	603b      	str	r3, [r7, #0]
 800598c:	f04f 30ff 	mov.w	r0, #4294967295
 8005990:	e0d0      	b.n	8005b34 <_svfiprintf_r+0x1d0>
 8005992:	2340      	movs	r3, #64	; 0x40
 8005994:	616b      	str	r3, [r5, #20]
 8005996:	2300      	movs	r3, #0
 8005998:	9309      	str	r3, [sp, #36]	; 0x24
 800599a:	2320      	movs	r3, #32
 800599c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059a0:	2330      	movs	r3, #48	; 0x30
 80059a2:	f04f 0901 	mov.w	r9, #1
 80059a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80059aa:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8005b4c <_svfiprintf_r+0x1e8>
 80059ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059b2:	4623      	mov	r3, r4
 80059b4:	469a      	mov	sl, r3
 80059b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059ba:	b10a      	cbz	r2, 80059c0 <_svfiprintf_r+0x5c>
 80059bc:	2a25      	cmp	r2, #37	; 0x25
 80059be:	d1f9      	bne.n	80059b4 <_svfiprintf_r+0x50>
 80059c0:	ebba 0b04 	subs.w	fp, sl, r4
 80059c4:	d00b      	beq.n	80059de <_svfiprintf_r+0x7a>
 80059c6:	465b      	mov	r3, fp
 80059c8:	4622      	mov	r2, r4
 80059ca:	4629      	mov	r1, r5
 80059cc:	4638      	mov	r0, r7
 80059ce:	f7ff ff6f 	bl	80058b0 <__ssputs_r>
 80059d2:	3001      	adds	r0, #1
 80059d4:	f000 80a9 	beq.w	8005b2a <_svfiprintf_r+0x1c6>
 80059d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059da:	445a      	add	r2, fp
 80059dc:	9209      	str	r2, [sp, #36]	; 0x24
 80059de:	f89a 3000 	ldrb.w	r3, [sl]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f000 80a1 	beq.w	8005b2a <_svfiprintf_r+0x1c6>
 80059e8:	2300      	movs	r3, #0
 80059ea:	f04f 32ff 	mov.w	r2, #4294967295
 80059ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059f2:	f10a 0a01 	add.w	sl, sl, #1
 80059f6:	9304      	str	r3, [sp, #16]
 80059f8:	9307      	str	r3, [sp, #28]
 80059fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059fe:	931a      	str	r3, [sp, #104]	; 0x68
 8005a00:	4654      	mov	r4, sl
 8005a02:	2205      	movs	r2, #5
 8005a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a08:	4850      	ldr	r0, [pc, #320]	; (8005b4c <_svfiprintf_r+0x1e8>)
 8005a0a:	f000 faf9 	bl	8006000 <memchr>
 8005a0e:	9a04      	ldr	r2, [sp, #16]
 8005a10:	b9d8      	cbnz	r0, 8005a4a <_svfiprintf_r+0xe6>
 8005a12:	06d0      	lsls	r0, r2, #27
 8005a14:	bf44      	itt	mi
 8005a16:	2320      	movmi	r3, #32
 8005a18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a1c:	0711      	lsls	r1, r2, #28
 8005a1e:	bf44      	itt	mi
 8005a20:	232b      	movmi	r3, #43	; 0x2b
 8005a22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a26:	f89a 3000 	ldrb.w	r3, [sl]
 8005a2a:	2b2a      	cmp	r3, #42	; 0x2a
 8005a2c:	d015      	beq.n	8005a5a <_svfiprintf_r+0xf6>
 8005a2e:	4654      	mov	r4, sl
 8005a30:	2000      	movs	r0, #0
 8005a32:	f04f 0c0a 	mov.w	ip, #10
 8005a36:	9a07      	ldr	r2, [sp, #28]
 8005a38:	4621      	mov	r1, r4
 8005a3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a3e:	3b30      	subs	r3, #48	; 0x30
 8005a40:	2b09      	cmp	r3, #9
 8005a42:	d94d      	bls.n	8005ae0 <_svfiprintf_r+0x17c>
 8005a44:	b1b0      	cbz	r0, 8005a74 <_svfiprintf_r+0x110>
 8005a46:	9207      	str	r2, [sp, #28]
 8005a48:	e014      	b.n	8005a74 <_svfiprintf_r+0x110>
 8005a4a:	eba0 0308 	sub.w	r3, r0, r8
 8005a4e:	fa09 f303 	lsl.w	r3, r9, r3
 8005a52:	4313      	orrs	r3, r2
 8005a54:	46a2      	mov	sl, r4
 8005a56:	9304      	str	r3, [sp, #16]
 8005a58:	e7d2      	b.n	8005a00 <_svfiprintf_r+0x9c>
 8005a5a:	9b03      	ldr	r3, [sp, #12]
 8005a5c:	1d19      	adds	r1, r3, #4
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	9103      	str	r1, [sp, #12]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	bfbb      	ittet	lt
 8005a66:	425b      	neglt	r3, r3
 8005a68:	f042 0202 	orrlt.w	r2, r2, #2
 8005a6c:	9307      	strge	r3, [sp, #28]
 8005a6e:	9307      	strlt	r3, [sp, #28]
 8005a70:	bfb8      	it	lt
 8005a72:	9204      	strlt	r2, [sp, #16]
 8005a74:	7823      	ldrb	r3, [r4, #0]
 8005a76:	2b2e      	cmp	r3, #46	; 0x2e
 8005a78:	d10c      	bne.n	8005a94 <_svfiprintf_r+0x130>
 8005a7a:	7863      	ldrb	r3, [r4, #1]
 8005a7c:	2b2a      	cmp	r3, #42	; 0x2a
 8005a7e:	d134      	bne.n	8005aea <_svfiprintf_r+0x186>
 8005a80:	9b03      	ldr	r3, [sp, #12]
 8005a82:	3402      	adds	r4, #2
 8005a84:	1d1a      	adds	r2, r3, #4
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	9203      	str	r2, [sp, #12]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	bfb8      	it	lt
 8005a8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a92:	9305      	str	r3, [sp, #20]
 8005a94:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005b50 <_svfiprintf_r+0x1ec>
 8005a98:	2203      	movs	r2, #3
 8005a9a:	4650      	mov	r0, sl
 8005a9c:	7821      	ldrb	r1, [r4, #0]
 8005a9e:	f000 faaf 	bl	8006000 <memchr>
 8005aa2:	b138      	cbz	r0, 8005ab4 <_svfiprintf_r+0x150>
 8005aa4:	2240      	movs	r2, #64	; 0x40
 8005aa6:	9b04      	ldr	r3, [sp, #16]
 8005aa8:	eba0 000a 	sub.w	r0, r0, sl
 8005aac:	4082      	lsls	r2, r0
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	3401      	adds	r4, #1
 8005ab2:	9304      	str	r3, [sp, #16]
 8005ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ab8:	2206      	movs	r2, #6
 8005aba:	4826      	ldr	r0, [pc, #152]	; (8005b54 <_svfiprintf_r+0x1f0>)
 8005abc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ac0:	f000 fa9e 	bl	8006000 <memchr>
 8005ac4:	2800      	cmp	r0, #0
 8005ac6:	d038      	beq.n	8005b3a <_svfiprintf_r+0x1d6>
 8005ac8:	4b23      	ldr	r3, [pc, #140]	; (8005b58 <_svfiprintf_r+0x1f4>)
 8005aca:	bb1b      	cbnz	r3, 8005b14 <_svfiprintf_r+0x1b0>
 8005acc:	9b03      	ldr	r3, [sp, #12]
 8005ace:	3307      	adds	r3, #7
 8005ad0:	f023 0307 	bic.w	r3, r3, #7
 8005ad4:	3308      	adds	r3, #8
 8005ad6:	9303      	str	r3, [sp, #12]
 8005ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ada:	4433      	add	r3, r6
 8005adc:	9309      	str	r3, [sp, #36]	; 0x24
 8005ade:	e768      	b.n	80059b2 <_svfiprintf_r+0x4e>
 8005ae0:	460c      	mov	r4, r1
 8005ae2:	2001      	movs	r0, #1
 8005ae4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ae8:	e7a6      	b.n	8005a38 <_svfiprintf_r+0xd4>
 8005aea:	2300      	movs	r3, #0
 8005aec:	f04f 0c0a 	mov.w	ip, #10
 8005af0:	4619      	mov	r1, r3
 8005af2:	3401      	adds	r4, #1
 8005af4:	9305      	str	r3, [sp, #20]
 8005af6:	4620      	mov	r0, r4
 8005af8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005afc:	3a30      	subs	r2, #48	; 0x30
 8005afe:	2a09      	cmp	r2, #9
 8005b00:	d903      	bls.n	8005b0a <_svfiprintf_r+0x1a6>
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d0c6      	beq.n	8005a94 <_svfiprintf_r+0x130>
 8005b06:	9105      	str	r1, [sp, #20]
 8005b08:	e7c4      	b.n	8005a94 <_svfiprintf_r+0x130>
 8005b0a:	4604      	mov	r4, r0
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b12:	e7f0      	b.n	8005af6 <_svfiprintf_r+0x192>
 8005b14:	ab03      	add	r3, sp, #12
 8005b16:	9300      	str	r3, [sp, #0]
 8005b18:	462a      	mov	r2, r5
 8005b1a:	4638      	mov	r0, r7
 8005b1c:	4b0f      	ldr	r3, [pc, #60]	; (8005b5c <_svfiprintf_r+0x1f8>)
 8005b1e:	a904      	add	r1, sp, #16
 8005b20:	f3af 8000 	nop.w
 8005b24:	1c42      	adds	r2, r0, #1
 8005b26:	4606      	mov	r6, r0
 8005b28:	d1d6      	bne.n	8005ad8 <_svfiprintf_r+0x174>
 8005b2a:	89ab      	ldrh	r3, [r5, #12]
 8005b2c:	065b      	lsls	r3, r3, #25
 8005b2e:	f53f af2d 	bmi.w	800598c <_svfiprintf_r+0x28>
 8005b32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b34:	b01d      	add	sp, #116	; 0x74
 8005b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b3a:	ab03      	add	r3, sp, #12
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	462a      	mov	r2, r5
 8005b40:	4638      	mov	r0, r7
 8005b42:	4b06      	ldr	r3, [pc, #24]	; (8005b5c <_svfiprintf_r+0x1f8>)
 8005b44:	a904      	add	r1, sp, #16
 8005b46:	f000 f87d 	bl	8005c44 <_printf_i>
 8005b4a:	e7eb      	b.n	8005b24 <_svfiprintf_r+0x1c0>
 8005b4c:	08006872 	.word	0x08006872
 8005b50:	08006878 	.word	0x08006878
 8005b54:	0800687c 	.word	0x0800687c
 8005b58:	00000000 	.word	0x00000000
 8005b5c:	080058b1 	.word	0x080058b1

08005b60 <_printf_common>:
 8005b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b64:	4616      	mov	r6, r2
 8005b66:	4699      	mov	r9, r3
 8005b68:	688a      	ldr	r2, [r1, #8]
 8005b6a:	690b      	ldr	r3, [r1, #16]
 8005b6c:	4607      	mov	r7, r0
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	bfb8      	it	lt
 8005b72:	4613      	movlt	r3, r2
 8005b74:	6033      	str	r3, [r6, #0]
 8005b76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b7a:	460c      	mov	r4, r1
 8005b7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b80:	b10a      	cbz	r2, 8005b86 <_printf_common+0x26>
 8005b82:	3301      	adds	r3, #1
 8005b84:	6033      	str	r3, [r6, #0]
 8005b86:	6823      	ldr	r3, [r4, #0]
 8005b88:	0699      	lsls	r1, r3, #26
 8005b8a:	bf42      	ittt	mi
 8005b8c:	6833      	ldrmi	r3, [r6, #0]
 8005b8e:	3302      	addmi	r3, #2
 8005b90:	6033      	strmi	r3, [r6, #0]
 8005b92:	6825      	ldr	r5, [r4, #0]
 8005b94:	f015 0506 	ands.w	r5, r5, #6
 8005b98:	d106      	bne.n	8005ba8 <_printf_common+0x48>
 8005b9a:	f104 0a19 	add.w	sl, r4, #25
 8005b9e:	68e3      	ldr	r3, [r4, #12]
 8005ba0:	6832      	ldr	r2, [r6, #0]
 8005ba2:	1a9b      	subs	r3, r3, r2
 8005ba4:	42ab      	cmp	r3, r5
 8005ba6:	dc2b      	bgt.n	8005c00 <_printf_common+0xa0>
 8005ba8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005bac:	1e13      	subs	r3, r2, #0
 8005bae:	6822      	ldr	r2, [r4, #0]
 8005bb0:	bf18      	it	ne
 8005bb2:	2301      	movne	r3, #1
 8005bb4:	0692      	lsls	r2, r2, #26
 8005bb6:	d430      	bmi.n	8005c1a <_printf_common+0xba>
 8005bb8:	4649      	mov	r1, r9
 8005bba:	4638      	mov	r0, r7
 8005bbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bc0:	47c0      	blx	r8
 8005bc2:	3001      	adds	r0, #1
 8005bc4:	d023      	beq.n	8005c0e <_printf_common+0xae>
 8005bc6:	6823      	ldr	r3, [r4, #0]
 8005bc8:	6922      	ldr	r2, [r4, #16]
 8005bca:	f003 0306 	and.w	r3, r3, #6
 8005bce:	2b04      	cmp	r3, #4
 8005bd0:	bf14      	ite	ne
 8005bd2:	2500      	movne	r5, #0
 8005bd4:	6833      	ldreq	r3, [r6, #0]
 8005bd6:	f04f 0600 	mov.w	r6, #0
 8005bda:	bf08      	it	eq
 8005bdc:	68e5      	ldreq	r5, [r4, #12]
 8005bde:	f104 041a 	add.w	r4, r4, #26
 8005be2:	bf08      	it	eq
 8005be4:	1aed      	subeq	r5, r5, r3
 8005be6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005bea:	bf08      	it	eq
 8005bec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	bfc4      	itt	gt
 8005bf4:	1a9b      	subgt	r3, r3, r2
 8005bf6:	18ed      	addgt	r5, r5, r3
 8005bf8:	42b5      	cmp	r5, r6
 8005bfa:	d11a      	bne.n	8005c32 <_printf_common+0xd2>
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	e008      	b.n	8005c12 <_printf_common+0xb2>
 8005c00:	2301      	movs	r3, #1
 8005c02:	4652      	mov	r2, sl
 8005c04:	4649      	mov	r1, r9
 8005c06:	4638      	mov	r0, r7
 8005c08:	47c0      	blx	r8
 8005c0a:	3001      	adds	r0, #1
 8005c0c:	d103      	bne.n	8005c16 <_printf_common+0xb6>
 8005c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c16:	3501      	adds	r5, #1
 8005c18:	e7c1      	b.n	8005b9e <_printf_common+0x3e>
 8005c1a:	2030      	movs	r0, #48	; 0x30
 8005c1c:	18e1      	adds	r1, r4, r3
 8005c1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c22:	1c5a      	adds	r2, r3, #1
 8005c24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c28:	4422      	add	r2, r4
 8005c2a:	3302      	adds	r3, #2
 8005c2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c30:	e7c2      	b.n	8005bb8 <_printf_common+0x58>
 8005c32:	2301      	movs	r3, #1
 8005c34:	4622      	mov	r2, r4
 8005c36:	4649      	mov	r1, r9
 8005c38:	4638      	mov	r0, r7
 8005c3a:	47c0      	blx	r8
 8005c3c:	3001      	adds	r0, #1
 8005c3e:	d0e6      	beq.n	8005c0e <_printf_common+0xae>
 8005c40:	3601      	adds	r6, #1
 8005c42:	e7d9      	b.n	8005bf8 <_printf_common+0x98>

08005c44 <_printf_i>:
 8005c44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c48:	7e0f      	ldrb	r7, [r1, #24]
 8005c4a:	4691      	mov	r9, r2
 8005c4c:	2f78      	cmp	r7, #120	; 0x78
 8005c4e:	4680      	mov	r8, r0
 8005c50:	460c      	mov	r4, r1
 8005c52:	469a      	mov	sl, r3
 8005c54:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c5a:	d807      	bhi.n	8005c6c <_printf_i+0x28>
 8005c5c:	2f62      	cmp	r7, #98	; 0x62
 8005c5e:	d80a      	bhi.n	8005c76 <_printf_i+0x32>
 8005c60:	2f00      	cmp	r7, #0
 8005c62:	f000 80d5 	beq.w	8005e10 <_printf_i+0x1cc>
 8005c66:	2f58      	cmp	r7, #88	; 0x58
 8005c68:	f000 80c1 	beq.w	8005dee <_printf_i+0x1aa>
 8005c6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c74:	e03a      	b.n	8005cec <_printf_i+0xa8>
 8005c76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c7a:	2b15      	cmp	r3, #21
 8005c7c:	d8f6      	bhi.n	8005c6c <_printf_i+0x28>
 8005c7e:	a101      	add	r1, pc, #4	; (adr r1, 8005c84 <_printf_i+0x40>)
 8005c80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c84:	08005cdd 	.word	0x08005cdd
 8005c88:	08005cf1 	.word	0x08005cf1
 8005c8c:	08005c6d 	.word	0x08005c6d
 8005c90:	08005c6d 	.word	0x08005c6d
 8005c94:	08005c6d 	.word	0x08005c6d
 8005c98:	08005c6d 	.word	0x08005c6d
 8005c9c:	08005cf1 	.word	0x08005cf1
 8005ca0:	08005c6d 	.word	0x08005c6d
 8005ca4:	08005c6d 	.word	0x08005c6d
 8005ca8:	08005c6d 	.word	0x08005c6d
 8005cac:	08005c6d 	.word	0x08005c6d
 8005cb0:	08005df7 	.word	0x08005df7
 8005cb4:	08005d1d 	.word	0x08005d1d
 8005cb8:	08005db1 	.word	0x08005db1
 8005cbc:	08005c6d 	.word	0x08005c6d
 8005cc0:	08005c6d 	.word	0x08005c6d
 8005cc4:	08005e19 	.word	0x08005e19
 8005cc8:	08005c6d 	.word	0x08005c6d
 8005ccc:	08005d1d 	.word	0x08005d1d
 8005cd0:	08005c6d 	.word	0x08005c6d
 8005cd4:	08005c6d 	.word	0x08005c6d
 8005cd8:	08005db9 	.word	0x08005db9
 8005cdc:	682b      	ldr	r3, [r5, #0]
 8005cde:	1d1a      	adds	r2, r3, #4
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	602a      	str	r2, [r5, #0]
 8005ce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ce8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cec:	2301      	movs	r3, #1
 8005cee:	e0a0      	b.n	8005e32 <_printf_i+0x1ee>
 8005cf0:	6820      	ldr	r0, [r4, #0]
 8005cf2:	682b      	ldr	r3, [r5, #0]
 8005cf4:	0607      	lsls	r7, r0, #24
 8005cf6:	f103 0104 	add.w	r1, r3, #4
 8005cfa:	6029      	str	r1, [r5, #0]
 8005cfc:	d501      	bpl.n	8005d02 <_printf_i+0xbe>
 8005cfe:	681e      	ldr	r6, [r3, #0]
 8005d00:	e003      	b.n	8005d0a <_printf_i+0xc6>
 8005d02:	0646      	lsls	r6, r0, #25
 8005d04:	d5fb      	bpl.n	8005cfe <_printf_i+0xba>
 8005d06:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005d0a:	2e00      	cmp	r6, #0
 8005d0c:	da03      	bge.n	8005d16 <_printf_i+0xd2>
 8005d0e:	232d      	movs	r3, #45	; 0x2d
 8005d10:	4276      	negs	r6, r6
 8005d12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d16:	230a      	movs	r3, #10
 8005d18:	4859      	ldr	r0, [pc, #356]	; (8005e80 <_printf_i+0x23c>)
 8005d1a:	e012      	b.n	8005d42 <_printf_i+0xfe>
 8005d1c:	682b      	ldr	r3, [r5, #0]
 8005d1e:	6820      	ldr	r0, [r4, #0]
 8005d20:	1d19      	adds	r1, r3, #4
 8005d22:	6029      	str	r1, [r5, #0]
 8005d24:	0605      	lsls	r5, r0, #24
 8005d26:	d501      	bpl.n	8005d2c <_printf_i+0xe8>
 8005d28:	681e      	ldr	r6, [r3, #0]
 8005d2a:	e002      	b.n	8005d32 <_printf_i+0xee>
 8005d2c:	0641      	lsls	r1, r0, #25
 8005d2e:	d5fb      	bpl.n	8005d28 <_printf_i+0xe4>
 8005d30:	881e      	ldrh	r6, [r3, #0]
 8005d32:	2f6f      	cmp	r7, #111	; 0x6f
 8005d34:	bf0c      	ite	eq
 8005d36:	2308      	moveq	r3, #8
 8005d38:	230a      	movne	r3, #10
 8005d3a:	4851      	ldr	r0, [pc, #324]	; (8005e80 <_printf_i+0x23c>)
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d42:	6865      	ldr	r5, [r4, #4]
 8005d44:	2d00      	cmp	r5, #0
 8005d46:	bfa8      	it	ge
 8005d48:	6821      	ldrge	r1, [r4, #0]
 8005d4a:	60a5      	str	r5, [r4, #8]
 8005d4c:	bfa4      	itt	ge
 8005d4e:	f021 0104 	bicge.w	r1, r1, #4
 8005d52:	6021      	strge	r1, [r4, #0]
 8005d54:	b90e      	cbnz	r6, 8005d5a <_printf_i+0x116>
 8005d56:	2d00      	cmp	r5, #0
 8005d58:	d04b      	beq.n	8005df2 <_printf_i+0x1ae>
 8005d5a:	4615      	mov	r5, r2
 8005d5c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d60:	fb03 6711 	mls	r7, r3, r1, r6
 8005d64:	5dc7      	ldrb	r7, [r0, r7]
 8005d66:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d6a:	4637      	mov	r7, r6
 8005d6c:	42bb      	cmp	r3, r7
 8005d6e:	460e      	mov	r6, r1
 8005d70:	d9f4      	bls.n	8005d5c <_printf_i+0x118>
 8005d72:	2b08      	cmp	r3, #8
 8005d74:	d10b      	bne.n	8005d8e <_printf_i+0x14a>
 8005d76:	6823      	ldr	r3, [r4, #0]
 8005d78:	07de      	lsls	r6, r3, #31
 8005d7a:	d508      	bpl.n	8005d8e <_printf_i+0x14a>
 8005d7c:	6923      	ldr	r3, [r4, #16]
 8005d7e:	6861      	ldr	r1, [r4, #4]
 8005d80:	4299      	cmp	r1, r3
 8005d82:	bfde      	ittt	le
 8005d84:	2330      	movle	r3, #48	; 0x30
 8005d86:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d8a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d8e:	1b52      	subs	r2, r2, r5
 8005d90:	6122      	str	r2, [r4, #16]
 8005d92:	464b      	mov	r3, r9
 8005d94:	4621      	mov	r1, r4
 8005d96:	4640      	mov	r0, r8
 8005d98:	f8cd a000 	str.w	sl, [sp]
 8005d9c:	aa03      	add	r2, sp, #12
 8005d9e:	f7ff fedf 	bl	8005b60 <_printf_common>
 8005da2:	3001      	adds	r0, #1
 8005da4:	d14a      	bne.n	8005e3c <_printf_i+0x1f8>
 8005da6:	f04f 30ff 	mov.w	r0, #4294967295
 8005daa:	b004      	add	sp, #16
 8005dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005db0:	6823      	ldr	r3, [r4, #0]
 8005db2:	f043 0320 	orr.w	r3, r3, #32
 8005db6:	6023      	str	r3, [r4, #0]
 8005db8:	2778      	movs	r7, #120	; 0x78
 8005dba:	4832      	ldr	r0, [pc, #200]	; (8005e84 <_printf_i+0x240>)
 8005dbc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005dc0:	6823      	ldr	r3, [r4, #0]
 8005dc2:	6829      	ldr	r1, [r5, #0]
 8005dc4:	061f      	lsls	r7, r3, #24
 8005dc6:	f851 6b04 	ldr.w	r6, [r1], #4
 8005dca:	d402      	bmi.n	8005dd2 <_printf_i+0x18e>
 8005dcc:	065f      	lsls	r7, r3, #25
 8005dce:	bf48      	it	mi
 8005dd0:	b2b6      	uxthmi	r6, r6
 8005dd2:	07df      	lsls	r7, r3, #31
 8005dd4:	bf48      	it	mi
 8005dd6:	f043 0320 	orrmi.w	r3, r3, #32
 8005dda:	6029      	str	r1, [r5, #0]
 8005ddc:	bf48      	it	mi
 8005dde:	6023      	strmi	r3, [r4, #0]
 8005de0:	b91e      	cbnz	r6, 8005dea <_printf_i+0x1a6>
 8005de2:	6823      	ldr	r3, [r4, #0]
 8005de4:	f023 0320 	bic.w	r3, r3, #32
 8005de8:	6023      	str	r3, [r4, #0]
 8005dea:	2310      	movs	r3, #16
 8005dec:	e7a6      	b.n	8005d3c <_printf_i+0xf8>
 8005dee:	4824      	ldr	r0, [pc, #144]	; (8005e80 <_printf_i+0x23c>)
 8005df0:	e7e4      	b.n	8005dbc <_printf_i+0x178>
 8005df2:	4615      	mov	r5, r2
 8005df4:	e7bd      	b.n	8005d72 <_printf_i+0x12e>
 8005df6:	682b      	ldr	r3, [r5, #0]
 8005df8:	6826      	ldr	r6, [r4, #0]
 8005dfa:	1d18      	adds	r0, r3, #4
 8005dfc:	6961      	ldr	r1, [r4, #20]
 8005dfe:	6028      	str	r0, [r5, #0]
 8005e00:	0635      	lsls	r5, r6, #24
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	d501      	bpl.n	8005e0a <_printf_i+0x1c6>
 8005e06:	6019      	str	r1, [r3, #0]
 8005e08:	e002      	b.n	8005e10 <_printf_i+0x1cc>
 8005e0a:	0670      	lsls	r0, r6, #25
 8005e0c:	d5fb      	bpl.n	8005e06 <_printf_i+0x1c2>
 8005e0e:	8019      	strh	r1, [r3, #0]
 8005e10:	2300      	movs	r3, #0
 8005e12:	4615      	mov	r5, r2
 8005e14:	6123      	str	r3, [r4, #16]
 8005e16:	e7bc      	b.n	8005d92 <_printf_i+0x14e>
 8005e18:	682b      	ldr	r3, [r5, #0]
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	1d1a      	adds	r2, r3, #4
 8005e1e:	602a      	str	r2, [r5, #0]
 8005e20:	681d      	ldr	r5, [r3, #0]
 8005e22:	6862      	ldr	r2, [r4, #4]
 8005e24:	4628      	mov	r0, r5
 8005e26:	f000 f8eb 	bl	8006000 <memchr>
 8005e2a:	b108      	cbz	r0, 8005e30 <_printf_i+0x1ec>
 8005e2c:	1b40      	subs	r0, r0, r5
 8005e2e:	6060      	str	r0, [r4, #4]
 8005e30:	6863      	ldr	r3, [r4, #4]
 8005e32:	6123      	str	r3, [r4, #16]
 8005e34:	2300      	movs	r3, #0
 8005e36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e3a:	e7aa      	b.n	8005d92 <_printf_i+0x14e>
 8005e3c:	462a      	mov	r2, r5
 8005e3e:	4649      	mov	r1, r9
 8005e40:	4640      	mov	r0, r8
 8005e42:	6923      	ldr	r3, [r4, #16]
 8005e44:	47d0      	blx	sl
 8005e46:	3001      	adds	r0, #1
 8005e48:	d0ad      	beq.n	8005da6 <_printf_i+0x162>
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	079b      	lsls	r3, r3, #30
 8005e4e:	d413      	bmi.n	8005e78 <_printf_i+0x234>
 8005e50:	68e0      	ldr	r0, [r4, #12]
 8005e52:	9b03      	ldr	r3, [sp, #12]
 8005e54:	4298      	cmp	r0, r3
 8005e56:	bfb8      	it	lt
 8005e58:	4618      	movlt	r0, r3
 8005e5a:	e7a6      	b.n	8005daa <_printf_i+0x166>
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	4632      	mov	r2, r6
 8005e60:	4649      	mov	r1, r9
 8005e62:	4640      	mov	r0, r8
 8005e64:	47d0      	blx	sl
 8005e66:	3001      	adds	r0, #1
 8005e68:	d09d      	beq.n	8005da6 <_printf_i+0x162>
 8005e6a:	3501      	adds	r5, #1
 8005e6c:	68e3      	ldr	r3, [r4, #12]
 8005e6e:	9903      	ldr	r1, [sp, #12]
 8005e70:	1a5b      	subs	r3, r3, r1
 8005e72:	42ab      	cmp	r3, r5
 8005e74:	dcf2      	bgt.n	8005e5c <_printf_i+0x218>
 8005e76:	e7eb      	b.n	8005e50 <_printf_i+0x20c>
 8005e78:	2500      	movs	r5, #0
 8005e7a:	f104 0619 	add.w	r6, r4, #25
 8005e7e:	e7f5      	b.n	8005e6c <_printf_i+0x228>
 8005e80:	08006883 	.word	0x08006883
 8005e84:	08006894 	.word	0x08006894

08005e88 <__sflush_r>:
 8005e88:	898a      	ldrh	r2, [r1, #12]
 8005e8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8c:	4605      	mov	r5, r0
 8005e8e:	0710      	lsls	r0, r2, #28
 8005e90:	460c      	mov	r4, r1
 8005e92:	d457      	bmi.n	8005f44 <__sflush_r+0xbc>
 8005e94:	684b      	ldr	r3, [r1, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	dc04      	bgt.n	8005ea4 <__sflush_r+0x1c>
 8005e9a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	dc01      	bgt.n	8005ea4 <__sflush_r+0x1c>
 8005ea0:	2000      	movs	r0, #0
 8005ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ea4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ea6:	2e00      	cmp	r6, #0
 8005ea8:	d0fa      	beq.n	8005ea0 <__sflush_r+0x18>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005eb0:	682f      	ldr	r7, [r5, #0]
 8005eb2:	6a21      	ldr	r1, [r4, #32]
 8005eb4:	602b      	str	r3, [r5, #0]
 8005eb6:	d032      	beq.n	8005f1e <__sflush_r+0x96>
 8005eb8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005eba:	89a3      	ldrh	r3, [r4, #12]
 8005ebc:	075a      	lsls	r2, r3, #29
 8005ebe:	d505      	bpl.n	8005ecc <__sflush_r+0x44>
 8005ec0:	6863      	ldr	r3, [r4, #4]
 8005ec2:	1ac0      	subs	r0, r0, r3
 8005ec4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ec6:	b10b      	cbz	r3, 8005ecc <__sflush_r+0x44>
 8005ec8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005eca:	1ac0      	subs	r0, r0, r3
 8005ecc:	2300      	movs	r3, #0
 8005ece:	4602      	mov	r2, r0
 8005ed0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	6a21      	ldr	r1, [r4, #32]
 8005ed6:	47b0      	blx	r6
 8005ed8:	1c43      	adds	r3, r0, #1
 8005eda:	89a3      	ldrh	r3, [r4, #12]
 8005edc:	d106      	bne.n	8005eec <__sflush_r+0x64>
 8005ede:	6829      	ldr	r1, [r5, #0]
 8005ee0:	291d      	cmp	r1, #29
 8005ee2:	d82b      	bhi.n	8005f3c <__sflush_r+0xb4>
 8005ee4:	4a28      	ldr	r2, [pc, #160]	; (8005f88 <__sflush_r+0x100>)
 8005ee6:	410a      	asrs	r2, r1
 8005ee8:	07d6      	lsls	r6, r2, #31
 8005eea:	d427      	bmi.n	8005f3c <__sflush_r+0xb4>
 8005eec:	2200      	movs	r2, #0
 8005eee:	6062      	str	r2, [r4, #4]
 8005ef0:	6922      	ldr	r2, [r4, #16]
 8005ef2:	04d9      	lsls	r1, r3, #19
 8005ef4:	6022      	str	r2, [r4, #0]
 8005ef6:	d504      	bpl.n	8005f02 <__sflush_r+0x7a>
 8005ef8:	1c42      	adds	r2, r0, #1
 8005efa:	d101      	bne.n	8005f00 <__sflush_r+0x78>
 8005efc:	682b      	ldr	r3, [r5, #0]
 8005efe:	b903      	cbnz	r3, 8005f02 <__sflush_r+0x7a>
 8005f00:	6560      	str	r0, [r4, #84]	; 0x54
 8005f02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f04:	602f      	str	r7, [r5, #0]
 8005f06:	2900      	cmp	r1, #0
 8005f08:	d0ca      	beq.n	8005ea0 <__sflush_r+0x18>
 8005f0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f0e:	4299      	cmp	r1, r3
 8005f10:	d002      	beq.n	8005f18 <__sflush_r+0x90>
 8005f12:	4628      	mov	r0, r5
 8005f14:	f7ff fc84 	bl	8005820 <_free_r>
 8005f18:	2000      	movs	r0, #0
 8005f1a:	6360      	str	r0, [r4, #52]	; 0x34
 8005f1c:	e7c1      	b.n	8005ea2 <__sflush_r+0x1a>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	4628      	mov	r0, r5
 8005f22:	47b0      	blx	r6
 8005f24:	1c41      	adds	r1, r0, #1
 8005f26:	d1c8      	bne.n	8005eba <__sflush_r+0x32>
 8005f28:	682b      	ldr	r3, [r5, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d0c5      	beq.n	8005eba <__sflush_r+0x32>
 8005f2e:	2b1d      	cmp	r3, #29
 8005f30:	d001      	beq.n	8005f36 <__sflush_r+0xae>
 8005f32:	2b16      	cmp	r3, #22
 8005f34:	d101      	bne.n	8005f3a <__sflush_r+0xb2>
 8005f36:	602f      	str	r7, [r5, #0]
 8005f38:	e7b2      	b.n	8005ea0 <__sflush_r+0x18>
 8005f3a:	89a3      	ldrh	r3, [r4, #12]
 8005f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f40:	81a3      	strh	r3, [r4, #12]
 8005f42:	e7ae      	b.n	8005ea2 <__sflush_r+0x1a>
 8005f44:	690f      	ldr	r7, [r1, #16]
 8005f46:	2f00      	cmp	r7, #0
 8005f48:	d0aa      	beq.n	8005ea0 <__sflush_r+0x18>
 8005f4a:	0793      	lsls	r3, r2, #30
 8005f4c:	bf18      	it	ne
 8005f4e:	2300      	movne	r3, #0
 8005f50:	680e      	ldr	r6, [r1, #0]
 8005f52:	bf08      	it	eq
 8005f54:	694b      	ldreq	r3, [r1, #20]
 8005f56:	1bf6      	subs	r6, r6, r7
 8005f58:	600f      	str	r7, [r1, #0]
 8005f5a:	608b      	str	r3, [r1, #8]
 8005f5c:	2e00      	cmp	r6, #0
 8005f5e:	dd9f      	ble.n	8005ea0 <__sflush_r+0x18>
 8005f60:	4633      	mov	r3, r6
 8005f62:	463a      	mov	r2, r7
 8005f64:	4628      	mov	r0, r5
 8005f66:	6a21      	ldr	r1, [r4, #32]
 8005f68:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005f6c:	47e0      	blx	ip
 8005f6e:	2800      	cmp	r0, #0
 8005f70:	dc06      	bgt.n	8005f80 <__sflush_r+0xf8>
 8005f72:	89a3      	ldrh	r3, [r4, #12]
 8005f74:	f04f 30ff 	mov.w	r0, #4294967295
 8005f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f7c:	81a3      	strh	r3, [r4, #12]
 8005f7e:	e790      	b.n	8005ea2 <__sflush_r+0x1a>
 8005f80:	4407      	add	r7, r0
 8005f82:	1a36      	subs	r6, r6, r0
 8005f84:	e7ea      	b.n	8005f5c <__sflush_r+0xd4>
 8005f86:	bf00      	nop
 8005f88:	dfbffffe 	.word	0xdfbffffe

08005f8c <_fflush_r>:
 8005f8c:	b538      	push	{r3, r4, r5, lr}
 8005f8e:	690b      	ldr	r3, [r1, #16]
 8005f90:	4605      	mov	r5, r0
 8005f92:	460c      	mov	r4, r1
 8005f94:	b913      	cbnz	r3, 8005f9c <_fflush_r+0x10>
 8005f96:	2500      	movs	r5, #0
 8005f98:	4628      	mov	r0, r5
 8005f9a:	bd38      	pop	{r3, r4, r5, pc}
 8005f9c:	b118      	cbz	r0, 8005fa6 <_fflush_r+0x1a>
 8005f9e:	6a03      	ldr	r3, [r0, #32]
 8005fa0:	b90b      	cbnz	r3, 8005fa6 <_fflush_r+0x1a>
 8005fa2:	f7ff fa8d 	bl	80054c0 <__sinit>
 8005fa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d0f3      	beq.n	8005f96 <_fflush_r+0xa>
 8005fae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005fb0:	07d0      	lsls	r0, r2, #31
 8005fb2:	d404      	bmi.n	8005fbe <_fflush_r+0x32>
 8005fb4:	0599      	lsls	r1, r3, #22
 8005fb6:	d402      	bmi.n	8005fbe <_fflush_r+0x32>
 8005fb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fba:	f7ff fc02 	bl	80057c2 <__retarget_lock_acquire_recursive>
 8005fbe:	4628      	mov	r0, r5
 8005fc0:	4621      	mov	r1, r4
 8005fc2:	f7ff ff61 	bl	8005e88 <__sflush_r>
 8005fc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fc8:	4605      	mov	r5, r0
 8005fca:	07da      	lsls	r2, r3, #31
 8005fcc:	d4e4      	bmi.n	8005f98 <_fflush_r+0xc>
 8005fce:	89a3      	ldrh	r3, [r4, #12]
 8005fd0:	059b      	lsls	r3, r3, #22
 8005fd2:	d4e1      	bmi.n	8005f98 <_fflush_r+0xc>
 8005fd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fd6:	f7ff fbf5 	bl	80057c4 <__retarget_lock_release_recursive>
 8005fda:	e7dd      	b.n	8005f98 <_fflush_r+0xc>

08005fdc <fiprintf>:
 8005fdc:	b40e      	push	{r1, r2, r3}
 8005fde:	b503      	push	{r0, r1, lr}
 8005fe0:	4601      	mov	r1, r0
 8005fe2:	ab03      	add	r3, sp, #12
 8005fe4:	4805      	ldr	r0, [pc, #20]	; (8005ffc <fiprintf+0x20>)
 8005fe6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fea:	6800      	ldr	r0, [r0, #0]
 8005fec:	9301      	str	r3, [sp, #4]
 8005fee:	f000 f86b 	bl	80060c8 <_vfiprintf_r>
 8005ff2:	b002      	add	sp, #8
 8005ff4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ff8:	b003      	add	sp, #12
 8005ffa:	4770      	bx	lr
 8005ffc:	20000064 	.word	0x20000064

08006000 <memchr>:
 8006000:	4603      	mov	r3, r0
 8006002:	b510      	push	{r4, lr}
 8006004:	b2c9      	uxtb	r1, r1
 8006006:	4402      	add	r2, r0
 8006008:	4293      	cmp	r3, r2
 800600a:	4618      	mov	r0, r3
 800600c:	d101      	bne.n	8006012 <memchr+0x12>
 800600e:	2000      	movs	r0, #0
 8006010:	e003      	b.n	800601a <memchr+0x1a>
 8006012:	7804      	ldrb	r4, [r0, #0]
 8006014:	3301      	adds	r3, #1
 8006016:	428c      	cmp	r4, r1
 8006018:	d1f6      	bne.n	8006008 <memchr+0x8>
 800601a:	bd10      	pop	{r4, pc}

0800601c <_realloc_r>:
 800601c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006020:	4680      	mov	r8, r0
 8006022:	4614      	mov	r4, r2
 8006024:	460e      	mov	r6, r1
 8006026:	b921      	cbnz	r1, 8006032 <_realloc_r+0x16>
 8006028:	4611      	mov	r1, r2
 800602a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800602e:	f7ff b83b 	b.w	80050a8 <_malloc_r>
 8006032:	b92a      	cbnz	r2, 8006040 <_realloc_r+0x24>
 8006034:	f7ff fbf4 	bl	8005820 <_free_r>
 8006038:	4625      	mov	r5, r4
 800603a:	4628      	mov	r0, r5
 800603c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006040:	f000 f9f2 	bl	8006428 <_malloc_usable_size_r>
 8006044:	4284      	cmp	r4, r0
 8006046:	4607      	mov	r7, r0
 8006048:	d802      	bhi.n	8006050 <_realloc_r+0x34>
 800604a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800604e:	d812      	bhi.n	8006076 <_realloc_r+0x5a>
 8006050:	4621      	mov	r1, r4
 8006052:	4640      	mov	r0, r8
 8006054:	f7ff f828 	bl	80050a8 <_malloc_r>
 8006058:	4605      	mov	r5, r0
 800605a:	2800      	cmp	r0, #0
 800605c:	d0ed      	beq.n	800603a <_realloc_r+0x1e>
 800605e:	42bc      	cmp	r4, r7
 8006060:	4622      	mov	r2, r4
 8006062:	4631      	mov	r1, r6
 8006064:	bf28      	it	cs
 8006066:	463a      	movcs	r2, r7
 8006068:	f7ff fbad 	bl	80057c6 <memcpy>
 800606c:	4631      	mov	r1, r6
 800606e:	4640      	mov	r0, r8
 8006070:	f7ff fbd6 	bl	8005820 <_free_r>
 8006074:	e7e1      	b.n	800603a <_realloc_r+0x1e>
 8006076:	4635      	mov	r5, r6
 8006078:	e7df      	b.n	800603a <_realloc_r+0x1e>

0800607a <__sfputc_r>:
 800607a:	6893      	ldr	r3, [r2, #8]
 800607c:	b410      	push	{r4}
 800607e:	3b01      	subs	r3, #1
 8006080:	2b00      	cmp	r3, #0
 8006082:	6093      	str	r3, [r2, #8]
 8006084:	da07      	bge.n	8006096 <__sfputc_r+0x1c>
 8006086:	6994      	ldr	r4, [r2, #24]
 8006088:	42a3      	cmp	r3, r4
 800608a:	db01      	blt.n	8006090 <__sfputc_r+0x16>
 800608c:	290a      	cmp	r1, #10
 800608e:	d102      	bne.n	8006096 <__sfputc_r+0x1c>
 8006090:	bc10      	pop	{r4}
 8006092:	f000 b933 	b.w	80062fc <__swbuf_r>
 8006096:	6813      	ldr	r3, [r2, #0]
 8006098:	1c58      	adds	r0, r3, #1
 800609a:	6010      	str	r0, [r2, #0]
 800609c:	7019      	strb	r1, [r3, #0]
 800609e:	4608      	mov	r0, r1
 80060a0:	bc10      	pop	{r4}
 80060a2:	4770      	bx	lr

080060a4 <__sfputs_r>:
 80060a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a6:	4606      	mov	r6, r0
 80060a8:	460f      	mov	r7, r1
 80060aa:	4614      	mov	r4, r2
 80060ac:	18d5      	adds	r5, r2, r3
 80060ae:	42ac      	cmp	r4, r5
 80060b0:	d101      	bne.n	80060b6 <__sfputs_r+0x12>
 80060b2:	2000      	movs	r0, #0
 80060b4:	e007      	b.n	80060c6 <__sfputs_r+0x22>
 80060b6:	463a      	mov	r2, r7
 80060b8:	4630      	mov	r0, r6
 80060ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060be:	f7ff ffdc 	bl	800607a <__sfputc_r>
 80060c2:	1c43      	adds	r3, r0, #1
 80060c4:	d1f3      	bne.n	80060ae <__sfputs_r+0xa>
 80060c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080060c8 <_vfiprintf_r>:
 80060c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060cc:	460d      	mov	r5, r1
 80060ce:	4614      	mov	r4, r2
 80060d0:	4698      	mov	r8, r3
 80060d2:	4606      	mov	r6, r0
 80060d4:	b09d      	sub	sp, #116	; 0x74
 80060d6:	b118      	cbz	r0, 80060e0 <_vfiprintf_r+0x18>
 80060d8:	6a03      	ldr	r3, [r0, #32]
 80060da:	b90b      	cbnz	r3, 80060e0 <_vfiprintf_r+0x18>
 80060dc:	f7ff f9f0 	bl	80054c0 <__sinit>
 80060e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060e2:	07d9      	lsls	r1, r3, #31
 80060e4:	d405      	bmi.n	80060f2 <_vfiprintf_r+0x2a>
 80060e6:	89ab      	ldrh	r3, [r5, #12]
 80060e8:	059a      	lsls	r2, r3, #22
 80060ea:	d402      	bmi.n	80060f2 <_vfiprintf_r+0x2a>
 80060ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060ee:	f7ff fb68 	bl	80057c2 <__retarget_lock_acquire_recursive>
 80060f2:	89ab      	ldrh	r3, [r5, #12]
 80060f4:	071b      	lsls	r3, r3, #28
 80060f6:	d501      	bpl.n	80060fc <_vfiprintf_r+0x34>
 80060f8:	692b      	ldr	r3, [r5, #16]
 80060fa:	b99b      	cbnz	r3, 8006124 <_vfiprintf_r+0x5c>
 80060fc:	4629      	mov	r1, r5
 80060fe:	4630      	mov	r0, r6
 8006100:	f000 f93a 	bl	8006378 <__swsetup_r>
 8006104:	b170      	cbz	r0, 8006124 <_vfiprintf_r+0x5c>
 8006106:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006108:	07dc      	lsls	r4, r3, #31
 800610a:	d504      	bpl.n	8006116 <_vfiprintf_r+0x4e>
 800610c:	f04f 30ff 	mov.w	r0, #4294967295
 8006110:	b01d      	add	sp, #116	; 0x74
 8006112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006116:	89ab      	ldrh	r3, [r5, #12]
 8006118:	0598      	lsls	r0, r3, #22
 800611a:	d4f7      	bmi.n	800610c <_vfiprintf_r+0x44>
 800611c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800611e:	f7ff fb51 	bl	80057c4 <__retarget_lock_release_recursive>
 8006122:	e7f3      	b.n	800610c <_vfiprintf_r+0x44>
 8006124:	2300      	movs	r3, #0
 8006126:	9309      	str	r3, [sp, #36]	; 0x24
 8006128:	2320      	movs	r3, #32
 800612a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800612e:	2330      	movs	r3, #48	; 0x30
 8006130:	f04f 0901 	mov.w	r9, #1
 8006134:	f8cd 800c 	str.w	r8, [sp, #12]
 8006138:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80062e8 <_vfiprintf_r+0x220>
 800613c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006140:	4623      	mov	r3, r4
 8006142:	469a      	mov	sl, r3
 8006144:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006148:	b10a      	cbz	r2, 800614e <_vfiprintf_r+0x86>
 800614a:	2a25      	cmp	r2, #37	; 0x25
 800614c:	d1f9      	bne.n	8006142 <_vfiprintf_r+0x7a>
 800614e:	ebba 0b04 	subs.w	fp, sl, r4
 8006152:	d00b      	beq.n	800616c <_vfiprintf_r+0xa4>
 8006154:	465b      	mov	r3, fp
 8006156:	4622      	mov	r2, r4
 8006158:	4629      	mov	r1, r5
 800615a:	4630      	mov	r0, r6
 800615c:	f7ff ffa2 	bl	80060a4 <__sfputs_r>
 8006160:	3001      	adds	r0, #1
 8006162:	f000 80a9 	beq.w	80062b8 <_vfiprintf_r+0x1f0>
 8006166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006168:	445a      	add	r2, fp
 800616a:	9209      	str	r2, [sp, #36]	; 0x24
 800616c:	f89a 3000 	ldrb.w	r3, [sl]
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 80a1 	beq.w	80062b8 <_vfiprintf_r+0x1f0>
 8006176:	2300      	movs	r3, #0
 8006178:	f04f 32ff 	mov.w	r2, #4294967295
 800617c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006180:	f10a 0a01 	add.w	sl, sl, #1
 8006184:	9304      	str	r3, [sp, #16]
 8006186:	9307      	str	r3, [sp, #28]
 8006188:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800618c:	931a      	str	r3, [sp, #104]	; 0x68
 800618e:	4654      	mov	r4, sl
 8006190:	2205      	movs	r2, #5
 8006192:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006196:	4854      	ldr	r0, [pc, #336]	; (80062e8 <_vfiprintf_r+0x220>)
 8006198:	f7ff ff32 	bl	8006000 <memchr>
 800619c:	9a04      	ldr	r2, [sp, #16]
 800619e:	b9d8      	cbnz	r0, 80061d8 <_vfiprintf_r+0x110>
 80061a0:	06d1      	lsls	r1, r2, #27
 80061a2:	bf44      	itt	mi
 80061a4:	2320      	movmi	r3, #32
 80061a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061aa:	0713      	lsls	r3, r2, #28
 80061ac:	bf44      	itt	mi
 80061ae:	232b      	movmi	r3, #43	; 0x2b
 80061b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061b4:	f89a 3000 	ldrb.w	r3, [sl]
 80061b8:	2b2a      	cmp	r3, #42	; 0x2a
 80061ba:	d015      	beq.n	80061e8 <_vfiprintf_r+0x120>
 80061bc:	4654      	mov	r4, sl
 80061be:	2000      	movs	r0, #0
 80061c0:	f04f 0c0a 	mov.w	ip, #10
 80061c4:	9a07      	ldr	r2, [sp, #28]
 80061c6:	4621      	mov	r1, r4
 80061c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061cc:	3b30      	subs	r3, #48	; 0x30
 80061ce:	2b09      	cmp	r3, #9
 80061d0:	d94d      	bls.n	800626e <_vfiprintf_r+0x1a6>
 80061d2:	b1b0      	cbz	r0, 8006202 <_vfiprintf_r+0x13a>
 80061d4:	9207      	str	r2, [sp, #28]
 80061d6:	e014      	b.n	8006202 <_vfiprintf_r+0x13a>
 80061d8:	eba0 0308 	sub.w	r3, r0, r8
 80061dc:	fa09 f303 	lsl.w	r3, r9, r3
 80061e0:	4313      	orrs	r3, r2
 80061e2:	46a2      	mov	sl, r4
 80061e4:	9304      	str	r3, [sp, #16]
 80061e6:	e7d2      	b.n	800618e <_vfiprintf_r+0xc6>
 80061e8:	9b03      	ldr	r3, [sp, #12]
 80061ea:	1d19      	adds	r1, r3, #4
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	9103      	str	r1, [sp, #12]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	bfbb      	ittet	lt
 80061f4:	425b      	neglt	r3, r3
 80061f6:	f042 0202 	orrlt.w	r2, r2, #2
 80061fa:	9307      	strge	r3, [sp, #28]
 80061fc:	9307      	strlt	r3, [sp, #28]
 80061fe:	bfb8      	it	lt
 8006200:	9204      	strlt	r2, [sp, #16]
 8006202:	7823      	ldrb	r3, [r4, #0]
 8006204:	2b2e      	cmp	r3, #46	; 0x2e
 8006206:	d10c      	bne.n	8006222 <_vfiprintf_r+0x15a>
 8006208:	7863      	ldrb	r3, [r4, #1]
 800620a:	2b2a      	cmp	r3, #42	; 0x2a
 800620c:	d134      	bne.n	8006278 <_vfiprintf_r+0x1b0>
 800620e:	9b03      	ldr	r3, [sp, #12]
 8006210:	3402      	adds	r4, #2
 8006212:	1d1a      	adds	r2, r3, #4
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	9203      	str	r2, [sp, #12]
 8006218:	2b00      	cmp	r3, #0
 800621a:	bfb8      	it	lt
 800621c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006220:	9305      	str	r3, [sp, #20]
 8006222:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80062ec <_vfiprintf_r+0x224>
 8006226:	2203      	movs	r2, #3
 8006228:	4650      	mov	r0, sl
 800622a:	7821      	ldrb	r1, [r4, #0]
 800622c:	f7ff fee8 	bl	8006000 <memchr>
 8006230:	b138      	cbz	r0, 8006242 <_vfiprintf_r+0x17a>
 8006232:	2240      	movs	r2, #64	; 0x40
 8006234:	9b04      	ldr	r3, [sp, #16]
 8006236:	eba0 000a 	sub.w	r0, r0, sl
 800623a:	4082      	lsls	r2, r0
 800623c:	4313      	orrs	r3, r2
 800623e:	3401      	adds	r4, #1
 8006240:	9304      	str	r3, [sp, #16]
 8006242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006246:	2206      	movs	r2, #6
 8006248:	4829      	ldr	r0, [pc, #164]	; (80062f0 <_vfiprintf_r+0x228>)
 800624a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800624e:	f7ff fed7 	bl	8006000 <memchr>
 8006252:	2800      	cmp	r0, #0
 8006254:	d03f      	beq.n	80062d6 <_vfiprintf_r+0x20e>
 8006256:	4b27      	ldr	r3, [pc, #156]	; (80062f4 <_vfiprintf_r+0x22c>)
 8006258:	bb1b      	cbnz	r3, 80062a2 <_vfiprintf_r+0x1da>
 800625a:	9b03      	ldr	r3, [sp, #12]
 800625c:	3307      	adds	r3, #7
 800625e:	f023 0307 	bic.w	r3, r3, #7
 8006262:	3308      	adds	r3, #8
 8006264:	9303      	str	r3, [sp, #12]
 8006266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006268:	443b      	add	r3, r7
 800626a:	9309      	str	r3, [sp, #36]	; 0x24
 800626c:	e768      	b.n	8006140 <_vfiprintf_r+0x78>
 800626e:	460c      	mov	r4, r1
 8006270:	2001      	movs	r0, #1
 8006272:	fb0c 3202 	mla	r2, ip, r2, r3
 8006276:	e7a6      	b.n	80061c6 <_vfiprintf_r+0xfe>
 8006278:	2300      	movs	r3, #0
 800627a:	f04f 0c0a 	mov.w	ip, #10
 800627e:	4619      	mov	r1, r3
 8006280:	3401      	adds	r4, #1
 8006282:	9305      	str	r3, [sp, #20]
 8006284:	4620      	mov	r0, r4
 8006286:	f810 2b01 	ldrb.w	r2, [r0], #1
 800628a:	3a30      	subs	r2, #48	; 0x30
 800628c:	2a09      	cmp	r2, #9
 800628e:	d903      	bls.n	8006298 <_vfiprintf_r+0x1d0>
 8006290:	2b00      	cmp	r3, #0
 8006292:	d0c6      	beq.n	8006222 <_vfiprintf_r+0x15a>
 8006294:	9105      	str	r1, [sp, #20]
 8006296:	e7c4      	b.n	8006222 <_vfiprintf_r+0x15a>
 8006298:	4604      	mov	r4, r0
 800629a:	2301      	movs	r3, #1
 800629c:	fb0c 2101 	mla	r1, ip, r1, r2
 80062a0:	e7f0      	b.n	8006284 <_vfiprintf_r+0x1bc>
 80062a2:	ab03      	add	r3, sp, #12
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	462a      	mov	r2, r5
 80062a8:	4630      	mov	r0, r6
 80062aa:	4b13      	ldr	r3, [pc, #76]	; (80062f8 <_vfiprintf_r+0x230>)
 80062ac:	a904      	add	r1, sp, #16
 80062ae:	f3af 8000 	nop.w
 80062b2:	4607      	mov	r7, r0
 80062b4:	1c78      	adds	r0, r7, #1
 80062b6:	d1d6      	bne.n	8006266 <_vfiprintf_r+0x19e>
 80062b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062ba:	07d9      	lsls	r1, r3, #31
 80062bc:	d405      	bmi.n	80062ca <_vfiprintf_r+0x202>
 80062be:	89ab      	ldrh	r3, [r5, #12]
 80062c0:	059a      	lsls	r2, r3, #22
 80062c2:	d402      	bmi.n	80062ca <_vfiprintf_r+0x202>
 80062c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062c6:	f7ff fa7d 	bl	80057c4 <__retarget_lock_release_recursive>
 80062ca:	89ab      	ldrh	r3, [r5, #12]
 80062cc:	065b      	lsls	r3, r3, #25
 80062ce:	f53f af1d 	bmi.w	800610c <_vfiprintf_r+0x44>
 80062d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062d4:	e71c      	b.n	8006110 <_vfiprintf_r+0x48>
 80062d6:	ab03      	add	r3, sp, #12
 80062d8:	9300      	str	r3, [sp, #0]
 80062da:	462a      	mov	r2, r5
 80062dc:	4630      	mov	r0, r6
 80062de:	4b06      	ldr	r3, [pc, #24]	; (80062f8 <_vfiprintf_r+0x230>)
 80062e0:	a904      	add	r1, sp, #16
 80062e2:	f7ff fcaf 	bl	8005c44 <_printf_i>
 80062e6:	e7e4      	b.n	80062b2 <_vfiprintf_r+0x1ea>
 80062e8:	08006872 	.word	0x08006872
 80062ec:	08006878 	.word	0x08006878
 80062f0:	0800687c 	.word	0x0800687c
 80062f4:	00000000 	.word	0x00000000
 80062f8:	080060a5 	.word	0x080060a5

080062fc <__swbuf_r>:
 80062fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062fe:	460e      	mov	r6, r1
 8006300:	4614      	mov	r4, r2
 8006302:	4605      	mov	r5, r0
 8006304:	b118      	cbz	r0, 800630e <__swbuf_r+0x12>
 8006306:	6a03      	ldr	r3, [r0, #32]
 8006308:	b90b      	cbnz	r3, 800630e <__swbuf_r+0x12>
 800630a:	f7ff f8d9 	bl	80054c0 <__sinit>
 800630e:	69a3      	ldr	r3, [r4, #24]
 8006310:	60a3      	str	r3, [r4, #8]
 8006312:	89a3      	ldrh	r3, [r4, #12]
 8006314:	071a      	lsls	r2, r3, #28
 8006316:	d525      	bpl.n	8006364 <__swbuf_r+0x68>
 8006318:	6923      	ldr	r3, [r4, #16]
 800631a:	b31b      	cbz	r3, 8006364 <__swbuf_r+0x68>
 800631c:	6823      	ldr	r3, [r4, #0]
 800631e:	6922      	ldr	r2, [r4, #16]
 8006320:	b2f6      	uxtb	r6, r6
 8006322:	1a98      	subs	r0, r3, r2
 8006324:	6963      	ldr	r3, [r4, #20]
 8006326:	4637      	mov	r7, r6
 8006328:	4283      	cmp	r3, r0
 800632a:	dc04      	bgt.n	8006336 <__swbuf_r+0x3a>
 800632c:	4621      	mov	r1, r4
 800632e:	4628      	mov	r0, r5
 8006330:	f7ff fe2c 	bl	8005f8c <_fflush_r>
 8006334:	b9e0      	cbnz	r0, 8006370 <__swbuf_r+0x74>
 8006336:	68a3      	ldr	r3, [r4, #8]
 8006338:	3b01      	subs	r3, #1
 800633a:	60a3      	str	r3, [r4, #8]
 800633c:	6823      	ldr	r3, [r4, #0]
 800633e:	1c5a      	adds	r2, r3, #1
 8006340:	6022      	str	r2, [r4, #0]
 8006342:	701e      	strb	r6, [r3, #0]
 8006344:	6962      	ldr	r2, [r4, #20]
 8006346:	1c43      	adds	r3, r0, #1
 8006348:	429a      	cmp	r2, r3
 800634a:	d004      	beq.n	8006356 <__swbuf_r+0x5a>
 800634c:	89a3      	ldrh	r3, [r4, #12]
 800634e:	07db      	lsls	r3, r3, #31
 8006350:	d506      	bpl.n	8006360 <__swbuf_r+0x64>
 8006352:	2e0a      	cmp	r6, #10
 8006354:	d104      	bne.n	8006360 <__swbuf_r+0x64>
 8006356:	4621      	mov	r1, r4
 8006358:	4628      	mov	r0, r5
 800635a:	f7ff fe17 	bl	8005f8c <_fflush_r>
 800635e:	b938      	cbnz	r0, 8006370 <__swbuf_r+0x74>
 8006360:	4638      	mov	r0, r7
 8006362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006364:	4621      	mov	r1, r4
 8006366:	4628      	mov	r0, r5
 8006368:	f000 f806 	bl	8006378 <__swsetup_r>
 800636c:	2800      	cmp	r0, #0
 800636e:	d0d5      	beq.n	800631c <__swbuf_r+0x20>
 8006370:	f04f 37ff 	mov.w	r7, #4294967295
 8006374:	e7f4      	b.n	8006360 <__swbuf_r+0x64>
	...

08006378 <__swsetup_r>:
 8006378:	b538      	push	{r3, r4, r5, lr}
 800637a:	4b2a      	ldr	r3, [pc, #168]	; (8006424 <__swsetup_r+0xac>)
 800637c:	4605      	mov	r5, r0
 800637e:	6818      	ldr	r0, [r3, #0]
 8006380:	460c      	mov	r4, r1
 8006382:	b118      	cbz	r0, 800638c <__swsetup_r+0x14>
 8006384:	6a03      	ldr	r3, [r0, #32]
 8006386:	b90b      	cbnz	r3, 800638c <__swsetup_r+0x14>
 8006388:	f7ff f89a 	bl	80054c0 <__sinit>
 800638c:	89a3      	ldrh	r3, [r4, #12]
 800638e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006392:	0718      	lsls	r0, r3, #28
 8006394:	d422      	bmi.n	80063dc <__swsetup_r+0x64>
 8006396:	06d9      	lsls	r1, r3, #27
 8006398:	d407      	bmi.n	80063aa <__swsetup_r+0x32>
 800639a:	2309      	movs	r3, #9
 800639c:	602b      	str	r3, [r5, #0]
 800639e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80063a2:	f04f 30ff 	mov.w	r0, #4294967295
 80063a6:	81a3      	strh	r3, [r4, #12]
 80063a8:	e034      	b.n	8006414 <__swsetup_r+0x9c>
 80063aa:	0758      	lsls	r0, r3, #29
 80063ac:	d512      	bpl.n	80063d4 <__swsetup_r+0x5c>
 80063ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063b0:	b141      	cbz	r1, 80063c4 <__swsetup_r+0x4c>
 80063b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063b6:	4299      	cmp	r1, r3
 80063b8:	d002      	beq.n	80063c0 <__swsetup_r+0x48>
 80063ba:	4628      	mov	r0, r5
 80063bc:	f7ff fa30 	bl	8005820 <_free_r>
 80063c0:	2300      	movs	r3, #0
 80063c2:	6363      	str	r3, [r4, #52]	; 0x34
 80063c4:	89a3      	ldrh	r3, [r4, #12]
 80063c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80063ca:	81a3      	strh	r3, [r4, #12]
 80063cc:	2300      	movs	r3, #0
 80063ce:	6063      	str	r3, [r4, #4]
 80063d0:	6923      	ldr	r3, [r4, #16]
 80063d2:	6023      	str	r3, [r4, #0]
 80063d4:	89a3      	ldrh	r3, [r4, #12]
 80063d6:	f043 0308 	orr.w	r3, r3, #8
 80063da:	81a3      	strh	r3, [r4, #12]
 80063dc:	6923      	ldr	r3, [r4, #16]
 80063de:	b94b      	cbnz	r3, 80063f4 <__swsetup_r+0x7c>
 80063e0:	89a3      	ldrh	r3, [r4, #12]
 80063e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063ea:	d003      	beq.n	80063f4 <__swsetup_r+0x7c>
 80063ec:	4621      	mov	r1, r4
 80063ee:	4628      	mov	r0, r5
 80063f0:	f000 f847 	bl	8006482 <__smakebuf_r>
 80063f4:	89a0      	ldrh	r0, [r4, #12]
 80063f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063fa:	f010 0301 	ands.w	r3, r0, #1
 80063fe:	d00a      	beq.n	8006416 <__swsetup_r+0x9e>
 8006400:	2300      	movs	r3, #0
 8006402:	60a3      	str	r3, [r4, #8]
 8006404:	6963      	ldr	r3, [r4, #20]
 8006406:	425b      	negs	r3, r3
 8006408:	61a3      	str	r3, [r4, #24]
 800640a:	6923      	ldr	r3, [r4, #16]
 800640c:	b943      	cbnz	r3, 8006420 <__swsetup_r+0xa8>
 800640e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006412:	d1c4      	bne.n	800639e <__swsetup_r+0x26>
 8006414:	bd38      	pop	{r3, r4, r5, pc}
 8006416:	0781      	lsls	r1, r0, #30
 8006418:	bf58      	it	pl
 800641a:	6963      	ldrpl	r3, [r4, #20]
 800641c:	60a3      	str	r3, [r4, #8]
 800641e:	e7f4      	b.n	800640a <__swsetup_r+0x92>
 8006420:	2000      	movs	r0, #0
 8006422:	e7f7      	b.n	8006414 <__swsetup_r+0x9c>
 8006424:	20000064 	.word	0x20000064

08006428 <_malloc_usable_size_r>:
 8006428:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800642c:	1f18      	subs	r0, r3, #4
 800642e:	2b00      	cmp	r3, #0
 8006430:	bfbc      	itt	lt
 8006432:	580b      	ldrlt	r3, [r1, r0]
 8006434:	18c0      	addlt	r0, r0, r3
 8006436:	4770      	bx	lr

08006438 <__swhatbuf_r>:
 8006438:	b570      	push	{r4, r5, r6, lr}
 800643a:	460c      	mov	r4, r1
 800643c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006440:	4615      	mov	r5, r2
 8006442:	2900      	cmp	r1, #0
 8006444:	461e      	mov	r6, r3
 8006446:	b096      	sub	sp, #88	; 0x58
 8006448:	da0c      	bge.n	8006464 <__swhatbuf_r+0x2c>
 800644a:	89a3      	ldrh	r3, [r4, #12]
 800644c:	2100      	movs	r1, #0
 800644e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006452:	bf0c      	ite	eq
 8006454:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006458:	2340      	movne	r3, #64	; 0x40
 800645a:	2000      	movs	r0, #0
 800645c:	6031      	str	r1, [r6, #0]
 800645e:	602b      	str	r3, [r5, #0]
 8006460:	b016      	add	sp, #88	; 0x58
 8006462:	bd70      	pop	{r4, r5, r6, pc}
 8006464:	466a      	mov	r2, sp
 8006466:	f000 f849 	bl	80064fc <_fstat_r>
 800646a:	2800      	cmp	r0, #0
 800646c:	dbed      	blt.n	800644a <__swhatbuf_r+0x12>
 800646e:	9901      	ldr	r1, [sp, #4]
 8006470:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006474:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006478:	4259      	negs	r1, r3
 800647a:	4159      	adcs	r1, r3
 800647c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006480:	e7eb      	b.n	800645a <__swhatbuf_r+0x22>

08006482 <__smakebuf_r>:
 8006482:	898b      	ldrh	r3, [r1, #12]
 8006484:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006486:	079d      	lsls	r5, r3, #30
 8006488:	4606      	mov	r6, r0
 800648a:	460c      	mov	r4, r1
 800648c:	d507      	bpl.n	800649e <__smakebuf_r+0x1c>
 800648e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006492:	6023      	str	r3, [r4, #0]
 8006494:	6123      	str	r3, [r4, #16]
 8006496:	2301      	movs	r3, #1
 8006498:	6163      	str	r3, [r4, #20]
 800649a:	b002      	add	sp, #8
 800649c:	bd70      	pop	{r4, r5, r6, pc}
 800649e:	466a      	mov	r2, sp
 80064a0:	ab01      	add	r3, sp, #4
 80064a2:	f7ff ffc9 	bl	8006438 <__swhatbuf_r>
 80064a6:	9900      	ldr	r1, [sp, #0]
 80064a8:	4605      	mov	r5, r0
 80064aa:	4630      	mov	r0, r6
 80064ac:	f7fe fdfc 	bl	80050a8 <_malloc_r>
 80064b0:	b948      	cbnz	r0, 80064c6 <__smakebuf_r+0x44>
 80064b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064b6:	059a      	lsls	r2, r3, #22
 80064b8:	d4ef      	bmi.n	800649a <__smakebuf_r+0x18>
 80064ba:	f023 0303 	bic.w	r3, r3, #3
 80064be:	f043 0302 	orr.w	r3, r3, #2
 80064c2:	81a3      	strh	r3, [r4, #12]
 80064c4:	e7e3      	b.n	800648e <__smakebuf_r+0xc>
 80064c6:	89a3      	ldrh	r3, [r4, #12]
 80064c8:	6020      	str	r0, [r4, #0]
 80064ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ce:	81a3      	strh	r3, [r4, #12]
 80064d0:	9b00      	ldr	r3, [sp, #0]
 80064d2:	6120      	str	r0, [r4, #16]
 80064d4:	6163      	str	r3, [r4, #20]
 80064d6:	9b01      	ldr	r3, [sp, #4]
 80064d8:	b15b      	cbz	r3, 80064f2 <__smakebuf_r+0x70>
 80064da:	4630      	mov	r0, r6
 80064dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064e0:	f000 f81e 	bl	8006520 <_isatty_r>
 80064e4:	b128      	cbz	r0, 80064f2 <__smakebuf_r+0x70>
 80064e6:	89a3      	ldrh	r3, [r4, #12]
 80064e8:	f023 0303 	bic.w	r3, r3, #3
 80064ec:	f043 0301 	orr.w	r3, r3, #1
 80064f0:	81a3      	strh	r3, [r4, #12]
 80064f2:	89a3      	ldrh	r3, [r4, #12]
 80064f4:	431d      	orrs	r5, r3
 80064f6:	81a5      	strh	r5, [r4, #12]
 80064f8:	e7cf      	b.n	800649a <__smakebuf_r+0x18>
	...

080064fc <_fstat_r>:
 80064fc:	b538      	push	{r3, r4, r5, lr}
 80064fe:	2300      	movs	r3, #0
 8006500:	4d06      	ldr	r5, [pc, #24]	; (800651c <_fstat_r+0x20>)
 8006502:	4604      	mov	r4, r0
 8006504:	4608      	mov	r0, r1
 8006506:	4611      	mov	r1, r2
 8006508:	602b      	str	r3, [r5, #0]
 800650a:	f7fc f904 	bl	8002716 <_fstat>
 800650e:	1c43      	adds	r3, r0, #1
 8006510:	d102      	bne.n	8006518 <_fstat_r+0x1c>
 8006512:	682b      	ldr	r3, [r5, #0]
 8006514:	b103      	cbz	r3, 8006518 <_fstat_r+0x1c>
 8006516:	6023      	str	r3, [r4, #0]
 8006518:	bd38      	pop	{r3, r4, r5, pc}
 800651a:	bf00      	nop
 800651c:	20000b58 	.word	0x20000b58

08006520 <_isatty_r>:
 8006520:	b538      	push	{r3, r4, r5, lr}
 8006522:	2300      	movs	r3, #0
 8006524:	4d05      	ldr	r5, [pc, #20]	; (800653c <_isatty_r+0x1c>)
 8006526:	4604      	mov	r4, r0
 8006528:	4608      	mov	r0, r1
 800652a:	602b      	str	r3, [r5, #0]
 800652c:	f7fc f902 	bl	8002734 <_isatty>
 8006530:	1c43      	adds	r3, r0, #1
 8006532:	d102      	bne.n	800653a <_isatty_r+0x1a>
 8006534:	682b      	ldr	r3, [r5, #0]
 8006536:	b103      	cbz	r3, 800653a <_isatty_r+0x1a>
 8006538:	6023      	str	r3, [r4, #0]
 800653a:	bd38      	pop	{r3, r4, r5, pc}
 800653c:	20000b58 	.word	0x20000b58

08006540 <_init>:
 8006540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006542:	bf00      	nop
 8006544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006546:	bc08      	pop	{r3}
 8006548:	469e      	mov	lr, r3
 800654a:	4770      	bx	lr

0800654c <_fini>:
 800654c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800654e:	bf00      	nop
 8006550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006552:	bc08      	pop	{r3}
 8006554:	469e      	mov	lr, r3
 8006556:	4770      	bx	lr
