
lab_14.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082b0  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c60  08008498  08008498  00018498  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0f8  0800a0f8  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a0f8  0800a0f8  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a0f8  0800a0f8  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0f8  0800a0f8  0001a0f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0fc  0800a0fc  0001a0fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800a100  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  200001d8  0800a2d8  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  0800a2d8  000203e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009066  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bfe  00000000  00000000  000292aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000908  00000000  00000000  0002aea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006e2  00000000  00000000  0002b7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a750  00000000  00000000  0002be92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000af7f  00000000  00000000  000465e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097f79  00000000  00000000  00051561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000038dc  00000000  00000000  000e94dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000ecdb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001d8 	.word	0x200001d8
 8000204:	00000000 	.word	0x00000000
 8000208:	08008480 	.word	0x08008480

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001dc 	.word	0x200001dc
 8000224:	08008480 	.word	0x08008480

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_d2lz>:
 8000c40:	b538      	push	{r3, r4, r5, lr}
 8000c42:	4605      	mov	r5, r0
 8000c44:	460c      	mov	r4, r1
 8000c46:	2200      	movs	r2, #0
 8000c48:	2300      	movs	r3, #0
 8000c4a:	4628      	mov	r0, r5
 8000c4c:	4621      	mov	r1, r4
 8000c4e:	f7ff ff21 	bl	8000a94 <__aeabi_dcmplt>
 8000c52:	b928      	cbnz	r0, 8000c60 <__aeabi_d2lz+0x20>
 8000c54:	4628      	mov	r0, r5
 8000c56:	4621      	mov	r1, r4
 8000c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c5c:	f000 b80a 	b.w	8000c74 <__aeabi_d2ulz>
 8000c60:	4628      	mov	r0, r5
 8000c62:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c66:	f000 f805 	bl	8000c74 <__aeabi_d2ulz>
 8000c6a:	4240      	negs	r0, r0
 8000c6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c70:	bd38      	pop	{r3, r4, r5, pc}
 8000c72:	bf00      	nop

08000c74 <__aeabi_d2ulz>:
 8000c74:	b5d0      	push	{r4, r6, r7, lr}
 8000c76:	2200      	movs	r2, #0
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <__aeabi_d2ulz+0x34>)
 8000c7a:	4606      	mov	r6, r0
 8000c7c:	460f      	mov	r7, r1
 8000c7e:	f7ff fc97 	bl	80005b0 <__aeabi_dmul>
 8000c82:	f7ff ff6d 	bl	8000b60 <__aeabi_d2uiz>
 8000c86:	4604      	mov	r4, r0
 8000c88:	f7ff fc18 	bl	80004bc <__aeabi_ui2d>
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	4b07      	ldr	r3, [pc, #28]	; (8000cac <__aeabi_d2ulz+0x38>)
 8000c90:	f7ff fc8e 	bl	80005b0 <__aeabi_dmul>
 8000c94:	4602      	mov	r2, r0
 8000c96:	460b      	mov	r3, r1
 8000c98:	4630      	mov	r0, r6
 8000c9a:	4639      	mov	r1, r7
 8000c9c:	f7ff fad0 	bl	8000240 <__aeabi_dsub>
 8000ca0:	f7ff ff5e 	bl	8000b60 <__aeabi_d2uiz>
 8000ca4:	4621      	mov	r1, r4
 8000ca6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ca8:	3df00000 	.word	0x3df00000
 8000cac:	41f00000 	.word	0x41f00000

08000cb0 <LCD_WR_REG>:
// 默认为竖屏
_lcd_dev lcddev;

// 写寄存器函数
// data:寄存器值
void LCD_WR_REG(uint16_t data) {
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	80fb      	strh	r3, [r7, #6]
  LCD_RS_CLR; // 写地址
 8000cba:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <LCD_WR_REG+0x40>)
 8000cbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cc0:	615a      	str	r2, [r3, #20]
  LCD_CS_CLR;
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <LCD_WR_REG+0x40>)
 8000cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cc8:	615a      	str	r2, [r3, #20]
  DATAOUT(data);
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <LCD_WR_REG+0x44>)
 8000ccc:	88fb      	ldrh	r3, [r7, #6]
 8000cce:	60d3      	str	r3, [r2, #12]
  LCD_WR_CLR;
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <LCD_WR_REG+0x40>)
 8000cd2:	2280      	movs	r2, #128	; 0x80
 8000cd4:	615a      	str	r2, [r3, #20]
  LCD_WR_SET;
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <LCD_WR_REG+0x40>)
 8000cd8:	2280      	movs	r2, #128	; 0x80
 8000cda:	611a      	str	r2, [r3, #16]
  LCD_CS_SET;
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <LCD_WR_REG+0x40>)
 8000cde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ce2:	611a      	str	r2, [r3, #16]
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40011000 	.word	0x40011000
 8000cf4:	40010c00 	.word	0x40010c00

08000cf8 <LCD_WR_DATAX>:
// 写数据函数
// 可以替代LCD_WR_DATAX宏,拿时间换空间.
// data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	80fb      	strh	r3, [r7, #6]
  LCD_RS_SET;
 8000d02:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <LCD_WR_DATAX+0x40>)
 8000d04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d08:	611a      	str	r2, [r3, #16]
  LCD_CS_CLR;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <LCD_WR_DATAX+0x40>)
 8000d0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d10:	615a      	str	r2, [r3, #20]
  DATAOUT(data);
 8000d12:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <LCD_WR_DATAX+0x44>)
 8000d14:	88fb      	ldrh	r3, [r7, #6]
 8000d16:	60d3      	str	r3, [r2, #12]
  LCD_WR_CLR;
 8000d18:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <LCD_WR_DATAX+0x40>)
 8000d1a:	2280      	movs	r2, #128	; 0x80
 8000d1c:	615a      	str	r2, [r3, #20]
  LCD_WR_SET;
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <LCD_WR_DATAX+0x40>)
 8000d20:	2280      	movs	r2, #128	; 0x80
 8000d22:	611a      	str	r2, [r3, #16]
  LCD_CS_SET;
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <LCD_WR_DATAX+0x40>)
 8000d26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d2a:	611a      	str	r2, [r3, #16]
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	40011000 	.word	0x40011000
 8000d3c:	40010c00 	.word	0x40010c00

08000d40 <LCD_RD_DATA>:
// 读LCD数据
// 返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
  uint16_t t;
  GPIOB->CRL = 0X88888888; // PB0-7  上拉输入
 8000d46:	4b19      	ldr	r3, [pc, #100]	; (8000dac <LCD_RD_DATA+0x6c>)
 8000d48:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000d4c:	601a      	str	r2, [r3, #0]
  GPIOB->CRH = 0X88888888; // PB8-15 上拉输入
 8000d4e:	4b17      	ldr	r3, [pc, #92]	; (8000dac <LCD_RD_DATA+0x6c>)
 8000d50:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000d54:	605a      	str	r2, [r3, #4]
  GPIOB->ODR = 0X0000;     // 全部输出0
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <LCD_RD_DATA+0x6c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	60da      	str	r2, [r3, #12]

  LCD_RS_SET;
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <LCD_RD_DATA+0x70>)
 8000d5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d62:	611a      	str	r2, [r3, #16]
  LCD_CS_CLR;
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <LCD_RD_DATA+0x70>)
 8000d66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d6a:	615a      	str	r2, [r3, #20]
  // 读取数据(读寄存器时,并不需要读2次)
  LCD_RD_CLR;
 8000d6c:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <LCD_RD_DATA+0x70>)
 8000d6e:	2240      	movs	r2, #64	; 0x40
 8000d70:	615a      	str	r2, [r3, #20]
  t = DATAIN;
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <LCD_RD_DATA+0x6c>)
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	80fb      	strh	r3, [r7, #6]
  LCD_RD_SET;
 8000d78:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <LCD_RD_DATA+0x70>)
 8000d7a:	2240      	movs	r2, #64	; 0x40
 8000d7c:	611a      	str	r2, [r3, #16]
  LCD_CS_SET;
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <LCD_RD_DATA+0x70>)
 8000d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d84:	611a      	str	r2, [r3, #16]

  GPIOB->CRL = 0X33333333; // PB0-7  上拉输出
 8000d86:	4b09      	ldr	r3, [pc, #36]	; (8000dac <LCD_RD_DATA+0x6c>)
 8000d88:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000d8c:	601a      	str	r2, [r3, #0]
  GPIOB->CRH = 0X33333333; // PB8-15 上拉输出
 8000d8e:	4b07      	ldr	r3, [pc, #28]	; (8000dac <LCD_RD_DATA+0x6c>)
 8000d90:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000d94:	605a      	str	r2, [r3, #4]
  GPIOB->ODR = 0XFFFF;     // 全部输出高
 8000d96:	4b05      	ldr	r3, [pc, #20]	; (8000dac <LCD_RD_DATA+0x6c>)
 8000d98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d9c:	60da      	str	r2, [r3, #12]
  return t;
 8000d9e:	88fb      	ldrh	r3, [r7, #6]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bc80      	pop	{r7}
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	40010c00 	.word	0x40010c00
 8000db0:	40011000 	.word	0x40011000

08000db4 <LCD_WriteReg>:
// 写寄存器
// LCD_Reg:寄存器编号
// LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	460a      	mov	r2, r1
 8000dbe:	80fb      	strh	r3, [r7, #6]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	80bb      	strh	r3, [r7, #4]
  LCD_WR_REG(LCD_Reg);
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ff72 	bl	8000cb0 <LCD_WR_REG>
  LCD_WR_DATA(LCD_RegValue);
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <LCD_WriteReg+0x4c>)
 8000dce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dd2:	611a      	str	r2, [r3, #16]
 8000dd4:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <LCD_WriteReg+0x4c>)
 8000dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dda:	615a      	str	r2, [r3, #20]
 8000ddc:	4a09      	ldr	r2, [pc, #36]	; (8000e04 <LCD_WriteReg+0x50>)
 8000dde:	88bb      	ldrh	r3, [r7, #4]
 8000de0:	60d3      	str	r3, [r2, #12]
 8000de2:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <LCD_WriteReg+0x4c>)
 8000de4:	2280      	movs	r2, #128	; 0x80
 8000de6:	615a      	str	r2, [r3, #20]
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <LCD_WriteReg+0x4c>)
 8000dea:	2280      	movs	r2, #128	; 0x80
 8000dec:	611a      	str	r2, [r3, #16]
 8000dee:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <LCD_WriteReg+0x4c>)
 8000df0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000df4:	611a      	str	r2, [r3, #16]
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40011000 	.word	0x40011000
 8000e04:	40010c00 	.word	0x40010c00

08000e08 <LCD_ReadReg>:
// 读寄存器
// LCD_Reg:寄存器编号
// 返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	80fb      	strh	r3, [r7, #6]
  LCD_WR_REG(LCD_Reg); // 写入要读的寄存器号
 8000e12:	88fb      	ldrh	r3, [r7, #6]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff4b 	bl	8000cb0 <LCD_WR_REG>
  return LCD_RD_DATA();
 8000e1a:	f7ff ff91 	bl	8000d40 <LCD_RD_DATA>
 8000e1e:	4603      	mov	r3, r0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <LCD_WriteRAM_Prepare>:
// 开始写GRAM
void LCD_WriteRAM_Prepare(void) { LCD_WR_REG(lcddev.wramcmd); }
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <LCD_WriteRAM_Prepare+0x14>)
 8000e2e:	891b      	ldrh	r3, [r3, #8]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff3d 	bl	8000cb0 <LCD_WR_REG>
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200001f8 	.word	0x200001f8

08000e40 <LCD_BGR2RGB>:
}
// 从ILI93xx读出的数据为GBR格式，而我们写入的时候为RGB格式。
// 通过该函数转换
// c:GBR格式的颜色值
// 返回值：RGB格式的颜色值
uint16_t LCD_BGR2RGB(uint16_t c) {
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	80fb      	strh	r3, [r7, #6]
  uint16_t r, g, b, rgb;
  b = (c >> 0) & 0x1f;
 8000e4a:	88fb      	ldrh	r3, [r7, #6]
 8000e4c:	f003 031f 	and.w	r3, r3, #31
 8000e50:	81fb      	strh	r3, [r7, #14]
  g = (c >> 5) & 0x3f;
 8000e52:	88fb      	ldrh	r3, [r7, #6]
 8000e54:	095b      	lsrs	r3, r3, #5
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e5c:	81bb      	strh	r3, [r7, #12]
  r = (c >> 11) & 0x1f;
 8000e5e:	88fb      	ldrh	r3, [r7, #6]
 8000e60:	0adb      	lsrs	r3, r3, #11
 8000e62:	817b      	strh	r3, [r7, #10]
  rgb = (b << 11) + (g << 5) + (r << 0);
 8000e64:	89fb      	ldrh	r3, [r7, #14]
 8000e66:	02db      	lsls	r3, r3, #11
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	89bb      	ldrh	r3, [r7, #12]
 8000e6c:	015b      	lsls	r3, r3, #5
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	4413      	add	r3, r2
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	897b      	ldrh	r3, [r7, #10]
 8000e76:	4413      	add	r3, r2
 8000e78:	813b      	strh	r3, [r7, #8]
  return (rgb);
 8000e7a:	893b      	ldrh	r3, [r7, #8]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr
	...

08000e88 <LCD_SetCursor>:
  LCD_WR_REG(0X28); // 关闭显示
}
// 设置光标位置
// Xpos:横坐标
// Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	460a      	mov	r2, r1
 8000e92:	80fb      	strh	r3, [r7, #6]
 8000e94:	4613      	mov	r3, r2
 8000e96:	80bb      	strh	r3, [r7, #4]
  LCD_WR_REG(lcddev.setxcmd);
 8000e98:	4b33      	ldr	r3, [pc, #204]	; (8000f68 <LCD_SetCursor+0xe0>)
 8000e9a:	895b      	ldrh	r3, [r3, #10]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ff07 	bl	8000cb0 <LCD_WR_REG>
  LCD_WR_DATA(Xpos >> 8);
 8000ea2:	4b32      	ldr	r3, [pc, #200]	; (8000f6c <LCD_SetCursor+0xe4>)
 8000ea4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ea8:	611a      	str	r2, [r3, #16]
 8000eaa:	4b30      	ldr	r3, [pc, #192]	; (8000f6c <LCD_SetCursor+0xe4>)
 8000eac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb0:	615a      	str	r2, [r3, #20]
 8000eb2:	88fb      	ldrh	r3, [r7, #6]
 8000eb4:	0a1b      	lsrs	r3, r3, #8
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	4b2d      	ldr	r3, [pc, #180]	; (8000f70 <LCD_SetCursor+0xe8>)
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	4b2b      	ldr	r3, [pc, #172]	; (8000f6c <LCD_SetCursor+0xe4>)
 8000ebe:	2280      	movs	r2, #128	; 0x80
 8000ec0:	615a      	str	r2, [r3, #20]
 8000ec2:	4b2a      	ldr	r3, [pc, #168]	; (8000f6c <LCD_SetCursor+0xe4>)
 8000ec4:	2280      	movs	r2, #128	; 0x80
 8000ec6:	611a      	str	r2, [r3, #16]
 8000ec8:	4b28      	ldr	r3, [pc, #160]	; (8000f6c <LCD_SetCursor+0xe4>)
 8000eca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ece:	611a      	str	r2, [r3, #16]
  LCD_WR_DATA(Xpos & 0XFF);
 8000ed0:	4b26      	ldr	r3, [pc, #152]	; (8000f6c <LCD_SetCursor+0xe4>)
 8000ed2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ed6:	611a      	str	r2, [r3, #16]
 8000ed8:	4b24      	ldr	r3, [pc, #144]	; (8000f6c <LCD_SetCursor+0xe4>)
 8000eda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ede:	615a      	str	r2, [r3, #20]
 8000ee0:	88fb      	ldrh	r3, [r7, #6]
 8000ee2:	4a23      	ldr	r2, [pc, #140]	; (8000f70 <LCD_SetCursor+0xe8>)
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	60d3      	str	r3, [r2, #12]
 8000ee8:	4b20      	ldr	r3, [pc, #128]	; (8000f6c <LCD_SetCursor+0xe4>)
 8000eea:	2280      	movs	r2, #128	; 0x80
 8000eec:	615a      	str	r2, [r3, #20]
 8000eee:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <LCD_SetCursor+0xe4>)
 8000ef0:	2280      	movs	r2, #128	; 0x80
 8000ef2:	611a      	str	r2, [r3, #16]
 8000ef4:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <LCD_SetCursor+0xe4>)
 8000ef6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000efa:	611a      	str	r2, [r3, #16]
  LCD_WR_REG(lcddev.setycmd);
 8000efc:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <LCD_SetCursor+0xe0>)
 8000efe:	899b      	ldrh	r3, [r3, #12]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fed5 	bl	8000cb0 <LCD_WR_REG>
  LCD_WR_DATA(Ypos >> 8);
 8000f06:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <LCD_SetCursor+0xe4>)
 8000f08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f0c:	611a      	str	r2, [r3, #16]
 8000f0e:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <LCD_SetCursor+0xe4>)
 8000f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f14:	615a      	str	r2, [r3, #20]
 8000f16:	88bb      	ldrh	r3, [r7, #4]
 8000f18:	0a1b      	lsrs	r3, r3, #8
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <LCD_SetCursor+0xe8>)
 8000f1e:	60da      	str	r2, [r3, #12]
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <LCD_SetCursor+0xe4>)
 8000f22:	2280      	movs	r2, #128	; 0x80
 8000f24:	615a      	str	r2, [r3, #20]
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <LCD_SetCursor+0xe4>)
 8000f28:	2280      	movs	r2, #128	; 0x80
 8000f2a:	611a      	str	r2, [r3, #16]
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <LCD_SetCursor+0xe4>)
 8000f2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f32:	611a      	str	r2, [r3, #16]
  LCD_WR_DATA(Ypos & 0XFF);
 8000f34:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <LCD_SetCursor+0xe4>)
 8000f36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f3a:	611a      	str	r2, [r3, #16]
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <LCD_SetCursor+0xe4>)
 8000f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f42:	615a      	str	r2, [r3, #20]
 8000f44:	88bb      	ldrh	r3, [r7, #4]
 8000f46:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <LCD_SetCursor+0xe8>)
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	60d3      	str	r3, [r2, #12]
 8000f4c:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <LCD_SetCursor+0xe4>)
 8000f4e:	2280      	movs	r2, #128	; 0x80
 8000f50:	615a      	str	r2, [r3, #20]
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <LCD_SetCursor+0xe4>)
 8000f54:	2280      	movs	r2, #128	; 0x80
 8000f56:	611a      	str	r2, [r3, #16]
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <LCD_SetCursor+0xe4>)
 8000f5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f5e:	611a      	str	r2, [r3, #16]
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	200001f8 	.word	0x200001f8
 8000f6c:	40011000 	.word	0x40011000
 8000f70:	40010c00 	.word	0x40010c00

08000f74 <LCD_Scan_Dir>:
// 设置LCD的自动扫描方向
// 注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
// 所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
// dir:0~7,代表8个方向(具体定义见lcd.h)
// 9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试
void LCD_Scan_Dir(uint8_t dir) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
  uint16_t regval = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	81fb      	strh	r3, [r7, #14]
  uint16_t dirreg = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	81bb      	strh	r3, [r7, #12]
  uint16_t temp;

  switch (dir) {
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	2b07      	cmp	r3, #7
 8000f8a:	d836      	bhi.n	8000ffa <LCD_Scan_Dir+0x86>
 8000f8c:	a201      	add	r2, pc, #4	; (adr r2, 8000f94 <LCD_Scan_Dir+0x20>)
 8000f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f92:	bf00      	nop
 8000f94:	08000ffb 	.word	0x08000ffb
 8000f98:	08000fb5 	.word	0x08000fb5
 8000f9c:	08000fbf 	.word	0x08000fbf
 8000fa0:	08000fc9 	.word	0x08000fc9
 8000fa4:	08000fd3 	.word	0x08000fd3
 8000fa8:	08000fdd 	.word	0x08000fdd
 8000fac:	08000fe7 	.word	0x08000fe7
 8000fb0:	08000ff1 	.word	0x08000ff1
  case L2R_U2D: // 从左到右,从上到下
    regval |= (0 << 7) | (0 << 6) | (0 << 5);
    break;
  case L2R_D2U: // 从左到右,从下到上
    regval |= (1 << 7) | (0 << 6) | (0 << 5);
 8000fb4:	89fb      	ldrh	r3, [r7, #14]
 8000fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fba:	81fb      	strh	r3, [r7, #14]
    break;
 8000fbc:	e01d      	b.n	8000ffa <LCD_Scan_Dir+0x86>
  case R2L_U2D: // 从右到左,从上到下
    regval |= (0 << 7) | (1 << 6) | (0 << 5);
 8000fbe:	89fb      	ldrh	r3, [r7, #14]
 8000fc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fc4:	81fb      	strh	r3, [r7, #14]
    break;
 8000fc6:	e018      	b.n	8000ffa <LCD_Scan_Dir+0x86>
  case R2L_D2U: // 从右到左,从下到上
    regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8000fc8:	89fb      	ldrh	r3, [r7, #14]
 8000fca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000fce:	81fb      	strh	r3, [r7, #14]
    break;
 8000fd0:	e013      	b.n	8000ffa <LCD_Scan_Dir+0x86>
  case U2D_L2R: // 从上到下,从左到右
    regval |= (0 << 7) | (0 << 6) | (1 << 5);
 8000fd2:	89fb      	ldrh	r3, [r7, #14]
 8000fd4:	f043 0320 	orr.w	r3, r3, #32
 8000fd8:	81fb      	strh	r3, [r7, #14]
    break;
 8000fda:	e00e      	b.n	8000ffa <LCD_Scan_Dir+0x86>
  case U2D_R2L: // 从上到下,从右到左
    regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8000fdc:	89fb      	ldrh	r3, [r7, #14]
 8000fde:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000fe2:	81fb      	strh	r3, [r7, #14]
    break;
 8000fe4:	e009      	b.n	8000ffa <LCD_Scan_Dir+0x86>
  case D2U_L2R: // 从下到上,从左到右
    regval |= (1 << 7) | (0 << 6) | (1 << 5);
 8000fe6:	89fb      	ldrh	r3, [r7, #14]
 8000fe8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000fec:	81fb      	strh	r3, [r7, #14]
    break;
 8000fee:	e004      	b.n	8000ffa <LCD_Scan_Dir+0x86>
  case D2U_R2L: // 从下到上,从右到左
    regval |= (1 << 7) | (1 << 6) | (1 << 5);
 8000ff0:	89fb      	ldrh	r3, [r7, #14]
 8000ff2:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8000ff6:	81fb      	strh	r3, [r7, #14]
    break;
 8000ff8:	bf00      	nop
  }

  dirreg = 0X36;
 8000ffa:	2336      	movs	r3, #54	; 0x36
 8000ffc:	81bb      	strh	r3, [r7, #12]

  LCD_WriteReg(dirreg, regval);
 8000ffe:	89fa      	ldrh	r2, [r7, #14]
 8001000:	89bb      	ldrh	r3, [r7, #12]
 8001002:	4611      	mov	r1, r2
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fed5 	bl	8000db4 <LCD_WriteReg>

  LCD_WR_REG(lcddev.setxcmd);
 800100a:	4b61      	ldr	r3, [pc, #388]	; (8001190 <LCD_Scan_Dir+0x21c>)
 800100c:	895b      	ldrh	r3, [r3, #10]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fe4e 	bl	8000cb0 <LCD_WR_REG>
  LCD_WR_DATA(0);
 8001014:	4b5f      	ldr	r3, [pc, #380]	; (8001194 <LCD_Scan_Dir+0x220>)
 8001016:	f44f 7280 	mov.w	r2, #256	; 0x100
 800101a:	611a      	str	r2, [r3, #16]
 800101c:	4b5d      	ldr	r3, [pc, #372]	; (8001194 <LCD_Scan_Dir+0x220>)
 800101e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001022:	615a      	str	r2, [r3, #20]
 8001024:	4b5c      	ldr	r3, [pc, #368]	; (8001198 <LCD_Scan_Dir+0x224>)
 8001026:	2200      	movs	r2, #0
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	4b5a      	ldr	r3, [pc, #360]	; (8001194 <LCD_Scan_Dir+0x220>)
 800102c:	2280      	movs	r2, #128	; 0x80
 800102e:	615a      	str	r2, [r3, #20]
 8001030:	4b58      	ldr	r3, [pc, #352]	; (8001194 <LCD_Scan_Dir+0x220>)
 8001032:	2280      	movs	r2, #128	; 0x80
 8001034:	611a      	str	r2, [r3, #16]
 8001036:	4b57      	ldr	r3, [pc, #348]	; (8001194 <LCD_Scan_Dir+0x220>)
 8001038:	f44f 7200 	mov.w	r2, #512	; 0x200
 800103c:	611a      	str	r2, [r3, #16]
  LCD_WR_DATA(0);
 800103e:	4b55      	ldr	r3, [pc, #340]	; (8001194 <LCD_Scan_Dir+0x220>)
 8001040:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001044:	611a      	str	r2, [r3, #16]
 8001046:	4b53      	ldr	r3, [pc, #332]	; (8001194 <LCD_Scan_Dir+0x220>)
 8001048:	f44f 7200 	mov.w	r2, #512	; 0x200
 800104c:	615a      	str	r2, [r3, #20]
 800104e:	4b52      	ldr	r3, [pc, #328]	; (8001198 <LCD_Scan_Dir+0x224>)
 8001050:	2200      	movs	r2, #0
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	4b4f      	ldr	r3, [pc, #316]	; (8001194 <LCD_Scan_Dir+0x220>)
 8001056:	2280      	movs	r2, #128	; 0x80
 8001058:	615a      	str	r2, [r3, #20]
 800105a:	4b4e      	ldr	r3, [pc, #312]	; (8001194 <LCD_Scan_Dir+0x220>)
 800105c:	2280      	movs	r2, #128	; 0x80
 800105e:	611a      	str	r2, [r3, #16]
 8001060:	4b4c      	ldr	r3, [pc, #304]	; (8001194 <LCD_Scan_Dir+0x220>)
 8001062:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001066:	611a      	str	r2, [r3, #16]
  LCD_WR_DATA((lcddev.width - 1) >> 8);
 8001068:	4b4a      	ldr	r3, [pc, #296]	; (8001194 <LCD_Scan_Dir+0x220>)
 800106a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800106e:	611a      	str	r2, [r3, #16]
 8001070:	4b48      	ldr	r3, [pc, #288]	; (8001194 <LCD_Scan_Dir+0x220>)
 8001072:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001076:	615a      	str	r2, [r3, #20]
 8001078:	4b45      	ldr	r3, [pc, #276]	; (8001190 <LCD_Scan_Dir+0x21c>)
 800107a:	881b      	ldrh	r3, [r3, #0]
 800107c:	3b01      	subs	r3, #1
 800107e:	121a      	asrs	r2, r3, #8
 8001080:	4b45      	ldr	r3, [pc, #276]	; (8001198 <LCD_Scan_Dir+0x224>)
 8001082:	60da      	str	r2, [r3, #12]
 8001084:	4b43      	ldr	r3, [pc, #268]	; (8001194 <LCD_Scan_Dir+0x220>)
 8001086:	2280      	movs	r2, #128	; 0x80
 8001088:	615a      	str	r2, [r3, #20]
 800108a:	4b42      	ldr	r3, [pc, #264]	; (8001194 <LCD_Scan_Dir+0x220>)
 800108c:	2280      	movs	r2, #128	; 0x80
 800108e:	611a      	str	r2, [r3, #16]
 8001090:	4b40      	ldr	r3, [pc, #256]	; (8001194 <LCD_Scan_Dir+0x220>)
 8001092:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001096:	611a      	str	r2, [r3, #16]
  LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8001098:	4b3e      	ldr	r3, [pc, #248]	; (8001194 <LCD_Scan_Dir+0x220>)
 800109a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800109e:	611a      	str	r2, [r3, #16]
 80010a0:	4b3c      	ldr	r3, [pc, #240]	; (8001194 <LCD_Scan_Dir+0x220>)
 80010a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010a6:	615a      	str	r2, [r3, #20]
 80010a8:	4b39      	ldr	r3, [pc, #228]	; (8001190 <LCD_Scan_Dir+0x21c>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	3b01      	subs	r3, #1
 80010ae:	4a3a      	ldr	r2, [pc, #232]	; (8001198 <LCD_Scan_Dir+0x224>)
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	60d3      	str	r3, [r2, #12]
 80010b4:	4b37      	ldr	r3, [pc, #220]	; (8001194 <LCD_Scan_Dir+0x220>)
 80010b6:	2280      	movs	r2, #128	; 0x80
 80010b8:	615a      	str	r2, [r3, #20]
 80010ba:	4b36      	ldr	r3, [pc, #216]	; (8001194 <LCD_Scan_Dir+0x220>)
 80010bc:	2280      	movs	r2, #128	; 0x80
 80010be:	611a      	str	r2, [r3, #16]
 80010c0:	4b34      	ldr	r3, [pc, #208]	; (8001194 <LCD_Scan_Dir+0x220>)
 80010c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010c6:	611a      	str	r2, [r3, #16]
  LCD_WR_REG(lcddev.setycmd);
 80010c8:	4b31      	ldr	r3, [pc, #196]	; (8001190 <LCD_Scan_Dir+0x21c>)
 80010ca:	899b      	ldrh	r3, [r3, #12]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fdef 	bl	8000cb0 <LCD_WR_REG>
  LCD_WR_DATA(0);
 80010d2:	4b30      	ldr	r3, [pc, #192]	; (8001194 <LCD_Scan_Dir+0x220>)
 80010d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010d8:	611a      	str	r2, [r3, #16]
 80010da:	4b2e      	ldr	r3, [pc, #184]	; (8001194 <LCD_Scan_Dir+0x220>)
 80010dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010e0:	615a      	str	r2, [r3, #20]
 80010e2:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <LCD_Scan_Dir+0x224>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	60da      	str	r2, [r3, #12]
 80010e8:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <LCD_Scan_Dir+0x220>)
 80010ea:	2280      	movs	r2, #128	; 0x80
 80010ec:	615a      	str	r2, [r3, #20]
 80010ee:	4b29      	ldr	r3, [pc, #164]	; (8001194 <LCD_Scan_Dir+0x220>)
 80010f0:	2280      	movs	r2, #128	; 0x80
 80010f2:	611a      	str	r2, [r3, #16]
 80010f4:	4b27      	ldr	r3, [pc, #156]	; (8001194 <LCD_Scan_Dir+0x220>)
 80010f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010fa:	611a      	str	r2, [r3, #16]
  LCD_WR_DATA(0);
 80010fc:	4b25      	ldr	r3, [pc, #148]	; (8001194 <LCD_Scan_Dir+0x220>)
 80010fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001102:	611a      	str	r2, [r3, #16]
 8001104:	4b23      	ldr	r3, [pc, #140]	; (8001194 <LCD_Scan_Dir+0x220>)
 8001106:	f44f 7200 	mov.w	r2, #512	; 0x200
 800110a:	615a      	str	r2, [r3, #20]
 800110c:	4b22      	ldr	r3, [pc, #136]	; (8001198 <LCD_Scan_Dir+0x224>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	4b20      	ldr	r3, [pc, #128]	; (8001194 <LCD_Scan_Dir+0x220>)
 8001114:	2280      	movs	r2, #128	; 0x80
 8001116:	615a      	str	r2, [r3, #20]
 8001118:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <LCD_Scan_Dir+0x220>)
 800111a:	2280      	movs	r2, #128	; 0x80
 800111c:	611a      	str	r2, [r3, #16]
 800111e:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <LCD_Scan_Dir+0x220>)
 8001120:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001124:	611a      	str	r2, [r3, #16]
  LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001126:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <LCD_Scan_Dir+0x220>)
 8001128:	f44f 7280 	mov.w	r2, #256	; 0x100
 800112c:	611a      	str	r2, [r3, #16]
 800112e:	4b19      	ldr	r3, [pc, #100]	; (8001194 <LCD_Scan_Dir+0x220>)
 8001130:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001134:	615a      	str	r2, [r3, #20]
 8001136:	4b16      	ldr	r3, [pc, #88]	; (8001190 <LCD_Scan_Dir+0x21c>)
 8001138:	885b      	ldrh	r3, [r3, #2]
 800113a:	3b01      	subs	r3, #1
 800113c:	121a      	asrs	r2, r3, #8
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <LCD_Scan_Dir+0x224>)
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	4b14      	ldr	r3, [pc, #80]	; (8001194 <LCD_Scan_Dir+0x220>)
 8001144:	2280      	movs	r2, #128	; 0x80
 8001146:	615a      	str	r2, [r3, #20]
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <LCD_Scan_Dir+0x220>)
 800114a:	2280      	movs	r2, #128	; 0x80
 800114c:	611a      	str	r2, [r3, #16]
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <LCD_Scan_Dir+0x220>)
 8001150:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001154:	611a      	str	r2, [r3, #16]
  LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <LCD_Scan_Dir+0x220>)
 8001158:	f44f 7280 	mov.w	r2, #256	; 0x100
 800115c:	611a      	str	r2, [r3, #16]
 800115e:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <LCD_Scan_Dir+0x220>)
 8001160:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001164:	615a      	str	r2, [r3, #20]
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <LCD_Scan_Dir+0x21c>)
 8001168:	885b      	ldrh	r3, [r3, #2]
 800116a:	3b01      	subs	r3, #1
 800116c:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <LCD_Scan_Dir+0x224>)
 800116e:	b2db      	uxtb	r3, r3
 8001170:	60d3      	str	r3, [r2, #12]
 8001172:	4b08      	ldr	r3, [pc, #32]	; (8001194 <LCD_Scan_Dir+0x220>)
 8001174:	2280      	movs	r2, #128	; 0x80
 8001176:	615a      	str	r2, [r3, #20]
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <LCD_Scan_Dir+0x220>)
 800117a:	2280      	movs	r2, #128	; 0x80
 800117c:	611a      	str	r2, [r3, #16]
 800117e:	4b05      	ldr	r3, [pc, #20]	; (8001194 <LCD_Scan_Dir+0x220>)
 8001180:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001184:	611a      	str	r2, [r3, #16]
}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200001f8 	.word	0x200001f8
 8001194:	40011000 	.word	0x40011000
 8001198:	40010c00 	.word	0x40010c00

0800119c <LCD_Fast_DrawPoint>:
  LCD_WriteRAM_Prepare();
  LCD_WR_DATA(LCD_BGR2RGB(POINT_COLOR)); // POINT_COLOR: Color of this point
}
// Draw a point with color(quicker)
// x,y: coordinate
void LCD_Fast_DrawPoint(uint16_t x, uint16_t y, uint16_t color) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	80fb      	strh	r3, [r7, #6]
 80011a6:	460b      	mov	r3, r1
 80011a8:	80bb      	strh	r3, [r7, #4]
 80011aa:	4613      	mov	r3, r2
 80011ac:	807b      	strh	r3, [r7, #2]

  LCD_WR_REG(lcddev.setxcmd);
 80011ae:	4b49      	ldr	r3, [pc, #292]	; (80012d4 <LCD_Fast_DrawPoint+0x138>)
 80011b0:	895b      	ldrh	r3, [r3, #10]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fd7c 	bl	8000cb0 <LCD_WR_REG>
  LCD_WR_DATA(x >> 8);
 80011b8:	4b47      	ldr	r3, [pc, #284]	; (80012d8 <LCD_Fast_DrawPoint+0x13c>)
 80011ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011be:	611a      	str	r2, [r3, #16]
 80011c0:	4b45      	ldr	r3, [pc, #276]	; (80012d8 <LCD_Fast_DrawPoint+0x13c>)
 80011c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c6:	615a      	str	r2, [r3, #20]
 80011c8:	88fb      	ldrh	r3, [r7, #6]
 80011ca:	0a1b      	lsrs	r3, r3, #8
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	4b43      	ldr	r3, [pc, #268]	; (80012dc <LCD_Fast_DrawPoint+0x140>)
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	4b41      	ldr	r3, [pc, #260]	; (80012d8 <LCD_Fast_DrawPoint+0x13c>)
 80011d4:	2280      	movs	r2, #128	; 0x80
 80011d6:	615a      	str	r2, [r3, #20]
 80011d8:	4b3f      	ldr	r3, [pc, #252]	; (80012d8 <LCD_Fast_DrawPoint+0x13c>)
 80011da:	2280      	movs	r2, #128	; 0x80
 80011dc:	611a      	str	r2, [r3, #16]
 80011de:	4b3e      	ldr	r3, [pc, #248]	; (80012d8 <LCD_Fast_DrawPoint+0x13c>)
 80011e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011e4:	611a      	str	r2, [r3, #16]
  LCD_WR_DATA(x & 0XFF);
 80011e6:	4b3c      	ldr	r3, [pc, #240]	; (80012d8 <LCD_Fast_DrawPoint+0x13c>)
 80011e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011ec:	611a      	str	r2, [r3, #16]
 80011ee:	4b3a      	ldr	r3, [pc, #232]	; (80012d8 <LCD_Fast_DrawPoint+0x13c>)
 80011f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011f4:	615a      	str	r2, [r3, #20]
 80011f6:	88fb      	ldrh	r3, [r7, #6]
 80011f8:	4a38      	ldr	r2, [pc, #224]	; (80012dc <LCD_Fast_DrawPoint+0x140>)
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	60d3      	str	r3, [r2, #12]
 80011fe:	4b36      	ldr	r3, [pc, #216]	; (80012d8 <LCD_Fast_DrawPoint+0x13c>)
 8001200:	2280      	movs	r2, #128	; 0x80
 8001202:	615a      	str	r2, [r3, #20]
 8001204:	4b34      	ldr	r3, [pc, #208]	; (80012d8 <LCD_Fast_DrawPoint+0x13c>)
 8001206:	2280      	movs	r2, #128	; 0x80
 8001208:	611a      	str	r2, [r3, #16]
 800120a:	4b33      	ldr	r3, [pc, #204]	; (80012d8 <LCD_Fast_DrawPoint+0x13c>)
 800120c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001210:	611a      	str	r2, [r3, #16]
  LCD_WR_REG(lcddev.setycmd);
 8001212:	4b30      	ldr	r3, [pc, #192]	; (80012d4 <LCD_Fast_DrawPoint+0x138>)
 8001214:	899b      	ldrh	r3, [r3, #12]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fd4a 	bl	8000cb0 <LCD_WR_REG>
  LCD_WR_DATA(y >> 8);
 800121c:	4b2e      	ldr	r3, [pc, #184]	; (80012d8 <LCD_Fast_DrawPoint+0x13c>)
 800121e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001222:	611a      	str	r2, [r3, #16]
 8001224:	4b2c      	ldr	r3, [pc, #176]	; (80012d8 <LCD_Fast_DrawPoint+0x13c>)
 8001226:	f44f 7200 	mov.w	r2, #512	; 0x200
 800122a:	615a      	str	r2, [r3, #20]
 800122c:	88bb      	ldrh	r3, [r7, #4]
 800122e:	0a1b      	lsrs	r3, r3, #8
 8001230:	b29a      	uxth	r2, r3
 8001232:	4b2a      	ldr	r3, [pc, #168]	; (80012dc <LCD_Fast_DrawPoint+0x140>)
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <LCD_Fast_DrawPoint+0x13c>)
 8001238:	2280      	movs	r2, #128	; 0x80
 800123a:	615a      	str	r2, [r3, #20]
 800123c:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <LCD_Fast_DrawPoint+0x13c>)
 800123e:	2280      	movs	r2, #128	; 0x80
 8001240:	611a      	str	r2, [r3, #16]
 8001242:	4b25      	ldr	r3, [pc, #148]	; (80012d8 <LCD_Fast_DrawPoint+0x13c>)
 8001244:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001248:	611a      	str	r2, [r3, #16]
  LCD_WR_DATA(y & 0XFF);
 800124a:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <LCD_Fast_DrawPoint+0x13c>)
 800124c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001250:	611a      	str	r2, [r3, #16]
 8001252:	4b21      	ldr	r3, [pc, #132]	; (80012d8 <LCD_Fast_DrawPoint+0x13c>)
 8001254:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001258:	615a      	str	r2, [r3, #20]
 800125a:	88bb      	ldrh	r3, [r7, #4]
 800125c:	4a1f      	ldr	r2, [pc, #124]	; (80012dc <LCD_Fast_DrawPoint+0x140>)
 800125e:	b2db      	uxtb	r3, r3
 8001260:	60d3      	str	r3, [r2, #12]
 8001262:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <LCD_Fast_DrawPoint+0x13c>)
 8001264:	2280      	movs	r2, #128	; 0x80
 8001266:	615a      	str	r2, [r3, #20]
 8001268:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <LCD_Fast_DrawPoint+0x13c>)
 800126a:	2280      	movs	r2, #128	; 0x80
 800126c:	611a      	str	r2, [r3, #16]
 800126e:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <LCD_Fast_DrawPoint+0x13c>)
 8001270:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001274:	611a      	str	r2, [r3, #16]

  LCD_RS_CLR;
 8001276:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <LCD_Fast_DrawPoint+0x13c>)
 8001278:	f44f 7280 	mov.w	r2, #256	; 0x100
 800127c:	615a      	str	r2, [r3, #20]
  LCD_CS_CLR;
 800127e:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <LCD_Fast_DrawPoint+0x13c>)
 8001280:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001284:	615a      	str	r2, [r3, #20]
  DATAOUT(lcddev.wramcmd); // 写指令
 8001286:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <LCD_Fast_DrawPoint+0x138>)
 8001288:	891a      	ldrh	r2, [r3, #8]
 800128a:	4b14      	ldr	r3, [pc, #80]	; (80012dc <LCD_Fast_DrawPoint+0x140>)
 800128c:	60da      	str	r2, [r3, #12]
  LCD_WR_CLR;
 800128e:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <LCD_Fast_DrawPoint+0x13c>)
 8001290:	2280      	movs	r2, #128	; 0x80
 8001292:	615a      	str	r2, [r3, #20]
  LCD_WR_SET;
 8001294:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <LCD_Fast_DrawPoint+0x13c>)
 8001296:	2280      	movs	r2, #128	; 0x80
 8001298:	611a      	str	r2, [r3, #16]
  LCD_CS_SET;
 800129a:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <LCD_Fast_DrawPoint+0x13c>)
 800129c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012a0:	611a      	str	r2, [r3, #16]
  LCD_WR_DATA(color); // 写数据
 80012a2:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <LCD_Fast_DrawPoint+0x13c>)
 80012a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012a8:	611a      	str	r2, [r3, #16]
 80012aa:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <LCD_Fast_DrawPoint+0x13c>)
 80012ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012b0:	615a      	str	r2, [r3, #20]
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <LCD_Fast_DrawPoint+0x140>)
 80012b4:	887b      	ldrh	r3, [r7, #2]
 80012b6:	60d3      	str	r3, [r2, #12]
 80012b8:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <LCD_Fast_DrawPoint+0x13c>)
 80012ba:	2280      	movs	r2, #128	; 0x80
 80012bc:	615a      	str	r2, [r3, #20]
 80012be:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <LCD_Fast_DrawPoint+0x13c>)
 80012c0:	2280      	movs	r2, #128	; 0x80
 80012c2:	611a      	str	r2, [r3, #16]
 80012c4:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <LCD_Fast_DrawPoint+0x13c>)
 80012c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ca:	611a      	str	r2, [r3, #16]
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	200001f8 	.word	0x200001f8
 80012d8:	40011000 	.word	0x40011000
 80012dc:	40010c00 	.word	0x40010c00

080012e0 <LCD_Display_Dir>:
  LCD_WR_DATA(0x00);       // 5设置E
  LCD_WR_DATA(0x00);       // 6设置F
}
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
  if (dir == 0) // 竖屏
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d113      	bne.n	8001318 <LCD_Display_Dir+0x38>
  {
    lcddev.dir = 0; // 竖屏
 80012f0:	4b16      	ldr	r3, [pc, #88]	; (800134c <LCD_Display_Dir+0x6c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	719a      	strb	r2, [r3, #6]
    lcddev.width = 240;
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <LCD_Display_Dir+0x6c>)
 80012f8:	22f0      	movs	r2, #240	; 0xf0
 80012fa:	801a      	strh	r2, [r3, #0]
    lcddev.height = 320;
 80012fc:	4b13      	ldr	r3, [pc, #76]	; (800134c <LCD_Display_Dir+0x6c>)
 80012fe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001302:	805a      	strh	r2, [r3, #2]
    lcddev.wramcmd = 0X2C;
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <LCD_Display_Dir+0x6c>)
 8001306:	222c      	movs	r2, #44	; 0x2c
 8001308:	811a      	strh	r2, [r3, #8]
    lcddev.setxcmd = 0X2A;
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <LCD_Display_Dir+0x6c>)
 800130c:	222a      	movs	r2, #42	; 0x2a
 800130e:	815a      	strh	r2, [r3, #10]
    lcddev.setycmd = 0X2B;
 8001310:	4b0e      	ldr	r3, [pc, #56]	; (800134c <LCD_Display_Dir+0x6c>)
 8001312:	222b      	movs	r2, #43	; 0x2b
 8001314:	819a      	strh	r2, [r3, #12]
 8001316:	e012      	b.n	800133e <LCD_Display_Dir+0x5e>

  } else // 横屏
  {
    lcddev.dir = 1; // 横屏
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <LCD_Display_Dir+0x6c>)
 800131a:	2201      	movs	r2, #1
 800131c:	719a      	strb	r2, [r3, #6]
    lcddev.width = 320;
 800131e:	4b0b      	ldr	r3, [pc, #44]	; (800134c <LCD_Display_Dir+0x6c>)
 8001320:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001324:	801a      	strh	r2, [r3, #0]
    lcddev.height = 240;
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <LCD_Display_Dir+0x6c>)
 8001328:	22f0      	movs	r2, #240	; 0xf0
 800132a:	805a      	strh	r2, [r3, #2]

    lcddev.wramcmd = 0X2C;
 800132c:	4b07      	ldr	r3, [pc, #28]	; (800134c <LCD_Display_Dir+0x6c>)
 800132e:	222c      	movs	r2, #44	; 0x2c
 8001330:	811a      	strh	r2, [r3, #8]
    lcddev.setxcmd = 0X2A;
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <LCD_Display_Dir+0x6c>)
 8001334:	222a      	movs	r2, #42	; 0x2a
 8001336:	815a      	strh	r2, [r3, #10]
    lcddev.setycmd = 0X2B;
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <LCD_Display_Dir+0x6c>)
 800133a:	222b      	movs	r2, #43	; 0x2b
 800133c:	819a      	strh	r2, [r3, #12]
  }
  LCD_Scan_Dir(DFT_SCAN_DIR); // 默认扫描方向
 800133e:	2000      	movs	r0, #0
 8001340:	f7ff fe18 	bl	8000f74 <LCD_Scan_Dir>
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	200001f8 	.word	0x200001f8

08001350 <LCD_Init>:
  LCD_WR_DATA(theight & 0XFF);
}
// 初始化lcd
// 该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
// 本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_Initure;

  __HAL_RCC_GPIOB_CLK_ENABLE(); // 开启GPIOB时钟
 8001356:	4bc4      	ldr	r3, [pc, #784]	; (8001668 <LCD_Init+0x318>)
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	4ac3      	ldr	r2, [pc, #780]	; (8001668 <LCD_Init+0x318>)
 800135c:	f043 0308 	orr.w	r3, r3, #8
 8001360:	6193      	str	r3, [r2, #24]
 8001362:	4bc1      	ldr	r3, [pc, #772]	; (8001668 <LCD_Init+0x318>)
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	f003 0308 	and.w	r3, r3, #8
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE(); // 开启GPIOC时钟
 800136e:	4bbe      	ldr	r3, [pc, #760]	; (8001668 <LCD_Init+0x318>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	4abd      	ldr	r2, [pc, #756]	; (8001668 <LCD_Init+0x318>)
 8001374:	f043 0310 	orr.w	r3, r3, #16
 8001378:	6193      	str	r3, [r2, #24]
 800137a:	4bbb      	ldr	r3, [pc, #748]	; (8001668 <LCD_Init+0x318>)
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	f003 0310 	and.w	r3, r3, #16
 8001382:	603b      	str	r3, [r7, #0]
 8001384:	683b      	ldr	r3, [r7, #0]

  // PC6,7,8,9,10
  GPIO_Initure.Pin =
 8001386:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800138a:	60bb      	str	r3, [r7, #8]
      GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
  GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;   // 推挽输出
 800138c:	2301      	movs	r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
  GPIO_Initure.Pull = GPIO_PULLUP;           // 上拉
 8001390:	2301      	movs	r3, #1
 8001392:	613b      	str	r3, [r7, #16]
  GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH; // 高速
 8001394:	2303      	movs	r3, #3
 8001396:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 8001398:	f107 0308 	add.w	r3, r7, #8
 800139c:	4619      	mov	r1, r3
 800139e:	48b3      	ldr	r0, [pc, #716]	; (800166c <LCD_Init+0x31c>)
 80013a0:	f001 fba2 	bl	8002ae8 <HAL_GPIO_Init>

  // PB0~15
  GPIO_Initure.Pin = GPIO_PIN_All; // PB推挽输出
 80013a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013a8:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	4619      	mov	r1, r3
 80013b0:	48af      	ldr	r0, [pc, #700]	; (8001670 <LCD_Init+0x320>)
 80013b2:	f001 fb99 	bl	8002ae8 <HAL_GPIO_Init>

  //	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

  HAL_Delay(50); // delay 50 ms
 80013b6:	2032      	movs	r0, #50	; 0x32
 80013b8:	f000 fe50 	bl	800205c <HAL_Delay>
  LCD_WriteReg(0x0000, 0x0001);
 80013bc:	2101      	movs	r1, #1
 80013be:	2000      	movs	r0, #0
 80013c0:	f7ff fcf8 	bl	8000db4 <LCD_WriteReg>
  HAL_Delay(50); // delay 50 ms
 80013c4:	2032      	movs	r0, #50	; 0x32
 80013c6:	f000 fe49 	bl	800205c <HAL_Delay>
  lcddev.id = LCD_ReadReg(0x0000);
 80013ca:	2000      	movs	r0, #0
 80013cc:	f7ff fd1c 	bl	8000e08 <LCD_ReadReg>
 80013d0:	4603      	mov	r3, r0
 80013d2:	461a      	mov	r2, r3
 80013d4:	4ba7      	ldr	r3, [pc, #668]	; (8001674 <LCD_Init+0x324>)
 80013d6:	809a      	strh	r2, [r3, #4]

  // 尝试9341 ID的读取
  LCD_WR_REG(0XD3);
 80013d8:	20d3      	movs	r0, #211	; 0xd3
 80013da:	f7ff fc69 	bl	8000cb0 <LCD_WR_REG>
  LCD_RD_DATA();             // dummy read
 80013de:	f7ff fcaf 	bl	8000d40 <LCD_RD_DATA>
  LCD_RD_DATA();             // 读到0X00
 80013e2:	f7ff fcad 	bl	8000d40 <LCD_RD_DATA>
  lcddev.id = LCD_RD_DATA(); // 读取93
 80013e6:	f7ff fcab 	bl	8000d40 <LCD_RD_DATA>
 80013ea:	4603      	mov	r3, r0
 80013ec:	461a      	mov	r2, r3
 80013ee:	4ba1      	ldr	r3, [pc, #644]	; (8001674 <LCD_Init+0x324>)
 80013f0:	809a      	strh	r2, [r3, #4]
  lcddev.id <<= 8;
 80013f2:	4ba0      	ldr	r3, [pc, #640]	; (8001674 <LCD_Init+0x324>)
 80013f4:	889b      	ldrh	r3, [r3, #4]
 80013f6:	021b      	lsls	r3, r3, #8
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	4b9e      	ldr	r3, [pc, #632]	; (8001674 <LCD_Init+0x324>)
 80013fc:	809a      	strh	r2, [r3, #4]
  lcddev.id |= LCD_RD_DATA(); // 读取41
 80013fe:	f7ff fc9f 	bl	8000d40 <LCD_RD_DATA>
 8001402:	4603      	mov	r3, r0
 8001404:	461a      	mov	r2, r3
 8001406:	4b9b      	ldr	r3, [pc, #620]	; (8001674 <LCD_Init+0x324>)
 8001408:	889b      	ldrh	r3, [r3, #4]
 800140a:	4313      	orrs	r3, r2
 800140c:	b29a      	uxth	r2, r3
 800140e:	4b99      	ldr	r3, [pc, #612]	; (8001674 <LCD_Init+0x324>)
 8001410:	809a      	strh	r2, [r3, #4]

  // 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID

  LCD_WR_REG(0xCF);
 8001412:	20cf      	movs	r0, #207	; 0xcf
 8001414:	f7ff fc4c 	bl	8000cb0 <LCD_WR_REG>
  LCD_WR_DATAX(0x00);
 8001418:	2000      	movs	r0, #0
 800141a:	f7ff fc6d 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0xC1);
 800141e:	20c1      	movs	r0, #193	; 0xc1
 8001420:	f7ff fc6a 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0X30);
 8001424:	2030      	movs	r0, #48	; 0x30
 8001426:	f7ff fc67 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_REG(0xED);
 800142a:	20ed      	movs	r0, #237	; 0xed
 800142c:	f7ff fc40 	bl	8000cb0 <LCD_WR_REG>
  LCD_WR_DATAX(0x64);
 8001430:	2064      	movs	r0, #100	; 0x64
 8001432:	f7ff fc61 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x03);
 8001436:	2003      	movs	r0, #3
 8001438:	f7ff fc5e 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0X12);
 800143c:	2012      	movs	r0, #18
 800143e:	f7ff fc5b 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0X81);
 8001442:	2081      	movs	r0, #129	; 0x81
 8001444:	f7ff fc58 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_REG(0xE8);
 8001448:	20e8      	movs	r0, #232	; 0xe8
 800144a:	f7ff fc31 	bl	8000cb0 <LCD_WR_REG>
  LCD_WR_DATAX(0x85);
 800144e:	2085      	movs	r0, #133	; 0x85
 8001450:	f7ff fc52 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x10);
 8001454:	2010      	movs	r0, #16
 8001456:	f7ff fc4f 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x7A);
 800145a:	207a      	movs	r0, #122	; 0x7a
 800145c:	f7ff fc4c 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_REG(0xCB);
 8001460:	20cb      	movs	r0, #203	; 0xcb
 8001462:	f7ff fc25 	bl	8000cb0 <LCD_WR_REG>
  LCD_WR_DATAX(0x39);
 8001466:	2039      	movs	r0, #57	; 0x39
 8001468:	f7ff fc46 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x2C);
 800146c:	202c      	movs	r0, #44	; 0x2c
 800146e:	f7ff fc43 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x00);
 8001472:	2000      	movs	r0, #0
 8001474:	f7ff fc40 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x34);
 8001478:	2034      	movs	r0, #52	; 0x34
 800147a:	f7ff fc3d 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x02);
 800147e:	2002      	movs	r0, #2
 8001480:	f7ff fc3a 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_REG(0xF7);
 8001484:	20f7      	movs	r0, #247	; 0xf7
 8001486:	f7ff fc13 	bl	8000cb0 <LCD_WR_REG>
  LCD_WR_DATAX(0x20);
 800148a:	2020      	movs	r0, #32
 800148c:	f7ff fc34 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_REG(0xEA);
 8001490:	20ea      	movs	r0, #234	; 0xea
 8001492:	f7ff fc0d 	bl	8000cb0 <LCD_WR_REG>
  LCD_WR_DATAX(0x00);
 8001496:	2000      	movs	r0, #0
 8001498:	f7ff fc2e 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x00);
 800149c:	2000      	movs	r0, #0
 800149e:	f7ff fc2b 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_REG(0xC0);   // Power control
 80014a2:	20c0      	movs	r0, #192	; 0xc0
 80014a4:	f7ff fc04 	bl	8000cb0 <LCD_WR_REG>
  LCD_WR_DATAX(0x1B); // VRH[5:0]
 80014a8:	201b      	movs	r0, #27
 80014aa:	f7ff fc25 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_REG(0xC1);   // Power control
 80014ae:	20c1      	movs	r0, #193	; 0xc1
 80014b0:	f7ff fbfe 	bl	8000cb0 <LCD_WR_REG>
  LCD_WR_DATAX(0x01); // SAP[2:0];BT[3:0]
 80014b4:	2001      	movs	r0, #1
 80014b6:	f7ff fc1f 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_REG(0xC5);   // VCM control
 80014ba:	20c5      	movs	r0, #197	; 0xc5
 80014bc:	f7ff fbf8 	bl	8000cb0 <LCD_WR_REG>
  LCD_WR_DATAX(0x30); // 3F
 80014c0:	2030      	movs	r0, #48	; 0x30
 80014c2:	f7ff fc19 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x30); // 3C
 80014c6:	2030      	movs	r0, #48	; 0x30
 80014c8:	f7ff fc16 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_REG(0xC7);   // VCM control2
 80014cc:	20c7      	movs	r0, #199	; 0xc7
 80014ce:	f7ff fbef 	bl	8000cb0 <LCD_WR_REG>
  LCD_WR_DATAX(0XB7);
 80014d2:	20b7      	movs	r0, #183	; 0xb7
 80014d4:	f7ff fc10 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_REG(0x36); // Memory Access Control
 80014d8:	2036      	movs	r0, #54	; 0x36
 80014da:	f7ff fbe9 	bl	8000cb0 <LCD_WR_REG>
  LCD_WR_DATAX(0x48);
 80014de:	2048      	movs	r0, #72	; 0x48
 80014e0:	f7ff fc0a 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_REG(0x3A);
 80014e4:	203a      	movs	r0, #58	; 0x3a
 80014e6:	f7ff fbe3 	bl	8000cb0 <LCD_WR_REG>
  LCD_WR_DATAX(0x55);
 80014ea:	2055      	movs	r0, #85	; 0x55
 80014ec:	f7ff fc04 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_REG(0xB1);
 80014f0:	20b1      	movs	r0, #177	; 0xb1
 80014f2:	f7ff fbdd 	bl	8000cb0 <LCD_WR_REG>
  LCD_WR_DATAX(0x00);
 80014f6:	2000      	movs	r0, #0
 80014f8:	f7ff fbfe 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x1A);
 80014fc:	201a      	movs	r0, #26
 80014fe:	f7ff fbfb 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_REG(0xB6); // Display Function Control
 8001502:	20b6      	movs	r0, #182	; 0xb6
 8001504:	f7ff fbd4 	bl	8000cb0 <LCD_WR_REG>
  LCD_WR_DATAX(0x0A);
 8001508:	200a      	movs	r0, #10
 800150a:	f7ff fbf5 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0xA2);
 800150e:	20a2      	movs	r0, #162	; 0xa2
 8001510:	f7ff fbf2 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_REG(0xF2); // 3Gamma Function Disable
 8001514:	20f2      	movs	r0, #242	; 0xf2
 8001516:	f7ff fbcb 	bl	8000cb0 <LCD_WR_REG>
  LCD_WR_DATAX(0x00);
 800151a:	2000      	movs	r0, #0
 800151c:	f7ff fbec 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_REG(0x26); // Gamma curve selected
 8001520:	2026      	movs	r0, #38	; 0x26
 8001522:	f7ff fbc5 	bl	8000cb0 <LCD_WR_REG>
  LCD_WR_DATAX(0x01);
 8001526:	2001      	movs	r0, #1
 8001528:	f7ff fbe6 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_REG(0xE0); // Set Gamma
 800152c:	20e0      	movs	r0, #224	; 0xe0
 800152e:	f7ff fbbf 	bl	8000cb0 <LCD_WR_REG>
  LCD_WR_DATAX(0x0F);
 8001532:	200f      	movs	r0, #15
 8001534:	f7ff fbe0 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x2A);
 8001538:	202a      	movs	r0, #42	; 0x2a
 800153a:	f7ff fbdd 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x28);
 800153e:	2028      	movs	r0, #40	; 0x28
 8001540:	f7ff fbda 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x08);
 8001544:	2008      	movs	r0, #8
 8001546:	f7ff fbd7 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x0E);
 800154a:	200e      	movs	r0, #14
 800154c:	f7ff fbd4 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x08);
 8001550:	2008      	movs	r0, #8
 8001552:	f7ff fbd1 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x54);
 8001556:	2054      	movs	r0, #84	; 0x54
 8001558:	f7ff fbce 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0XA9);
 800155c:	20a9      	movs	r0, #169	; 0xa9
 800155e:	f7ff fbcb 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x43);
 8001562:	2043      	movs	r0, #67	; 0x43
 8001564:	f7ff fbc8 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x0A);
 8001568:	200a      	movs	r0, #10
 800156a:	f7ff fbc5 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x0F);
 800156e:	200f      	movs	r0, #15
 8001570:	f7ff fbc2 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x00);
 8001574:	2000      	movs	r0, #0
 8001576:	f7ff fbbf 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x00);
 800157a:	2000      	movs	r0, #0
 800157c:	f7ff fbbc 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x00);
 8001580:	2000      	movs	r0, #0
 8001582:	f7ff fbb9 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x00);
 8001586:	2000      	movs	r0, #0
 8001588:	f7ff fbb6 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_REG(0XE1); // Set Gamma
 800158c:	20e1      	movs	r0, #225	; 0xe1
 800158e:	f7ff fb8f 	bl	8000cb0 <LCD_WR_REG>
  LCD_WR_DATAX(0x00);
 8001592:	2000      	movs	r0, #0
 8001594:	f7ff fbb0 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x15);
 8001598:	2015      	movs	r0, #21
 800159a:	f7ff fbad 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x17);
 800159e:	2017      	movs	r0, #23
 80015a0:	f7ff fbaa 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x07);
 80015a4:	2007      	movs	r0, #7
 80015a6:	f7ff fba7 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x11);
 80015aa:	2011      	movs	r0, #17
 80015ac:	f7ff fba4 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x06);
 80015b0:	2006      	movs	r0, #6
 80015b2:	f7ff fba1 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x2B);
 80015b6:	202b      	movs	r0, #43	; 0x2b
 80015b8:	f7ff fb9e 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x56);
 80015bc:	2056      	movs	r0, #86	; 0x56
 80015be:	f7ff fb9b 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x3C);
 80015c2:	203c      	movs	r0, #60	; 0x3c
 80015c4:	f7ff fb98 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x05);
 80015c8:	2005      	movs	r0, #5
 80015ca:	f7ff fb95 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x10);
 80015ce:	2010      	movs	r0, #16
 80015d0:	f7ff fb92 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x0F);
 80015d4:	200f      	movs	r0, #15
 80015d6:	f7ff fb8f 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x3F);
 80015da:	203f      	movs	r0, #63	; 0x3f
 80015dc:	f7ff fb8c 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x3F);
 80015e0:	203f      	movs	r0, #63	; 0x3f
 80015e2:	f7ff fb89 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x0F);
 80015e6:	200f      	movs	r0, #15
 80015e8:	f7ff fb86 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_REG(0x2B);
 80015ec:	202b      	movs	r0, #43	; 0x2b
 80015ee:	f7ff fb5f 	bl	8000cb0 <LCD_WR_REG>
  LCD_WR_DATAX(0x00);
 80015f2:	2000      	movs	r0, #0
 80015f4:	f7ff fb80 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x00);
 80015f8:	2000      	movs	r0, #0
 80015fa:	f7ff fb7d 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x01);
 80015fe:	2001      	movs	r0, #1
 8001600:	f7ff fb7a 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x3f);
 8001604:	203f      	movs	r0, #63	; 0x3f
 8001606:	f7ff fb77 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_REG(0x2A);
 800160a:	202a      	movs	r0, #42	; 0x2a
 800160c:	f7ff fb50 	bl	8000cb0 <LCD_WR_REG>
  LCD_WR_DATAX(0x00);
 8001610:	2000      	movs	r0, #0
 8001612:	f7ff fb71 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x00);
 8001616:	2000      	movs	r0, #0
 8001618:	f7ff fb6e 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0x00);
 800161c:	2000      	movs	r0, #0
 800161e:	f7ff fb6b 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_DATAX(0xef);
 8001622:	20ef      	movs	r0, #239	; 0xef
 8001624:	f7ff fb68 	bl	8000cf8 <LCD_WR_DATAX>
  LCD_WR_REG(0x11); // Exit Sleep
 8001628:	2011      	movs	r0, #17
 800162a:	f7ff fb41 	bl	8000cb0 <LCD_WR_REG>
  HAL_Delay(120);
 800162e:	2078      	movs	r0, #120	; 0x78
 8001630:	f000 fd14 	bl	800205c <HAL_Delay>
  LCD_WR_REG(0x29); // display on
 8001634:	2029      	movs	r0, #41	; 0x29
 8001636:	f7ff fb3b 	bl	8000cb0 <LCD_WR_REG>

  LCD_Display_Dir(0); // 默认为竖屏
 800163a:	2000      	movs	r0, #0
 800163c:	f7ff fe50 	bl	80012e0 <LCD_Display_Dir>
  LCD_LED = 1;        // 点亮背光
 8001640:	4b0d      	ldr	r3, [pc, #52]	; (8001678 <LCD_Init+0x328>)
 8001642:	2201      	movs	r2, #1
 8001644:	601a      	str	r2, [r3, #0]
  LCD_Clear(WHITE);
 8001646:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800164a:	f000 f819 	bl	8001680 <LCD_Clear>
  printf("LCD Inited width %d, height %d\n", lcddev.width, lcddev.height);
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <LCD_Init+0x324>)
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	4619      	mov	r1, r3
 8001654:	4b07      	ldr	r3, [pc, #28]	; (8001674 <LCD_Init+0x324>)
 8001656:	885b      	ldrh	r3, [r3, #2]
 8001658:	461a      	mov	r2, r3
 800165a:	4808      	ldr	r0, [pc, #32]	; (800167c <LCD_Init+0x32c>)
 800165c:	f003 fa74 	bl	8004b48 <iprintf>
}
 8001660:	bf00      	nop
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40021000 	.word	0x40021000
 800166c:	40011000 	.word	0x40011000
 8001670:	40010c00 	.word	0x40010c00
 8001674:	200001f8 	.word	0x200001f8
 8001678:	422201a8 	.word	0x422201a8
 800167c:	08008498 	.word	0x08008498

08001680 <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	80fb      	strh	r3, [r7, #6]
  uint32_t index = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
  uint32_t totalpoint = lcddev.width;
 800168e:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <LCD_Clear+0x78>)
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	60bb      	str	r3, [r7, #8]
  totalpoint *= lcddev.height; // 得到总点数
 8001694:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <LCD_Clear+0x78>)
 8001696:	885b      	ldrh	r3, [r3, #2]
 8001698:	461a      	mov	r2, r3
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	fb02 f303 	mul.w	r3, r2, r3
 80016a0:	60bb      	str	r3, [r7, #8]

  LCD_SetCursor(0x00, 0x0000); // 设置光标位置
 80016a2:	2100      	movs	r1, #0
 80016a4:	2000      	movs	r0, #0
 80016a6:	f7ff fbef 	bl	8000e88 <LCD_SetCursor>
  LCD_WriteRAM_Prepare();      // 开始写入GRAM
 80016aa:	f7ff fbbd 	bl	8000e28 <LCD_WriteRAM_Prepare>
  for (index = 0; index < totalpoint; index++)
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	e017      	b.n	80016e4 <LCD_Clear+0x64>
    LCD_WR_DATA(color);
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <LCD_Clear+0x7c>)
 80016b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ba:	611a      	str	r2, [r3, #16]
 80016bc:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <LCD_Clear+0x7c>)
 80016be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016c2:	615a      	str	r2, [r3, #20]
 80016c4:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <LCD_Clear+0x80>)
 80016c6:	88fb      	ldrh	r3, [r7, #6]
 80016c8:	60d3      	str	r3, [r2, #12]
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <LCD_Clear+0x7c>)
 80016cc:	2280      	movs	r2, #128	; 0x80
 80016ce:	615a      	str	r2, [r3, #20]
 80016d0:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <LCD_Clear+0x7c>)
 80016d2:	2280      	movs	r2, #128	; 0x80
 80016d4:	611a      	str	r2, [r3, #16]
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <LCD_Clear+0x7c>)
 80016d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016dc:	611a      	str	r2, [r3, #16]
  for (index = 0; index < totalpoint; index++)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	3301      	adds	r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d3e3      	bcc.n	80016b4 <LCD_Clear+0x34>
}
 80016ec:	bf00      	nop
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200001f8 	.word	0x200001f8
 80016fc:	40011000 	.word	0x40011000
 8001700:	40010c00 	.word	0x40010c00

08001704 <LCD_ShowChar>:
// mode: display characters on the displayed content and do not wipe away the
// displayed content(1)
//       display characters on the displayed content and wipe away the displayed
//       content(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size,
                  uint8_t mode) {
 8001704:	b590      	push	{r4, r7, lr}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	4604      	mov	r4, r0
 800170c:	4608      	mov	r0, r1
 800170e:	4611      	mov	r1, r2
 8001710:	461a      	mov	r2, r3
 8001712:	4623      	mov	r3, r4
 8001714:	80fb      	strh	r3, [r7, #6]
 8001716:	4603      	mov	r3, r0
 8001718:	80bb      	strh	r3, [r7, #4]
 800171a:	460b      	mov	r3, r1
 800171c:	70fb      	strb	r3, [r7, #3]
 800171e:	4613      	mov	r3, r2
 8001720:	70bb      	strb	r3, [r7, #2]
  uint8_t temp, t1, t;
  uint16_t y0 = y;
 8001722:	88bb      	ldrh	r3, [r7, #4]
 8001724:	817b      	strh	r3, [r7, #10]
  uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) *
 8001726:	78bb      	ldrb	r3, [r7, #2]
 8001728:	08db      	lsrs	r3, r3, #3
 800172a:	b2db      	uxtb	r3, r3
 800172c:	461a      	mov	r2, r3
 800172e:	78bb      	ldrb	r3, [r7, #2]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	bf14      	ite	ne
 800173a:	2301      	movne	r3, #1
 800173c:	2300      	moveq	r3, #0
 800173e:	b2db      	uxtb	r3, r3
 8001740:	4413      	add	r3, r2
 8001742:	b2db      	uxtb	r3, r3
 8001744:	78ba      	ldrb	r2, [r7, #2]
 8001746:	0852      	lsrs	r2, r2, #1
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	fb02 f303 	mul.w	r3, r2, r3
 800174e:	727b      	strb	r3, [r7, #9]
                  (size / 2); // 得到字体一个字符对应点阵集所占的字节数
  num = num - ' '; // 得到偏移后的值（ASCII字库是从空格开始取模，所以-'
 8001750:	78fb      	ldrb	r3, [r7, #3]
 8001752:	3b20      	subs	r3, #32
 8001754:	70fb      	strb	r3, [r7, #3]
                   // '就是对应字符的字库）
  for (t = 0; t < csize; t++) {
 8001756:	2300      	movs	r3, #0
 8001758:	737b      	strb	r3, [r7, #13]
 800175a:	e06e      	b.n	800183a <LCD_ShowChar+0x136>
    if (size == 12)
 800175c:	78bb      	ldrb	r3, [r7, #2]
 800175e:	2b0c      	cmp	r3, #12
 8001760:	d10b      	bne.n	800177a <LCD_ShowChar+0x76>
      temp = asc2_1206[num][t]; // 调用1206字体
 8001762:	78fa      	ldrb	r2, [r7, #3]
 8001764:	7b79      	ldrb	r1, [r7, #13]
 8001766:	483a      	ldr	r0, [pc, #232]	; (8001850 <LCD_ShowChar+0x14c>)
 8001768:	4613      	mov	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4413      	add	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4403      	add	r3, r0
 8001772:	440b      	add	r3, r1
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	73fb      	strb	r3, [r7, #15]
 8001778:	e019      	b.n	80017ae <LCD_ShowChar+0xaa>
    else if (size == 16)
 800177a:	78bb      	ldrb	r3, [r7, #2]
 800177c:	2b10      	cmp	r3, #16
 800177e:	d108      	bne.n	8001792 <LCD_ShowChar+0x8e>
      temp = asc2_1608[num][t]; // 调用1608字体
 8001780:	78fa      	ldrb	r2, [r7, #3]
 8001782:	7b7b      	ldrb	r3, [r7, #13]
 8001784:	4933      	ldr	r1, [pc, #204]	; (8001854 <LCD_ShowChar+0x150>)
 8001786:	0112      	lsls	r2, r2, #4
 8001788:	440a      	add	r2, r1
 800178a:	4413      	add	r3, r2
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	73fb      	strb	r3, [r7, #15]
 8001790:	e00d      	b.n	80017ae <LCD_ShowChar+0xaa>
    else if (size == 24)
 8001792:	78bb      	ldrb	r3, [r7, #2]
 8001794:	2b18      	cmp	r3, #24
 8001796:	d155      	bne.n	8001844 <LCD_ShowChar+0x140>
      temp = asc2_2412[num][t]; // 调用2412字体
 8001798:	78fa      	ldrb	r2, [r7, #3]
 800179a:	7b79      	ldrb	r1, [r7, #13]
 800179c:	482e      	ldr	r0, [pc, #184]	; (8001858 <LCD_ShowChar+0x154>)
 800179e:	4613      	mov	r3, r2
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	4413      	add	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4403      	add	r3, r0
 80017a8:	440b      	add	r3, r1
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	73fb      	strb	r3, [r7, #15]
    else
      return; // 没有的字库
    for (t1 = 0; t1 < 8; t1++) {
 80017ae:	2300      	movs	r3, #0
 80017b0:	73bb      	strb	r3, [r7, #14]
 80017b2:	e03a      	b.n	800182a <LCD_ShowChar+0x126>
      if (temp & 0x80)
 80017b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	da0c      	bge.n	80017d6 <LCD_ShowChar+0xd2>
        LCD_Fast_DrawPoint(x, y, LCD_BGR2RGB(POINT_COLOR));
 80017bc:	4b27      	ldr	r3, [pc, #156]	; (800185c <LCD_ShowChar+0x158>)
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fb3d 	bl	8000e40 <LCD_BGR2RGB>
 80017c6:	4603      	mov	r3, r0
 80017c8:	461a      	mov	r2, r3
 80017ca:	88b9      	ldrh	r1, [r7, #4]
 80017cc:	88fb      	ldrh	r3, [r7, #6]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fce4 	bl	800119c <LCD_Fast_DrawPoint>
 80017d4:	e00a      	b.n	80017ec <LCD_ShowChar+0xe8>
      else if (mode == 0)
 80017d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d106      	bne.n	80017ec <LCD_ShowChar+0xe8>
        LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 80017de:	4b20      	ldr	r3, [pc, #128]	; (8001860 <LCD_ShowChar+0x15c>)
 80017e0:	881a      	ldrh	r2, [r3, #0]
 80017e2:	88b9      	ldrh	r1, [r7, #4]
 80017e4:	88fb      	ldrh	r3, [r7, #6]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff fcd8 	bl	800119c <LCD_Fast_DrawPoint>
      temp <<= 1;
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	73fb      	strb	r3, [r7, #15]
      y++;
 80017f2:	88bb      	ldrh	r3, [r7, #4]
 80017f4:	3301      	adds	r3, #1
 80017f6:	80bb      	strh	r3, [r7, #4]
      if (y >= lcddev.height)
 80017f8:	4b1a      	ldr	r3, [pc, #104]	; (8001864 <LCD_ShowChar+0x160>)
 80017fa:	885b      	ldrh	r3, [r3, #2]
 80017fc:	88ba      	ldrh	r2, [r7, #4]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d222      	bcs.n	8001848 <LCD_ShowChar+0x144>
        return; // 超区域了
      if ((y - y0) == size) {
 8001802:	88ba      	ldrh	r2, [r7, #4]
 8001804:	897b      	ldrh	r3, [r7, #10]
 8001806:	1ad2      	subs	r2, r2, r3
 8001808:	78bb      	ldrb	r3, [r7, #2]
 800180a:	429a      	cmp	r2, r3
 800180c:	d10a      	bne.n	8001824 <LCD_ShowChar+0x120>
        y = y0;
 800180e:	897b      	ldrh	r3, [r7, #10]
 8001810:	80bb      	strh	r3, [r7, #4]
        x++;
 8001812:	88fb      	ldrh	r3, [r7, #6]
 8001814:	3301      	adds	r3, #1
 8001816:	80fb      	strh	r3, [r7, #6]
        if (x >= lcddev.width)
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <LCD_ShowChar+0x160>)
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	88fa      	ldrh	r2, [r7, #6]
 800181e:	429a      	cmp	r2, r3
 8001820:	d307      	bcc.n	8001832 <LCD_ShowChar+0x12e>
          return; // 超区域了
 8001822:	e012      	b.n	800184a <LCD_ShowChar+0x146>
    for (t1 = 0; t1 < 8; t1++) {
 8001824:	7bbb      	ldrb	r3, [r7, #14]
 8001826:	3301      	adds	r3, #1
 8001828:	73bb      	strb	r3, [r7, #14]
 800182a:	7bbb      	ldrb	r3, [r7, #14]
 800182c:	2b07      	cmp	r3, #7
 800182e:	d9c1      	bls.n	80017b4 <LCD_ShowChar+0xb0>
 8001830:	e000      	b.n	8001834 <LCD_ShowChar+0x130>
        break;
 8001832:	bf00      	nop
  for (t = 0; t < csize; t++) {
 8001834:	7b7b      	ldrb	r3, [r7, #13]
 8001836:	3301      	adds	r3, #1
 8001838:	737b      	strb	r3, [r7, #13]
 800183a:	7b7a      	ldrb	r2, [r7, #13]
 800183c:	7a7b      	ldrb	r3, [r7, #9]
 800183e:	429a      	cmp	r2, r3
 8001840:	d38c      	bcc.n	800175c <LCD_ShowChar+0x58>
 8001842:	e002      	b.n	800184a <LCD_ShowChar+0x146>
      return; // 没有的字库
 8001844:	bf00      	nop
 8001846:	e000      	b.n	800184a <LCD_ShowChar+0x146>
        return; // 超区域了
 8001848:	bf00      	nop
      }
    }
  }
}
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	bd90      	pop	{r4, r7, pc}
 8001850:	080084cc 	.word	0x080084cc
 8001854:	08008940 	.word	0x08008940
 8001858:	08008f30 	.word	0x08008f30
 800185c:	200001f4 	.word	0x200001f4
 8001860:	20000000 	.word	0x20000000
 8001864:	200001f8 	.word	0x200001f8

08001868 <LCD_ShowString>:
// x,y: starting coordinate
// width, height: display area size
// size: font size // x,y: starting coordinate
// *p: string
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
                    uint8_t size, uint8_t *p) {
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b087      	sub	sp, #28
 800186c:	af02      	add	r7, sp, #8
 800186e:	4604      	mov	r4, r0
 8001870:	4608      	mov	r0, r1
 8001872:	4611      	mov	r1, r2
 8001874:	461a      	mov	r2, r3
 8001876:	4623      	mov	r3, r4
 8001878:	80fb      	strh	r3, [r7, #6]
 800187a:	4603      	mov	r3, r0
 800187c:	80bb      	strh	r3, [r7, #4]
 800187e:	460b      	mov	r3, r1
 8001880:	807b      	strh	r3, [r7, #2]
 8001882:	4613      	mov	r3, r2
 8001884:	803b      	strh	r3, [r7, #0]
  uint8_t x0 = x;
 8001886:	88fb      	ldrh	r3, [r7, #6]
 8001888:	73fb      	strb	r3, [r7, #15]
  width += x;
 800188a:	887a      	ldrh	r2, [r7, #2]
 800188c:	88fb      	ldrh	r3, [r7, #6]
 800188e:	4413      	add	r3, r2
 8001890:	807b      	strh	r3, [r7, #2]
  height += y;
 8001892:	883a      	ldrh	r2, [r7, #0]
 8001894:	88bb      	ldrh	r3, [r7, #4]
 8001896:	4413      	add	r3, r2
 8001898:	803b      	strh	r3, [r7, #0]
  while ((*p <= '~') && (*p >= ' ')) // 判断是不是非法字符!
 800189a:	e024      	b.n	80018e6 <LCD_ShowString+0x7e>
  {
    if (x >= width) {
 800189c:	88fa      	ldrh	r2, [r7, #6]
 800189e:	887b      	ldrh	r3, [r7, #2]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d307      	bcc.n	80018b4 <LCD_ShowString+0x4c>
      x = x0;
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	80fb      	strh	r3, [r7, #6]
      y += size;
 80018a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	88bb      	ldrh	r3, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	80bb      	strh	r3, [r7, #4]
    }
    if (y >= height)
 80018b4:	88ba      	ldrh	r2, [r7, #4]
 80018b6:	883b      	ldrh	r3, [r7, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d21d      	bcs.n	80018f8 <LCD_ShowString+0x90>
      break; // 退出
    LCD_ShowChar(x, y, *p, size, 0);
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	781a      	ldrb	r2, [r3, #0]
 80018c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018c4:	88b9      	ldrh	r1, [r7, #4]
 80018c6:	88f8      	ldrh	r0, [r7, #6]
 80018c8:	2400      	movs	r4, #0
 80018ca:	9400      	str	r4, [sp, #0]
 80018cc:	f7ff ff1a 	bl	8001704 <LCD_ShowChar>
    x += size / 2;
 80018d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018d4:	085b      	lsrs	r3, r3, #1
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	b29a      	uxth	r2, r3
 80018da:	88fb      	ldrh	r3, [r7, #6]
 80018dc:	4413      	add	r3, r2
 80018de:	80fb      	strh	r3, [r7, #6]
    p++;
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	3301      	adds	r3, #1
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
  while ((*p <= '~') && (*p >= ' ')) // 判断是不是非法字符!
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b7e      	cmp	r3, #126	; 0x7e
 80018ec:	d805      	bhi.n	80018fa <LCD_ShowString+0x92>
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b1f      	cmp	r3, #31
 80018f4:	d8d2      	bhi.n	800189c <LCD_ShowString+0x34>
  }
}
 80018f6:	e000      	b.n	80018fa <LCD_ShowString+0x92>
      break; // 退出
 80018f8:	bf00      	nop
}
 80018fa:	bf00      	nop
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd90      	pop	{r4, r7, pc}
	...

08001904 <test>:
int adcBuf[3] = {0};
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int test(void) {
 8001904:	b580      	push	{r7, lr}
 8001906:	b08c      	sub	sp, #48	; 0x30
 8001908:	af02      	add	r7, sp, #8
    LCD_Init();
 800190a:	f7ff fd21 	bl	8001350 <LCD_Init>
    LCD_Clear(WHITE);
 800190e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001912:	f7ff feb5 	bl	8001680 <LCD_Clear>
    uint16_t raw;
    char msg[32];
    double vol;
    HAL_UART_Transmit(&huart1, "Start\r\n", 7, HAL_MAX_DELAY);
 8001916:	f04f 33ff 	mov.w	r3, #4294967295
 800191a:	2207      	movs	r2, #7
 800191c:	4924      	ldr	r1, [pc, #144]	; (80019b0 <test+0xac>)
 800191e:	4825      	ldr	r0, [pc, #148]	; (80019b4 <test+0xb0>)
 8001920:	f002 f864 	bl	80039ec <HAL_UART_Transmit>
    while (1) {
        /* USER CODE END WHILE */
        /* USER CODE BEGIN 3 */
        for (int i = 0; i < 3; i++) {
 8001924:	2300      	movs	r3, #0
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
 8001928:	e03a      	b.n	80019a0 <test+0x9c>
            HAL_ADC_Start(&hadc1);
 800192a:	4823      	ldr	r0, [pc, #140]	; (80019b8 <test+0xb4>)
 800192c:	f000 fca4 	bl	8002278 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001930:	f04f 31ff 	mov.w	r1, #4294967295
 8001934:	4820      	ldr	r0, [pc, #128]	; (80019b8 <test+0xb4>)
 8001936:	f000 fd4d 	bl	80023d4 <HAL_ADC_PollForConversion>
            adcBuf[i] = HAL_ADC_GetValue(&hadc1);
 800193a:	481f      	ldr	r0, [pc, #124]	; (80019b8 <test+0xb4>)
 800193c:	f000 fe50 	bl	80025e0 <HAL_ADC_GetValue>
 8001940:	4603      	mov	r3, r0
 8001942:	4619      	mov	r1, r3
 8001944:	4a1d      	ldr	r2, [pc, #116]	; (80019bc <test+0xb8>)
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            sprintf(msg, "ch:%d %d\r\n", i, adcBuf[i]);
 800194c:	4a1b      	ldr	r2, [pc, #108]	; (80019bc <test+0xb8>)
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001954:	1d38      	adds	r0, r7, #4
 8001956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001958:	4919      	ldr	r1, [pc, #100]	; (80019c0 <test+0xbc>)
 800195a:	f003 f907 	bl	8004b6c <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg),
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fc61 	bl	8000228 <strlen>
 8001966:	4603      	mov	r3, r0
 8001968:	b29a      	uxth	r2, r3
 800196a:	1d39      	adds	r1, r7, #4
 800196c:	f04f 33ff 	mov.w	r3, #4294967295
 8001970:	4810      	ldr	r0, [pc, #64]	; (80019b4 <test+0xb0>)
 8001972:	f002 f83b 	bl	80039ec <HAL_UART_Transmit>
                              HAL_MAX_DELAY);

            LCD_ShowString(120, 180+i*30, 240, 16, 16, msg);
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	b29b      	uxth	r3, r3
 800197a:	461a      	mov	r2, r3
 800197c:	0112      	lsls	r2, r2, #4
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	b29b      	uxth	r3, r3
 8001984:	33b4      	adds	r3, #180	; 0xb4
 8001986:	b299      	uxth	r1, r3
 8001988:	1d3b      	adds	r3, r7, #4
 800198a:	9301      	str	r3, [sp, #4]
 800198c:	2310      	movs	r3, #16
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	2310      	movs	r3, #16
 8001992:	22f0      	movs	r2, #240	; 0xf0
 8001994:	2078      	movs	r0, #120	; 0x78
 8001996:	f7ff ff67 	bl	8001868 <LCD_ShowString>
        for (int i = 0; i < 3; i++) {
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	3301      	adds	r3, #1
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	ddc1      	ble.n	800192a <test+0x26>
        }
        HAL_Delay(500);
 80019a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019aa:	f000 fb57 	bl	800205c <HAL_Delay>
        for (int i = 0; i < 3; i++) {
 80019ae:	e7b9      	b.n	8001924 <test+0x20>
 80019b0:	080084b8 	.word	0x080084b8
 80019b4:	20000238 	.word	0x20000238
 80019b8:	20000208 	.word	0x20000208
 80019bc:	20000280 	.word	0x20000280
 80019c0:	080084c0 	.word	0x080084c0

080019c4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
    /* MCU
     * Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the
     * Systick. */
    HAL_Init();
 80019c8:	f000 fae6 	bl	8001f98 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80019cc:	f000 f809 	bl	80019e2 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80019d0:	f000 f8ec 	bl	8001bac <MX_GPIO_Init>
    MX_ADC1_Init();
 80019d4:	f000 f862 	bl	8001a9c <MX_ADC1_Init>
    MX_USART1_UART_Init();
 80019d8:	f000 f8be 	bl	8001b58 <MX_USART1_UART_Init>

    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    test();
 80019dc:	f7ff ff92 	bl	8001904 <test>
    while (1) {
 80019e0:	e7fe      	b.n	80019e0 <main+0x1c>

080019e2 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b096      	sub	sp, #88	; 0x58
 80019e6:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019ec:	2228      	movs	r2, #40	; 0x28
 80019ee:	2100      	movs	r1, #0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f003 f91e 	bl	8004c32 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019f6:	f107 031c 	add.w	r3, r7, #28
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	609a      	str	r2, [r3, #8]
 8001a02:	60da      	str	r2, [r3, #12]
 8001a04:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]
 8001a14:	615a      	str	r2, [r3, #20]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a16:	2301      	movs	r3, #1
 8001a18:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a1e:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a20:	2300      	movs	r3, #0
 8001a22:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a24:	2301      	movs	r3, #1
 8001a26:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a30:	653b      	str	r3, [r7, #80]	; 0x50
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a32:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001a36:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001a38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f001 f9e7 	bl	8002e10 <HAL_RCC_OscConfig>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <SystemClock_Config+0x6a>
        Error_Handler();
 8001a48:	f000 f8d2 	bl	8001bf0 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8001a4c:	230f      	movs	r3, #15
 8001a4e:	61fb      	str	r3, [r7, #28]
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a50:	2302      	movs	r3, #2
 8001a52:	623b      	str	r3, [r7, #32]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a54:	2300      	movs	r3, #0
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a5c:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001a62:	f107 031c 	add.w	r3, r7, #28
 8001a66:	2102      	movs	r1, #2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f001 fc53 	bl	8003314 <HAL_RCC_ClockConfig>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <SystemClock_Config+0x96>
        Error_Handler();
 8001a74:	f000 f8bc 	bl	8001bf0 <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	607b      	str	r3, [r7, #4]
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001a7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a80:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001a82:	1d3b      	adds	r3, r7, #4
 8001a84:	4618      	mov	r0, r3
 8001a86:	f001 fdd3 	bl	8003630 <HAL_RCCEx_PeriphCLKConfig>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <SystemClock_Config+0xb2>
        Error_Handler();
 8001a90:	f000 f8ae 	bl	8001bf0 <Error_Handler>
    }
}
 8001a94:	bf00      	nop
 8001a96:	3758      	adds	r7, #88	; 0x58
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = {0};
 8001aa2:	1d3b      	adds	r3, r7, #4
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]

    /* USER CODE END ADC1_Init 1 */

    /** Common config
     */
    hadc1.Instance = ADC1;
 8001aac:	4b28      	ldr	r3, [pc, #160]	; (8001b50 <MX_ADC1_Init+0xb4>)
 8001aae:	4a29      	ldr	r2, [pc, #164]	; (8001b54 <MX_ADC1_Init+0xb8>)
 8001ab0:	601a      	str	r2, [r3, #0]
    hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001ab2:	4b27      	ldr	r3, [pc, #156]	; (8001b50 <MX_ADC1_Init+0xb4>)
 8001ab4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ab8:	609a      	str	r2, [r3, #8]
    hadc1.Init.ContinuousConvMode = DISABLE;
 8001aba:	4b25      	ldr	r3, [pc, #148]	; (8001b50 <MX_ADC1_Init+0xb4>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	731a      	strb	r2, [r3, #12]
    hadc1.Init.DiscontinuousConvMode = ENABLE;
 8001ac0:	4b23      	ldr	r3, [pc, #140]	; (8001b50 <MX_ADC1_Init+0xb4>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	751a      	strb	r2, [r3, #20]
    hadc1.Init.NbrOfDiscConversion = 1;
 8001ac6:	4b22      	ldr	r3, [pc, #136]	; (8001b50 <MX_ADC1_Init+0xb4>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	619a      	str	r2, [r3, #24]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001acc:	4b20      	ldr	r3, [pc, #128]	; (8001b50 <MX_ADC1_Init+0xb4>)
 8001ace:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001ad2:	61da      	str	r2, [r3, #28]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ad4:	4b1e      	ldr	r3, [pc, #120]	; (8001b50 <MX_ADC1_Init+0xb4>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	605a      	str	r2, [r3, #4]
    hadc1.Init.NbrOfConversion = 3;
 8001ada:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <MX_ADC1_Init+0xb4>)
 8001adc:	2203      	movs	r2, #3
 8001ade:	611a      	str	r2, [r3, #16]
    if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001ae0:	481b      	ldr	r0, [pc, #108]	; (8001b50 <MX_ADC1_Init+0xb4>)
 8001ae2:	f000 fadf 	bl	80020a4 <HAL_ADC_Init>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_ADC1_Init+0x54>
        Error_Handler();
 8001aec:	f000 f880 	bl	8001bf0 <Error_Handler>
    }

    /** Configure Regular Channel
     */
    sConfig.Channel = ADC_CHANNEL_2;
 8001af0:	2302      	movs	r3, #2
 8001af2:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8001af4:	2301      	movs	r3, #1
 8001af6:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	4619      	mov	r1, r3
 8001b00:	4813      	ldr	r0, [pc, #76]	; (8001b50 <MX_ADC1_Init+0xb4>)
 8001b02:	f000 fd79 	bl	80025f8 <HAL_ADC_ConfigChannel>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_ADC1_Init+0x74>
        Error_Handler();
 8001b0c:	f000 f870 	bl	8001bf0 <Error_Handler>
    }

    /** Configure Regular Channel
     */
    sConfig.Channel = ADC_CHANNEL_3;
 8001b10:	2303      	movs	r3, #3
 8001b12:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_2;
 8001b14:	2302      	movs	r3, #2
 8001b16:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	480c      	ldr	r0, [pc, #48]	; (8001b50 <MX_ADC1_Init+0xb4>)
 8001b1e:	f000 fd6b 	bl	80025f8 <HAL_ADC_ConfigChannel>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_ADC1_Init+0x90>
        Error_Handler();
 8001b28:	f000 f862 	bl	8001bf0 <Error_Handler>
    }

    /** Configure Regular Channel
     */
    sConfig.Channel = ADC_CHANNEL_4;
 8001b2c:	2304      	movs	r3, #4
 8001b2e:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_3;
 8001b30:	2303      	movs	r3, #3
 8001b32:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	4619      	mov	r1, r3
 8001b38:	4805      	ldr	r0, [pc, #20]	; (8001b50 <MX_ADC1_Init+0xb4>)
 8001b3a:	f000 fd5d 	bl	80025f8 <HAL_ADC_ConfigChannel>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_ADC1_Init+0xac>
        Error_Handler();
 8001b44:	f000 f854 	bl	8001bf0 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */
}
 8001b48:	bf00      	nop
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20000208 	.word	0x20000208
 8001b54:	40012400 	.word	0x40012400

08001b58 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8001b5c:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <MX_USART1_UART_Init+0x4c>)
 8001b5e:	4a12      	ldr	r2, [pc, #72]	; (8001ba8 <MX_USART1_UART_Init+0x50>)
 8001b60:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8001b62:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <MX_USART1_UART_Init+0x4c>)
 8001b64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b68:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <MX_USART1_UART_Init+0x4c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <MX_USART1_UART_Init+0x4c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8001b76:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <MX_USART1_UART_Init+0x4c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8001b7c:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <MX_USART1_UART_Init+0x4c>)
 8001b7e:	220c      	movs	r2, #12
 8001b80:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b82:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <MX_USART1_UART_Init+0x4c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <MX_USART1_UART_Init+0x4c>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001b8e:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <MX_USART1_UART_Init+0x4c>)
 8001b90:	f001 fedc 	bl	800394c <HAL_UART_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_USART1_UART_Init+0x46>
        Error_Handler();
 8001b9a:	f000 f829 	bl	8001bf0 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000238 	.word	0x20000238
 8001ba8:	40013800 	.word	0x40013800

08001bac <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <MX_GPIO_Init+0x40>)
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	4a0d      	ldr	r2, [pc, #52]	; (8001bec <MX_GPIO_Init+0x40>)
 8001bb8:	f043 0320 	orr.w	r3, r3, #32
 8001bbc:	6193      	str	r3, [r2, #24]
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <MX_GPIO_Init+0x40>)
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	f003 0320 	and.w	r3, r3, #32
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bca:	4b08      	ldr	r3, [pc, #32]	; (8001bec <MX_GPIO_Init+0x40>)
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	4a07      	ldr	r2, [pc, #28]	; (8001bec <MX_GPIO_Init+0x40>)
 8001bd0:	f043 0304 	orr.w	r3, r3, #4
 8001bd4:	6193      	str	r3, [r2, #24]
 8001bd6:	4b05      	ldr	r3, [pc, #20]	; (8001bec <MX_GPIO_Init+0x40>)
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	f003 0304 	and.w	r3, r3, #4
 8001bde:	603b      	str	r3, [r7, #0]
 8001be0:	683b      	ldr	r3, [r7, #0]

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr
 8001bec:	40021000 	.word	0x40021000

08001bf0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bf4:	b672      	cpsid	i
}
 8001bf6:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state
     */
    __disable_irq();
    while (1) {
 8001bf8:	e7fe      	b.n	8001bf8 <Error_Handler+0x8>
	...

08001bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <HAL_MspInit+0x5c>)
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	4a14      	ldr	r2, [pc, #80]	; (8001c58 <HAL_MspInit+0x5c>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6193      	str	r3, [r2, #24]
 8001c0e:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_MspInit+0x5c>)
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c1a:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <HAL_MspInit+0x5c>)
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	4a0e      	ldr	r2, [pc, #56]	; (8001c58 <HAL_MspInit+0x5c>)
 8001c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c24:	61d3      	str	r3, [r2, #28]
 8001c26:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <HAL_MspInit+0x5c>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	607b      	str	r3, [r7, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c32:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <HAL_MspInit+0x60>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	4a04      	ldr	r2, [pc, #16]	; (8001c5c <HAL_MspInit+0x60>)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40010000 	.word	0x40010000

08001c60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	f107 0310 	add.w	r3, r7, #16
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a14      	ldr	r2, [pc, #80]	; (8001ccc <HAL_ADC_MspInit+0x6c>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d121      	bne.n	8001cc4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c80:	4b13      	ldr	r3, [pc, #76]	; (8001cd0 <HAL_ADC_MspInit+0x70>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	4a12      	ldr	r2, [pc, #72]	; (8001cd0 <HAL_ADC_MspInit+0x70>)
 8001c86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c8a:	6193      	str	r3, [r2, #24]
 8001c8c:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <HAL_ADC_MspInit+0x70>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c98:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <HAL_ADC_MspInit+0x70>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	4a0c      	ldr	r2, [pc, #48]	; (8001cd0 <HAL_ADC_MspInit+0x70>)
 8001c9e:	f043 0304 	orr.w	r3, r3, #4
 8001ca2:	6193      	str	r3, [r2, #24]
 8001ca4:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <HAL_ADC_MspInit+0x70>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001cb0:	231c      	movs	r3, #28
 8001cb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb8:	f107 0310 	add.w	r3, r7, #16
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4805      	ldr	r0, [pc, #20]	; (8001cd4 <HAL_ADC_MspInit+0x74>)
 8001cc0:	f000 ff12 	bl	8002ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001cc4:	bf00      	nop
 8001cc6:	3720      	adds	r7, #32
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40012400 	.word	0x40012400
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40010800 	.word	0x40010800

08001cd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b088      	sub	sp, #32
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	f107 0310 	add.w	r3, r7, #16
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a1c      	ldr	r2, [pc, #112]	; (8001d64 <HAL_UART_MspInit+0x8c>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d131      	bne.n	8001d5c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cf8:	4b1b      	ldr	r3, [pc, #108]	; (8001d68 <HAL_UART_MspInit+0x90>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	4a1a      	ldr	r2, [pc, #104]	; (8001d68 <HAL_UART_MspInit+0x90>)
 8001cfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d02:	6193      	str	r3, [r2, #24]
 8001d04:	4b18      	ldr	r3, [pc, #96]	; (8001d68 <HAL_UART_MspInit+0x90>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d10:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <HAL_UART_MspInit+0x90>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	4a14      	ldr	r2, [pc, #80]	; (8001d68 <HAL_UART_MspInit+0x90>)
 8001d16:	f043 0304 	orr.w	r3, r3, #4
 8001d1a:	6193      	str	r3, [r2, #24]
 8001d1c:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <HAL_UART_MspInit+0x90>)
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d32:	2303      	movs	r3, #3
 8001d34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d36:	f107 0310 	add.w	r3, r7, #16
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	480b      	ldr	r0, [pc, #44]	; (8001d6c <HAL_UART_MspInit+0x94>)
 8001d3e:	f000 fed3 	bl	8002ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d50:	f107 0310 	add.w	r3, r7, #16
 8001d54:	4619      	mov	r1, r3
 8001d56:	4805      	ldr	r0, [pc, #20]	; (8001d6c <HAL_UART_MspInit+0x94>)
 8001d58:	f000 fec6 	bl	8002ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d5c:	bf00      	nop
 8001d5e:	3720      	adds	r7, #32
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40013800 	.word	0x40013800
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	40010800 	.word	0x40010800

08001d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <NMI_Handler+0x4>

08001d76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d7a:	e7fe      	b.n	8001d7a <HardFault_Handler+0x4>

08001d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d80:	e7fe      	b.n	8001d80 <MemManage_Handler+0x4>

08001d82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d86:	e7fe      	b.n	8001d86 <BusFault_Handler+0x4>

08001d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <UsageFault_Handler+0x4>

08001d8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr

08001d9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr

08001da6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr

08001db2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001db6:	f000 f935 	bl	8002024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0
  return 1;
 8001dc2:	2301      	movs	r3, #1
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr

08001dcc <_kill>:

int _kill(int pid, int sig)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dd6:	f002 ff7f 	bl	8004cd8 <__errno>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2216      	movs	r2, #22
 8001dde:	601a      	str	r2, [r3, #0]
  return -1;
 8001de0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <_exit>:

void _exit (int status)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001df4:	f04f 31ff 	mov.w	r1, #4294967295
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff ffe7 	bl	8001dcc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dfe:	e7fe      	b.n	8001dfe <_exit+0x12>

08001e00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	e00a      	b.n	8001e28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e12:	f3af 8000 	nop.w
 8001e16:	4601      	mov	r1, r0
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	1c5a      	adds	r2, r3, #1
 8001e1c:	60ba      	str	r2, [r7, #8]
 8001e1e:	b2ca      	uxtb	r2, r1
 8001e20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	3301      	adds	r3, #1
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	dbf0      	blt.n	8001e12 <_read+0x12>
  }

  return len;
 8001e30:	687b      	ldr	r3, [r7, #4]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b086      	sub	sp, #24
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	e009      	b.n	8001e60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	60ba      	str	r2, [r7, #8]
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	dbf1      	blt.n	8001e4c <_write+0x12>
  }
  return len;
 8001e68:	687b      	ldr	r3, [r7, #4]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <_close>:

int _close(int file)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr

08001e88 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e98:	605a      	str	r2, [r3, #4]
  return 0;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr

08001ea6 <_isatty>:

int _isatty(int file)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001eae:	2301      	movs	r3, #1
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr

08001eba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b085      	sub	sp, #20
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	60f8      	str	r0, [r7, #12]
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr
	...

08001ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001edc:	4a14      	ldr	r2, [pc, #80]	; (8001f30 <_sbrk+0x5c>)
 8001ede:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <_sbrk+0x60>)
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ee8:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <_sbrk+0x64>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d102      	bne.n	8001ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ef0:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <_sbrk+0x64>)
 8001ef2:	4a12      	ldr	r2, [pc, #72]	; (8001f3c <_sbrk+0x68>)
 8001ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <_sbrk+0x64>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d207      	bcs.n	8001f14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f04:	f002 fee8 	bl	8004cd8 <__errno>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	220c      	movs	r2, #12
 8001f0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f12:	e009      	b.n	8001f28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f14:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <_sbrk+0x64>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f1a:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <_sbrk+0x64>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4413      	add	r3, r2
 8001f22:	4a05      	ldr	r2, [pc, #20]	; (8001f38 <_sbrk+0x64>)
 8001f24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f26:	68fb      	ldr	r3, [r7, #12]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	2000c000 	.word	0x2000c000
 8001f34:	00000400 	.word	0x00000400
 8001f38:	2000028c 	.word	0x2000028c
 8001f3c:	200003e0 	.word	0x200003e0

08001f40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr

08001f4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f4c:	f7ff fff8 	bl	8001f40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f50:	480b      	ldr	r0, [pc, #44]	; (8001f80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f52:	490c      	ldr	r1, [pc, #48]	; (8001f84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f54:	4a0c      	ldr	r2, [pc, #48]	; (8001f88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f58:	e002      	b.n	8001f60 <LoopCopyDataInit>

08001f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f5e:	3304      	adds	r3, #4

08001f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f64:	d3f9      	bcc.n	8001f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f66:	4a09      	ldr	r2, [pc, #36]	; (8001f8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f68:	4c09      	ldr	r4, [pc, #36]	; (8001f90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f6c:	e001      	b.n	8001f72 <LoopFillZerobss>

08001f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f70:	3204      	adds	r2, #4

08001f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f74:	d3fb      	bcc.n	8001f6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f76:	f002 feb5 	bl	8004ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f7a:	f7ff fd23 	bl	80019c4 <main>
  bx lr
 8001f7e:	4770      	bx	lr
  ldr r0, =_sdata
 8001f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f84:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001f88:	0800a100 	.word	0x0800a100
  ldr r2, =_sbss
 8001f8c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001f90:	200003e0 	.word	0x200003e0

08001f94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f94:	e7fe      	b.n	8001f94 <ADC1_2_IRQHandler>
	...

08001f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f9c:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <HAL_Init+0x28>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a07      	ldr	r2, [pc, #28]	; (8001fc0 <HAL_Init+0x28>)
 8001fa2:	f043 0310 	orr.w	r3, r3, #16
 8001fa6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fa8:	2003      	movs	r0, #3
 8001faa:	f000 fd69 	bl	8002a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fae:	200f      	movs	r0, #15
 8001fb0:	f000 f808 	bl	8001fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fb4:	f7ff fe22 	bl	8001bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40022000 	.word	0x40022000

08001fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fcc:	4b12      	ldr	r3, [pc, #72]	; (8002018 <HAL_InitTick+0x54>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4b12      	ldr	r3, [pc, #72]	; (800201c <HAL_InitTick+0x58>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 fd73 	bl	8002ace <HAL_SYSTICK_Config>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e00e      	b.n	8002010 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b0f      	cmp	r3, #15
 8001ff6:	d80a      	bhi.n	800200e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8002000:	f000 fd49 	bl	8002a96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002004:	4a06      	ldr	r2, [pc, #24]	; (8002020 <HAL_InitTick+0x5c>)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800200a:	2300      	movs	r3, #0
 800200c:	e000      	b.n	8002010 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
}
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20000004 	.word	0x20000004
 800201c:	2000000c 	.word	0x2000000c
 8002020:	20000008 	.word	0x20000008

08002024 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002028:	4b05      	ldr	r3, [pc, #20]	; (8002040 <HAL_IncTick+0x1c>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	461a      	mov	r2, r3
 800202e:	4b05      	ldr	r3, [pc, #20]	; (8002044 <HAL_IncTick+0x20>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4413      	add	r3, r2
 8002034:	4a03      	ldr	r2, [pc, #12]	; (8002044 <HAL_IncTick+0x20>)
 8002036:	6013      	str	r3, [r2, #0]
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr
 8002040:	2000000c 	.word	0x2000000c
 8002044:	20000290 	.word	0x20000290

08002048 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return uwTick;
 800204c:	4b02      	ldr	r3, [pc, #8]	; (8002058 <HAL_GetTick+0x10>)
 800204e:	681b      	ldr	r3, [r3, #0]
}
 8002050:	4618      	mov	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr
 8002058:	20000290 	.word	0x20000290

0800205c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002064:	f7ff fff0 	bl	8002048 <HAL_GetTick>
 8002068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002074:	d005      	beq.n	8002082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002076:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <HAL_Delay+0x44>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	461a      	mov	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4413      	add	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002082:	bf00      	nop
 8002084:	f7ff ffe0 	bl	8002048 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	429a      	cmp	r2, r3
 8002092:	d8f7      	bhi.n	8002084 <HAL_Delay+0x28>
  {
  }
}
 8002094:	bf00      	nop
 8002096:	bf00      	nop
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	2000000c 	.word	0x2000000c

080020a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80020b4:	2300      	movs	r3, #0
 80020b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e0ce      	b.n	8002264 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d109      	bne.n	80020e8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff fdbc 	bl	8001c60 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 fbd7 	bl	800289c <ADC_ConversionStop_Disable>
 80020ee:	4603      	mov	r3, r0
 80020f0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f6:	f003 0310 	and.w	r3, r3, #16
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f040 80a9 	bne.w	8002252 <HAL_ADC_Init+0x1ae>
 8002100:	7dfb      	ldrb	r3, [r7, #23]
 8002102:	2b00      	cmp	r3, #0
 8002104:	f040 80a5 	bne.w	8002252 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002110:	f023 0302 	bic.w	r3, r3, #2
 8002114:	f043 0202 	orr.w	r2, r3, #2
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4951      	ldr	r1, [pc, #324]	; (800226c <HAL_ADC_Init+0x1c8>)
 8002126:	428b      	cmp	r3, r1
 8002128:	d10a      	bne.n	8002140 <HAL_ADC_Init+0x9c>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002132:	d002      	beq.n	800213a <HAL_ADC_Init+0x96>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	69db      	ldr	r3, [r3, #28]
 8002138:	e004      	b.n	8002144 <HAL_ADC_Init+0xa0>
 800213a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800213e:	e001      	b.n	8002144 <HAL_ADC_Init+0xa0>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002144:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	7b1b      	ldrb	r3, [r3, #12]
 800214a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800214c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	4313      	orrs	r3, r2
 8002152:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800215c:	d003      	beq.n	8002166 <HAL_ADC_Init+0xc2>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d102      	bne.n	800216c <HAL_ADC_Init+0xc8>
 8002166:	f44f 7380 	mov.w	r3, #256	; 0x100
 800216a:	e000      	b.n	800216e <HAL_ADC_Init+0xca>
 800216c:	2300      	movs	r3, #0
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	7d1b      	ldrb	r3, [r3, #20]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d119      	bne.n	80021b0 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	7b1b      	ldrb	r3, [r3, #12]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d109      	bne.n	8002198 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	3b01      	subs	r3, #1
 800218a:	035a      	lsls	r2, r3, #13
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4313      	orrs	r3, r2
 8002190:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002194:	613b      	str	r3, [r7, #16]
 8002196:	e00b      	b.n	80021b0 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219c:	f043 0220 	orr.w	r2, r3, #32
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a8:	f043 0201 	orr.w	r2, r3, #1
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	4b29      	ldr	r3, [pc, #164]	; (8002270 <HAL_ADC_Init+0x1cc>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6812      	ldr	r2, [r2, #0]
 80021d2:	68b9      	ldr	r1, [r7, #8]
 80021d4:	430b      	orrs	r3, r1
 80021d6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021e0:	d003      	beq.n	80021ea <HAL_ADC_Init+0x146>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d104      	bne.n	80021f4 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	051b      	lsls	r3, r3, #20
 80021f2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	430a      	orrs	r2, r1
 8002206:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	4b19      	ldr	r3, [pc, #100]	; (8002274 <HAL_ADC_Init+0x1d0>)
 8002210:	4013      	ands	r3, r2
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	429a      	cmp	r2, r3
 8002216:	d10b      	bne.n	8002230 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002222:	f023 0303 	bic.w	r3, r3, #3
 8002226:	f043 0201 	orr.w	r2, r3, #1
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800222e:	e018      	b.n	8002262 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002234:	f023 0312 	bic.w	r3, r3, #18
 8002238:	f043 0210 	orr.w	r2, r3, #16
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002244:	f043 0201 	orr.w	r2, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002250:	e007      	b.n	8002262 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002256:	f043 0210 	orr.w	r2, r3, #16
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002262:	7dfb      	ldrb	r3, [r7, #23]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40013c00 	.word	0x40013c00
 8002270:	ffe1f7fd 	.word	0xffe1f7fd
 8002274:	ff1f0efe 	.word	0xff1f0efe

08002278 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002280:	2300      	movs	r3, #0
 8002282:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800228a:	2b01      	cmp	r3, #1
 800228c:	d101      	bne.n	8002292 <HAL_ADC_Start+0x1a>
 800228e:	2302      	movs	r3, #2
 8002290:	e098      	b.n	80023c4 <HAL_ADC_Start+0x14c>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 faa4 	bl	80027e8 <ADC_Enable>
 80022a0:	4603      	mov	r3, r0
 80022a2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f040 8087 	bne.w	80023ba <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022b4:	f023 0301 	bic.w	r3, r3, #1
 80022b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a41      	ldr	r2, [pc, #260]	; (80023cc <HAL_ADC_Start+0x154>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d105      	bne.n	80022d6 <HAL_ADC_Start+0x5e>
 80022ca:	4b41      	ldr	r3, [pc, #260]	; (80023d0 <HAL_ADC_Start+0x158>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d115      	bne.n	8002302 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d026      	beq.n	800233e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002300:	e01d      	b.n	800233e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002306:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a2f      	ldr	r2, [pc, #188]	; (80023d0 <HAL_ADC_Start+0x158>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d004      	beq.n	8002322 <HAL_ADC_Start+0xaa>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a2b      	ldr	r2, [pc, #172]	; (80023cc <HAL_ADC_Start+0x154>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d10d      	bne.n	800233e <HAL_ADC_Start+0xc6>
 8002322:	4b2b      	ldr	r3, [pc, #172]	; (80023d0 <HAL_ADC_Start+0x158>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800232a:	2b00      	cmp	r3, #0
 800232c:	d007      	beq.n	800233e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002332:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002336:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002342:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d006      	beq.n	8002358 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234e:	f023 0206 	bic.w	r2, r3, #6
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	62da      	str	r2, [r3, #44]	; 0x2c
 8002356:	e002      	b.n	800235e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f06f 0202 	mvn.w	r2, #2
 800236e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800237a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800237e:	d113      	bne.n	80023a8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002384:	4a11      	ldr	r2, [pc, #68]	; (80023cc <HAL_ADC_Start+0x154>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d105      	bne.n	8002396 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800238a:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <HAL_ADC_Start+0x158>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002392:	2b00      	cmp	r3, #0
 8002394:	d108      	bne.n	80023a8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80023a4:	609a      	str	r2, [r3, #8]
 80023a6:	e00c      	b.n	80023c2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	e003      	b.n	80023c2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40012800 	.word	0x40012800
 80023d0:	40012400 	.word	0x40012400

080023d4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80023d4:	b590      	push	{r4, r7, lr}
 80023d6:	b087      	sub	sp, #28
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80023ea:	f7ff fe2d 	bl	8002048 <HAL_GetTick>
 80023ee:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00b      	beq.n	8002416 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002402:	f043 0220 	orr.w	r2, r3, #32
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e0d3      	b.n	80025be <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002420:	2b00      	cmp	r3, #0
 8002422:	d131      	bne.n	8002488 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800242e:	2b00      	cmp	r3, #0
 8002430:	d12a      	bne.n	8002488 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002432:	e021      	b.n	8002478 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800243a:	d01d      	beq.n	8002478 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d007      	beq.n	8002452 <HAL_ADC_PollForConversion+0x7e>
 8002442:	f7ff fe01 	bl	8002048 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d212      	bcs.n	8002478 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10b      	bne.n	8002478 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002464:	f043 0204 	orr.w	r2, r3, #4
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e0a2      	b.n	80025be <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0d6      	beq.n	8002434 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002486:	e070      	b.n	800256a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002488:	4b4f      	ldr	r3, [pc, #316]	; (80025c8 <HAL_ADC_PollForConversion+0x1f4>)
 800248a:	681c      	ldr	r4, [r3, #0]
 800248c:	2002      	movs	r0, #2
 800248e:	f001 f985 	bl	800379c <HAL_RCCEx_GetPeriphCLKFreq>
 8002492:	4603      	mov	r3, r0
 8002494:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6919      	ldr	r1, [r3, #16]
 800249e:	4b4b      	ldr	r3, [pc, #300]	; (80025cc <HAL_ADC_PollForConversion+0x1f8>)
 80024a0:	400b      	ands	r3, r1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d118      	bne.n	80024d8 <HAL_ADC_PollForConversion+0x104>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68d9      	ldr	r1, [r3, #12]
 80024ac:	4b48      	ldr	r3, [pc, #288]	; (80025d0 <HAL_ADC_PollForConversion+0x1fc>)
 80024ae:	400b      	ands	r3, r1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d111      	bne.n	80024d8 <HAL_ADC_PollForConversion+0x104>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6919      	ldr	r1, [r3, #16]
 80024ba:	4b46      	ldr	r3, [pc, #280]	; (80025d4 <HAL_ADC_PollForConversion+0x200>)
 80024bc:	400b      	ands	r3, r1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d108      	bne.n	80024d4 <HAL_ADC_PollForConversion+0x100>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68d9      	ldr	r1, [r3, #12]
 80024c8:	4b43      	ldr	r3, [pc, #268]	; (80025d8 <HAL_ADC_PollForConversion+0x204>)
 80024ca:	400b      	ands	r3, r1
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <HAL_ADC_PollForConversion+0x100>
 80024d0:	2314      	movs	r3, #20
 80024d2:	e020      	b.n	8002516 <HAL_ADC_PollForConversion+0x142>
 80024d4:	2329      	movs	r3, #41	; 0x29
 80024d6:	e01e      	b.n	8002516 <HAL_ADC_PollForConversion+0x142>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6919      	ldr	r1, [r3, #16]
 80024de:	4b3d      	ldr	r3, [pc, #244]	; (80025d4 <HAL_ADC_PollForConversion+0x200>)
 80024e0:	400b      	ands	r3, r1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d106      	bne.n	80024f4 <HAL_ADC_PollForConversion+0x120>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68d9      	ldr	r1, [r3, #12]
 80024ec:	4b3a      	ldr	r3, [pc, #232]	; (80025d8 <HAL_ADC_PollForConversion+0x204>)
 80024ee:	400b      	ands	r3, r1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00d      	beq.n	8002510 <HAL_ADC_PollForConversion+0x13c>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6919      	ldr	r1, [r3, #16]
 80024fa:	4b38      	ldr	r3, [pc, #224]	; (80025dc <HAL_ADC_PollForConversion+0x208>)
 80024fc:	400b      	ands	r3, r1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d108      	bne.n	8002514 <HAL_ADC_PollForConversion+0x140>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68d9      	ldr	r1, [r3, #12]
 8002508:	4b34      	ldr	r3, [pc, #208]	; (80025dc <HAL_ADC_PollForConversion+0x208>)
 800250a:	400b      	ands	r3, r1
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_ADC_PollForConversion+0x140>
 8002510:	2354      	movs	r3, #84	; 0x54
 8002512:	e000      	b.n	8002516 <HAL_ADC_PollForConversion+0x142>
 8002514:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002516:	fb02 f303 	mul.w	r3, r2, r3
 800251a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800251c:	e021      	b.n	8002562 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002524:	d01a      	beq.n	800255c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d007      	beq.n	800253c <HAL_ADC_PollForConversion+0x168>
 800252c:	f7ff fd8c 	bl	8002048 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d20f      	bcs.n	800255c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	429a      	cmp	r2, r3
 8002542:	d90b      	bls.n	800255c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002548:	f043 0204 	orr.w	r2, r3, #4
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e030      	b.n	80025be <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	3301      	adds	r3, #1
 8002560:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	429a      	cmp	r2, r3
 8002568:	d8d9      	bhi.n	800251e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f06f 0212 	mvn.w	r2, #18
 8002572:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002578:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800258a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800258e:	d115      	bne.n	80025bc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002594:	2b00      	cmp	r3, #0
 8002596:	d111      	bne.n	80025bc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d105      	bne.n	80025bc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b4:	f043 0201 	orr.w	r2, r3, #1
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	371c      	adds	r7, #28
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd90      	pop	{r4, r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20000004 	.word	0x20000004
 80025cc:	24924924 	.word	0x24924924
 80025d0:	00924924 	.word	0x00924924
 80025d4:	12492492 	.word	0x12492492
 80025d8:	00492492 	.word	0x00492492
 80025dc:	00249249 	.word	0x00249249

080025e0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr

080025f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002606:	2300      	movs	r3, #0
 8002608:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002610:	2b01      	cmp	r3, #1
 8002612:	d101      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x20>
 8002614:	2302      	movs	r3, #2
 8002616:	e0dc      	b.n	80027d2 <HAL_ADC_ConfigChannel+0x1da>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b06      	cmp	r3, #6
 8002626:	d81c      	bhi.n	8002662 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	3b05      	subs	r3, #5
 800263a:	221f      	movs	r2, #31
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	4019      	ands	r1, r3
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	6818      	ldr	r0, [r3, #0]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	3b05      	subs	r3, #5
 8002654:	fa00 f203 	lsl.w	r2, r0, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	635a      	str	r2, [r3, #52]	; 0x34
 8002660:	e03c      	b.n	80026dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b0c      	cmp	r3, #12
 8002668:	d81c      	bhi.n	80026a4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	3b23      	subs	r3, #35	; 0x23
 800267c:	221f      	movs	r2, #31
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	4019      	ands	r1, r3
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	6818      	ldr	r0, [r3, #0]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	3b23      	subs	r3, #35	; 0x23
 8002696:	fa00 f203 	lsl.w	r2, r0, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	631a      	str	r2, [r3, #48]	; 0x30
 80026a2:	e01b      	b.n	80026dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	4613      	mov	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	3b41      	subs	r3, #65	; 0x41
 80026b6:	221f      	movs	r2, #31
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	4019      	ands	r1, r3
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	6818      	ldr	r0, [r3, #0]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	3b41      	subs	r3, #65	; 0x41
 80026d0:	fa00 f203 	lsl.w	r2, r0, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b09      	cmp	r3, #9
 80026e2:	d91c      	bls.n	800271e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68d9      	ldr	r1, [r3, #12]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	4613      	mov	r3, r2
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	4413      	add	r3, r2
 80026f4:	3b1e      	subs	r3, #30
 80026f6:	2207      	movs	r2, #7
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	4019      	ands	r1, r3
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	6898      	ldr	r0, [r3, #8]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	4613      	mov	r3, r2
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	4413      	add	r3, r2
 800270e:	3b1e      	subs	r3, #30
 8002710:	fa00 f203 	lsl.w	r2, r0, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	60da      	str	r2, [r3, #12]
 800271c:	e019      	b.n	8002752 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6919      	ldr	r1, [r3, #16]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4613      	mov	r3, r2
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	4413      	add	r3, r2
 800272e:	2207      	movs	r2, #7
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	4019      	ands	r1, r3
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	6898      	ldr	r0, [r3, #8]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	4613      	mov	r3, r2
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	4413      	add	r3, r2
 8002746:	fa00 f203 	lsl.w	r2, r0, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b10      	cmp	r3, #16
 8002758:	d003      	beq.n	8002762 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800275e:	2b11      	cmp	r3, #17
 8002760:	d132      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a1d      	ldr	r2, [pc, #116]	; (80027dc <HAL_ADC_ConfigChannel+0x1e4>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d125      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d126      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002788:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2b10      	cmp	r3, #16
 8002790:	d11a      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002792:	4b13      	ldr	r3, [pc, #76]	; (80027e0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a13      	ldr	r2, [pc, #76]	; (80027e4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002798:	fba2 2303 	umull	r2, r3, r2, r3
 800279c:	0c9a      	lsrs	r2, r3, #18
 800279e:	4613      	mov	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027a8:	e002      	b.n	80027b0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	3b01      	subs	r3, #1
 80027ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f9      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x1b2>
 80027b6:	e007      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027bc:	f043 0220 	orr.w	r2, r3, #32
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr
 80027dc:	40012400 	.word	0x40012400
 80027e0:	20000004 	.word	0x20000004
 80027e4:	431bde83 	.word	0x431bde83

080027e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b01      	cmp	r3, #1
 8002804:	d040      	beq.n	8002888 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f042 0201 	orr.w	r2, r2, #1
 8002814:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002816:	4b1f      	ldr	r3, [pc, #124]	; (8002894 <ADC_Enable+0xac>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a1f      	ldr	r2, [pc, #124]	; (8002898 <ADC_Enable+0xb0>)
 800281c:	fba2 2303 	umull	r2, r3, r2, r3
 8002820:	0c9b      	lsrs	r3, r3, #18
 8002822:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002824:	e002      	b.n	800282c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	3b01      	subs	r3, #1
 800282a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f9      	bne.n	8002826 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002832:	f7ff fc09 	bl	8002048 <HAL_GetTick>
 8002836:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002838:	e01f      	b.n	800287a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800283a:	f7ff fc05 	bl	8002048 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d918      	bls.n	800287a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b01      	cmp	r3, #1
 8002854:	d011      	beq.n	800287a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285a:	f043 0210 	orr.w	r2, r3, #16
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002866:	f043 0201 	orr.w	r2, r3, #1
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e007      	b.n	800288a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b01      	cmp	r3, #1
 8002886:	d1d8      	bne.n	800283a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000004 	.word	0x20000004
 8002898:	431bde83 	.word	0x431bde83

0800289c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d12e      	bne.n	8002914 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0201 	bic.w	r2, r2, #1
 80028c4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028c6:	f7ff fbbf 	bl	8002048 <HAL_GetTick>
 80028ca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028cc:	e01b      	b.n	8002906 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80028ce:	f7ff fbbb 	bl	8002048 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d914      	bls.n	8002906 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d10d      	bne.n	8002906 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ee:	f043 0210 	orr.w	r2, r3, #16
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fa:	f043 0201 	orr.w	r2, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e007      	b.n	8002916 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b01      	cmp	r3, #1
 8002912:	d0dc      	beq.n	80028ce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002930:	4b0c      	ldr	r3, [pc, #48]	; (8002964 <__NVIC_SetPriorityGrouping+0x44>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800293c:	4013      	ands	r3, r2
 800293e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800294c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002952:	4a04      	ldr	r2, [pc, #16]	; (8002964 <__NVIC_SetPriorityGrouping+0x44>)
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	60d3      	str	r3, [r2, #12]
}
 8002958:	bf00      	nop
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800296c:	4b04      	ldr	r3, [pc, #16]	; (8002980 <__NVIC_GetPriorityGrouping+0x18>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	0a1b      	lsrs	r3, r3, #8
 8002972:	f003 0307 	and.w	r3, r3, #7
}
 8002976:	4618      	mov	r0, r3
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	6039      	str	r1, [r7, #0]
 800298e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002994:	2b00      	cmp	r3, #0
 8002996:	db0a      	blt.n	80029ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	b2da      	uxtb	r2, r3
 800299c:	490c      	ldr	r1, [pc, #48]	; (80029d0 <__NVIC_SetPriority+0x4c>)
 800299e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a2:	0112      	lsls	r2, r2, #4
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	440b      	add	r3, r1
 80029a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029ac:	e00a      	b.n	80029c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	4908      	ldr	r1, [pc, #32]	; (80029d4 <__NVIC_SetPriority+0x50>)
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	3b04      	subs	r3, #4
 80029bc:	0112      	lsls	r2, r2, #4
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	440b      	add	r3, r1
 80029c2:	761a      	strb	r2, [r3, #24]
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	e000e100 	.word	0xe000e100
 80029d4:	e000ed00 	.word	0xe000ed00

080029d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d8:	b480      	push	{r7}
 80029da:	b089      	sub	sp, #36	; 0x24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f1c3 0307 	rsb	r3, r3, #7
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	bf28      	it	cs
 80029f6:	2304      	movcs	r3, #4
 80029f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	3304      	adds	r3, #4
 80029fe:	2b06      	cmp	r3, #6
 8002a00:	d902      	bls.n	8002a08 <NVIC_EncodePriority+0x30>
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	3b03      	subs	r3, #3
 8002a06:	e000      	b.n	8002a0a <NVIC_EncodePriority+0x32>
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43da      	mvns	r2, r3
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a20:	f04f 31ff 	mov.w	r1, #4294967295
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2a:	43d9      	mvns	r1, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a30:	4313      	orrs	r3, r2
         );
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3724      	adds	r7, #36	; 0x24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr

08002a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a4c:	d301      	bcc.n	8002a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e00f      	b.n	8002a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a52:	4a0a      	ldr	r2, [pc, #40]	; (8002a7c <SysTick_Config+0x40>)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a5a:	210f      	movs	r1, #15
 8002a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a60:	f7ff ff90 	bl	8002984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a64:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <SysTick_Config+0x40>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a6a:	4b04      	ldr	r3, [pc, #16]	; (8002a7c <SysTick_Config+0x40>)
 8002a6c:	2207      	movs	r2, #7
 8002a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	e000e010 	.word	0xe000e010

08002a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7ff ff49 	bl	8002920 <__NVIC_SetPriorityGrouping>
}
 8002a8e:	bf00      	nop
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b086      	sub	sp, #24
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
 8002aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aa8:	f7ff ff5e 	bl	8002968 <__NVIC_GetPriorityGrouping>
 8002aac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	68b9      	ldr	r1, [r7, #8]
 8002ab2:	6978      	ldr	r0, [r7, #20]
 8002ab4:	f7ff ff90 	bl	80029d8 <NVIC_EncodePriority>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002abe:	4611      	mov	r1, r2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff ff5f 	bl	8002984 <__NVIC_SetPriority>
}
 8002ac6:	bf00      	nop
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff ffb0 	bl	8002a3c <SysTick_Config>
 8002adc:	4603      	mov	r3, r0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
	...

08002ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b08b      	sub	sp, #44	; 0x2c
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002af2:	2300      	movs	r3, #0
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002af6:	2300      	movs	r3, #0
 8002af8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002afa:	e179      	b.n	8002df0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002afc:	2201      	movs	r2, #1
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	69fa      	ldr	r2, [r7, #28]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	f040 8168 	bne.w	8002dea <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	4a96      	ldr	r2, [pc, #600]	; (8002d78 <HAL_GPIO_Init+0x290>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d05e      	beq.n	8002be2 <HAL_GPIO_Init+0xfa>
 8002b24:	4a94      	ldr	r2, [pc, #592]	; (8002d78 <HAL_GPIO_Init+0x290>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d875      	bhi.n	8002c16 <HAL_GPIO_Init+0x12e>
 8002b2a:	4a94      	ldr	r2, [pc, #592]	; (8002d7c <HAL_GPIO_Init+0x294>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d058      	beq.n	8002be2 <HAL_GPIO_Init+0xfa>
 8002b30:	4a92      	ldr	r2, [pc, #584]	; (8002d7c <HAL_GPIO_Init+0x294>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d86f      	bhi.n	8002c16 <HAL_GPIO_Init+0x12e>
 8002b36:	4a92      	ldr	r2, [pc, #584]	; (8002d80 <HAL_GPIO_Init+0x298>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d052      	beq.n	8002be2 <HAL_GPIO_Init+0xfa>
 8002b3c:	4a90      	ldr	r2, [pc, #576]	; (8002d80 <HAL_GPIO_Init+0x298>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d869      	bhi.n	8002c16 <HAL_GPIO_Init+0x12e>
 8002b42:	4a90      	ldr	r2, [pc, #576]	; (8002d84 <HAL_GPIO_Init+0x29c>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d04c      	beq.n	8002be2 <HAL_GPIO_Init+0xfa>
 8002b48:	4a8e      	ldr	r2, [pc, #568]	; (8002d84 <HAL_GPIO_Init+0x29c>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d863      	bhi.n	8002c16 <HAL_GPIO_Init+0x12e>
 8002b4e:	4a8e      	ldr	r2, [pc, #568]	; (8002d88 <HAL_GPIO_Init+0x2a0>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d046      	beq.n	8002be2 <HAL_GPIO_Init+0xfa>
 8002b54:	4a8c      	ldr	r2, [pc, #560]	; (8002d88 <HAL_GPIO_Init+0x2a0>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d85d      	bhi.n	8002c16 <HAL_GPIO_Init+0x12e>
 8002b5a:	2b12      	cmp	r3, #18
 8002b5c:	d82a      	bhi.n	8002bb4 <HAL_GPIO_Init+0xcc>
 8002b5e:	2b12      	cmp	r3, #18
 8002b60:	d859      	bhi.n	8002c16 <HAL_GPIO_Init+0x12e>
 8002b62:	a201      	add	r2, pc, #4	; (adr r2, 8002b68 <HAL_GPIO_Init+0x80>)
 8002b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b68:	08002be3 	.word	0x08002be3
 8002b6c:	08002bbd 	.word	0x08002bbd
 8002b70:	08002bcf 	.word	0x08002bcf
 8002b74:	08002c11 	.word	0x08002c11
 8002b78:	08002c17 	.word	0x08002c17
 8002b7c:	08002c17 	.word	0x08002c17
 8002b80:	08002c17 	.word	0x08002c17
 8002b84:	08002c17 	.word	0x08002c17
 8002b88:	08002c17 	.word	0x08002c17
 8002b8c:	08002c17 	.word	0x08002c17
 8002b90:	08002c17 	.word	0x08002c17
 8002b94:	08002c17 	.word	0x08002c17
 8002b98:	08002c17 	.word	0x08002c17
 8002b9c:	08002c17 	.word	0x08002c17
 8002ba0:	08002c17 	.word	0x08002c17
 8002ba4:	08002c17 	.word	0x08002c17
 8002ba8:	08002c17 	.word	0x08002c17
 8002bac:	08002bc5 	.word	0x08002bc5
 8002bb0:	08002bd9 	.word	0x08002bd9
 8002bb4:	4a75      	ldr	r2, [pc, #468]	; (8002d8c <HAL_GPIO_Init+0x2a4>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d013      	beq.n	8002be2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002bba:	e02c      	b.n	8002c16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	623b      	str	r3, [r7, #32]
          break;
 8002bc2:	e029      	b.n	8002c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	3304      	adds	r3, #4
 8002bca:	623b      	str	r3, [r7, #32]
          break;
 8002bcc:	e024      	b.n	8002c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	3308      	adds	r3, #8
 8002bd4:	623b      	str	r3, [r7, #32]
          break;
 8002bd6:	e01f      	b.n	8002c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	330c      	adds	r3, #12
 8002bde:	623b      	str	r3, [r7, #32]
          break;
 8002be0:	e01a      	b.n	8002c18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d102      	bne.n	8002bf0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002bea:	2304      	movs	r3, #4
 8002bec:	623b      	str	r3, [r7, #32]
          break;
 8002bee:	e013      	b.n	8002c18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d105      	bne.n	8002c04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bf8:	2308      	movs	r3, #8
 8002bfa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69fa      	ldr	r2, [r7, #28]
 8002c00:	611a      	str	r2, [r3, #16]
          break;
 8002c02:	e009      	b.n	8002c18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c04:	2308      	movs	r3, #8
 8002c06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	69fa      	ldr	r2, [r7, #28]
 8002c0c:	615a      	str	r2, [r3, #20]
          break;
 8002c0e:	e003      	b.n	8002c18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c10:	2300      	movs	r3, #0
 8002c12:	623b      	str	r3, [r7, #32]
          break;
 8002c14:	e000      	b.n	8002c18 <HAL_GPIO_Init+0x130>
          break;
 8002c16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	2bff      	cmp	r3, #255	; 0xff
 8002c1c:	d801      	bhi.n	8002c22 <HAL_GPIO_Init+0x13a>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	e001      	b.n	8002c26 <HAL_GPIO_Init+0x13e>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3304      	adds	r3, #4
 8002c26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	2bff      	cmp	r3, #255	; 0xff
 8002c2c:	d802      	bhi.n	8002c34 <HAL_GPIO_Init+0x14c>
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	e002      	b.n	8002c3a <HAL_GPIO_Init+0x152>
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	3b08      	subs	r3, #8
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	210f      	movs	r1, #15
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	fa01 f303 	lsl.w	r3, r1, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	401a      	ands	r2, r3
 8002c4c:	6a39      	ldr	r1, [r7, #32]
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	fa01 f303 	lsl.w	r3, r1, r3
 8002c54:	431a      	orrs	r2, r3
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 80c1 	beq.w	8002dea <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c68:	4b49      	ldr	r3, [pc, #292]	; (8002d90 <HAL_GPIO_Init+0x2a8>)
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	4a48      	ldr	r2, [pc, #288]	; (8002d90 <HAL_GPIO_Init+0x2a8>)
 8002c6e:	f043 0301 	orr.w	r3, r3, #1
 8002c72:	6193      	str	r3, [r2, #24]
 8002c74:	4b46      	ldr	r3, [pc, #280]	; (8002d90 <HAL_GPIO_Init+0x2a8>)
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	60bb      	str	r3, [r7, #8]
 8002c7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c80:	4a44      	ldr	r2, [pc, #272]	; (8002d94 <HAL_GPIO_Init+0x2ac>)
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	089b      	lsrs	r3, r3, #2
 8002c86:	3302      	adds	r3, #2
 8002c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c90:	f003 0303 	and.w	r3, r3, #3
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	220f      	movs	r2, #15
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a3c      	ldr	r2, [pc, #240]	; (8002d98 <HAL_GPIO_Init+0x2b0>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d01f      	beq.n	8002cec <HAL_GPIO_Init+0x204>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a3b      	ldr	r2, [pc, #236]	; (8002d9c <HAL_GPIO_Init+0x2b4>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d019      	beq.n	8002ce8 <HAL_GPIO_Init+0x200>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a3a      	ldr	r2, [pc, #232]	; (8002da0 <HAL_GPIO_Init+0x2b8>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d013      	beq.n	8002ce4 <HAL_GPIO_Init+0x1fc>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a39      	ldr	r2, [pc, #228]	; (8002da4 <HAL_GPIO_Init+0x2bc>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d00d      	beq.n	8002ce0 <HAL_GPIO_Init+0x1f8>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a38      	ldr	r2, [pc, #224]	; (8002da8 <HAL_GPIO_Init+0x2c0>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d007      	beq.n	8002cdc <HAL_GPIO_Init+0x1f4>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a37      	ldr	r2, [pc, #220]	; (8002dac <HAL_GPIO_Init+0x2c4>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d101      	bne.n	8002cd8 <HAL_GPIO_Init+0x1f0>
 8002cd4:	2305      	movs	r3, #5
 8002cd6:	e00a      	b.n	8002cee <HAL_GPIO_Init+0x206>
 8002cd8:	2306      	movs	r3, #6
 8002cda:	e008      	b.n	8002cee <HAL_GPIO_Init+0x206>
 8002cdc:	2304      	movs	r3, #4
 8002cde:	e006      	b.n	8002cee <HAL_GPIO_Init+0x206>
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e004      	b.n	8002cee <HAL_GPIO_Init+0x206>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	e002      	b.n	8002cee <HAL_GPIO_Init+0x206>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <HAL_GPIO_Init+0x206>
 8002cec:	2300      	movs	r3, #0
 8002cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf0:	f002 0203 	and.w	r2, r2, #3
 8002cf4:	0092      	lsls	r2, r2, #2
 8002cf6:	4093      	lsls	r3, r2
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002cfe:	4925      	ldr	r1, [pc, #148]	; (8002d94 <HAL_GPIO_Init+0x2ac>)
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	089b      	lsrs	r3, r3, #2
 8002d04:	3302      	adds	r3, #2
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d006      	beq.n	8002d26 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d18:	4b25      	ldr	r3, [pc, #148]	; (8002db0 <HAL_GPIO_Init+0x2c8>)
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	4924      	ldr	r1, [pc, #144]	; (8002db0 <HAL_GPIO_Init+0x2c8>)
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	608b      	str	r3, [r1, #8]
 8002d24:	e006      	b.n	8002d34 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d26:	4b22      	ldr	r3, [pc, #136]	; (8002db0 <HAL_GPIO_Init+0x2c8>)
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	4920      	ldr	r1, [pc, #128]	; (8002db0 <HAL_GPIO_Init+0x2c8>)
 8002d30:	4013      	ands	r3, r2
 8002d32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d006      	beq.n	8002d4e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d40:	4b1b      	ldr	r3, [pc, #108]	; (8002db0 <HAL_GPIO_Init+0x2c8>)
 8002d42:	68da      	ldr	r2, [r3, #12]
 8002d44:	491a      	ldr	r1, [pc, #104]	; (8002db0 <HAL_GPIO_Init+0x2c8>)
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	60cb      	str	r3, [r1, #12]
 8002d4c:	e006      	b.n	8002d5c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d4e:	4b18      	ldr	r3, [pc, #96]	; (8002db0 <HAL_GPIO_Init+0x2c8>)
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	43db      	mvns	r3, r3
 8002d56:	4916      	ldr	r1, [pc, #88]	; (8002db0 <HAL_GPIO_Init+0x2c8>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d025      	beq.n	8002db4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d68:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <HAL_GPIO_Init+0x2c8>)
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	4910      	ldr	r1, [pc, #64]	; (8002db0 <HAL_GPIO_Init+0x2c8>)
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	604b      	str	r3, [r1, #4]
 8002d74:	e025      	b.n	8002dc2 <HAL_GPIO_Init+0x2da>
 8002d76:	bf00      	nop
 8002d78:	10320000 	.word	0x10320000
 8002d7c:	10310000 	.word	0x10310000
 8002d80:	10220000 	.word	0x10220000
 8002d84:	10210000 	.word	0x10210000
 8002d88:	10120000 	.word	0x10120000
 8002d8c:	10110000 	.word	0x10110000
 8002d90:	40021000 	.word	0x40021000
 8002d94:	40010000 	.word	0x40010000
 8002d98:	40010800 	.word	0x40010800
 8002d9c:	40010c00 	.word	0x40010c00
 8002da0:	40011000 	.word	0x40011000
 8002da4:	40011400 	.word	0x40011400
 8002da8:	40011800 	.word	0x40011800
 8002dac:	40011c00 	.word	0x40011c00
 8002db0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002db4:	4b15      	ldr	r3, [pc, #84]	; (8002e0c <HAL_GPIO_Init+0x324>)
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	43db      	mvns	r3, r3
 8002dbc:	4913      	ldr	r1, [pc, #76]	; (8002e0c <HAL_GPIO_Init+0x324>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d006      	beq.n	8002ddc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002dce:	4b0f      	ldr	r3, [pc, #60]	; (8002e0c <HAL_GPIO_Init+0x324>)
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	490e      	ldr	r1, [pc, #56]	; (8002e0c <HAL_GPIO_Init+0x324>)
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	600b      	str	r3, [r1, #0]
 8002dda:	e006      	b.n	8002dea <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <HAL_GPIO_Init+0x324>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	43db      	mvns	r3, r3
 8002de4:	4909      	ldr	r1, [pc, #36]	; (8002e0c <HAL_GPIO_Init+0x324>)
 8002de6:	4013      	ands	r3, r2
 8002de8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	3301      	adds	r3, #1
 8002dee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f47f ae7e 	bne.w	8002afc <HAL_GPIO_Init+0x14>
  }
}
 8002e00:	bf00      	nop
 8002e02:	bf00      	nop
 8002e04:	372c      	adds	r7, #44	; 0x2c
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr
 8002e0c:	40010400 	.word	0x40010400

08002e10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e272      	b.n	8003308 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 8087 	beq.w	8002f3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e30:	4b92      	ldr	r3, [pc, #584]	; (800307c <HAL_RCC_OscConfig+0x26c>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 030c 	and.w	r3, r3, #12
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d00c      	beq.n	8002e56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e3c:	4b8f      	ldr	r3, [pc, #572]	; (800307c <HAL_RCC_OscConfig+0x26c>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 030c 	and.w	r3, r3, #12
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d112      	bne.n	8002e6e <HAL_RCC_OscConfig+0x5e>
 8002e48:	4b8c      	ldr	r3, [pc, #560]	; (800307c <HAL_RCC_OscConfig+0x26c>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e54:	d10b      	bne.n	8002e6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e56:	4b89      	ldr	r3, [pc, #548]	; (800307c <HAL_RCC_OscConfig+0x26c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d06c      	beq.n	8002f3c <HAL_RCC_OscConfig+0x12c>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d168      	bne.n	8002f3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e24c      	b.n	8003308 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e76:	d106      	bne.n	8002e86 <HAL_RCC_OscConfig+0x76>
 8002e78:	4b80      	ldr	r3, [pc, #512]	; (800307c <HAL_RCC_OscConfig+0x26c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a7f      	ldr	r2, [pc, #508]	; (800307c <HAL_RCC_OscConfig+0x26c>)
 8002e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e82:	6013      	str	r3, [r2, #0]
 8002e84:	e02e      	b.n	8002ee4 <HAL_RCC_OscConfig+0xd4>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10c      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x98>
 8002e8e:	4b7b      	ldr	r3, [pc, #492]	; (800307c <HAL_RCC_OscConfig+0x26c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a7a      	ldr	r2, [pc, #488]	; (800307c <HAL_RCC_OscConfig+0x26c>)
 8002e94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	4b78      	ldr	r3, [pc, #480]	; (800307c <HAL_RCC_OscConfig+0x26c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a77      	ldr	r2, [pc, #476]	; (800307c <HAL_RCC_OscConfig+0x26c>)
 8002ea0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	e01d      	b.n	8002ee4 <HAL_RCC_OscConfig+0xd4>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eb0:	d10c      	bne.n	8002ecc <HAL_RCC_OscConfig+0xbc>
 8002eb2:	4b72      	ldr	r3, [pc, #456]	; (800307c <HAL_RCC_OscConfig+0x26c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a71      	ldr	r2, [pc, #452]	; (800307c <HAL_RCC_OscConfig+0x26c>)
 8002eb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	4b6f      	ldr	r3, [pc, #444]	; (800307c <HAL_RCC_OscConfig+0x26c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a6e      	ldr	r2, [pc, #440]	; (800307c <HAL_RCC_OscConfig+0x26c>)
 8002ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	e00b      	b.n	8002ee4 <HAL_RCC_OscConfig+0xd4>
 8002ecc:	4b6b      	ldr	r3, [pc, #428]	; (800307c <HAL_RCC_OscConfig+0x26c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a6a      	ldr	r2, [pc, #424]	; (800307c <HAL_RCC_OscConfig+0x26c>)
 8002ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ed6:	6013      	str	r3, [r2, #0]
 8002ed8:	4b68      	ldr	r3, [pc, #416]	; (800307c <HAL_RCC_OscConfig+0x26c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a67      	ldr	r2, [pc, #412]	; (800307c <HAL_RCC_OscConfig+0x26c>)
 8002ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ee2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d013      	beq.n	8002f14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eec:	f7ff f8ac 	bl	8002048 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ef4:	f7ff f8a8 	bl	8002048 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b64      	cmp	r3, #100	; 0x64
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e200      	b.n	8003308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f06:	4b5d      	ldr	r3, [pc, #372]	; (800307c <HAL_RCC_OscConfig+0x26c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0f0      	beq.n	8002ef4 <HAL_RCC_OscConfig+0xe4>
 8002f12:	e014      	b.n	8002f3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f14:	f7ff f898 	bl	8002048 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f1c:	f7ff f894 	bl	8002048 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b64      	cmp	r3, #100	; 0x64
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e1ec      	b.n	8003308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f2e:	4b53      	ldr	r3, [pc, #332]	; (800307c <HAL_RCC_OscConfig+0x26c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x10c>
 8002f3a:	e000      	b.n	8002f3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d063      	beq.n	8003012 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f4a:	4b4c      	ldr	r3, [pc, #304]	; (800307c <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f003 030c 	and.w	r3, r3, #12
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00b      	beq.n	8002f6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f56:	4b49      	ldr	r3, [pc, #292]	; (800307c <HAL_RCC_OscConfig+0x26c>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f003 030c 	and.w	r3, r3, #12
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d11c      	bne.n	8002f9c <HAL_RCC_OscConfig+0x18c>
 8002f62:	4b46      	ldr	r3, [pc, #280]	; (800307c <HAL_RCC_OscConfig+0x26c>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d116      	bne.n	8002f9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f6e:	4b43      	ldr	r3, [pc, #268]	; (800307c <HAL_RCC_OscConfig+0x26c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d005      	beq.n	8002f86 <HAL_RCC_OscConfig+0x176>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d001      	beq.n	8002f86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e1c0      	b.n	8003308 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f86:	4b3d      	ldr	r3, [pc, #244]	; (800307c <HAL_RCC_OscConfig+0x26c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	4939      	ldr	r1, [pc, #228]	; (800307c <HAL_RCC_OscConfig+0x26c>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f9a:	e03a      	b.n	8003012 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d020      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fa4:	4b36      	ldr	r3, [pc, #216]	; (8003080 <HAL_RCC_OscConfig+0x270>)
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002faa:	f7ff f84d 	bl	8002048 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fb2:	f7ff f849 	bl	8002048 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e1a1      	b.n	8003308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc4:	4b2d      	ldr	r3, [pc, #180]	; (800307c <HAL_RCC_OscConfig+0x26c>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0f0      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd0:	4b2a      	ldr	r3, [pc, #168]	; (800307c <HAL_RCC_OscConfig+0x26c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	4927      	ldr	r1, [pc, #156]	; (800307c <HAL_RCC_OscConfig+0x26c>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	600b      	str	r3, [r1, #0]
 8002fe4:	e015      	b.n	8003012 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fe6:	4b26      	ldr	r3, [pc, #152]	; (8003080 <HAL_RCC_OscConfig+0x270>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fec:	f7ff f82c 	bl	8002048 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ff4:	f7ff f828 	bl	8002048 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e180      	b.n	8003308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003006:	4b1d      	ldr	r3, [pc, #116]	; (800307c <HAL_RCC_OscConfig+0x26c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f0      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b00      	cmp	r3, #0
 800301c:	d03a      	beq.n	8003094 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d019      	beq.n	800305a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003026:	4b17      	ldr	r3, [pc, #92]	; (8003084 <HAL_RCC_OscConfig+0x274>)
 8003028:	2201      	movs	r2, #1
 800302a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800302c:	f7ff f80c 	bl	8002048 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003034:	f7ff f808 	bl	8002048 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e160      	b.n	8003308 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003046:	4b0d      	ldr	r3, [pc, #52]	; (800307c <HAL_RCC_OscConfig+0x26c>)
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f0      	beq.n	8003034 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003052:	2001      	movs	r0, #1
 8003054:	f000 face 	bl	80035f4 <RCC_Delay>
 8003058:	e01c      	b.n	8003094 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800305a:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <HAL_RCC_OscConfig+0x274>)
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003060:	f7fe fff2 	bl	8002048 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003066:	e00f      	b.n	8003088 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003068:	f7fe ffee 	bl	8002048 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d908      	bls.n	8003088 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e146      	b.n	8003308 <HAL_RCC_OscConfig+0x4f8>
 800307a:	bf00      	nop
 800307c:	40021000 	.word	0x40021000
 8003080:	42420000 	.word	0x42420000
 8003084:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003088:	4b92      	ldr	r3, [pc, #584]	; (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1e9      	bne.n	8003068 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 80a6 	beq.w	80031ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030a2:	2300      	movs	r3, #0
 80030a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030a6:	4b8b      	ldr	r3, [pc, #556]	; (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10d      	bne.n	80030ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030b2:	4b88      	ldr	r3, [pc, #544]	; (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	4a87      	ldr	r2, [pc, #540]	; (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 80030b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030bc:	61d3      	str	r3, [r2, #28]
 80030be:	4b85      	ldr	r3, [pc, #532]	; (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c6:	60bb      	str	r3, [r7, #8]
 80030c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ca:	2301      	movs	r3, #1
 80030cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ce:	4b82      	ldr	r3, [pc, #520]	; (80032d8 <HAL_RCC_OscConfig+0x4c8>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d118      	bne.n	800310c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030da:	4b7f      	ldr	r3, [pc, #508]	; (80032d8 <HAL_RCC_OscConfig+0x4c8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a7e      	ldr	r2, [pc, #504]	; (80032d8 <HAL_RCC_OscConfig+0x4c8>)
 80030e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030e6:	f7fe ffaf 	bl	8002048 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ee:	f7fe ffab 	bl	8002048 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b64      	cmp	r3, #100	; 0x64
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e103      	b.n	8003308 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003100:	4b75      	ldr	r3, [pc, #468]	; (80032d8 <HAL_RCC_OscConfig+0x4c8>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0f0      	beq.n	80030ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d106      	bne.n	8003122 <HAL_RCC_OscConfig+0x312>
 8003114:	4b6f      	ldr	r3, [pc, #444]	; (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	4a6e      	ldr	r2, [pc, #440]	; (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 800311a:	f043 0301 	orr.w	r3, r3, #1
 800311e:	6213      	str	r3, [r2, #32]
 8003120:	e02d      	b.n	800317e <HAL_RCC_OscConfig+0x36e>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10c      	bne.n	8003144 <HAL_RCC_OscConfig+0x334>
 800312a:	4b6a      	ldr	r3, [pc, #424]	; (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	4a69      	ldr	r2, [pc, #420]	; (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 8003130:	f023 0301 	bic.w	r3, r3, #1
 8003134:	6213      	str	r3, [r2, #32]
 8003136:	4b67      	ldr	r3, [pc, #412]	; (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	4a66      	ldr	r2, [pc, #408]	; (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 800313c:	f023 0304 	bic.w	r3, r3, #4
 8003140:	6213      	str	r3, [r2, #32]
 8003142:	e01c      	b.n	800317e <HAL_RCC_OscConfig+0x36e>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	2b05      	cmp	r3, #5
 800314a:	d10c      	bne.n	8003166 <HAL_RCC_OscConfig+0x356>
 800314c:	4b61      	ldr	r3, [pc, #388]	; (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	4a60      	ldr	r2, [pc, #384]	; (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 8003152:	f043 0304 	orr.w	r3, r3, #4
 8003156:	6213      	str	r3, [r2, #32]
 8003158:	4b5e      	ldr	r3, [pc, #376]	; (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	4a5d      	ldr	r2, [pc, #372]	; (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	6213      	str	r3, [r2, #32]
 8003164:	e00b      	b.n	800317e <HAL_RCC_OscConfig+0x36e>
 8003166:	4b5b      	ldr	r3, [pc, #364]	; (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	4a5a      	ldr	r2, [pc, #360]	; (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 800316c:	f023 0301 	bic.w	r3, r3, #1
 8003170:	6213      	str	r3, [r2, #32]
 8003172:	4b58      	ldr	r3, [pc, #352]	; (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	4a57      	ldr	r2, [pc, #348]	; (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 8003178:	f023 0304 	bic.w	r3, r3, #4
 800317c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d015      	beq.n	80031b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003186:	f7fe ff5f 	bl	8002048 <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800318c:	e00a      	b.n	80031a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800318e:	f7fe ff5b 	bl	8002048 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	f241 3288 	movw	r2, #5000	; 0x1388
 800319c:	4293      	cmp	r3, r2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e0b1      	b.n	8003308 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a4:	4b4b      	ldr	r3, [pc, #300]	; (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0ee      	beq.n	800318e <HAL_RCC_OscConfig+0x37e>
 80031b0:	e014      	b.n	80031dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b2:	f7fe ff49 	bl	8002048 <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b8:	e00a      	b.n	80031d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ba:	f7fe ff45 	bl	8002048 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e09b      	b.n	8003308 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031d0:	4b40      	ldr	r3, [pc, #256]	; (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1ee      	bne.n	80031ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031dc:	7dfb      	ldrb	r3, [r7, #23]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d105      	bne.n	80031ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e2:	4b3c      	ldr	r3, [pc, #240]	; (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	4a3b      	ldr	r2, [pc, #236]	; (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 80031e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 8087 	beq.w	8003306 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031f8:	4b36      	ldr	r3, [pc, #216]	; (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f003 030c 	and.w	r3, r3, #12
 8003200:	2b08      	cmp	r3, #8
 8003202:	d061      	beq.n	80032c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	69db      	ldr	r3, [r3, #28]
 8003208:	2b02      	cmp	r3, #2
 800320a:	d146      	bne.n	800329a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800320c:	4b33      	ldr	r3, [pc, #204]	; (80032dc <HAL_RCC_OscConfig+0x4cc>)
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003212:	f7fe ff19 	bl	8002048 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003218:	e008      	b.n	800322c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800321a:	f7fe ff15 	bl	8002048 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e06d      	b.n	8003308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800322c:	4b29      	ldr	r3, [pc, #164]	; (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1f0      	bne.n	800321a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003240:	d108      	bne.n	8003254 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003242:	4b24      	ldr	r3, [pc, #144]	; (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	4921      	ldr	r1, [pc, #132]	; (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 8003250:	4313      	orrs	r3, r2
 8003252:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003254:	4b1f      	ldr	r3, [pc, #124]	; (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a19      	ldr	r1, [r3, #32]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	430b      	orrs	r3, r1
 8003266:	491b      	ldr	r1, [pc, #108]	; (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 8003268:	4313      	orrs	r3, r2
 800326a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800326c:	4b1b      	ldr	r3, [pc, #108]	; (80032dc <HAL_RCC_OscConfig+0x4cc>)
 800326e:	2201      	movs	r2, #1
 8003270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003272:	f7fe fee9 	bl	8002048 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800327a:	f7fe fee5 	bl	8002048 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e03d      	b.n	8003308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800328c:	4b11      	ldr	r3, [pc, #68]	; (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0f0      	beq.n	800327a <HAL_RCC_OscConfig+0x46a>
 8003298:	e035      	b.n	8003306 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800329a:	4b10      	ldr	r3, [pc, #64]	; (80032dc <HAL_RCC_OscConfig+0x4cc>)
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a0:	f7fe fed2 	bl	8002048 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a8:	f7fe fece 	bl	8002048 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e026      	b.n	8003308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ba:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f0      	bne.n	80032a8 <HAL_RCC_OscConfig+0x498>
 80032c6:	e01e      	b.n	8003306 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d107      	bne.n	80032e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e019      	b.n	8003308 <HAL_RCC_OscConfig+0x4f8>
 80032d4:	40021000 	.word	0x40021000
 80032d8:	40007000 	.word	0x40007000
 80032dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032e0:	4b0b      	ldr	r3, [pc, #44]	; (8003310 <HAL_RCC_OscConfig+0x500>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d106      	bne.n	8003302 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fe:	429a      	cmp	r2, r3
 8003300:	d001      	beq.n	8003306 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e000      	b.n	8003308 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3718      	adds	r7, #24
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40021000 	.word	0x40021000

08003314 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e0d0      	b.n	80034ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003328:	4b6a      	ldr	r3, [pc, #424]	; (80034d4 <HAL_RCC_ClockConfig+0x1c0>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	429a      	cmp	r2, r3
 8003334:	d910      	bls.n	8003358 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003336:	4b67      	ldr	r3, [pc, #412]	; (80034d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f023 0207 	bic.w	r2, r3, #7
 800333e:	4965      	ldr	r1, [pc, #404]	; (80034d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	4313      	orrs	r3, r2
 8003344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003346:	4b63      	ldr	r3, [pc, #396]	; (80034d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d001      	beq.n	8003358 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e0b8      	b.n	80034ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d020      	beq.n	80033a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b00      	cmp	r3, #0
 800336e:	d005      	beq.n	800337c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003370:	4b59      	ldr	r3, [pc, #356]	; (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	4a58      	ldr	r2, [pc, #352]	; (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003376:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800337a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0308 	and.w	r3, r3, #8
 8003384:	2b00      	cmp	r3, #0
 8003386:	d005      	beq.n	8003394 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003388:	4b53      	ldr	r3, [pc, #332]	; (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	4a52      	ldr	r2, [pc, #328]	; (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 800338e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003392:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003394:	4b50      	ldr	r3, [pc, #320]	; (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	494d      	ldr	r1, [pc, #308]	; (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d040      	beq.n	8003434 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d107      	bne.n	80033ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ba:	4b47      	ldr	r3, [pc, #284]	; (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d115      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e07f      	b.n	80034ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d107      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d2:	4b41      	ldr	r3, [pc, #260]	; (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d109      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e073      	b.n	80034ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e2:	4b3d      	ldr	r3, [pc, #244]	; (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e06b      	b.n	80034ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033f2:	4b39      	ldr	r3, [pc, #228]	; (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f023 0203 	bic.w	r2, r3, #3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	4936      	ldr	r1, [pc, #216]	; (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003400:	4313      	orrs	r3, r2
 8003402:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003404:	f7fe fe20 	bl	8002048 <HAL_GetTick>
 8003408:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340a:	e00a      	b.n	8003422 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800340c:	f7fe fe1c 	bl	8002048 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	f241 3288 	movw	r2, #5000	; 0x1388
 800341a:	4293      	cmp	r3, r2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e053      	b.n	80034ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003422:	4b2d      	ldr	r3, [pc, #180]	; (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f003 020c 	and.w	r2, r3, #12
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	429a      	cmp	r2, r3
 8003432:	d1eb      	bne.n	800340c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003434:	4b27      	ldr	r3, [pc, #156]	; (80034d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d210      	bcs.n	8003464 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003442:	4b24      	ldr	r3, [pc, #144]	; (80034d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f023 0207 	bic.w	r2, r3, #7
 800344a:	4922      	ldr	r1, [pc, #136]	; (80034d4 <HAL_RCC_ClockConfig+0x1c0>)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	4313      	orrs	r3, r2
 8003450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003452:	4b20      	ldr	r3, [pc, #128]	; (80034d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	429a      	cmp	r2, r3
 800345e:	d001      	beq.n	8003464 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e032      	b.n	80034ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	d008      	beq.n	8003482 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003470:	4b19      	ldr	r3, [pc, #100]	; (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	4916      	ldr	r1, [pc, #88]	; (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 800347e:	4313      	orrs	r3, r2
 8003480:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0308 	and.w	r3, r3, #8
 800348a:	2b00      	cmp	r3, #0
 800348c:	d009      	beq.n	80034a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800348e:	4b12      	ldr	r3, [pc, #72]	; (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	490e      	ldr	r1, [pc, #56]	; (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034a2:	f000 f821 	bl	80034e8 <HAL_RCC_GetSysClockFreq>
 80034a6:	4602      	mov	r2, r0
 80034a8:	4b0b      	ldr	r3, [pc, #44]	; (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	091b      	lsrs	r3, r3, #4
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	490a      	ldr	r1, [pc, #40]	; (80034dc <HAL_RCC_ClockConfig+0x1c8>)
 80034b4:	5ccb      	ldrb	r3, [r1, r3]
 80034b6:	fa22 f303 	lsr.w	r3, r2, r3
 80034ba:	4a09      	ldr	r2, [pc, #36]	; (80034e0 <HAL_RCC_ClockConfig+0x1cc>)
 80034bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034be:	4b09      	ldr	r3, [pc, #36]	; (80034e4 <HAL_RCC_ClockConfig+0x1d0>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fe fd7e 	bl	8001fc4 <HAL_InitTick>

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40022000 	.word	0x40022000
 80034d8:	40021000 	.word	0x40021000
 80034dc:	08009c8c 	.word	0x08009c8c
 80034e0:	20000004 	.word	0x20000004
 80034e4:	20000008 	.word	0x20000008

080034e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	2300      	movs	r3, #0
 80034f4:	60bb      	str	r3, [r7, #8]
 80034f6:	2300      	movs	r3, #0
 80034f8:	617b      	str	r3, [r7, #20]
 80034fa:	2300      	movs	r3, #0
 80034fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034fe:	2300      	movs	r3, #0
 8003500:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003502:	4b1e      	ldr	r3, [pc, #120]	; (800357c <HAL_RCC_GetSysClockFreq+0x94>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f003 030c 	and.w	r3, r3, #12
 800350e:	2b04      	cmp	r3, #4
 8003510:	d002      	beq.n	8003518 <HAL_RCC_GetSysClockFreq+0x30>
 8003512:	2b08      	cmp	r3, #8
 8003514:	d003      	beq.n	800351e <HAL_RCC_GetSysClockFreq+0x36>
 8003516:	e027      	b.n	8003568 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003518:	4b19      	ldr	r3, [pc, #100]	; (8003580 <HAL_RCC_GetSysClockFreq+0x98>)
 800351a:	613b      	str	r3, [r7, #16]
      break;
 800351c:	e027      	b.n	800356e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	0c9b      	lsrs	r3, r3, #18
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	4a17      	ldr	r2, [pc, #92]	; (8003584 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003528:	5cd3      	ldrb	r3, [r2, r3]
 800352a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d010      	beq.n	8003558 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003536:	4b11      	ldr	r3, [pc, #68]	; (800357c <HAL_RCC_GetSysClockFreq+0x94>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	0c5b      	lsrs	r3, r3, #17
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	4a11      	ldr	r2, [pc, #68]	; (8003588 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003542:	5cd3      	ldrb	r3, [r2, r3]
 8003544:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a0d      	ldr	r2, [pc, #52]	; (8003580 <HAL_RCC_GetSysClockFreq+0x98>)
 800354a:	fb03 f202 	mul.w	r2, r3, r2
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	fbb2 f3f3 	udiv	r3, r2, r3
 8003554:	617b      	str	r3, [r7, #20]
 8003556:	e004      	b.n	8003562 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a0c      	ldr	r2, [pc, #48]	; (800358c <HAL_RCC_GetSysClockFreq+0xa4>)
 800355c:	fb02 f303 	mul.w	r3, r2, r3
 8003560:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	613b      	str	r3, [r7, #16]
      break;
 8003566:	e002      	b.n	800356e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003568:	4b05      	ldr	r3, [pc, #20]	; (8003580 <HAL_RCC_GetSysClockFreq+0x98>)
 800356a:	613b      	str	r3, [r7, #16]
      break;
 800356c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800356e:	693b      	ldr	r3, [r7, #16]
}
 8003570:	4618      	mov	r0, r3
 8003572:	371c      	adds	r7, #28
 8003574:	46bd      	mov	sp, r7
 8003576:	bc80      	pop	{r7}
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	40021000 	.word	0x40021000
 8003580:	007a1200 	.word	0x007a1200
 8003584:	08009ca4 	.word	0x08009ca4
 8003588:	08009cb4 	.word	0x08009cb4
 800358c:	003d0900 	.word	0x003d0900

08003590 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003594:	4b02      	ldr	r3, [pc, #8]	; (80035a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003596:	681b      	ldr	r3, [r3, #0]
}
 8003598:	4618      	mov	r0, r3
 800359a:	46bd      	mov	sp, r7
 800359c:	bc80      	pop	{r7}
 800359e:	4770      	bx	lr
 80035a0:	20000004 	.word	0x20000004

080035a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035a8:	f7ff fff2 	bl	8003590 <HAL_RCC_GetHCLKFreq>
 80035ac:	4602      	mov	r2, r0
 80035ae:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	0a1b      	lsrs	r3, r3, #8
 80035b4:	f003 0307 	and.w	r3, r3, #7
 80035b8:	4903      	ldr	r1, [pc, #12]	; (80035c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035ba:	5ccb      	ldrb	r3, [r1, r3]
 80035bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40021000 	.word	0x40021000
 80035c8:	08009c9c 	.word	0x08009c9c

080035cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035d0:	f7ff ffde 	bl	8003590 <HAL_RCC_GetHCLKFreq>
 80035d4:	4602      	mov	r2, r0
 80035d6:	4b05      	ldr	r3, [pc, #20]	; (80035ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	0adb      	lsrs	r3, r3, #11
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	4903      	ldr	r1, [pc, #12]	; (80035f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035e2:	5ccb      	ldrb	r3, [r1, r3]
 80035e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40021000 	.word	0x40021000
 80035f0:	08009c9c 	.word	0x08009c9c

080035f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035fc:	4b0a      	ldr	r3, [pc, #40]	; (8003628 <RCC_Delay+0x34>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a0a      	ldr	r2, [pc, #40]	; (800362c <RCC_Delay+0x38>)
 8003602:	fba2 2303 	umull	r2, r3, r2, r3
 8003606:	0a5b      	lsrs	r3, r3, #9
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	fb02 f303 	mul.w	r3, r2, r3
 800360e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003610:	bf00      	nop
  }
  while (Delay --);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	1e5a      	subs	r2, r3, #1
 8003616:	60fa      	str	r2, [r7, #12]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1f9      	bne.n	8003610 <RCC_Delay+0x1c>
}
 800361c:	bf00      	nop
 800361e:	bf00      	nop
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	bc80      	pop	{r7}
 8003626:	4770      	bx	lr
 8003628:	20000004 	.word	0x20000004
 800362c:	10624dd3 	.word	0x10624dd3

08003630 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003638:	2300      	movs	r3, #0
 800363a:	613b      	str	r3, [r7, #16]
 800363c:	2300      	movs	r3, #0
 800363e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b00      	cmp	r3, #0
 800364a:	d07d      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800364c:	2300      	movs	r3, #0
 800364e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003650:	4b4f      	ldr	r3, [pc, #316]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10d      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800365c:	4b4c      	ldr	r3, [pc, #304]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800365e:	69db      	ldr	r3, [r3, #28]
 8003660:	4a4b      	ldr	r2, [pc, #300]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003666:	61d3      	str	r3, [r2, #28]
 8003668:	4b49      	ldr	r3, [pc, #292]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800366a:	69db      	ldr	r3, [r3, #28]
 800366c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003670:	60bb      	str	r3, [r7, #8]
 8003672:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003674:	2301      	movs	r3, #1
 8003676:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003678:	4b46      	ldr	r3, [pc, #280]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003680:	2b00      	cmp	r3, #0
 8003682:	d118      	bne.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003684:	4b43      	ldr	r3, [pc, #268]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a42      	ldr	r2, [pc, #264]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800368a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800368e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003690:	f7fe fcda 	bl	8002048 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003696:	e008      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003698:	f7fe fcd6 	bl	8002048 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b64      	cmp	r3, #100	; 0x64
 80036a4:	d901      	bls.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e06d      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036aa:	4b3a      	ldr	r3, [pc, #232]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0f0      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036b6:	4b36      	ldr	r3, [pc, #216]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036be:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d02e      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d027      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036d4:	4b2e      	ldr	r3, [pc, #184]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036dc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036de:	4b2e      	ldr	r3, [pc, #184]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036e0:	2201      	movs	r2, #1
 80036e2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036e4:	4b2c      	ldr	r3, [pc, #176]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036ea:	4a29      	ldr	r2, [pc, #164]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d014      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fa:	f7fe fca5 	bl	8002048 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003700:	e00a      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003702:	f7fe fca1 	bl	8002048 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003710:	4293      	cmp	r3, r2
 8003712:	d901      	bls.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e036      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003718:	4b1d      	ldr	r3, [pc, #116]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0ee      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003724:	4b1a      	ldr	r3, [pc, #104]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	4917      	ldr	r1, [pc, #92]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003732:	4313      	orrs	r3, r2
 8003734:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003736:	7dfb      	ldrb	r3, [r7, #23]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d105      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800373c:	4b14      	ldr	r3, [pc, #80]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	4a13      	ldr	r2, [pc, #76]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003742:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003746:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d008      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003754:	4b0e      	ldr	r3, [pc, #56]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	490b      	ldr	r1, [pc, #44]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003762:	4313      	orrs	r3, r2
 8003764:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0310 	and.w	r3, r3, #16
 800376e:	2b00      	cmp	r3, #0
 8003770:	d008      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003772:	4b07      	ldr	r3, [pc, #28]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	4904      	ldr	r1, [pc, #16]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003780:	4313      	orrs	r3, r2
 8003782:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3718      	adds	r7, #24
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40021000 	.word	0x40021000
 8003794:	40007000 	.word	0x40007000
 8003798:	42420440 	.word	0x42420440

0800379c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b088      	sub	sp, #32
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	2300      	movs	r3, #0
 80037aa:	61fb      	str	r3, [r7, #28]
 80037ac:	2300      	movs	r3, #0
 80037ae:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	2300      	movs	r3, #0
 80037b6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	2b0f      	cmp	r3, #15
 80037be:	f200 80af 	bhi.w	8003920 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 80037c2:	a201      	add	r2, pc, #4	; (adr r2, 80037c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80037c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c8:	0800389f 	.word	0x0800389f
 80037cc:	08003905 	.word	0x08003905
 80037d0:	08003921 	.word	0x08003921
 80037d4:	0800388f 	.word	0x0800388f
 80037d8:	08003921 	.word	0x08003921
 80037dc:	08003921 	.word	0x08003921
 80037e0:	08003921 	.word	0x08003921
 80037e4:	08003897 	.word	0x08003897
 80037e8:	08003921 	.word	0x08003921
 80037ec:	08003921 	.word	0x08003921
 80037f0:	08003921 	.word	0x08003921
 80037f4:	08003921 	.word	0x08003921
 80037f8:	08003921 	.word	0x08003921
 80037fc:	08003921 	.word	0x08003921
 8003800:	08003921 	.word	0x08003921
 8003804:	08003809 	.word	0x08003809
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8003808:	4b4a      	ldr	r3, [pc, #296]	; (8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800380e:	4b49      	ldr	r3, [pc, #292]	; (8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 8084 	beq.w	8003924 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	0c9b      	lsrs	r3, r3, #18
 8003820:	f003 030f 	and.w	r3, r3, #15
 8003824:	4a44      	ldr	r2, [pc, #272]	; (8003938 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8003826:	5cd3      	ldrb	r3, [r2, r3]
 8003828:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d015      	beq.n	8003860 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003834:	4b3f      	ldr	r3, [pc, #252]	; (8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	0c5b      	lsrs	r3, r3, #17
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	4a3f      	ldr	r2, [pc, #252]	; (800393c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8003840:	5cd3      	ldrb	r3, [r2, r3]
 8003842:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00d      	beq.n	800386a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800384e:	4a3c      	ldr	r2, [pc, #240]	; (8003940 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	fbb2 f2f3 	udiv	r2, r2, r3
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	fb02 f303 	mul.w	r3, r2, r3
 800385c:	61fb      	str	r3, [r7, #28]
 800385e:	e004      	b.n	800386a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	4a38      	ldr	r2, [pc, #224]	; (8003944 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8003864:	fb02 f303 	mul.w	r3, r2, r3
 8003868:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800386a:	4b32      	ldr	r3, [pc, #200]	; (8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003872:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003876:	d102      	bne.n	800387e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 800387c:	e052      	b.n	8003924 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	4a31      	ldr	r2, [pc, #196]	; (8003948 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8003884:	fba2 2303 	umull	r2, r3, r2, r3
 8003888:	085b      	lsrs	r3, r3, #1
 800388a:	61bb      	str	r3, [r7, #24]
      break;
 800388c:	e04a      	b.n	8003924 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 800388e:	f7ff fe2b 	bl	80034e8 <HAL_RCC_GetSysClockFreq>
 8003892:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003894:	e049      	b.n	800392a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8003896:	f7ff fe27 	bl	80034e8 <HAL_RCC_GetSysClockFreq>
 800389a:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800389c:	e045      	b.n	800392a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800389e:	4b25      	ldr	r3, [pc, #148]	; (8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ae:	d108      	bne.n	80038c2 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 80038ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038be:	61bb      	str	r3, [r7, #24]
 80038c0:	e01f      	b.n	8003902 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038cc:	d109      	bne.n	80038e2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80038ce:	4b19      	ldr	r3, [pc, #100]	; (8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80038d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 80038da:	f649 4340 	movw	r3, #40000	; 0x9c40
 80038de:	61bb      	str	r3, [r7, #24]
 80038e0:	e00f      	b.n	8003902 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038ec:	d11c      	bne.n	8003928 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 80038ee:	4b11      	ldr	r3, [pc, #68]	; (8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d016      	beq.n	8003928 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 80038fa:	f24f 4324 	movw	r3, #62500	; 0xf424
 80038fe:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8003900:	e012      	b.n	8003928 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8003902:	e011      	b.n	8003928 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003904:	f7ff fe62 	bl	80035cc <HAL_RCC_GetPCLK2Freq>
 8003908:	4602      	mov	r2, r0
 800390a:	4b0a      	ldr	r3, [pc, #40]	; (8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	0b9b      	lsrs	r3, r3, #14
 8003910:	f003 0303 	and.w	r3, r3, #3
 8003914:	3301      	adds	r3, #1
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	fbb2 f3f3 	udiv	r3, r2, r3
 800391c:	61bb      	str	r3, [r7, #24]
      break;
 800391e:	e004      	b.n	800392a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 8003920:	bf00      	nop
 8003922:	e002      	b.n	800392a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8003924:	bf00      	nop
 8003926:	e000      	b.n	800392a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8003928:	bf00      	nop
    }
  }
  return (frequency);
 800392a:	69bb      	ldr	r3, [r7, #24]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3720      	adds	r7, #32
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40021000 	.word	0x40021000
 8003938:	08009cb8 	.word	0x08009cb8
 800393c:	08009cc8 	.word	0x08009cc8
 8003940:	007a1200 	.word	0x007a1200
 8003944:	003d0900 	.word	0x003d0900
 8003948:	aaaaaaab 	.word	0xaaaaaaab

0800394c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e042      	b.n	80039e4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d106      	bne.n	8003978 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7fe f9b0 	bl	8001cd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2224      	movs	r2, #36	; 0x24
 800397c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800398e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 f91d 	bl	8003bd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	691a      	ldr	r2, [r3, #16]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	695a      	ldr	r2, [r3, #20]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68da      	ldr	r2, [r3, #12]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2220      	movs	r2, #32
 80039d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08a      	sub	sp, #40	; 0x28
 80039f0:	af02      	add	r7, sp, #8
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	603b      	str	r3, [r7, #0]
 80039f8:	4613      	mov	r3, r2
 80039fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b20      	cmp	r3, #32
 8003a0a:	d16d      	bne.n	8003ae8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d002      	beq.n	8003a18 <HAL_UART_Transmit+0x2c>
 8003a12:	88fb      	ldrh	r3, [r7, #6]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e066      	b.n	8003aea <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2221      	movs	r2, #33	; 0x21
 8003a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a2a:	f7fe fb0d 	bl	8002048 <HAL_GetTick>
 8003a2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	88fa      	ldrh	r2, [r7, #6]
 8003a34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	88fa      	ldrh	r2, [r7, #6]
 8003a3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a44:	d108      	bne.n	8003a58 <HAL_UART_Transmit+0x6c>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d104      	bne.n	8003a58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	61bb      	str	r3, [r7, #24]
 8003a56:	e003      	b.n	8003a60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a60:	e02a      	b.n	8003ab8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	2180      	movs	r1, #128	; 0x80
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 f840 	bl	8003af2 <UART_WaitOnFlagUntilTimeout>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e036      	b.n	8003aea <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10b      	bne.n	8003a9a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	881b      	ldrh	r3, [r3, #0]
 8003a86:	461a      	mov	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	3302      	adds	r3, #2
 8003a96:	61bb      	str	r3, [r7, #24]
 8003a98:	e007      	b.n	8003aaa <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	781a      	ldrb	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1cf      	bne.n	8003a62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	2140      	movs	r1, #64	; 0x40
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 f810 	bl	8003af2 <UART_WaitOnFlagUntilTimeout>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e006      	b.n	8003aea <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	e000      	b.n	8003aea <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003ae8:	2302      	movs	r3, #2
  }
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3720      	adds	r7, #32
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b090      	sub	sp, #64	; 0x40
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	60f8      	str	r0, [r7, #12]
 8003afa:	60b9      	str	r1, [r7, #8]
 8003afc:	603b      	str	r3, [r7, #0]
 8003afe:	4613      	mov	r3, r2
 8003b00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b02:	e050      	b.n	8003ba6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0a:	d04c      	beq.n	8003ba6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d007      	beq.n	8003b22 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b12:	f7fe fa99 	bl	8002048 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d241      	bcs.n	8003ba6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	330c      	adds	r3, #12
 8003b28:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2c:	e853 3f00 	ldrex	r3, [r3]
 8003b30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	330c      	adds	r3, #12
 8003b40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b42:	637a      	str	r2, [r7, #52]	; 0x34
 8003b44:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b4a:	e841 2300 	strex	r3, r2, [r1]
 8003b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1e5      	bne.n	8003b22 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3314      	adds	r3, #20
 8003b5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	e853 3f00 	ldrex	r3, [r3]
 8003b64:	613b      	str	r3, [r7, #16]
   return(result);
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	f023 0301 	bic.w	r3, r3, #1
 8003b6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	3314      	adds	r3, #20
 8003b74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b76:	623a      	str	r2, [r7, #32]
 8003b78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7a:	69f9      	ldr	r1, [r7, #28]
 8003b7c:	6a3a      	ldr	r2, [r7, #32]
 8003b7e:	e841 2300 	strex	r3, r2, [r1]
 8003b82:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1e5      	bne.n	8003b56 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2220      	movs	r2, #32
 8003b96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e00f      	b.n	8003bc6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	bf0c      	ite	eq
 8003bb6:	2301      	moveq	r3, #1
 8003bb8:	2300      	movne	r3, #0
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	79fb      	ldrb	r3, [r7, #7]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d09f      	beq.n	8003b04 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3740      	adds	r7, #64	; 0x40
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
	...

08003bd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68da      	ldr	r2, [r3, #12]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689a      	ldr	r2, [r3, #8]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003c0a:	f023 030c 	bic.w	r3, r3, #12
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6812      	ldr	r2, [r2, #0]
 8003c12:	68b9      	ldr	r1, [r7, #8]
 8003c14:	430b      	orrs	r3, r1
 8003c16:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	699a      	ldr	r2, [r3, #24]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a2c      	ldr	r2, [pc, #176]	; (8003ce4 <UART_SetConfig+0x114>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d103      	bne.n	8003c40 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c38:	f7ff fcc8 	bl	80035cc <HAL_RCC_GetPCLK2Freq>
 8003c3c:	60f8      	str	r0, [r7, #12]
 8003c3e:	e002      	b.n	8003c46 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c40:	f7ff fcb0 	bl	80035a4 <HAL_RCC_GetPCLK1Freq>
 8003c44:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	009a      	lsls	r2, r3, #2
 8003c50:	441a      	add	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5c:	4a22      	ldr	r2, [pc, #136]	; (8003ce8 <UART_SetConfig+0x118>)
 8003c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c62:	095b      	lsrs	r3, r3, #5
 8003c64:	0119      	lsls	r1, r3, #4
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	009a      	lsls	r2, r3, #2
 8003c70:	441a      	add	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ce8 <UART_SetConfig+0x118>)
 8003c7e:	fba3 0302 	umull	r0, r3, r3, r2
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	2064      	movs	r0, #100	; 0x64
 8003c86:	fb00 f303 	mul.w	r3, r0, r3
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	3332      	adds	r3, #50	; 0x32
 8003c90:	4a15      	ldr	r2, [pc, #84]	; (8003ce8 <UART_SetConfig+0x118>)
 8003c92:	fba2 2303 	umull	r2, r3, r2, r3
 8003c96:	095b      	lsrs	r3, r3, #5
 8003c98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c9c:	4419      	add	r1, r3
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4413      	add	r3, r2
 8003ca6:	009a      	lsls	r2, r3, #2
 8003ca8:	441a      	add	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cb4:	4b0c      	ldr	r3, [pc, #48]	; (8003ce8 <UART_SetConfig+0x118>)
 8003cb6:	fba3 0302 	umull	r0, r3, r3, r2
 8003cba:	095b      	lsrs	r3, r3, #5
 8003cbc:	2064      	movs	r0, #100	; 0x64
 8003cbe:	fb00 f303 	mul.w	r3, r0, r3
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	3332      	adds	r3, #50	; 0x32
 8003cc8:	4a07      	ldr	r2, [pc, #28]	; (8003ce8 <UART_SetConfig+0x118>)
 8003cca:	fba2 2303 	umull	r2, r3, r2, r3
 8003cce:	095b      	lsrs	r3, r3, #5
 8003cd0:	f003 020f 	and.w	r2, r3, #15
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	440a      	add	r2, r1
 8003cda:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003cdc:	bf00      	nop
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40013800 	.word	0x40013800
 8003ce8:	51eb851f 	.word	0x51eb851f

08003cec <__cvt>:
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cf2:	461f      	mov	r7, r3
 8003cf4:	bfbb      	ittet	lt
 8003cf6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003cfa:	461f      	movlt	r7, r3
 8003cfc:	2300      	movge	r3, #0
 8003cfe:	232d      	movlt	r3, #45	; 0x2d
 8003d00:	b088      	sub	sp, #32
 8003d02:	4614      	mov	r4, r2
 8003d04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003d06:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003d08:	7013      	strb	r3, [r2, #0]
 8003d0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003d0c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003d10:	f023 0820 	bic.w	r8, r3, #32
 8003d14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003d18:	d005      	beq.n	8003d26 <__cvt+0x3a>
 8003d1a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003d1e:	d100      	bne.n	8003d22 <__cvt+0x36>
 8003d20:	3501      	adds	r5, #1
 8003d22:	2302      	movs	r3, #2
 8003d24:	e000      	b.n	8003d28 <__cvt+0x3c>
 8003d26:	2303      	movs	r3, #3
 8003d28:	aa07      	add	r2, sp, #28
 8003d2a:	9204      	str	r2, [sp, #16]
 8003d2c:	aa06      	add	r2, sp, #24
 8003d2e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003d32:	e9cd 3500 	strd	r3, r5, [sp]
 8003d36:	4622      	mov	r2, r4
 8003d38:	463b      	mov	r3, r7
 8003d3a:	f001 f899 	bl	8004e70 <_dtoa_r>
 8003d3e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003d42:	4606      	mov	r6, r0
 8003d44:	d102      	bne.n	8003d4c <__cvt+0x60>
 8003d46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003d48:	07db      	lsls	r3, r3, #31
 8003d4a:	d522      	bpl.n	8003d92 <__cvt+0xa6>
 8003d4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003d50:	eb06 0905 	add.w	r9, r6, r5
 8003d54:	d110      	bne.n	8003d78 <__cvt+0x8c>
 8003d56:	7833      	ldrb	r3, [r6, #0]
 8003d58:	2b30      	cmp	r3, #48	; 0x30
 8003d5a:	d10a      	bne.n	8003d72 <__cvt+0x86>
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	2300      	movs	r3, #0
 8003d60:	4620      	mov	r0, r4
 8003d62:	4639      	mov	r1, r7
 8003d64:	f7fc fe8c 	bl	8000a80 <__aeabi_dcmpeq>
 8003d68:	b918      	cbnz	r0, 8003d72 <__cvt+0x86>
 8003d6a:	f1c5 0501 	rsb	r5, r5, #1
 8003d6e:	f8ca 5000 	str.w	r5, [sl]
 8003d72:	f8da 3000 	ldr.w	r3, [sl]
 8003d76:	4499      	add	r9, r3
 8003d78:	2200      	movs	r2, #0
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	4620      	mov	r0, r4
 8003d7e:	4639      	mov	r1, r7
 8003d80:	f7fc fe7e 	bl	8000a80 <__aeabi_dcmpeq>
 8003d84:	b108      	cbz	r0, 8003d8a <__cvt+0x9e>
 8003d86:	f8cd 901c 	str.w	r9, [sp, #28]
 8003d8a:	2230      	movs	r2, #48	; 0x30
 8003d8c:	9b07      	ldr	r3, [sp, #28]
 8003d8e:	454b      	cmp	r3, r9
 8003d90:	d307      	bcc.n	8003da2 <__cvt+0xb6>
 8003d92:	4630      	mov	r0, r6
 8003d94:	9b07      	ldr	r3, [sp, #28]
 8003d96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003d98:	1b9b      	subs	r3, r3, r6
 8003d9a:	6013      	str	r3, [r2, #0]
 8003d9c:	b008      	add	sp, #32
 8003d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003da2:	1c59      	adds	r1, r3, #1
 8003da4:	9107      	str	r1, [sp, #28]
 8003da6:	701a      	strb	r2, [r3, #0]
 8003da8:	e7f0      	b.n	8003d8c <__cvt+0xa0>

08003daa <__exponent>:
 8003daa:	4603      	mov	r3, r0
 8003dac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dae:	2900      	cmp	r1, #0
 8003db0:	f803 2b02 	strb.w	r2, [r3], #2
 8003db4:	bfb6      	itet	lt
 8003db6:	222d      	movlt	r2, #45	; 0x2d
 8003db8:	222b      	movge	r2, #43	; 0x2b
 8003dba:	4249      	neglt	r1, r1
 8003dbc:	2909      	cmp	r1, #9
 8003dbe:	7042      	strb	r2, [r0, #1]
 8003dc0:	dd2a      	ble.n	8003e18 <__exponent+0x6e>
 8003dc2:	f10d 0207 	add.w	r2, sp, #7
 8003dc6:	4617      	mov	r7, r2
 8003dc8:	260a      	movs	r6, #10
 8003dca:	fb91 f5f6 	sdiv	r5, r1, r6
 8003dce:	4694      	mov	ip, r2
 8003dd0:	fb06 1415 	mls	r4, r6, r5, r1
 8003dd4:	3430      	adds	r4, #48	; 0x30
 8003dd6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003dda:	460c      	mov	r4, r1
 8003ddc:	2c63      	cmp	r4, #99	; 0x63
 8003dde:	4629      	mov	r1, r5
 8003de0:	f102 32ff 	add.w	r2, r2, #4294967295
 8003de4:	dcf1      	bgt.n	8003dca <__exponent+0x20>
 8003de6:	3130      	adds	r1, #48	; 0x30
 8003de8:	f1ac 0402 	sub.w	r4, ip, #2
 8003dec:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003df0:	4622      	mov	r2, r4
 8003df2:	1c41      	adds	r1, r0, #1
 8003df4:	42ba      	cmp	r2, r7
 8003df6:	d30a      	bcc.n	8003e0e <__exponent+0x64>
 8003df8:	f10d 0209 	add.w	r2, sp, #9
 8003dfc:	eba2 020c 	sub.w	r2, r2, ip
 8003e00:	42bc      	cmp	r4, r7
 8003e02:	bf88      	it	hi
 8003e04:	2200      	movhi	r2, #0
 8003e06:	4413      	add	r3, r2
 8003e08:	1a18      	subs	r0, r3, r0
 8003e0a:	b003      	add	sp, #12
 8003e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e0e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003e12:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003e16:	e7ed      	b.n	8003df4 <__exponent+0x4a>
 8003e18:	2330      	movs	r3, #48	; 0x30
 8003e1a:	3130      	adds	r1, #48	; 0x30
 8003e1c:	7083      	strb	r3, [r0, #2]
 8003e1e:	70c1      	strb	r1, [r0, #3]
 8003e20:	1d03      	adds	r3, r0, #4
 8003e22:	e7f1      	b.n	8003e08 <__exponent+0x5e>

08003e24 <_printf_float>:
 8003e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e28:	b091      	sub	sp, #68	; 0x44
 8003e2a:	460c      	mov	r4, r1
 8003e2c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003e30:	4616      	mov	r6, r2
 8003e32:	461f      	mov	r7, r3
 8003e34:	4605      	mov	r5, r0
 8003e36:	f000 ff05 	bl	8004c44 <_localeconv_r>
 8003e3a:	6803      	ldr	r3, [r0, #0]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8003e40:	f7fc f9f2 	bl	8000228 <strlen>
 8003e44:	2300      	movs	r3, #0
 8003e46:	930e      	str	r3, [sp, #56]	; 0x38
 8003e48:	f8d8 3000 	ldr.w	r3, [r8]
 8003e4c:	900a      	str	r0, [sp, #40]	; 0x28
 8003e4e:	3307      	adds	r3, #7
 8003e50:	f023 0307 	bic.w	r3, r3, #7
 8003e54:	f103 0208 	add.w	r2, r3, #8
 8003e58:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003e5c:	f8d4 b000 	ldr.w	fp, [r4]
 8003e60:	f8c8 2000 	str.w	r2, [r8]
 8003e64:	e9d3 a800 	ldrd	sl, r8, [r3]
 8003e68:	4652      	mov	r2, sl
 8003e6a:	4643      	mov	r3, r8
 8003e6c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003e70:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8003e74:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e76:	f04f 32ff 	mov.w	r2, #4294967295
 8003e7a:	4650      	mov	r0, sl
 8003e7c:	4b9c      	ldr	r3, [pc, #624]	; (80040f0 <_printf_float+0x2cc>)
 8003e7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003e80:	f7fc fe30 	bl	8000ae4 <__aeabi_dcmpun>
 8003e84:	bb70      	cbnz	r0, 8003ee4 <_printf_float+0xc0>
 8003e86:	f04f 32ff 	mov.w	r2, #4294967295
 8003e8a:	4650      	mov	r0, sl
 8003e8c:	4b98      	ldr	r3, [pc, #608]	; (80040f0 <_printf_float+0x2cc>)
 8003e8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003e90:	f7fc fe0a 	bl	8000aa8 <__aeabi_dcmple>
 8003e94:	bb30      	cbnz	r0, 8003ee4 <_printf_float+0xc0>
 8003e96:	2200      	movs	r2, #0
 8003e98:	2300      	movs	r3, #0
 8003e9a:	4650      	mov	r0, sl
 8003e9c:	4641      	mov	r1, r8
 8003e9e:	f7fc fdf9 	bl	8000a94 <__aeabi_dcmplt>
 8003ea2:	b110      	cbz	r0, 8003eaa <_printf_float+0x86>
 8003ea4:	232d      	movs	r3, #45	; 0x2d
 8003ea6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003eaa:	4a92      	ldr	r2, [pc, #584]	; (80040f4 <_printf_float+0x2d0>)
 8003eac:	4b92      	ldr	r3, [pc, #584]	; (80040f8 <_printf_float+0x2d4>)
 8003eae:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003eb2:	bf94      	ite	ls
 8003eb4:	4690      	movls	r8, r2
 8003eb6:	4698      	movhi	r8, r3
 8003eb8:	2303      	movs	r3, #3
 8003eba:	f04f 0a00 	mov.w	sl, #0
 8003ebe:	6123      	str	r3, [r4, #16]
 8003ec0:	f02b 0304 	bic.w	r3, fp, #4
 8003ec4:	6023      	str	r3, [r4, #0]
 8003ec6:	4633      	mov	r3, r6
 8003ec8:	4621      	mov	r1, r4
 8003eca:	4628      	mov	r0, r5
 8003ecc:	9700      	str	r7, [sp, #0]
 8003ece:	aa0f      	add	r2, sp, #60	; 0x3c
 8003ed0:	f000 f9d6 	bl	8004280 <_printf_common>
 8003ed4:	3001      	adds	r0, #1
 8003ed6:	f040 8090 	bne.w	8003ffa <_printf_float+0x1d6>
 8003eda:	f04f 30ff 	mov.w	r0, #4294967295
 8003ede:	b011      	add	sp, #68	; 0x44
 8003ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ee4:	4652      	mov	r2, sl
 8003ee6:	4643      	mov	r3, r8
 8003ee8:	4650      	mov	r0, sl
 8003eea:	4641      	mov	r1, r8
 8003eec:	f7fc fdfa 	bl	8000ae4 <__aeabi_dcmpun>
 8003ef0:	b148      	cbz	r0, 8003f06 <_printf_float+0xe2>
 8003ef2:	f1b8 0f00 	cmp.w	r8, #0
 8003ef6:	bfb8      	it	lt
 8003ef8:	232d      	movlt	r3, #45	; 0x2d
 8003efa:	4a80      	ldr	r2, [pc, #512]	; (80040fc <_printf_float+0x2d8>)
 8003efc:	bfb8      	it	lt
 8003efe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003f02:	4b7f      	ldr	r3, [pc, #508]	; (8004100 <_printf_float+0x2dc>)
 8003f04:	e7d3      	b.n	8003eae <_printf_float+0x8a>
 8003f06:	6863      	ldr	r3, [r4, #4]
 8003f08:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003f0c:	1c5a      	adds	r2, r3, #1
 8003f0e:	d142      	bne.n	8003f96 <_printf_float+0x172>
 8003f10:	2306      	movs	r3, #6
 8003f12:	6063      	str	r3, [r4, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	9206      	str	r2, [sp, #24]
 8003f18:	aa0e      	add	r2, sp, #56	; 0x38
 8003f1a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003f1e:	aa0d      	add	r2, sp, #52	; 0x34
 8003f20:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003f24:	9203      	str	r2, [sp, #12]
 8003f26:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003f2a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003f2e:	6023      	str	r3, [r4, #0]
 8003f30:	6863      	ldr	r3, [r4, #4]
 8003f32:	4652      	mov	r2, sl
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	4628      	mov	r0, r5
 8003f38:	4643      	mov	r3, r8
 8003f3a:	910b      	str	r1, [sp, #44]	; 0x2c
 8003f3c:	f7ff fed6 	bl	8003cec <__cvt>
 8003f40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f42:	4680      	mov	r8, r0
 8003f44:	2947      	cmp	r1, #71	; 0x47
 8003f46:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003f48:	d108      	bne.n	8003f5c <_printf_float+0x138>
 8003f4a:	1cc8      	adds	r0, r1, #3
 8003f4c:	db02      	blt.n	8003f54 <_printf_float+0x130>
 8003f4e:	6863      	ldr	r3, [r4, #4]
 8003f50:	4299      	cmp	r1, r3
 8003f52:	dd40      	ble.n	8003fd6 <_printf_float+0x1b2>
 8003f54:	f1a9 0902 	sub.w	r9, r9, #2
 8003f58:	fa5f f989 	uxtb.w	r9, r9
 8003f5c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003f60:	d81f      	bhi.n	8003fa2 <_printf_float+0x17e>
 8003f62:	464a      	mov	r2, r9
 8003f64:	3901      	subs	r1, #1
 8003f66:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003f6a:	910d      	str	r1, [sp, #52]	; 0x34
 8003f6c:	f7ff ff1d 	bl	8003daa <__exponent>
 8003f70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f72:	4682      	mov	sl, r0
 8003f74:	1813      	adds	r3, r2, r0
 8003f76:	2a01      	cmp	r2, #1
 8003f78:	6123      	str	r3, [r4, #16]
 8003f7a:	dc02      	bgt.n	8003f82 <_printf_float+0x15e>
 8003f7c:	6822      	ldr	r2, [r4, #0]
 8003f7e:	07d2      	lsls	r2, r2, #31
 8003f80:	d501      	bpl.n	8003f86 <_printf_float+0x162>
 8003f82:	3301      	adds	r3, #1
 8003f84:	6123      	str	r3, [r4, #16]
 8003f86:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d09b      	beq.n	8003ec6 <_printf_float+0xa2>
 8003f8e:	232d      	movs	r3, #45	; 0x2d
 8003f90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f94:	e797      	b.n	8003ec6 <_printf_float+0xa2>
 8003f96:	2947      	cmp	r1, #71	; 0x47
 8003f98:	d1bc      	bne.n	8003f14 <_printf_float+0xf0>
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1ba      	bne.n	8003f14 <_printf_float+0xf0>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e7b7      	b.n	8003f12 <_printf_float+0xee>
 8003fa2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003fa6:	d118      	bne.n	8003fda <_printf_float+0x1b6>
 8003fa8:	2900      	cmp	r1, #0
 8003faa:	6863      	ldr	r3, [r4, #4]
 8003fac:	dd0b      	ble.n	8003fc6 <_printf_float+0x1a2>
 8003fae:	6121      	str	r1, [r4, #16]
 8003fb0:	b913      	cbnz	r3, 8003fb8 <_printf_float+0x194>
 8003fb2:	6822      	ldr	r2, [r4, #0]
 8003fb4:	07d0      	lsls	r0, r2, #31
 8003fb6:	d502      	bpl.n	8003fbe <_printf_float+0x19a>
 8003fb8:	3301      	adds	r3, #1
 8003fba:	440b      	add	r3, r1
 8003fbc:	6123      	str	r3, [r4, #16]
 8003fbe:	f04f 0a00 	mov.w	sl, #0
 8003fc2:	65a1      	str	r1, [r4, #88]	; 0x58
 8003fc4:	e7df      	b.n	8003f86 <_printf_float+0x162>
 8003fc6:	b913      	cbnz	r3, 8003fce <_printf_float+0x1aa>
 8003fc8:	6822      	ldr	r2, [r4, #0]
 8003fca:	07d2      	lsls	r2, r2, #31
 8003fcc:	d501      	bpl.n	8003fd2 <_printf_float+0x1ae>
 8003fce:	3302      	adds	r3, #2
 8003fd0:	e7f4      	b.n	8003fbc <_printf_float+0x198>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e7f2      	b.n	8003fbc <_printf_float+0x198>
 8003fd6:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003fda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003fdc:	4299      	cmp	r1, r3
 8003fde:	db05      	blt.n	8003fec <_printf_float+0x1c8>
 8003fe0:	6823      	ldr	r3, [r4, #0]
 8003fe2:	6121      	str	r1, [r4, #16]
 8003fe4:	07d8      	lsls	r0, r3, #31
 8003fe6:	d5ea      	bpl.n	8003fbe <_printf_float+0x19a>
 8003fe8:	1c4b      	adds	r3, r1, #1
 8003fea:	e7e7      	b.n	8003fbc <_printf_float+0x198>
 8003fec:	2900      	cmp	r1, #0
 8003fee:	bfcc      	ite	gt
 8003ff0:	2201      	movgt	r2, #1
 8003ff2:	f1c1 0202 	rsble	r2, r1, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	e7e0      	b.n	8003fbc <_printf_float+0x198>
 8003ffa:	6823      	ldr	r3, [r4, #0]
 8003ffc:	055a      	lsls	r2, r3, #21
 8003ffe:	d407      	bmi.n	8004010 <_printf_float+0x1ec>
 8004000:	6923      	ldr	r3, [r4, #16]
 8004002:	4642      	mov	r2, r8
 8004004:	4631      	mov	r1, r6
 8004006:	4628      	mov	r0, r5
 8004008:	47b8      	blx	r7
 800400a:	3001      	adds	r0, #1
 800400c:	d12b      	bne.n	8004066 <_printf_float+0x242>
 800400e:	e764      	b.n	8003eda <_printf_float+0xb6>
 8004010:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004014:	f240 80dd 	bls.w	80041d2 <_printf_float+0x3ae>
 8004018:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800401c:	2200      	movs	r2, #0
 800401e:	2300      	movs	r3, #0
 8004020:	f7fc fd2e 	bl	8000a80 <__aeabi_dcmpeq>
 8004024:	2800      	cmp	r0, #0
 8004026:	d033      	beq.n	8004090 <_printf_float+0x26c>
 8004028:	2301      	movs	r3, #1
 800402a:	4631      	mov	r1, r6
 800402c:	4628      	mov	r0, r5
 800402e:	4a35      	ldr	r2, [pc, #212]	; (8004104 <_printf_float+0x2e0>)
 8004030:	47b8      	blx	r7
 8004032:	3001      	adds	r0, #1
 8004034:	f43f af51 	beq.w	8003eda <_printf_float+0xb6>
 8004038:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800403c:	429a      	cmp	r2, r3
 800403e:	db02      	blt.n	8004046 <_printf_float+0x222>
 8004040:	6823      	ldr	r3, [r4, #0]
 8004042:	07d8      	lsls	r0, r3, #31
 8004044:	d50f      	bpl.n	8004066 <_printf_float+0x242>
 8004046:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800404a:	4631      	mov	r1, r6
 800404c:	4628      	mov	r0, r5
 800404e:	47b8      	blx	r7
 8004050:	3001      	adds	r0, #1
 8004052:	f43f af42 	beq.w	8003eda <_printf_float+0xb6>
 8004056:	f04f 0800 	mov.w	r8, #0
 800405a:	f104 091a 	add.w	r9, r4, #26
 800405e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004060:	3b01      	subs	r3, #1
 8004062:	4543      	cmp	r3, r8
 8004064:	dc09      	bgt.n	800407a <_printf_float+0x256>
 8004066:	6823      	ldr	r3, [r4, #0]
 8004068:	079b      	lsls	r3, r3, #30
 800406a:	f100 8104 	bmi.w	8004276 <_printf_float+0x452>
 800406e:	68e0      	ldr	r0, [r4, #12]
 8004070:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004072:	4298      	cmp	r0, r3
 8004074:	bfb8      	it	lt
 8004076:	4618      	movlt	r0, r3
 8004078:	e731      	b.n	8003ede <_printf_float+0xba>
 800407a:	2301      	movs	r3, #1
 800407c:	464a      	mov	r2, r9
 800407e:	4631      	mov	r1, r6
 8004080:	4628      	mov	r0, r5
 8004082:	47b8      	blx	r7
 8004084:	3001      	adds	r0, #1
 8004086:	f43f af28 	beq.w	8003eda <_printf_float+0xb6>
 800408a:	f108 0801 	add.w	r8, r8, #1
 800408e:	e7e6      	b.n	800405e <_printf_float+0x23a>
 8004090:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004092:	2b00      	cmp	r3, #0
 8004094:	dc38      	bgt.n	8004108 <_printf_float+0x2e4>
 8004096:	2301      	movs	r3, #1
 8004098:	4631      	mov	r1, r6
 800409a:	4628      	mov	r0, r5
 800409c:	4a19      	ldr	r2, [pc, #100]	; (8004104 <_printf_float+0x2e0>)
 800409e:	47b8      	blx	r7
 80040a0:	3001      	adds	r0, #1
 80040a2:	f43f af1a 	beq.w	8003eda <_printf_float+0xb6>
 80040a6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80040aa:	4313      	orrs	r3, r2
 80040ac:	d102      	bne.n	80040b4 <_printf_float+0x290>
 80040ae:	6823      	ldr	r3, [r4, #0]
 80040b0:	07d9      	lsls	r1, r3, #31
 80040b2:	d5d8      	bpl.n	8004066 <_printf_float+0x242>
 80040b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80040b8:	4631      	mov	r1, r6
 80040ba:	4628      	mov	r0, r5
 80040bc:	47b8      	blx	r7
 80040be:	3001      	adds	r0, #1
 80040c0:	f43f af0b 	beq.w	8003eda <_printf_float+0xb6>
 80040c4:	f04f 0900 	mov.w	r9, #0
 80040c8:	f104 0a1a 	add.w	sl, r4, #26
 80040cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040ce:	425b      	negs	r3, r3
 80040d0:	454b      	cmp	r3, r9
 80040d2:	dc01      	bgt.n	80040d8 <_printf_float+0x2b4>
 80040d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040d6:	e794      	b.n	8004002 <_printf_float+0x1de>
 80040d8:	2301      	movs	r3, #1
 80040da:	4652      	mov	r2, sl
 80040dc:	4631      	mov	r1, r6
 80040de:	4628      	mov	r0, r5
 80040e0:	47b8      	blx	r7
 80040e2:	3001      	adds	r0, #1
 80040e4:	f43f aef9 	beq.w	8003eda <_printf_float+0xb6>
 80040e8:	f109 0901 	add.w	r9, r9, #1
 80040ec:	e7ee      	b.n	80040cc <_printf_float+0x2a8>
 80040ee:	bf00      	nop
 80040f0:	7fefffff 	.word	0x7fefffff
 80040f4:	08009cca 	.word	0x08009cca
 80040f8:	08009cce 	.word	0x08009cce
 80040fc:	08009cd2 	.word	0x08009cd2
 8004100:	08009cd6 	.word	0x08009cd6
 8004104:	08009cda 	.word	0x08009cda
 8004108:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800410a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800410c:	429a      	cmp	r2, r3
 800410e:	bfa8      	it	ge
 8004110:	461a      	movge	r2, r3
 8004112:	2a00      	cmp	r2, #0
 8004114:	4691      	mov	r9, r2
 8004116:	dc37      	bgt.n	8004188 <_printf_float+0x364>
 8004118:	f04f 0b00 	mov.w	fp, #0
 800411c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004120:	f104 021a 	add.w	r2, r4, #26
 8004124:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004128:	ebaa 0309 	sub.w	r3, sl, r9
 800412c:	455b      	cmp	r3, fp
 800412e:	dc33      	bgt.n	8004198 <_printf_float+0x374>
 8004130:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004134:	429a      	cmp	r2, r3
 8004136:	db3b      	blt.n	80041b0 <_printf_float+0x38c>
 8004138:	6823      	ldr	r3, [r4, #0]
 800413a:	07da      	lsls	r2, r3, #31
 800413c:	d438      	bmi.n	80041b0 <_printf_float+0x38c>
 800413e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004142:	eba2 0903 	sub.w	r9, r2, r3
 8004146:	eba2 020a 	sub.w	r2, r2, sl
 800414a:	4591      	cmp	r9, r2
 800414c:	bfa8      	it	ge
 800414e:	4691      	movge	r9, r2
 8004150:	f1b9 0f00 	cmp.w	r9, #0
 8004154:	dc34      	bgt.n	80041c0 <_printf_float+0x39c>
 8004156:	f04f 0800 	mov.w	r8, #0
 800415a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800415e:	f104 0a1a 	add.w	sl, r4, #26
 8004162:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004166:	1a9b      	subs	r3, r3, r2
 8004168:	eba3 0309 	sub.w	r3, r3, r9
 800416c:	4543      	cmp	r3, r8
 800416e:	f77f af7a 	ble.w	8004066 <_printf_float+0x242>
 8004172:	2301      	movs	r3, #1
 8004174:	4652      	mov	r2, sl
 8004176:	4631      	mov	r1, r6
 8004178:	4628      	mov	r0, r5
 800417a:	47b8      	blx	r7
 800417c:	3001      	adds	r0, #1
 800417e:	f43f aeac 	beq.w	8003eda <_printf_float+0xb6>
 8004182:	f108 0801 	add.w	r8, r8, #1
 8004186:	e7ec      	b.n	8004162 <_printf_float+0x33e>
 8004188:	4613      	mov	r3, r2
 800418a:	4631      	mov	r1, r6
 800418c:	4642      	mov	r2, r8
 800418e:	4628      	mov	r0, r5
 8004190:	47b8      	blx	r7
 8004192:	3001      	adds	r0, #1
 8004194:	d1c0      	bne.n	8004118 <_printf_float+0x2f4>
 8004196:	e6a0      	b.n	8003eda <_printf_float+0xb6>
 8004198:	2301      	movs	r3, #1
 800419a:	4631      	mov	r1, r6
 800419c:	4628      	mov	r0, r5
 800419e:	920b      	str	r2, [sp, #44]	; 0x2c
 80041a0:	47b8      	blx	r7
 80041a2:	3001      	adds	r0, #1
 80041a4:	f43f ae99 	beq.w	8003eda <_printf_float+0xb6>
 80041a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80041aa:	f10b 0b01 	add.w	fp, fp, #1
 80041ae:	e7b9      	b.n	8004124 <_printf_float+0x300>
 80041b0:	4631      	mov	r1, r6
 80041b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041b6:	4628      	mov	r0, r5
 80041b8:	47b8      	blx	r7
 80041ba:	3001      	adds	r0, #1
 80041bc:	d1bf      	bne.n	800413e <_printf_float+0x31a>
 80041be:	e68c      	b.n	8003eda <_printf_float+0xb6>
 80041c0:	464b      	mov	r3, r9
 80041c2:	4631      	mov	r1, r6
 80041c4:	4628      	mov	r0, r5
 80041c6:	eb08 020a 	add.w	r2, r8, sl
 80041ca:	47b8      	blx	r7
 80041cc:	3001      	adds	r0, #1
 80041ce:	d1c2      	bne.n	8004156 <_printf_float+0x332>
 80041d0:	e683      	b.n	8003eda <_printf_float+0xb6>
 80041d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80041d4:	2a01      	cmp	r2, #1
 80041d6:	dc01      	bgt.n	80041dc <_printf_float+0x3b8>
 80041d8:	07db      	lsls	r3, r3, #31
 80041da:	d539      	bpl.n	8004250 <_printf_float+0x42c>
 80041dc:	2301      	movs	r3, #1
 80041de:	4642      	mov	r2, r8
 80041e0:	4631      	mov	r1, r6
 80041e2:	4628      	mov	r0, r5
 80041e4:	47b8      	blx	r7
 80041e6:	3001      	adds	r0, #1
 80041e8:	f43f ae77 	beq.w	8003eda <_printf_float+0xb6>
 80041ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041f0:	4631      	mov	r1, r6
 80041f2:	4628      	mov	r0, r5
 80041f4:	47b8      	blx	r7
 80041f6:	3001      	adds	r0, #1
 80041f8:	f43f ae6f 	beq.w	8003eda <_printf_float+0xb6>
 80041fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004200:	2200      	movs	r2, #0
 8004202:	2300      	movs	r3, #0
 8004204:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004208:	f7fc fc3a 	bl	8000a80 <__aeabi_dcmpeq>
 800420c:	b9d8      	cbnz	r0, 8004246 <_printf_float+0x422>
 800420e:	f109 33ff 	add.w	r3, r9, #4294967295
 8004212:	f108 0201 	add.w	r2, r8, #1
 8004216:	4631      	mov	r1, r6
 8004218:	4628      	mov	r0, r5
 800421a:	47b8      	blx	r7
 800421c:	3001      	adds	r0, #1
 800421e:	d10e      	bne.n	800423e <_printf_float+0x41a>
 8004220:	e65b      	b.n	8003eda <_printf_float+0xb6>
 8004222:	2301      	movs	r3, #1
 8004224:	464a      	mov	r2, r9
 8004226:	4631      	mov	r1, r6
 8004228:	4628      	mov	r0, r5
 800422a:	47b8      	blx	r7
 800422c:	3001      	adds	r0, #1
 800422e:	f43f ae54 	beq.w	8003eda <_printf_float+0xb6>
 8004232:	f108 0801 	add.w	r8, r8, #1
 8004236:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004238:	3b01      	subs	r3, #1
 800423a:	4543      	cmp	r3, r8
 800423c:	dcf1      	bgt.n	8004222 <_printf_float+0x3fe>
 800423e:	4653      	mov	r3, sl
 8004240:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004244:	e6de      	b.n	8004004 <_printf_float+0x1e0>
 8004246:	f04f 0800 	mov.w	r8, #0
 800424a:	f104 091a 	add.w	r9, r4, #26
 800424e:	e7f2      	b.n	8004236 <_printf_float+0x412>
 8004250:	2301      	movs	r3, #1
 8004252:	4642      	mov	r2, r8
 8004254:	e7df      	b.n	8004216 <_printf_float+0x3f2>
 8004256:	2301      	movs	r3, #1
 8004258:	464a      	mov	r2, r9
 800425a:	4631      	mov	r1, r6
 800425c:	4628      	mov	r0, r5
 800425e:	47b8      	blx	r7
 8004260:	3001      	adds	r0, #1
 8004262:	f43f ae3a 	beq.w	8003eda <_printf_float+0xb6>
 8004266:	f108 0801 	add.w	r8, r8, #1
 800426a:	68e3      	ldr	r3, [r4, #12]
 800426c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800426e:	1a5b      	subs	r3, r3, r1
 8004270:	4543      	cmp	r3, r8
 8004272:	dcf0      	bgt.n	8004256 <_printf_float+0x432>
 8004274:	e6fb      	b.n	800406e <_printf_float+0x24a>
 8004276:	f04f 0800 	mov.w	r8, #0
 800427a:	f104 0919 	add.w	r9, r4, #25
 800427e:	e7f4      	b.n	800426a <_printf_float+0x446>

08004280 <_printf_common>:
 8004280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004284:	4616      	mov	r6, r2
 8004286:	4699      	mov	r9, r3
 8004288:	688a      	ldr	r2, [r1, #8]
 800428a:	690b      	ldr	r3, [r1, #16]
 800428c:	4607      	mov	r7, r0
 800428e:	4293      	cmp	r3, r2
 8004290:	bfb8      	it	lt
 8004292:	4613      	movlt	r3, r2
 8004294:	6033      	str	r3, [r6, #0]
 8004296:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800429a:	460c      	mov	r4, r1
 800429c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042a0:	b10a      	cbz	r2, 80042a6 <_printf_common+0x26>
 80042a2:	3301      	adds	r3, #1
 80042a4:	6033      	str	r3, [r6, #0]
 80042a6:	6823      	ldr	r3, [r4, #0]
 80042a8:	0699      	lsls	r1, r3, #26
 80042aa:	bf42      	ittt	mi
 80042ac:	6833      	ldrmi	r3, [r6, #0]
 80042ae:	3302      	addmi	r3, #2
 80042b0:	6033      	strmi	r3, [r6, #0]
 80042b2:	6825      	ldr	r5, [r4, #0]
 80042b4:	f015 0506 	ands.w	r5, r5, #6
 80042b8:	d106      	bne.n	80042c8 <_printf_common+0x48>
 80042ba:	f104 0a19 	add.w	sl, r4, #25
 80042be:	68e3      	ldr	r3, [r4, #12]
 80042c0:	6832      	ldr	r2, [r6, #0]
 80042c2:	1a9b      	subs	r3, r3, r2
 80042c4:	42ab      	cmp	r3, r5
 80042c6:	dc2b      	bgt.n	8004320 <_printf_common+0xa0>
 80042c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80042cc:	1e13      	subs	r3, r2, #0
 80042ce:	6822      	ldr	r2, [r4, #0]
 80042d0:	bf18      	it	ne
 80042d2:	2301      	movne	r3, #1
 80042d4:	0692      	lsls	r2, r2, #26
 80042d6:	d430      	bmi.n	800433a <_printf_common+0xba>
 80042d8:	4649      	mov	r1, r9
 80042da:	4638      	mov	r0, r7
 80042dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042e0:	47c0      	blx	r8
 80042e2:	3001      	adds	r0, #1
 80042e4:	d023      	beq.n	800432e <_printf_common+0xae>
 80042e6:	6823      	ldr	r3, [r4, #0]
 80042e8:	6922      	ldr	r2, [r4, #16]
 80042ea:	f003 0306 	and.w	r3, r3, #6
 80042ee:	2b04      	cmp	r3, #4
 80042f0:	bf14      	ite	ne
 80042f2:	2500      	movne	r5, #0
 80042f4:	6833      	ldreq	r3, [r6, #0]
 80042f6:	f04f 0600 	mov.w	r6, #0
 80042fa:	bf08      	it	eq
 80042fc:	68e5      	ldreq	r5, [r4, #12]
 80042fe:	f104 041a 	add.w	r4, r4, #26
 8004302:	bf08      	it	eq
 8004304:	1aed      	subeq	r5, r5, r3
 8004306:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800430a:	bf08      	it	eq
 800430c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004310:	4293      	cmp	r3, r2
 8004312:	bfc4      	itt	gt
 8004314:	1a9b      	subgt	r3, r3, r2
 8004316:	18ed      	addgt	r5, r5, r3
 8004318:	42b5      	cmp	r5, r6
 800431a:	d11a      	bne.n	8004352 <_printf_common+0xd2>
 800431c:	2000      	movs	r0, #0
 800431e:	e008      	b.n	8004332 <_printf_common+0xb2>
 8004320:	2301      	movs	r3, #1
 8004322:	4652      	mov	r2, sl
 8004324:	4649      	mov	r1, r9
 8004326:	4638      	mov	r0, r7
 8004328:	47c0      	blx	r8
 800432a:	3001      	adds	r0, #1
 800432c:	d103      	bne.n	8004336 <_printf_common+0xb6>
 800432e:	f04f 30ff 	mov.w	r0, #4294967295
 8004332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004336:	3501      	adds	r5, #1
 8004338:	e7c1      	b.n	80042be <_printf_common+0x3e>
 800433a:	2030      	movs	r0, #48	; 0x30
 800433c:	18e1      	adds	r1, r4, r3
 800433e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004342:	1c5a      	adds	r2, r3, #1
 8004344:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004348:	4422      	add	r2, r4
 800434a:	3302      	adds	r3, #2
 800434c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004350:	e7c2      	b.n	80042d8 <_printf_common+0x58>
 8004352:	2301      	movs	r3, #1
 8004354:	4622      	mov	r2, r4
 8004356:	4649      	mov	r1, r9
 8004358:	4638      	mov	r0, r7
 800435a:	47c0      	blx	r8
 800435c:	3001      	adds	r0, #1
 800435e:	d0e6      	beq.n	800432e <_printf_common+0xae>
 8004360:	3601      	adds	r6, #1
 8004362:	e7d9      	b.n	8004318 <_printf_common+0x98>

08004364 <_printf_i>:
 8004364:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004368:	7e0f      	ldrb	r7, [r1, #24]
 800436a:	4691      	mov	r9, r2
 800436c:	2f78      	cmp	r7, #120	; 0x78
 800436e:	4680      	mov	r8, r0
 8004370:	460c      	mov	r4, r1
 8004372:	469a      	mov	sl, r3
 8004374:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004376:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800437a:	d807      	bhi.n	800438c <_printf_i+0x28>
 800437c:	2f62      	cmp	r7, #98	; 0x62
 800437e:	d80a      	bhi.n	8004396 <_printf_i+0x32>
 8004380:	2f00      	cmp	r7, #0
 8004382:	f000 80d5 	beq.w	8004530 <_printf_i+0x1cc>
 8004386:	2f58      	cmp	r7, #88	; 0x58
 8004388:	f000 80c1 	beq.w	800450e <_printf_i+0x1aa>
 800438c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004390:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004394:	e03a      	b.n	800440c <_printf_i+0xa8>
 8004396:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800439a:	2b15      	cmp	r3, #21
 800439c:	d8f6      	bhi.n	800438c <_printf_i+0x28>
 800439e:	a101      	add	r1, pc, #4	; (adr r1, 80043a4 <_printf_i+0x40>)
 80043a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043a4:	080043fd 	.word	0x080043fd
 80043a8:	08004411 	.word	0x08004411
 80043ac:	0800438d 	.word	0x0800438d
 80043b0:	0800438d 	.word	0x0800438d
 80043b4:	0800438d 	.word	0x0800438d
 80043b8:	0800438d 	.word	0x0800438d
 80043bc:	08004411 	.word	0x08004411
 80043c0:	0800438d 	.word	0x0800438d
 80043c4:	0800438d 	.word	0x0800438d
 80043c8:	0800438d 	.word	0x0800438d
 80043cc:	0800438d 	.word	0x0800438d
 80043d0:	08004517 	.word	0x08004517
 80043d4:	0800443d 	.word	0x0800443d
 80043d8:	080044d1 	.word	0x080044d1
 80043dc:	0800438d 	.word	0x0800438d
 80043e0:	0800438d 	.word	0x0800438d
 80043e4:	08004539 	.word	0x08004539
 80043e8:	0800438d 	.word	0x0800438d
 80043ec:	0800443d 	.word	0x0800443d
 80043f0:	0800438d 	.word	0x0800438d
 80043f4:	0800438d 	.word	0x0800438d
 80043f8:	080044d9 	.word	0x080044d9
 80043fc:	682b      	ldr	r3, [r5, #0]
 80043fe:	1d1a      	adds	r2, r3, #4
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	602a      	str	r2, [r5, #0]
 8004404:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004408:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800440c:	2301      	movs	r3, #1
 800440e:	e0a0      	b.n	8004552 <_printf_i+0x1ee>
 8004410:	6820      	ldr	r0, [r4, #0]
 8004412:	682b      	ldr	r3, [r5, #0]
 8004414:	0607      	lsls	r7, r0, #24
 8004416:	f103 0104 	add.w	r1, r3, #4
 800441a:	6029      	str	r1, [r5, #0]
 800441c:	d501      	bpl.n	8004422 <_printf_i+0xbe>
 800441e:	681e      	ldr	r6, [r3, #0]
 8004420:	e003      	b.n	800442a <_printf_i+0xc6>
 8004422:	0646      	lsls	r6, r0, #25
 8004424:	d5fb      	bpl.n	800441e <_printf_i+0xba>
 8004426:	f9b3 6000 	ldrsh.w	r6, [r3]
 800442a:	2e00      	cmp	r6, #0
 800442c:	da03      	bge.n	8004436 <_printf_i+0xd2>
 800442e:	232d      	movs	r3, #45	; 0x2d
 8004430:	4276      	negs	r6, r6
 8004432:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004436:	230a      	movs	r3, #10
 8004438:	4859      	ldr	r0, [pc, #356]	; (80045a0 <_printf_i+0x23c>)
 800443a:	e012      	b.n	8004462 <_printf_i+0xfe>
 800443c:	682b      	ldr	r3, [r5, #0]
 800443e:	6820      	ldr	r0, [r4, #0]
 8004440:	1d19      	adds	r1, r3, #4
 8004442:	6029      	str	r1, [r5, #0]
 8004444:	0605      	lsls	r5, r0, #24
 8004446:	d501      	bpl.n	800444c <_printf_i+0xe8>
 8004448:	681e      	ldr	r6, [r3, #0]
 800444a:	e002      	b.n	8004452 <_printf_i+0xee>
 800444c:	0641      	lsls	r1, r0, #25
 800444e:	d5fb      	bpl.n	8004448 <_printf_i+0xe4>
 8004450:	881e      	ldrh	r6, [r3, #0]
 8004452:	2f6f      	cmp	r7, #111	; 0x6f
 8004454:	bf0c      	ite	eq
 8004456:	2308      	moveq	r3, #8
 8004458:	230a      	movne	r3, #10
 800445a:	4851      	ldr	r0, [pc, #324]	; (80045a0 <_printf_i+0x23c>)
 800445c:	2100      	movs	r1, #0
 800445e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004462:	6865      	ldr	r5, [r4, #4]
 8004464:	2d00      	cmp	r5, #0
 8004466:	bfa8      	it	ge
 8004468:	6821      	ldrge	r1, [r4, #0]
 800446a:	60a5      	str	r5, [r4, #8]
 800446c:	bfa4      	itt	ge
 800446e:	f021 0104 	bicge.w	r1, r1, #4
 8004472:	6021      	strge	r1, [r4, #0]
 8004474:	b90e      	cbnz	r6, 800447a <_printf_i+0x116>
 8004476:	2d00      	cmp	r5, #0
 8004478:	d04b      	beq.n	8004512 <_printf_i+0x1ae>
 800447a:	4615      	mov	r5, r2
 800447c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004480:	fb03 6711 	mls	r7, r3, r1, r6
 8004484:	5dc7      	ldrb	r7, [r0, r7]
 8004486:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800448a:	4637      	mov	r7, r6
 800448c:	42bb      	cmp	r3, r7
 800448e:	460e      	mov	r6, r1
 8004490:	d9f4      	bls.n	800447c <_printf_i+0x118>
 8004492:	2b08      	cmp	r3, #8
 8004494:	d10b      	bne.n	80044ae <_printf_i+0x14a>
 8004496:	6823      	ldr	r3, [r4, #0]
 8004498:	07de      	lsls	r6, r3, #31
 800449a:	d508      	bpl.n	80044ae <_printf_i+0x14a>
 800449c:	6923      	ldr	r3, [r4, #16]
 800449e:	6861      	ldr	r1, [r4, #4]
 80044a0:	4299      	cmp	r1, r3
 80044a2:	bfde      	ittt	le
 80044a4:	2330      	movle	r3, #48	; 0x30
 80044a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80044aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80044ae:	1b52      	subs	r2, r2, r5
 80044b0:	6122      	str	r2, [r4, #16]
 80044b2:	464b      	mov	r3, r9
 80044b4:	4621      	mov	r1, r4
 80044b6:	4640      	mov	r0, r8
 80044b8:	f8cd a000 	str.w	sl, [sp]
 80044bc:	aa03      	add	r2, sp, #12
 80044be:	f7ff fedf 	bl	8004280 <_printf_common>
 80044c2:	3001      	adds	r0, #1
 80044c4:	d14a      	bne.n	800455c <_printf_i+0x1f8>
 80044c6:	f04f 30ff 	mov.w	r0, #4294967295
 80044ca:	b004      	add	sp, #16
 80044cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044d0:	6823      	ldr	r3, [r4, #0]
 80044d2:	f043 0320 	orr.w	r3, r3, #32
 80044d6:	6023      	str	r3, [r4, #0]
 80044d8:	2778      	movs	r7, #120	; 0x78
 80044da:	4832      	ldr	r0, [pc, #200]	; (80045a4 <_printf_i+0x240>)
 80044dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80044e0:	6823      	ldr	r3, [r4, #0]
 80044e2:	6829      	ldr	r1, [r5, #0]
 80044e4:	061f      	lsls	r7, r3, #24
 80044e6:	f851 6b04 	ldr.w	r6, [r1], #4
 80044ea:	d402      	bmi.n	80044f2 <_printf_i+0x18e>
 80044ec:	065f      	lsls	r7, r3, #25
 80044ee:	bf48      	it	mi
 80044f0:	b2b6      	uxthmi	r6, r6
 80044f2:	07df      	lsls	r7, r3, #31
 80044f4:	bf48      	it	mi
 80044f6:	f043 0320 	orrmi.w	r3, r3, #32
 80044fa:	6029      	str	r1, [r5, #0]
 80044fc:	bf48      	it	mi
 80044fe:	6023      	strmi	r3, [r4, #0]
 8004500:	b91e      	cbnz	r6, 800450a <_printf_i+0x1a6>
 8004502:	6823      	ldr	r3, [r4, #0]
 8004504:	f023 0320 	bic.w	r3, r3, #32
 8004508:	6023      	str	r3, [r4, #0]
 800450a:	2310      	movs	r3, #16
 800450c:	e7a6      	b.n	800445c <_printf_i+0xf8>
 800450e:	4824      	ldr	r0, [pc, #144]	; (80045a0 <_printf_i+0x23c>)
 8004510:	e7e4      	b.n	80044dc <_printf_i+0x178>
 8004512:	4615      	mov	r5, r2
 8004514:	e7bd      	b.n	8004492 <_printf_i+0x12e>
 8004516:	682b      	ldr	r3, [r5, #0]
 8004518:	6826      	ldr	r6, [r4, #0]
 800451a:	1d18      	adds	r0, r3, #4
 800451c:	6961      	ldr	r1, [r4, #20]
 800451e:	6028      	str	r0, [r5, #0]
 8004520:	0635      	lsls	r5, r6, #24
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	d501      	bpl.n	800452a <_printf_i+0x1c6>
 8004526:	6019      	str	r1, [r3, #0]
 8004528:	e002      	b.n	8004530 <_printf_i+0x1cc>
 800452a:	0670      	lsls	r0, r6, #25
 800452c:	d5fb      	bpl.n	8004526 <_printf_i+0x1c2>
 800452e:	8019      	strh	r1, [r3, #0]
 8004530:	2300      	movs	r3, #0
 8004532:	4615      	mov	r5, r2
 8004534:	6123      	str	r3, [r4, #16]
 8004536:	e7bc      	b.n	80044b2 <_printf_i+0x14e>
 8004538:	682b      	ldr	r3, [r5, #0]
 800453a:	2100      	movs	r1, #0
 800453c:	1d1a      	adds	r2, r3, #4
 800453e:	602a      	str	r2, [r5, #0]
 8004540:	681d      	ldr	r5, [r3, #0]
 8004542:	6862      	ldr	r2, [r4, #4]
 8004544:	4628      	mov	r0, r5
 8004546:	f000 fbf4 	bl	8004d32 <memchr>
 800454a:	b108      	cbz	r0, 8004550 <_printf_i+0x1ec>
 800454c:	1b40      	subs	r0, r0, r5
 800454e:	6060      	str	r0, [r4, #4]
 8004550:	6863      	ldr	r3, [r4, #4]
 8004552:	6123      	str	r3, [r4, #16]
 8004554:	2300      	movs	r3, #0
 8004556:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800455a:	e7aa      	b.n	80044b2 <_printf_i+0x14e>
 800455c:	462a      	mov	r2, r5
 800455e:	4649      	mov	r1, r9
 8004560:	4640      	mov	r0, r8
 8004562:	6923      	ldr	r3, [r4, #16]
 8004564:	47d0      	blx	sl
 8004566:	3001      	adds	r0, #1
 8004568:	d0ad      	beq.n	80044c6 <_printf_i+0x162>
 800456a:	6823      	ldr	r3, [r4, #0]
 800456c:	079b      	lsls	r3, r3, #30
 800456e:	d413      	bmi.n	8004598 <_printf_i+0x234>
 8004570:	68e0      	ldr	r0, [r4, #12]
 8004572:	9b03      	ldr	r3, [sp, #12]
 8004574:	4298      	cmp	r0, r3
 8004576:	bfb8      	it	lt
 8004578:	4618      	movlt	r0, r3
 800457a:	e7a6      	b.n	80044ca <_printf_i+0x166>
 800457c:	2301      	movs	r3, #1
 800457e:	4632      	mov	r2, r6
 8004580:	4649      	mov	r1, r9
 8004582:	4640      	mov	r0, r8
 8004584:	47d0      	blx	sl
 8004586:	3001      	adds	r0, #1
 8004588:	d09d      	beq.n	80044c6 <_printf_i+0x162>
 800458a:	3501      	adds	r5, #1
 800458c:	68e3      	ldr	r3, [r4, #12]
 800458e:	9903      	ldr	r1, [sp, #12]
 8004590:	1a5b      	subs	r3, r3, r1
 8004592:	42ab      	cmp	r3, r5
 8004594:	dcf2      	bgt.n	800457c <_printf_i+0x218>
 8004596:	e7eb      	b.n	8004570 <_printf_i+0x20c>
 8004598:	2500      	movs	r5, #0
 800459a:	f104 0619 	add.w	r6, r4, #25
 800459e:	e7f5      	b.n	800458c <_printf_i+0x228>
 80045a0:	08009cdc 	.word	0x08009cdc
 80045a4:	08009ced 	.word	0x08009ced

080045a8 <_scanf_float>:
 80045a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ac:	b087      	sub	sp, #28
 80045ae:	9303      	str	r3, [sp, #12]
 80045b0:	688b      	ldr	r3, [r1, #8]
 80045b2:	4617      	mov	r7, r2
 80045b4:	1e5a      	subs	r2, r3, #1
 80045b6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80045ba:	bf85      	ittet	hi
 80045bc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80045c0:	195b      	addhi	r3, r3, r5
 80045c2:	2300      	movls	r3, #0
 80045c4:	9302      	strhi	r3, [sp, #8]
 80045c6:	bf88      	it	hi
 80045c8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80045cc:	468b      	mov	fp, r1
 80045ce:	f04f 0500 	mov.w	r5, #0
 80045d2:	bf8c      	ite	hi
 80045d4:	608b      	strhi	r3, [r1, #8]
 80045d6:	9302      	strls	r3, [sp, #8]
 80045d8:	680b      	ldr	r3, [r1, #0]
 80045da:	4680      	mov	r8, r0
 80045dc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80045e0:	f84b 3b1c 	str.w	r3, [fp], #28
 80045e4:	460c      	mov	r4, r1
 80045e6:	465e      	mov	r6, fp
 80045e8:	46aa      	mov	sl, r5
 80045ea:	46a9      	mov	r9, r5
 80045ec:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80045f0:	9501      	str	r5, [sp, #4]
 80045f2:	68a2      	ldr	r2, [r4, #8]
 80045f4:	b152      	cbz	r2, 800460c <_scanf_float+0x64>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	2b4e      	cmp	r3, #78	; 0x4e
 80045fc:	d864      	bhi.n	80046c8 <_scanf_float+0x120>
 80045fe:	2b40      	cmp	r3, #64	; 0x40
 8004600:	d83c      	bhi.n	800467c <_scanf_float+0xd4>
 8004602:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004606:	b2c8      	uxtb	r0, r1
 8004608:	280e      	cmp	r0, #14
 800460a:	d93a      	bls.n	8004682 <_scanf_float+0xda>
 800460c:	f1b9 0f00 	cmp.w	r9, #0
 8004610:	d003      	beq.n	800461a <_scanf_float+0x72>
 8004612:	6823      	ldr	r3, [r4, #0]
 8004614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004618:	6023      	str	r3, [r4, #0]
 800461a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800461e:	f1ba 0f01 	cmp.w	sl, #1
 8004622:	f200 8113 	bhi.w	800484c <_scanf_float+0x2a4>
 8004626:	455e      	cmp	r6, fp
 8004628:	f200 8105 	bhi.w	8004836 <_scanf_float+0x28e>
 800462c:	2501      	movs	r5, #1
 800462e:	4628      	mov	r0, r5
 8004630:	b007      	add	sp, #28
 8004632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004636:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800463a:	2a0d      	cmp	r2, #13
 800463c:	d8e6      	bhi.n	800460c <_scanf_float+0x64>
 800463e:	a101      	add	r1, pc, #4	; (adr r1, 8004644 <_scanf_float+0x9c>)
 8004640:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004644:	08004783 	.word	0x08004783
 8004648:	0800460d 	.word	0x0800460d
 800464c:	0800460d 	.word	0x0800460d
 8004650:	0800460d 	.word	0x0800460d
 8004654:	080047e3 	.word	0x080047e3
 8004658:	080047bb 	.word	0x080047bb
 800465c:	0800460d 	.word	0x0800460d
 8004660:	0800460d 	.word	0x0800460d
 8004664:	08004791 	.word	0x08004791
 8004668:	0800460d 	.word	0x0800460d
 800466c:	0800460d 	.word	0x0800460d
 8004670:	0800460d 	.word	0x0800460d
 8004674:	0800460d 	.word	0x0800460d
 8004678:	08004749 	.word	0x08004749
 800467c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004680:	e7db      	b.n	800463a <_scanf_float+0x92>
 8004682:	290e      	cmp	r1, #14
 8004684:	d8c2      	bhi.n	800460c <_scanf_float+0x64>
 8004686:	a001      	add	r0, pc, #4	; (adr r0, 800468c <_scanf_float+0xe4>)
 8004688:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800468c:	0800473b 	.word	0x0800473b
 8004690:	0800460d 	.word	0x0800460d
 8004694:	0800473b 	.word	0x0800473b
 8004698:	080047cf 	.word	0x080047cf
 800469c:	0800460d 	.word	0x0800460d
 80046a0:	080046e9 	.word	0x080046e9
 80046a4:	08004725 	.word	0x08004725
 80046a8:	08004725 	.word	0x08004725
 80046ac:	08004725 	.word	0x08004725
 80046b0:	08004725 	.word	0x08004725
 80046b4:	08004725 	.word	0x08004725
 80046b8:	08004725 	.word	0x08004725
 80046bc:	08004725 	.word	0x08004725
 80046c0:	08004725 	.word	0x08004725
 80046c4:	08004725 	.word	0x08004725
 80046c8:	2b6e      	cmp	r3, #110	; 0x6e
 80046ca:	d809      	bhi.n	80046e0 <_scanf_float+0x138>
 80046cc:	2b60      	cmp	r3, #96	; 0x60
 80046ce:	d8b2      	bhi.n	8004636 <_scanf_float+0x8e>
 80046d0:	2b54      	cmp	r3, #84	; 0x54
 80046d2:	d077      	beq.n	80047c4 <_scanf_float+0x21c>
 80046d4:	2b59      	cmp	r3, #89	; 0x59
 80046d6:	d199      	bne.n	800460c <_scanf_float+0x64>
 80046d8:	2d07      	cmp	r5, #7
 80046da:	d197      	bne.n	800460c <_scanf_float+0x64>
 80046dc:	2508      	movs	r5, #8
 80046de:	e029      	b.n	8004734 <_scanf_float+0x18c>
 80046e0:	2b74      	cmp	r3, #116	; 0x74
 80046e2:	d06f      	beq.n	80047c4 <_scanf_float+0x21c>
 80046e4:	2b79      	cmp	r3, #121	; 0x79
 80046e6:	e7f6      	b.n	80046d6 <_scanf_float+0x12e>
 80046e8:	6821      	ldr	r1, [r4, #0]
 80046ea:	05c8      	lsls	r0, r1, #23
 80046ec:	d51a      	bpl.n	8004724 <_scanf_float+0x17c>
 80046ee:	9b02      	ldr	r3, [sp, #8]
 80046f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80046f4:	6021      	str	r1, [r4, #0]
 80046f6:	f109 0901 	add.w	r9, r9, #1
 80046fa:	b11b      	cbz	r3, 8004704 <_scanf_float+0x15c>
 80046fc:	3b01      	subs	r3, #1
 80046fe:	3201      	adds	r2, #1
 8004700:	9302      	str	r3, [sp, #8]
 8004702:	60a2      	str	r2, [r4, #8]
 8004704:	68a3      	ldr	r3, [r4, #8]
 8004706:	3b01      	subs	r3, #1
 8004708:	60a3      	str	r3, [r4, #8]
 800470a:	6923      	ldr	r3, [r4, #16]
 800470c:	3301      	adds	r3, #1
 800470e:	6123      	str	r3, [r4, #16]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3b01      	subs	r3, #1
 8004714:	2b00      	cmp	r3, #0
 8004716:	607b      	str	r3, [r7, #4]
 8004718:	f340 8084 	ble.w	8004824 <_scanf_float+0x27c>
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	3301      	adds	r3, #1
 8004720:	603b      	str	r3, [r7, #0]
 8004722:	e766      	b.n	80045f2 <_scanf_float+0x4a>
 8004724:	eb1a 0f05 	cmn.w	sl, r5
 8004728:	f47f af70 	bne.w	800460c <_scanf_float+0x64>
 800472c:	6822      	ldr	r2, [r4, #0]
 800472e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004732:	6022      	str	r2, [r4, #0]
 8004734:	f806 3b01 	strb.w	r3, [r6], #1
 8004738:	e7e4      	b.n	8004704 <_scanf_float+0x15c>
 800473a:	6822      	ldr	r2, [r4, #0]
 800473c:	0610      	lsls	r0, r2, #24
 800473e:	f57f af65 	bpl.w	800460c <_scanf_float+0x64>
 8004742:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004746:	e7f4      	b.n	8004732 <_scanf_float+0x18a>
 8004748:	f1ba 0f00 	cmp.w	sl, #0
 800474c:	d10e      	bne.n	800476c <_scanf_float+0x1c4>
 800474e:	f1b9 0f00 	cmp.w	r9, #0
 8004752:	d10e      	bne.n	8004772 <_scanf_float+0x1ca>
 8004754:	6822      	ldr	r2, [r4, #0]
 8004756:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800475a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800475e:	d108      	bne.n	8004772 <_scanf_float+0x1ca>
 8004760:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004764:	f04f 0a01 	mov.w	sl, #1
 8004768:	6022      	str	r2, [r4, #0]
 800476a:	e7e3      	b.n	8004734 <_scanf_float+0x18c>
 800476c:	f1ba 0f02 	cmp.w	sl, #2
 8004770:	d055      	beq.n	800481e <_scanf_float+0x276>
 8004772:	2d01      	cmp	r5, #1
 8004774:	d002      	beq.n	800477c <_scanf_float+0x1d4>
 8004776:	2d04      	cmp	r5, #4
 8004778:	f47f af48 	bne.w	800460c <_scanf_float+0x64>
 800477c:	3501      	adds	r5, #1
 800477e:	b2ed      	uxtb	r5, r5
 8004780:	e7d8      	b.n	8004734 <_scanf_float+0x18c>
 8004782:	f1ba 0f01 	cmp.w	sl, #1
 8004786:	f47f af41 	bne.w	800460c <_scanf_float+0x64>
 800478a:	f04f 0a02 	mov.w	sl, #2
 800478e:	e7d1      	b.n	8004734 <_scanf_float+0x18c>
 8004790:	b97d      	cbnz	r5, 80047b2 <_scanf_float+0x20a>
 8004792:	f1b9 0f00 	cmp.w	r9, #0
 8004796:	f47f af3c 	bne.w	8004612 <_scanf_float+0x6a>
 800479a:	6822      	ldr	r2, [r4, #0]
 800479c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80047a0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80047a4:	f47f af39 	bne.w	800461a <_scanf_float+0x72>
 80047a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80047ac:	2501      	movs	r5, #1
 80047ae:	6022      	str	r2, [r4, #0]
 80047b0:	e7c0      	b.n	8004734 <_scanf_float+0x18c>
 80047b2:	2d03      	cmp	r5, #3
 80047b4:	d0e2      	beq.n	800477c <_scanf_float+0x1d4>
 80047b6:	2d05      	cmp	r5, #5
 80047b8:	e7de      	b.n	8004778 <_scanf_float+0x1d0>
 80047ba:	2d02      	cmp	r5, #2
 80047bc:	f47f af26 	bne.w	800460c <_scanf_float+0x64>
 80047c0:	2503      	movs	r5, #3
 80047c2:	e7b7      	b.n	8004734 <_scanf_float+0x18c>
 80047c4:	2d06      	cmp	r5, #6
 80047c6:	f47f af21 	bne.w	800460c <_scanf_float+0x64>
 80047ca:	2507      	movs	r5, #7
 80047cc:	e7b2      	b.n	8004734 <_scanf_float+0x18c>
 80047ce:	6822      	ldr	r2, [r4, #0]
 80047d0:	0591      	lsls	r1, r2, #22
 80047d2:	f57f af1b 	bpl.w	800460c <_scanf_float+0x64>
 80047d6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80047da:	6022      	str	r2, [r4, #0]
 80047dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80047e0:	e7a8      	b.n	8004734 <_scanf_float+0x18c>
 80047e2:	6822      	ldr	r2, [r4, #0]
 80047e4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80047e8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80047ec:	d006      	beq.n	80047fc <_scanf_float+0x254>
 80047ee:	0550      	lsls	r0, r2, #21
 80047f0:	f57f af0c 	bpl.w	800460c <_scanf_float+0x64>
 80047f4:	f1b9 0f00 	cmp.w	r9, #0
 80047f8:	f43f af0f 	beq.w	800461a <_scanf_float+0x72>
 80047fc:	0591      	lsls	r1, r2, #22
 80047fe:	bf58      	it	pl
 8004800:	9901      	ldrpl	r1, [sp, #4]
 8004802:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004806:	bf58      	it	pl
 8004808:	eba9 0101 	subpl.w	r1, r9, r1
 800480c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004810:	f04f 0900 	mov.w	r9, #0
 8004814:	bf58      	it	pl
 8004816:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800481a:	6022      	str	r2, [r4, #0]
 800481c:	e78a      	b.n	8004734 <_scanf_float+0x18c>
 800481e:	f04f 0a03 	mov.w	sl, #3
 8004822:	e787      	b.n	8004734 <_scanf_float+0x18c>
 8004824:	4639      	mov	r1, r7
 8004826:	4640      	mov	r0, r8
 8004828:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800482c:	4798      	blx	r3
 800482e:	2800      	cmp	r0, #0
 8004830:	f43f aedf 	beq.w	80045f2 <_scanf_float+0x4a>
 8004834:	e6ea      	b.n	800460c <_scanf_float+0x64>
 8004836:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800483a:	463a      	mov	r2, r7
 800483c:	4640      	mov	r0, r8
 800483e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004842:	4798      	blx	r3
 8004844:	6923      	ldr	r3, [r4, #16]
 8004846:	3b01      	subs	r3, #1
 8004848:	6123      	str	r3, [r4, #16]
 800484a:	e6ec      	b.n	8004626 <_scanf_float+0x7e>
 800484c:	1e6b      	subs	r3, r5, #1
 800484e:	2b06      	cmp	r3, #6
 8004850:	d825      	bhi.n	800489e <_scanf_float+0x2f6>
 8004852:	2d02      	cmp	r5, #2
 8004854:	d836      	bhi.n	80048c4 <_scanf_float+0x31c>
 8004856:	455e      	cmp	r6, fp
 8004858:	f67f aee8 	bls.w	800462c <_scanf_float+0x84>
 800485c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004860:	463a      	mov	r2, r7
 8004862:	4640      	mov	r0, r8
 8004864:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004868:	4798      	blx	r3
 800486a:	6923      	ldr	r3, [r4, #16]
 800486c:	3b01      	subs	r3, #1
 800486e:	6123      	str	r3, [r4, #16]
 8004870:	e7f1      	b.n	8004856 <_scanf_float+0x2ae>
 8004872:	9802      	ldr	r0, [sp, #8]
 8004874:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004878:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800487c:	463a      	mov	r2, r7
 800487e:	9002      	str	r0, [sp, #8]
 8004880:	4640      	mov	r0, r8
 8004882:	4798      	blx	r3
 8004884:	6923      	ldr	r3, [r4, #16]
 8004886:	3b01      	subs	r3, #1
 8004888:	6123      	str	r3, [r4, #16]
 800488a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800488e:	fa5f fa8a 	uxtb.w	sl, sl
 8004892:	f1ba 0f02 	cmp.w	sl, #2
 8004896:	d1ec      	bne.n	8004872 <_scanf_float+0x2ca>
 8004898:	3d03      	subs	r5, #3
 800489a:	b2ed      	uxtb	r5, r5
 800489c:	1b76      	subs	r6, r6, r5
 800489e:	6823      	ldr	r3, [r4, #0]
 80048a0:	05da      	lsls	r2, r3, #23
 80048a2:	d52f      	bpl.n	8004904 <_scanf_float+0x35c>
 80048a4:	055b      	lsls	r3, r3, #21
 80048a6:	d510      	bpl.n	80048ca <_scanf_float+0x322>
 80048a8:	455e      	cmp	r6, fp
 80048aa:	f67f aebf 	bls.w	800462c <_scanf_float+0x84>
 80048ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80048b2:	463a      	mov	r2, r7
 80048b4:	4640      	mov	r0, r8
 80048b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80048ba:	4798      	blx	r3
 80048bc:	6923      	ldr	r3, [r4, #16]
 80048be:	3b01      	subs	r3, #1
 80048c0:	6123      	str	r3, [r4, #16]
 80048c2:	e7f1      	b.n	80048a8 <_scanf_float+0x300>
 80048c4:	46aa      	mov	sl, r5
 80048c6:	9602      	str	r6, [sp, #8]
 80048c8:	e7df      	b.n	800488a <_scanf_float+0x2e2>
 80048ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80048ce:	6923      	ldr	r3, [r4, #16]
 80048d0:	2965      	cmp	r1, #101	; 0x65
 80048d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80048d6:	f106 35ff 	add.w	r5, r6, #4294967295
 80048da:	6123      	str	r3, [r4, #16]
 80048dc:	d00c      	beq.n	80048f8 <_scanf_float+0x350>
 80048de:	2945      	cmp	r1, #69	; 0x45
 80048e0:	d00a      	beq.n	80048f8 <_scanf_float+0x350>
 80048e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80048e6:	463a      	mov	r2, r7
 80048e8:	4640      	mov	r0, r8
 80048ea:	4798      	blx	r3
 80048ec:	6923      	ldr	r3, [r4, #16]
 80048ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80048f2:	3b01      	subs	r3, #1
 80048f4:	1eb5      	subs	r5, r6, #2
 80048f6:	6123      	str	r3, [r4, #16]
 80048f8:	463a      	mov	r2, r7
 80048fa:	4640      	mov	r0, r8
 80048fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004900:	4798      	blx	r3
 8004902:	462e      	mov	r6, r5
 8004904:	6825      	ldr	r5, [r4, #0]
 8004906:	f015 0510 	ands.w	r5, r5, #16
 800490a:	d155      	bne.n	80049b8 <_scanf_float+0x410>
 800490c:	7035      	strb	r5, [r6, #0]
 800490e:	6823      	ldr	r3, [r4, #0]
 8004910:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004918:	d11d      	bne.n	8004956 <_scanf_float+0x3ae>
 800491a:	9b01      	ldr	r3, [sp, #4]
 800491c:	454b      	cmp	r3, r9
 800491e:	eba3 0209 	sub.w	r2, r3, r9
 8004922:	d125      	bne.n	8004970 <_scanf_float+0x3c8>
 8004924:	2200      	movs	r2, #0
 8004926:	4659      	mov	r1, fp
 8004928:	4640      	mov	r0, r8
 800492a:	f002 fc35 	bl	8007198 <_strtod_r>
 800492e:	9b03      	ldr	r3, [sp, #12]
 8004930:	f8d4 c000 	ldr.w	ip, [r4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f01c 0f02 	tst.w	ip, #2
 800493a:	4606      	mov	r6, r0
 800493c:	460f      	mov	r7, r1
 800493e:	f103 0204 	add.w	r2, r3, #4
 8004942:	d020      	beq.n	8004986 <_scanf_float+0x3de>
 8004944:	9903      	ldr	r1, [sp, #12]
 8004946:	600a      	str	r2, [r1, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	e9c3 6700 	strd	r6, r7, [r3]
 800494e:	68e3      	ldr	r3, [r4, #12]
 8004950:	3301      	adds	r3, #1
 8004952:	60e3      	str	r3, [r4, #12]
 8004954:	e66b      	b.n	800462e <_scanf_float+0x86>
 8004956:	9b04      	ldr	r3, [sp, #16]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d0e3      	beq.n	8004924 <_scanf_float+0x37c>
 800495c:	9905      	ldr	r1, [sp, #20]
 800495e:	230a      	movs	r3, #10
 8004960:	462a      	mov	r2, r5
 8004962:	4640      	mov	r0, r8
 8004964:	3101      	adds	r1, #1
 8004966:	f002 fc9b 	bl	80072a0 <_strtol_r>
 800496a:	9b04      	ldr	r3, [sp, #16]
 800496c:	9e05      	ldr	r6, [sp, #20]
 800496e:	1ac2      	subs	r2, r0, r3
 8004970:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004974:	429e      	cmp	r6, r3
 8004976:	bf28      	it	cs
 8004978:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800497c:	4630      	mov	r0, r6
 800497e:	490f      	ldr	r1, [pc, #60]	; (80049bc <_scanf_float+0x414>)
 8004980:	f000 f8f4 	bl	8004b6c <siprintf>
 8004984:	e7ce      	b.n	8004924 <_scanf_float+0x37c>
 8004986:	f01c 0f04 	tst.w	ip, #4
 800498a:	d1db      	bne.n	8004944 <_scanf_float+0x39c>
 800498c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004990:	f8cc 2000 	str.w	r2, [ip]
 8004994:	f8d3 8000 	ldr.w	r8, [r3]
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	f7fc f8a2 	bl	8000ae4 <__aeabi_dcmpun>
 80049a0:	b128      	cbz	r0, 80049ae <_scanf_float+0x406>
 80049a2:	4807      	ldr	r0, [pc, #28]	; (80049c0 <_scanf_float+0x418>)
 80049a4:	f000 f9d4 	bl	8004d50 <nanf>
 80049a8:	f8c8 0000 	str.w	r0, [r8]
 80049ac:	e7cf      	b.n	800494e <_scanf_float+0x3a6>
 80049ae:	4630      	mov	r0, r6
 80049b0:	4639      	mov	r1, r7
 80049b2:	f7fc f8f5 	bl	8000ba0 <__aeabi_d2f>
 80049b6:	e7f7      	b.n	80049a8 <_scanf_float+0x400>
 80049b8:	2500      	movs	r5, #0
 80049ba:	e638      	b.n	800462e <_scanf_float+0x86>
 80049bc:	08009cfe 	.word	0x08009cfe
 80049c0:	0800a095 	.word	0x0800a095

080049c4 <std>:
 80049c4:	2300      	movs	r3, #0
 80049c6:	b510      	push	{r4, lr}
 80049c8:	4604      	mov	r4, r0
 80049ca:	e9c0 3300 	strd	r3, r3, [r0]
 80049ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049d2:	6083      	str	r3, [r0, #8]
 80049d4:	8181      	strh	r1, [r0, #12]
 80049d6:	6643      	str	r3, [r0, #100]	; 0x64
 80049d8:	81c2      	strh	r2, [r0, #14]
 80049da:	6183      	str	r3, [r0, #24]
 80049dc:	4619      	mov	r1, r3
 80049de:	2208      	movs	r2, #8
 80049e0:	305c      	adds	r0, #92	; 0x5c
 80049e2:	f000 f926 	bl	8004c32 <memset>
 80049e6:	4b0d      	ldr	r3, [pc, #52]	; (8004a1c <std+0x58>)
 80049e8:	6224      	str	r4, [r4, #32]
 80049ea:	6263      	str	r3, [r4, #36]	; 0x24
 80049ec:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <std+0x5c>)
 80049ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80049f0:	4b0c      	ldr	r3, [pc, #48]	; (8004a24 <std+0x60>)
 80049f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80049f4:	4b0c      	ldr	r3, [pc, #48]	; (8004a28 <std+0x64>)
 80049f6:	6323      	str	r3, [r4, #48]	; 0x30
 80049f8:	4b0c      	ldr	r3, [pc, #48]	; (8004a2c <std+0x68>)
 80049fa:	429c      	cmp	r4, r3
 80049fc:	d006      	beq.n	8004a0c <std+0x48>
 80049fe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004a02:	4294      	cmp	r4, r2
 8004a04:	d002      	beq.n	8004a0c <std+0x48>
 8004a06:	33d0      	adds	r3, #208	; 0xd0
 8004a08:	429c      	cmp	r4, r3
 8004a0a:	d105      	bne.n	8004a18 <std+0x54>
 8004a0c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a14:	f000 b98a 	b.w	8004d2c <__retarget_lock_init_recursive>
 8004a18:	bd10      	pop	{r4, pc}
 8004a1a:	bf00      	nop
 8004a1c:	08004bad 	.word	0x08004bad
 8004a20:	08004bcf 	.word	0x08004bcf
 8004a24:	08004c07 	.word	0x08004c07
 8004a28:	08004c2b 	.word	0x08004c2b
 8004a2c:	20000294 	.word	0x20000294

08004a30 <stdio_exit_handler>:
 8004a30:	4a02      	ldr	r2, [pc, #8]	; (8004a3c <stdio_exit_handler+0xc>)
 8004a32:	4903      	ldr	r1, [pc, #12]	; (8004a40 <stdio_exit_handler+0x10>)
 8004a34:	4803      	ldr	r0, [pc, #12]	; (8004a44 <stdio_exit_handler+0x14>)
 8004a36:	f000 b869 	b.w	8004b0c <_fwalk_sglue>
 8004a3a:	bf00      	nop
 8004a3c:	20000010 	.word	0x20000010
 8004a40:	080078dd 	.word	0x080078dd
 8004a44:	2000001c 	.word	0x2000001c

08004a48 <cleanup_stdio>:
 8004a48:	6841      	ldr	r1, [r0, #4]
 8004a4a:	4b0c      	ldr	r3, [pc, #48]	; (8004a7c <cleanup_stdio+0x34>)
 8004a4c:	b510      	push	{r4, lr}
 8004a4e:	4299      	cmp	r1, r3
 8004a50:	4604      	mov	r4, r0
 8004a52:	d001      	beq.n	8004a58 <cleanup_stdio+0x10>
 8004a54:	f002 ff42 	bl	80078dc <_fflush_r>
 8004a58:	68a1      	ldr	r1, [r4, #8]
 8004a5a:	4b09      	ldr	r3, [pc, #36]	; (8004a80 <cleanup_stdio+0x38>)
 8004a5c:	4299      	cmp	r1, r3
 8004a5e:	d002      	beq.n	8004a66 <cleanup_stdio+0x1e>
 8004a60:	4620      	mov	r0, r4
 8004a62:	f002 ff3b 	bl	80078dc <_fflush_r>
 8004a66:	68e1      	ldr	r1, [r4, #12]
 8004a68:	4b06      	ldr	r3, [pc, #24]	; (8004a84 <cleanup_stdio+0x3c>)
 8004a6a:	4299      	cmp	r1, r3
 8004a6c:	d004      	beq.n	8004a78 <cleanup_stdio+0x30>
 8004a6e:	4620      	mov	r0, r4
 8004a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a74:	f002 bf32 	b.w	80078dc <_fflush_r>
 8004a78:	bd10      	pop	{r4, pc}
 8004a7a:	bf00      	nop
 8004a7c:	20000294 	.word	0x20000294
 8004a80:	200002fc 	.word	0x200002fc
 8004a84:	20000364 	.word	0x20000364

08004a88 <global_stdio_init.part.0>:
 8004a88:	b510      	push	{r4, lr}
 8004a8a:	4b0b      	ldr	r3, [pc, #44]	; (8004ab8 <global_stdio_init.part.0+0x30>)
 8004a8c:	4c0b      	ldr	r4, [pc, #44]	; (8004abc <global_stdio_init.part.0+0x34>)
 8004a8e:	4a0c      	ldr	r2, [pc, #48]	; (8004ac0 <global_stdio_init.part.0+0x38>)
 8004a90:	4620      	mov	r0, r4
 8004a92:	601a      	str	r2, [r3, #0]
 8004a94:	2104      	movs	r1, #4
 8004a96:	2200      	movs	r2, #0
 8004a98:	f7ff ff94 	bl	80049c4 <std>
 8004a9c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	2109      	movs	r1, #9
 8004aa4:	f7ff ff8e 	bl	80049c4 <std>
 8004aa8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004aac:	2202      	movs	r2, #2
 8004aae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ab2:	2112      	movs	r1, #18
 8004ab4:	f7ff bf86 	b.w	80049c4 <std>
 8004ab8:	200003cc 	.word	0x200003cc
 8004abc:	20000294 	.word	0x20000294
 8004ac0:	08004a31 	.word	0x08004a31

08004ac4 <__sfp_lock_acquire>:
 8004ac4:	4801      	ldr	r0, [pc, #4]	; (8004acc <__sfp_lock_acquire+0x8>)
 8004ac6:	f000 b932 	b.w	8004d2e <__retarget_lock_acquire_recursive>
 8004aca:	bf00      	nop
 8004acc:	200003d5 	.word	0x200003d5

08004ad0 <__sfp_lock_release>:
 8004ad0:	4801      	ldr	r0, [pc, #4]	; (8004ad8 <__sfp_lock_release+0x8>)
 8004ad2:	f000 b92d 	b.w	8004d30 <__retarget_lock_release_recursive>
 8004ad6:	bf00      	nop
 8004ad8:	200003d5 	.word	0x200003d5

08004adc <__sinit>:
 8004adc:	b510      	push	{r4, lr}
 8004ade:	4604      	mov	r4, r0
 8004ae0:	f7ff fff0 	bl	8004ac4 <__sfp_lock_acquire>
 8004ae4:	6a23      	ldr	r3, [r4, #32]
 8004ae6:	b11b      	cbz	r3, 8004af0 <__sinit+0x14>
 8004ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004aec:	f7ff bff0 	b.w	8004ad0 <__sfp_lock_release>
 8004af0:	4b04      	ldr	r3, [pc, #16]	; (8004b04 <__sinit+0x28>)
 8004af2:	6223      	str	r3, [r4, #32]
 8004af4:	4b04      	ldr	r3, [pc, #16]	; (8004b08 <__sinit+0x2c>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1f5      	bne.n	8004ae8 <__sinit+0xc>
 8004afc:	f7ff ffc4 	bl	8004a88 <global_stdio_init.part.0>
 8004b00:	e7f2      	b.n	8004ae8 <__sinit+0xc>
 8004b02:	bf00      	nop
 8004b04:	08004a49 	.word	0x08004a49
 8004b08:	200003cc 	.word	0x200003cc

08004b0c <_fwalk_sglue>:
 8004b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b10:	4607      	mov	r7, r0
 8004b12:	4688      	mov	r8, r1
 8004b14:	4614      	mov	r4, r2
 8004b16:	2600      	movs	r6, #0
 8004b18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b1c:	f1b9 0901 	subs.w	r9, r9, #1
 8004b20:	d505      	bpl.n	8004b2e <_fwalk_sglue+0x22>
 8004b22:	6824      	ldr	r4, [r4, #0]
 8004b24:	2c00      	cmp	r4, #0
 8004b26:	d1f7      	bne.n	8004b18 <_fwalk_sglue+0xc>
 8004b28:	4630      	mov	r0, r6
 8004b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b2e:	89ab      	ldrh	r3, [r5, #12]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d907      	bls.n	8004b44 <_fwalk_sglue+0x38>
 8004b34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	d003      	beq.n	8004b44 <_fwalk_sglue+0x38>
 8004b3c:	4629      	mov	r1, r5
 8004b3e:	4638      	mov	r0, r7
 8004b40:	47c0      	blx	r8
 8004b42:	4306      	orrs	r6, r0
 8004b44:	3568      	adds	r5, #104	; 0x68
 8004b46:	e7e9      	b.n	8004b1c <_fwalk_sglue+0x10>

08004b48 <iprintf>:
 8004b48:	b40f      	push	{r0, r1, r2, r3}
 8004b4a:	b507      	push	{r0, r1, r2, lr}
 8004b4c:	4906      	ldr	r1, [pc, #24]	; (8004b68 <iprintf+0x20>)
 8004b4e:	ab04      	add	r3, sp, #16
 8004b50:	6808      	ldr	r0, [r1, #0]
 8004b52:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b56:	6881      	ldr	r1, [r0, #8]
 8004b58:	9301      	str	r3, [sp, #4]
 8004b5a:	f002 fd23 	bl	80075a4 <_vfiprintf_r>
 8004b5e:	b003      	add	sp, #12
 8004b60:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b64:	b004      	add	sp, #16
 8004b66:	4770      	bx	lr
 8004b68:	20000068 	.word	0x20000068

08004b6c <siprintf>:
 8004b6c:	b40e      	push	{r1, r2, r3}
 8004b6e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b72:	b500      	push	{lr}
 8004b74:	b09c      	sub	sp, #112	; 0x70
 8004b76:	ab1d      	add	r3, sp, #116	; 0x74
 8004b78:	9002      	str	r0, [sp, #8]
 8004b7a:	9006      	str	r0, [sp, #24]
 8004b7c:	9107      	str	r1, [sp, #28]
 8004b7e:	9104      	str	r1, [sp, #16]
 8004b80:	4808      	ldr	r0, [pc, #32]	; (8004ba4 <siprintf+0x38>)
 8004b82:	4909      	ldr	r1, [pc, #36]	; (8004ba8 <siprintf+0x3c>)
 8004b84:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b88:	9105      	str	r1, [sp, #20]
 8004b8a:	6800      	ldr	r0, [r0, #0]
 8004b8c:	a902      	add	r1, sp, #8
 8004b8e:	9301      	str	r3, [sp, #4]
 8004b90:	f002 fbe2 	bl	8007358 <_svfiprintf_r>
 8004b94:	2200      	movs	r2, #0
 8004b96:	9b02      	ldr	r3, [sp, #8]
 8004b98:	701a      	strb	r2, [r3, #0]
 8004b9a:	b01c      	add	sp, #112	; 0x70
 8004b9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ba0:	b003      	add	sp, #12
 8004ba2:	4770      	bx	lr
 8004ba4:	20000068 	.word	0x20000068
 8004ba8:	ffff0208 	.word	0xffff0208

08004bac <__sread>:
 8004bac:	b510      	push	{r4, lr}
 8004bae:	460c      	mov	r4, r1
 8004bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bb4:	f000 f86c 	bl	8004c90 <_read_r>
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	bfab      	itete	ge
 8004bbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004bbe:	89a3      	ldrhlt	r3, [r4, #12]
 8004bc0:	181b      	addge	r3, r3, r0
 8004bc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004bc6:	bfac      	ite	ge
 8004bc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004bca:	81a3      	strhlt	r3, [r4, #12]
 8004bcc:	bd10      	pop	{r4, pc}

08004bce <__swrite>:
 8004bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bd2:	461f      	mov	r7, r3
 8004bd4:	898b      	ldrh	r3, [r1, #12]
 8004bd6:	4605      	mov	r5, r0
 8004bd8:	05db      	lsls	r3, r3, #23
 8004bda:	460c      	mov	r4, r1
 8004bdc:	4616      	mov	r6, r2
 8004bde:	d505      	bpl.n	8004bec <__swrite+0x1e>
 8004be0:	2302      	movs	r3, #2
 8004be2:	2200      	movs	r2, #0
 8004be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004be8:	f000 f840 	bl	8004c6c <_lseek_r>
 8004bec:	89a3      	ldrh	r3, [r4, #12]
 8004bee:	4632      	mov	r2, r6
 8004bf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bf4:	81a3      	strh	r3, [r4, #12]
 8004bf6:	4628      	mov	r0, r5
 8004bf8:	463b      	mov	r3, r7
 8004bfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c02:	f000 b857 	b.w	8004cb4 <_write_r>

08004c06 <__sseek>:
 8004c06:	b510      	push	{r4, lr}
 8004c08:	460c      	mov	r4, r1
 8004c0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c0e:	f000 f82d 	bl	8004c6c <_lseek_r>
 8004c12:	1c43      	adds	r3, r0, #1
 8004c14:	89a3      	ldrh	r3, [r4, #12]
 8004c16:	bf15      	itete	ne
 8004c18:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c22:	81a3      	strheq	r3, [r4, #12]
 8004c24:	bf18      	it	ne
 8004c26:	81a3      	strhne	r3, [r4, #12]
 8004c28:	bd10      	pop	{r4, pc}

08004c2a <__sclose>:
 8004c2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c2e:	f000 b80d 	b.w	8004c4c <_close_r>

08004c32 <memset>:
 8004c32:	4603      	mov	r3, r0
 8004c34:	4402      	add	r2, r0
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d100      	bne.n	8004c3c <memset+0xa>
 8004c3a:	4770      	bx	lr
 8004c3c:	f803 1b01 	strb.w	r1, [r3], #1
 8004c40:	e7f9      	b.n	8004c36 <memset+0x4>
	...

08004c44 <_localeconv_r>:
 8004c44:	4800      	ldr	r0, [pc, #0]	; (8004c48 <_localeconv_r+0x4>)
 8004c46:	4770      	bx	lr
 8004c48:	2000015c 	.word	0x2000015c

08004c4c <_close_r>:
 8004c4c:	b538      	push	{r3, r4, r5, lr}
 8004c4e:	2300      	movs	r3, #0
 8004c50:	4d05      	ldr	r5, [pc, #20]	; (8004c68 <_close_r+0x1c>)
 8004c52:	4604      	mov	r4, r0
 8004c54:	4608      	mov	r0, r1
 8004c56:	602b      	str	r3, [r5, #0]
 8004c58:	f7fd f90b 	bl	8001e72 <_close>
 8004c5c:	1c43      	adds	r3, r0, #1
 8004c5e:	d102      	bne.n	8004c66 <_close_r+0x1a>
 8004c60:	682b      	ldr	r3, [r5, #0]
 8004c62:	b103      	cbz	r3, 8004c66 <_close_r+0x1a>
 8004c64:	6023      	str	r3, [r4, #0]
 8004c66:	bd38      	pop	{r3, r4, r5, pc}
 8004c68:	200003d0 	.word	0x200003d0

08004c6c <_lseek_r>:
 8004c6c:	b538      	push	{r3, r4, r5, lr}
 8004c6e:	4604      	mov	r4, r0
 8004c70:	4608      	mov	r0, r1
 8004c72:	4611      	mov	r1, r2
 8004c74:	2200      	movs	r2, #0
 8004c76:	4d05      	ldr	r5, [pc, #20]	; (8004c8c <_lseek_r+0x20>)
 8004c78:	602a      	str	r2, [r5, #0]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	f7fd f91d 	bl	8001eba <_lseek>
 8004c80:	1c43      	adds	r3, r0, #1
 8004c82:	d102      	bne.n	8004c8a <_lseek_r+0x1e>
 8004c84:	682b      	ldr	r3, [r5, #0]
 8004c86:	b103      	cbz	r3, 8004c8a <_lseek_r+0x1e>
 8004c88:	6023      	str	r3, [r4, #0]
 8004c8a:	bd38      	pop	{r3, r4, r5, pc}
 8004c8c:	200003d0 	.word	0x200003d0

08004c90 <_read_r>:
 8004c90:	b538      	push	{r3, r4, r5, lr}
 8004c92:	4604      	mov	r4, r0
 8004c94:	4608      	mov	r0, r1
 8004c96:	4611      	mov	r1, r2
 8004c98:	2200      	movs	r2, #0
 8004c9a:	4d05      	ldr	r5, [pc, #20]	; (8004cb0 <_read_r+0x20>)
 8004c9c:	602a      	str	r2, [r5, #0]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	f7fd f8ae 	bl	8001e00 <_read>
 8004ca4:	1c43      	adds	r3, r0, #1
 8004ca6:	d102      	bne.n	8004cae <_read_r+0x1e>
 8004ca8:	682b      	ldr	r3, [r5, #0]
 8004caa:	b103      	cbz	r3, 8004cae <_read_r+0x1e>
 8004cac:	6023      	str	r3, [r4, #0]
 8004cae:	bd38      	pop	{r3, r4, r5, pc}
 8004cb0:	200003d0 	.word	0x200003d0

08004cb4 <_write_r>:
 8004cb4:	b538      	push	{r3, r4, r5, lr}
 8004cb6:	4604      	mov	r4, r0
 8004cb8:	4608      	mov	r0, r1
 8004cba:	4611      	mov	r1, r2
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	4d05      	ldr	r5, [pc, #20]	; (8004cd4 <_write_r+0x20>)
 8004cc0:	602a      	str	r2, [r5, #0]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	f7fd f8b9 	bl	8001e3a <_write>
 8004cc8:	1c43      	adds	r3, r0, #1
 8004cca:	d102      	bne.n	8004cd2 <_write_r+0x1e>
 8004ccc:	682b      	ldr	r3, [r5, #0]
 8004cce:	b103      	cbz	r3, 8004cd2 <_write_r+0x1e>
 8004cd0:	6023      	str	r3, [r4, #0]
 8004cd2:	bd38      	pop	{r3, r4, r5, pc}
 8004cd4:	200003d0 	.word	0x200003d0

08004cd8 <__errno>:
 8004cd8:	4b01      	ldr	r3, [pc, #4]	; (8004ce0 <__errno+0x8>)
 8004cda:	6818      	ldr	r0, [r3, #0]
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	20000068 	.word	0x20000068

08004ce4 <__libc_init_array>:
 8004ce4:	b570      	push	{r4, r5, r6, lr}
 8004ce6:	2600      	movs	r6, #0
 8004ce8:	4d0c      	ldr	r5, [pc, #48]	; (8004d1c <__libc_init_array+0x38>)
 8004cea:	4c0d      	ldr	r4, [pc, #52]	; (8004d20 <__libc_init_array+0x3c>)
 8004cec:	1b64      	subs	r4, r4, r5
 8004cee:	10a4      	asrs	r4, r4, #2
 8004cf0:	42a6      	cmp	r6, r4
 8004cf2:	d109      	bne.n	8004d08 <__libc_init_array+0x24>
 8004cf4:	f003 fbc4 	bl	8008480 <_init>
 8004cf8:	2600      	movs	r6, #0
 8004cfa:	4d0a      	ldr	r5, [pc, #40]	; (8004d24 <__libc_init_array+0x40>)
 8004cfc:	4c0a      	ldr	r4, [pc, #40]	; (8004d28 <__libc_init_array+0x44>)
 8004cfe:	1b64      	subs	r4, r4, r5
 8004d00:	10a4      	asrs	r4, r4, #2
 8004d02:	42a6      	cmp	r6, r4
 8004d04:	d105      	bne.n	8004d12 <__libc_init_array+0x2e>
 8004d06:	bd70      	pop	{r4, r5, r6, pc}
 8004d08:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d0c:	4798      	blx	r3
 8004d0e:	3601      	adds	r6, #1
 8004d10:	e7ee      	b.n	8004cf0 <__libc_init_array+0xc>
 8004d12:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d16:	4798      	blx	r3
 8004d18:	3601      	adds	r6, #1
 8004d1a:	e7f2      	b.n	8004d02 <__libc_init_array+0x1e>
 8004d1c:	0800a0f8 	.word	0x0800a0f8
 8004d20:	0800a0f8 	.word	0x0800a0f8
 8004d24:	0800a0f8 	.word	0x0800a0f8
 8004d28:	0800a0fc 	.word	0x0800a0fc

08004d2c <__retarget_lock_init_recursive>:
 8004d2c:	4770      	bx	lr

08004d2e <__retarget_lock_acquire_recursive>:
 8004d2e:	4770      	bx	lr

08004d30 <__retarget_lock_release_recursive>:
 8004d30:	4770      	bx	lr

08004d32 <memchr>:
 8004d32:	4603      	mov	r3, r0
 8004d34:	b510      	push	{r4, lr}
 8004d36:	b2c9      	uxtb	r1, r1
 8004d38:	4402      	add	r2, r0
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	d101      	bne.n	8004d44 <memchr+0x12>
 8004d40:	2000      	movs	r0, #0
 8004d42:	e003      	b.n	8004d4c <memchr+0x1a>
 8004d44:	7804      	ldrb	r4, [r0, #0]
 8004d46:	3301      	adds	r3, #1
 8004d48:	428c      	cmp	r4, r1
 8004d4a:	d1f6      	bne.n	8004d3a <memchr+0x8>
 8004d4c:	bd10      	pop	{r4, pc}
	...

08004d50 <nanf>:
 8004d50:	4800      	ldr	r0, [pc, #0]	; (8004d54 <nanf+0x4>)
 8004d52:	4770      	bx	lr
 8004d54:	7fc00000 	.word	0x7fc00000

08004d58 <quorem>:
 8004d58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d5c:	6903      	ldr	r3, [r0, #16]
 8004d5e:	690c      	ldr	r4, [r1, #16]
 8004d60:	4607      	mov	r7, r0
 8004d62:	42a3      	cmp	r3, r4
 8004d64:	db7f      	blt.n	8004e66 <quorem+0x10e>
 8004d66:	3c01      	subs	r4, #1
 8004d68:	f100 0514 	add.w	r5, r0, #20
 8004d6c:	f101 0814 	add.w	r8, r1, #20
 8004d70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d74:	9301      	str	r3, [sp, #4]
 8004d76:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004d7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	429a      	cmp	r2, r3
 8004d82:	fbb2 f6f3 	udiv	r6, r2, r3
 8004d86:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004d8a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004d8e:	d331      	bcc.n	8004df4 <quorem+0x9c>
 8004d90:	f04f 0e00 	mov.w	lr, #0
 8004d94:	4640      	mov	r0, r8
 8004d96:	46ac      	mov	ip, r5
 8004d98:	46f2      	mov	sl, lr
 8004d9a:	f850 2b04 	ldr.w	r2, [r0], #4
 8004d9e:	b293      	uxth	r3, r2
 8004da0:	fb06 e303 	mla	r3, r6, r3, lr
 8004da4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004da8:	0c1a      	lsrs	r2, r3, #16
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	fb06 220e 	mla	r2, r6, lr, r2
 8004db0:	ebaa 0303 	sub.w	r3, sl, r3
 8004db4:	f8dc a000 	ldr.w	sl, [ip]
 8004db8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004dbc:	fa1f fa8a 	uxth.w	sl, sl
 8004dc0:	4453      	add	r3, sl
 8004dc2:	f8dc a000 	ldr.w	sl, [ip]
 8004dc6:	b292      	uxth	r2, r2
 8004dc8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004dcc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004dd6:	4581      	cmp	r9, r0
 8004dd8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004ddc:	f84c 3b04 	str.w	r3, [ip], #4
 8004de0:	d2db      	bcs.n	8004d9a <quorem+0x42>
 8004de2:	f855 300b 	ldr.w	r3, [r5, fp]
 8004de6:	b92b      	cbnz	r3, 8004df4 <quorem+0x9c>
 8004de8:	9b01      	ldr	r3, [sp, #4]
 8004dea:	3b04      	subs	r3, #4
 8004dec:	429d      	cmp	r5, r3
 8004dee:	461a      	mov	r2, r3
 8004df0:	d32d      	bcc.n	8004e4e <quorem+0xf6>
 8004df2:	613c      	str	r4, [r7, #16]
 8004df4:	4638      	mov	r0, r7
 8004df6:	f001 f9df 	bl	80061b8 <__mcmp>
 8004dfa:	2800      	cmp	r0, #0
 8004dfc:	db23      	blt.n	8004e46 <quorem+0xee>
 8004dfe:	4629      	mov	r1, r5
 8004e00:	2000      	movs	r0, #0
 8004e02:	3601      	adds	r6, #1
 8004e04:	f858 2b04 	ldr.w	r2, [r8], #4
 8004e08:	f8d1 c000 	ldr.w	ip, [r1]
 8004e0c:	b293      	uxth	r3, r2
 8004e0e:	1ac3      	subs	r3, r0, r3
 8004e10:	0c12      	lsrs	r2, r2, #16
 8004e12:	fa1f f08c 	uxth.w	r0, ip
 8004e16:	4403      	add	r3, r0
 8004e18:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004e1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e26:	45c1      	cmp	r9, r8
 8004e28:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004e2c:	f841 3b04 	str.w	r3, [r1], #4
 8004e30:	d2e8      	bcs.n	8004e04 <quorem+0xac>
 8004e32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e3a:	b922      	cbnz	r2, 8004e46 <quorem+0xee>
 8004e3c:	3b04      	subs	r3, #4
 8004e3e:	429d      	cmp	r5, r3
 8004e40:	461a      	mov	r2, r3
 8004e42:	d30a      	bcc.n	8004e5a <quorem+0x102>
 8004e44:	613c      	str	r4, [r7, #16]
 8004e46:	4630      	mov	r0, r6
 8004e48:	b003      	add	sp, #12
 8004e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e4e:	6812      	ldr	r2, [r2, #0]
 8004e50:	3b04      	subs	r3, #4
 8004e52:	2a00      	cmp	r2, #0
 8004e54:	d1cd      	bne.n	8004df2 <quorem+0x9a>
 8004e56:	3c01      	subs	r4, #1
 8004e58:	e7c8      	b.n	8004dec <quorem+0x94>
 8004e5a:	6812      	ldr	r2, [r2, #0]
 8004e5c:	3b04      	subs	r3, #4
 8004e5e:	2a00      	cmp	r2, #0
 8004e60:	d1f0      	bne.n	8004e44 <quorem+0xec>
 8004e62:	3c01      	subs	r4, #1
 8004e64:	e7eb      	b.n	8004e3e <quorem+0xe6>
 8004e66:	2000      	movs	r0, #0
 8004e68:	e7ee      	b.n	8004e48 <quorem+0xf0>
 8004e6a:	0000      	movs	r0, r0
 8004e6c:	0000      	movs	r0, r0
	...

08004e70 <_dtoa_r>:
 8004e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e74:	4616      	mov	r6, r2
 8004e76:	461f      	mov	r7, r3
 8004e78:	69c4      	ldr	r4, [r0, #28]
 8004e7a:	b099      	sub	sp, #100	; 0x64
 8004e7c:	4605      	mov	r5, r0
 8004e7e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004e82:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004e86:	b974      	cbnz	r4, 8004ea6 <_dtoa_r+0x36>
 8004e88:	2010      	movs	r0, #16
 8004e8a:	f000 fe1d 	bl	8005ac8 <malloc>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	61e8      	str	r0, [r5, #28]
 8004e92:	b920      	cbnz	r0, 8004e9e <_dtoa_r+0x2e>
 8004e94:	21ef      	movs	r1, #239	; 0xef
 8004e96:	4bac      	ldr	r3, [pc, #688]	; (8005148 <_dtoa_r+0x2d8>)
 8004e98:	48ac      	ldr	r0, [pc, #688]	; (800514c <_dtoa_r+0x2dc>)
 8004e9a:	f002 fe2d 	bl	8007af8 <__assert_func>
 8004e9e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004ea2:	6004      	str	r4, [r0, #0]
 8004ea4:	60c4      	str	r4, [r0, #12]
 8004ea6:	69eb      	ldr	r3, [r5, #28]
 8004ea8:	6819      	ldr	r1, [r3, #0]
 8004eaa:	b151      	cbz	r1, 8004ec2 <_dtoa_r+0x52>
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	2301      	movs	r3, #1
 8004eb0:	4093      	lsls	r3, r2
 8004eb2:	604a      	str	r2, [r1, #4]
 8004eb4:	608b      	str	r3, [r1, #8]
 8004eb6:	4628      	mov	r0, r5
 8004eb8:	f000 fefa 	bl	8005cb0 <_Bfree>
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	69eb      	ldr	r3, [r5, #28]
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	1e3b      	subs	r3, r7, #0
 8004ec4:	bfaf      	iteee	ge
 8004ec6:	2300      	movge	r3, #0
 8004ec8:	2201      	movlt	r2, #1
 8004eca:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004ece:	9305      	strlt	r3, [sp, #20]
 8004ed0:	bfa8      	it	ge
 8004ed2:	f8c8 3000 	strge.w	r3, [r8]
 8004ed6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004eda:	4b9d      	ldr	r3, [pc, #628]	; (8005150 <_dtoa_r+0x2e0>)
 8004edc:	bfb8      	it	lt
 8004ede:	f8c8 2000 	strlt.w	r2, [r8]
 8004ee2:	ea33 0309 	bics.w	r3, r3, r9
 8004ee6:	d119      	bne.n	8004f1c <_dtoa_r+0xac>
 8004ee8:	f242 730f 	movw	r3, #9999	; 0x270f
 8004eec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004eee:	6013      	str	r3, [r2, #0]
 8004ef0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004ef4:	4333      	orrs	r3, r6
 8004ef6:	f000 8589 	beq.w	8005a0c <_dtoa_r+0xb9c>
 8004efa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004efc:	b953      	cbnz	r3, 8004f14 <_dtoa_r+0xa4>
 8004efe:	4b95      	ldr	r3, [pc, #596]	; (8005154 <_dtoa_r+0x2e4>)
 8004f00:	e023      	b.n	8004f4a <_dtoa_r+0xda>
 8004f02:	4b95      	ldr	r3, [pc, #596]	; (8005158 <_dtoa_r+0x2e8>)
 8004f04:	9303      	str	r3, [sp, #12]
 8004f06:	3308      	adds	r3, #8
 8004f08:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004f0a:	6013      	str	r3, [r2, #0]
 8004f0c:	9803      	ldr	r0, [sp, #12]
 8004f0e:	b019      	add	sp, #100	; 0x64
 8004f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f14:	4b8f      	ldr	r3, [pc, #572]	; (8005154 <_dtoa_r+0x2e4>)
 8004f16:	9303      	str	r3, [sp, #12]
 8004f18:	3303      	adds	r3, #3
 8004f1a:	e7f5      	b.n	8004f08 <_dtoa_r+0x98>
 8004f1c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004f20:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004f24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f28:	2200      	movs	r2, #0
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	f7fb fda8 	bl	8000a80 <__aeabi_dcmpeq>
 8004f30:	4680      	mov	r8, r0
 8004f32:	b160      	cbz	r0, 8004f4e <_dtoa_r+0xde>
 8004f34:	2301      	movs	r3, #1
 8004f36:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004f38:	6013      	str	r3, [r2, #0]
 8004f3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 8562 	beq.w	8005a06 <_dtoa_r+0xb96>
 8004f42:	4b86      	ldr	r3, [pc, #536]	; (800515c <_dtoa_r+0x2ec>)
 8004f44:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004f46:	6013      	str	r3, [r2, #0]
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	9303      	str	r3, [sp, #12]
 8004f4c:	e7de      	b.n	8004f0c <_dtoa_r+0x9c>
 8004f4e:	ab16      	add	r3, sp, #88	; 0x58
 8004f50:	9301      	str	r3, [sp, #4]
 8004f52:	ab17      	add	r3, sp, #92	; 0x5c
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	4628      	mov	r0, r5
 8004f58:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004f5c:	f001 fa3c 	bl	80063d8 <__d2b>
 8004f60:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004f64:	4682      	mov	sl, r0
 8004f66:	2c00      	cmp	r4, #0
 8004f68:	d07e      	beq.n	8005068 <_dtoa_r+0x1f8>
 8004f6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f70:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004f74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f78:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004f7c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004f80:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004f84:	4619      	mov	r1, r3
 8004f86:	2200      	movs	r2, #0
 8004f88:	4b75      	ldr	r3, [pc, #468]	; (8005160 <_dtoa_r+0x2f0>)
 8004f8a:	f7fb f959 	bl	8000240 <__aeabi_dsub>
 8004f8e:	a368      	add	r3, pc, #416	; (adr r3, 8005130 <_dtoa_r+0x2c0>)
 8004f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f94:	f7fb fb0c 	bl	80005b0 <__aeabi_dmul>
 8004f98:	a367      	add	r3, pc, #412	; (adr r3, 8005138 <_dtoa_r+0x2c8>)
 8004f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9e:	f7fb f951 	bl	8000244 <__adddf3>
 8004fa2:	4606      	mov	r6, r0
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	460f      	mov	r7, r1
 8004fa8:	f7fb fa98 	bl	80004dc <__aeabi_i2d>
 8004fac:	a364      	add	r3, pc, #400	; (adr r3, 8005140 <_dtoa_r+0x2d0>)
 8004fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb2:	f7fb fafd 	bl	80005b0 <__aeabi_dmul>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	460b      	mov	r3, r1
 8004fba:	4630      	mov	r0, r6
 8004fbc:	4639      	mov	r1, r7
 8004fbe:	f7fb f941 	bl	8000244 <__adddf3>
 8004fc2:	4606      	mov	r6, r0
 8004fc4:	460f      	mov	r7, r1
 8004fc6:	f7fb fda3 	bl	8000b10 <__aeabi_d2iz>
 8004fca:	2200      	movs	r2, #0
 8004fcc:	4683      	mov	fp, r0
 8004fce:	2300      	movs	r3, #0
 8004fd0:	4630      	mov	r0, r6
 8004fd2:	4639      	mov	r1, r7
 8004fd4:	f7fb fd5e 	bl	8000a94 <__aeabi_dcmplt>
 8004fd8:	b148      	cbz	r0, 8004fee <_dtoa_r+0x17e>
 8004fda:	4658      	mov	r0, fp
 8004fdc:	f7fb fa7e 	bl	80004dc <__aeabi_i2d>
 8004fe0:	4632      	mov	r2, r6
 8004fe2:	463b      	mov	r3, r7
 8004fe4:	f7fb fd4c 	bl	8000a80 <__aeabi_dcmpeq>
 8004fe8:	b908      	cbnz	r0, 8004fee <_dtoa_r+0x17e>
 8004fea:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004fee:	f1bb 0f16 	cmp.w	fp, #22
 8004ff2:	d857      	bhi.n	80050a4 <_dtoa_r+0x234>
 8004ff4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ff8:	4b5a      	ldr	r3, [pc, #360]	; (8005164 <_dtoa_r+0x2f4>)
 8004ffa:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005002:	f7fb fd47 	bl	8000a94 <__aeabi_dcmplt>
 8005006:	2800      	cmp	r0, #0
 8005008:	d04e      	beq.n	80050a8 <_dtoa_r+0x238>
 800500a:	2300      	movs	r3, #0
 800500c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005010:	930f      	str	r3, [sp, #60]	; 0x3c
 8005012:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005014:	1b1b      	subs	r3, r3, r4
 8005016:	1e5a      	subs	r2, r3, #1
 8005018:	bf46      	itte	mi
 800501a:	f1c3 0901 	rsbmi	r9, r3, #1
 800501e:	2300      	movmi	r3, #0
 8005020:	f04f 0900 	movpl.w	r9, #0
 8005024:	9209      	str	r2, [sp, #36]	; 0x24
 8005026:	bf48      	it	mi
 8005028:	9309      	strmi	r3, [sp, #36]	; 0x24
 800502a:	f1bb 0f00 	cmp.w	fp, #0
 800502e:	db3d      	blt.n	80050ac <_dtoa_r+0x23c>
 8005030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005032:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005036:	445b      	add	r3, fp
 8005038:	9309      	str	r3, [sp, #36]	; 0x24
 800503a:	2300      	movs	r3, #0
 800503c:	930a      	str	r3, [sp, #40]	; 0x28
 800503e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005040:	2b09      	cmp	r3, #9
 8005042:	d867      	bhi.n	8005114 <_dtoa_r+0x2a4>
 8005044:	2b05      	cmp	r3, #5
 8005046:	bfc4      	itt	gt
 8005048:	3b04      	subgt	r3, #4
 800504a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800504c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800504e:	bfc8      	it	gt
 8005050:	2400      	movgt	r4, #0
 8005052:	f1a3 0302 	sub.w	r3, r3, #2
 8005056:	bfd8      	it	le
 8005058:	2401      	movle	r4, #1
 800505a:	2b03      	cmp	r3, #3
 800505c:	f200 8086 	bhi.w	800516c <_dtoa_r+0x2fc>
 8005060:	e8df f003 	tbb	[pc, r3]
 8005064:	5637392c 	.word	0x5637392c
 8005068:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800506c:	441c      	add	r4, r3
 800506e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005072:	2b20      	cmp	r3, #32
 8005074:	bfc1      	itttt	gt
 8005076:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800507a:	fa09 f903 	lslgt.w	r9, r9, r3
 800507e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005082:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005086:	bfd6      	itet	le
 8005088:	f1c3 0320 	rsble	r3, r3, #32
 800508c:	ea49 0003 	orrgt.w	r0, r9, r3
 8005090:	fa06 f003 	lslle.w	r0, r6, r3
 8005094:	f7fb fa12 	bl	80004bc <__aeabi_ui2d>
 8005098:	2201      	movs	r2, #1
 800509a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800509e:	3c01      	subs	r4, #1
 80050a0:	9213      	str	r2, [sp, #76]	; 0x4c
 80050a2:	e76f      	b.n	8004f84 <_dtoa_r+0x114>
 80050a4:	2301      	movs	r3, #1
 80050a6:	e7b3      	b.n	8005010 <_dtoa_r+0x1a0>
 80050a8:	900f      	str	r0, [sp, #60]	; 0x3c
 80050aa:	e7b2      	b.n	8005012 <_dtoa_r+0x1a2>
 80050ac:	f1cb 0300 	rsb	r3, fp, #0
 80050b0:	930a      	str	r3, [sp, #40]	; 0x28
 80050b2:	2300      	movs	r3, #0
 80050b4:	eba9 090b 	sub.w	r9, r9, fp
 80050b8:	930e      	str	r3, [sp, #56]	; 0x38
 80050ba:	e7c0      	b.n	800503e <_dtoa_r+0x1ce>
 80050bc:	2300      	movs	r3, #0
 80050be:	930b      	str	r3, [sp, #44]	; 0x2c
 80050c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	dc55      	bgt.n	8005172 <_dtoa_r+0x302>
 80050c6:	2301      	movs	r3, #1
 80050c8:	461a      	mov	r2, r3
 80050ca:	9306      	str	r3, [sp, #24]
 80050cc:	9308      	str	r3, [sp, #32]
 80050ce:	9223      	str	r2, [sp, #140]	; 0x8c
 80050d0:	e00b      	b.n	80050ea <_dtoa_r+0x27a>
 80050d2:	2301      	movs	r3, #1
 80050d4:	e7f3      	b.n	80050be <_dtoa_r+0x24e>
 80050d6:	2300      	movs	r3, #0
 80050d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80050da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80050dc:	445b      	add	r3, fp
 80050de:	9306      	str	r3, [sp, #24]
 80050e0:	3301      	adds	r3, #1
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	9308      	str	r3, [sp, #32]
 80050e6:	bfb8      	it	lt
 80050e8:	2301      	movlt	r3, #1
 80050ea:	2100      	movs	r1, #0
 80050ec:	2204      	movs	r2, #4
 80050ee:	69e8      	ldr	r0, [r5, #28]
 80050f0:	f102 0614 	add.w	r6, r2, #20
 80050f4:	429e      	cmp	r6, r3
 80050f6:	d940      	bls.n	800517a <_dtoa_r+0x30a>
 80050f8:	6041      	str	r1, [r0, #4]
 80050fa:	4628      	mov	r0, r5
 80050fc:	f000 fd98 	bl	8005c30 <_Balloc>
 8005100:	9003      	str	r0, [sp, #12]
 8005102:	2800      	cmp	r0, #0
 8005104:	d13c      	bne.n	8005180 <_dtoa_r+0x310>
 8005106:	4602      	mov	r2, r0
 8005108:	f240 11af 	movw	r1, #431	; 0x1af
 800510c:	4b16      	ldr	r3, [pc, #88]	; (8005168 <_dtoa_r+0x2f8>)
 800510e:	e6c3      	b.n	8004e98 <_dtoa_r+0x28>
 8005110:	2301      	movs	r3, #1
 8005112:	e7e1      	b.n	80050d8 <_dtoa_r+0x268>
 8005114:	2401      	movs	r4, #1
 8005116:	2300      	movs	r3, #0
 8005118:	940b      	str	r4, [sp, #44]	; 0x2c
 800511a:	9322      	str	r3, [sp, #136]	; 0x88
 800511c:	f04f 33ff 	mov.w	r3, #4294967295
 8005120:	2200      	movs	r2, #0
 8005122:	9306      	str	r3, [sp, #24]
 8005124:	9308      	str	r3, [sp, #32]
 8005126:	2312      	movs	r3, #18
 8005128:	e7d1      	b.n	80050ce <_dtoa_r+0x25e>
 800512a:	bf00      	nop
 800512c:	f3af 8000 	nop.w
 8005130:	636f4361 	.word	0x636f4361
 8005134:	3fd287a7 	.word	0x3fd287a7
 8005138:	8b60c8b3 	.word	0x8b60c8b3
 800513c:	3fc68a28 	.word	0x3fc68a28
 8005140:	509f79fb 	.word	0x509f79fb
 8005144:	3fd34413 	.word	0x3fd34413
 8005148:	08009d10 	.word	0x08009d10
 800514c:	08009d27 	.word	0x08009d27
 8005150:	7ff00000 	.word	0x7ff00000
 8005154:	08009d0c 	.word	0x08009d0c
 8005158:	08009d03 	.word	0x08009d03
 800515c:	08009cdb 	.word	0x08009cdb
 8005160:	3ff80000 	.word	0x3ff80000
 8005164:	08009e18 	.word	0x08009e18
 8005168:	08009d7f 	.word	0x08009d7f
 800516c:	2301      	movs	r3, #1
 800516e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005170:	e7d4      	b.n	800511c <_dtoa_r+0x2ac>
 8005172:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005174:	9306      	str	r3, [sp, #24]
 8005176:	9308      	str	r3, [sp, #32]
 8005178:	e7b7      	b.n	80050ea <_dtoa_r+0x27a>
 800517a:	3101      	adds	r1, #1
 800517c:	0052      	lsls	r2, r2, #1
 800517e:	e7b7      	b.n	80050f0 <_dtoa_r+0x280>
 8005180:	69eb      	ldr	r3, [r5, #28]
 8005182:	9a03      	ldr	r2, [sp, #12]
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	9b08      	ldr	r3, [sp, #32]
 8005188:	2b0e      	cmp	r3, #14
 800518a:	f200 80a8 	bhi.w	80052de <_dtoa_r+0x46e>
 800518e:	2c00      	cmp	r4, #0
 8005190:	f000 80a5 	beq.w	80052de <_dtoa_r+0x46e>
 8005194:	f1bb 0f00 	cmp.w	fp, #0
 8005198:	dd34      	ble.n	8005204 <_dtoa_r+0x394>
 800519a:	4b9a      	ldr	r3, [pc, #616]	; (8005404 <_dtoa_r+0x594>)
 800519c:	f00b 020f 	and.w	r2, fp, #15
 80051a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051a4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80051a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80051ac:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80051b0:	ea4f 142b 	mov.w	r4, fp, asr #4
 80051b4:	d016      	beq.n	80051e4 <_dtoa_r+0x374>
 80051b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051ba:	4b93      	ldr	r3, [pc, #588]	; (8005408 <_dtoa_r+0x598>)
 80051bc:	2703      	movs	r7, #3
 80051be:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051c2:	f7fb fb1f 	bl	8000804 <__aeabi_ddiv>
 80051c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051ca:	f004 040f 	and.w	r4, r4, #15
 80051ce:	4e8e      	ldr	r6, [pc, #568]	; (8005408 <_dtoa_r+0x598>)
 80051d0:	b954      	cbnz	r4, 80051e8 <_dtoa_r+0x378>
 80051d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051da:	f7fb fb13 	bl	8000804 <__aeabi_ddiv>
 80051de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051e2:	e029      	b.n	8005238 <_dtoa_r+0x3c8>
 80051e4:	2702      	movs	r7, #2
 80051e6:	e7f2      	b.n	80051ce <_dtoa_r+0x35e>
 80051e8:	07e1      	lsls	r1, r4, #31
 80051ea:	d508      	bpl.n	80051fe <_dtoa_r+0x38e>
 80051ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80051f0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80051f4:	f7fb f9dc 	bl	80005b0 <__aeabi_dmul>
 80051f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80051fc:	3701      	adds	r7, #1
 80051fe:	1064      	asrs	r4, r4, #1
 8005200:	3608      	adds	r6, #8
 8005202:	e7e5      	b.n	80051d0 <_dtoa_r+0x360>
 8005204:	f000 80a5 	beq.w	8005352 <_dtoa_r+0x4e2>
 8005208:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800520c:	f1cb 0400 	rsb	r4, fp, #0
 8005210:	4b7c      	ldr	r3, [pc, #496]	; (8005404 <_dtoa_r+0x594>)
 8005212:	f004 020f 	and.w	r2, r4, #15
 8005216:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800521a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521e:	f7fb f9c7 	bl	80005b0 <__aeabi_dmul>
 8005222:	2702      	movs	r7, #2
 8005224:	2300      	movs	r3, #0
 8005226:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800522a:	4e77      	ldr	r6, [pc, #476]	; (8005408 <_dtoa_r+0x598>)
 800522c:	1124      	asrs	r4, r4, #4
 800522e:	2c00      	cmp	r4, #0
 8005230:	f040 8084 	bne.w	800533c <_dtoa_r+0x4cc>
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1d2      	bne.n	80051de <_dtoa_r+0x36e>
 8005238:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800523c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005240:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005242:	2b00      	cmp	r3, #0
 8005244:	f000 8087 	beq.w	8005356 <_dtoa_r+0x4e6>
 8005248:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800524c:	2200      	movs	r2, #0
 800524e:	4b6f      	ldr	r3, [pc, #444]	; (800540c <_dtoa_r+0x59c>)
 8005250:	f7fb fc20 	bl	8000a94 <__aeabi_dcmplt>
 8005254:	2800      	cmp	r0, #0
 8005256:	d07e      	beq.n	8005356 <_dtoa_r+0x4e6>
 8005258:	9b08      	ldr	r3, [sp, #32]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d07b      	beq.n	8005356 <_dtoa_r+0x4e6>
 800525e:	9b06      	ldr	r3, [sp, #24]
 8005260:	2b00      	cmp	r3, #0
 8005262:	dd38      	ble.n	80052d6 <_dtoa_r+0x466>
 8005264:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005268:	2200      	movs	r2, #0
 800526a:	4b69      	ldr	r3, [pc, #420]	; (8005410 <_dtoa_r+0x5a0>)
 800526c:	f7fb f9a0 	bl	80005b0 <__aeabi_dmul>
 8005270:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005274:	9c06      	ldr	r4, [sp, #24]
 8005276:	f10b 38ff 	add.w	r8, fp, #4294967295
 800527a:	3701      	adds	r7, #1
 800527c:	4638      	mov	r0, r7
 800527e:	f7fb f92d 	bl	80004dc <__aeabi_i2d>
 8005282:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005286:	f7fb f993 	bl	80005b0 <__aeabi_dmul>
 800528a:	2200      	movs	r2, #0
 800528c:	4b61      	ldr	r3, [pc, #388]	; (8005414 <_dtoa_r+0x5a4>)
 800528e:	f7fa ffd9 	bl	8000244 <__adddf3>
 8005292:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005296:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800529a:	9611      	str	r6, [sp, #68]	; 0x44
 800529c:	2c00      	cmp	r4, #0
 800529e:	d15d      	bne.n	800535c <_dtoa_r+0x4ec>
 80052a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052a4:	2200      	movs	r2, #0
 80052a6:	4b5c      	ldr	r3, [pc, #368]	; (8005418 <_dtoa_r+0x5a8>)
 80052a8:	f7fa ffca 	bl	8000240 <__aeabi_dsub>
 80052ac:	4602      	mov	r2, r0
 80052ae:	460b      	mov	r3, r1
 80052b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80052b4:	4633      	mov	r3, r6
 80052b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80052b8:	f7fb fc0a 	bl	8000ad0 <__aeabi_dcmpgt>
 80052bc:	2800      	cmp	r0, #0
 80052be:	f040 8295 	bne.w	80057ec <_dtoa_r+0x97c>
 80052c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80052c8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80052cc:	f7fb fbe2 	bl	8000a94 <__aeabi_dcmplt>
 80052d0:	2800      	cmp	r0, #0
 80052d2:	f040 8289 	bne.w	80057e8 <_dtoa_r+0x978>
 80052d6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80052da:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80052de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f2c0 8151 	blt.w	8005588 <_dtoa_r+0x718>
 80052e6:	f1bb 0f0e 	cmp.w	fp, #14
 80052ea:	f300 814d 	bgt.w	8005588 <_dtoa_r+0x718>
 80052ee:	4b45      	ldr	r3, [pc, #276]	; (8005404 <_dtoa_r+0x594>)
 80052f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80052f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052f8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80052fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f280 80da 	bge.w	80054b8 <_dtoa_r+0x648>
 8005304:	9b08      	ldr	r3, [sp, #32]
 8005306:	2b00      	cmp	r3, #0
 8005308:	f300 80d6 	bgt.w	80054b8 <_dtoa_r+0x648>
 800530c:	f040 826b 	bne.w	80057e6 <_dtoa_r+0x976>
 8005310:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005314:	2200      	movs	r2, #0
 8005316:	4b40      	ldr	r3, [pc, #256]	; (8005418 <_dtoa_r+0x5a8>)
 8005318:	f7fb f94a 	bl	80005b0 <__aeabi_dmul>
 800531c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005320:	f7fb fbcc 	bl	8000abc <__aeabi_dcmpge>
 8005324:	9c08      	ldr	r4, [sp, #32]
 8005326:	4626      	mov	r6, r4
 8005328:	2800      	cmp	r0, #0
 800532a:	f040 8241 	bne.w	80057b0 <_dtoa_r+0x940>
 800532e:	2331      	movs	r3, #49	; 0x31
 8005330:	9f03      	ldr	r7, [sp, #12]
 8005332:	f10b 0b01 	add.w	fp, fp, #1
 8005336:	f807 3b01 	strb.w	r3, [r7], #1
 800533a:	e23d      	b.n	80057b8 <_dtoa_r+0x948>
 800533c:	07e2      	lsls	r2, r4, #31
 800533e:	d505      	bpl.n	800534c <_dtoa_r+0x4dc>
 8005340:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005344:	f7fb f934 	bl	80005b0 <__aeabi_dmul>
 8005348:	2301      	movs	r3, #1
 800534a:	3701      	adds	r7, #1
 800534c:	1064      	asrs	r4, r4, #1
 800534e:	3608      	adds	r6, #8
 8005350:	e76d      	b.n	800522e <_dtoa_r+0x3be>
 8005352:	2702      	movs	r7, #2
 8005354:	e770      	b.n	8005238 <_dtoa_r+0x3c8>
 8005356:	46d8      	mov	r8, fp
 8005358:	9c08      	ldr	r4, [sp, #32]
 800535a:	e78f      	b.n	800527c <_dtoa_r+0x40c>
 800535c:	9903      	ldr	r1, [sp, #12]
 800535e:	4b29      	ldr	r3, [pc, #164]	; (8005404 <_dtoa_r+0x594>)
 8005360:	4421      	add	r1, r4
 8005362:	9112      	str	r1, [sp, #72]	; 0x48
 8005364:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005366:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800536a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800536e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005372:	2900      	cmp	r1, #0
 8005374:	d054      	beq.n	8005420 <_dtoa_r+0x5b0>
 8005376:	2000      	movs	r0, #0
 8005378:	4928      	ldr	r1, [pc, #160]	; (800541c <_dtoa_r+0x5ac>)
 800537a:	f7fb fa43 	bl	8000804 <__aeabi_ddiv>
 800537e:	463b      	mov	r3, r7
 8005380:	4632      	mov	r2, r6
 8005382:	f7fa ff5d 	bl	8000240 <__aeabi_dsub>
 8005386:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800538a:	9f03      	ldr	r7, [sp, #12]
 800538c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005390:	f7fb fbbe 	bl	8000b10 <__aeabi_d2iz>
 8005394:	4604      	mov	r4, r0
 8005396:	f7fb f8a1 	bl	80004dc <__aeabi_i2d>
 800539a:	4602      	mov	r2, r0
 800539c:	460b      	mov	r3, r1
 800539e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053a2:	f7fa ff4d 	bl	8000240 <__aeabi_dsub>
 80053a6:	4602      	mov	r2, r0
 80053a8:	460b      	mov	r3, r1
 80053aa:	3430      	adds	r4, #48	; 0x30
 80053ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80053b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80053b4:	f807 4b01 	strb.w	r4, [r7], #1
 80053b8:	f7fb fb6c 	bl	8000a94 <__aeabi_dcmplt>
 80053bc:	2800      	cmp	r0, #0
 80053be:	d173      	bne.n	80054a8 <_dtoa_r+0x638>
 80053c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053c4:	2000      	movs	r0, #0
 80053c6:	4911      	ldr	r1, [pc, #68]	; (800540c <_dtoa_r+0x59c>)
 80053c8:	f7fa ff3a 	bl	8000240 <__aeabi_dsub>
 80053cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80053d0:	f7fb fb60 	bl	8000a94 <__aeabi_dcmplt>
 80053d4:	2800      	cmp	r0, #0
 80053d6:	f040 80b6 	bne.w	8005546 <_dtoa_r+0x6d6>
 80053da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80053dc:	429f      	cmp	r7, r3
 80053de:	f43f af7a 	beq.w	80052d6 <_dtoa_r+0x466>
 80053e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80053e6:	2200      	movs	r2, #0
 80053e8:	4b09      	ldr	r3, [pc, #36]	; (8005410 <_dtoa_r+0x5a0>)
 80053ea:	f7fb f8e1 	bl	80005b0 <__aeabi_dmul>
 80053ee:	2200      	movs	r2, #0
 80053f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80053f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053f8:	4b05      	ldr	r3, [pc, #20]	; (8005410 <_dtoa_r+0x5a0>)
 80053fa:	f7fb f8d9 	bl	80005b0 <__aeabi_dmul>
 80053fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005402:	e7c3      	b.n	800538c <_dtoa_r+0x51c>
 8005404:	08009e18 	.word	0x08009e18
 8005408:	08009df0 	.word	0x08009df0
 800540c:	3ff00000 	.word	0x3ff00000
 8005410:	40240000 	.word	0x40240000
 8005414:	401c0000 	.word	0x401c0000
 8005418:	40140000 	.word	0x40140000
 800541c:	3fe00000 	.word	0x3fe00000
 8005420:	4630      	mov	r0, r6
 8005422:	4639      	mov	r1, r7
 8005424:	f7fb f8c4 	bl	80005b0 <__aeabi_dmul>
 8005428:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800542a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800542e:	9c03      	ldr	r4, [sp, #12]
 8005430:	9314      	str	r3, [sp, #80]	; 0x50
 8005432:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005436:	f7fb fb6b 	bl	8000b10 <__aeabi_d2iz>
 800543a:	9015      	str	r0, [sp, #84]	; 0x54
 800543c:	f7fb f84e 	bl	80004dc <__aeabi_i2d>
 8005440:	4602      	mov	r2, r0
 8005442:	460b      	mov	r3, r1
 8005444:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005448:	f7fa fefa 	bl	8000240 <__aeabi_dsub>
 800544c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800544e:	4606      	mov	r6, r0
 8005450:	3330      	adds	r3, #48	; 0x30
 8005452:	f804 3b01 	strb.w	r3, [r4], #1
 8005456:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005458:	460f      	mov	r7, r1
 800545a:	429c      	cmp	r4, r3
 800545c:	f04f 0200 	mov.w	r2, #0
 8005460:	d124      	bne.n	80054ac <_dtoa_r+0x63c>
 8005462:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005466:	4baf      	ldr	r3, [pc, #700]	; (8005724 <_dtoa_r+0x8b4>)
 8005468:	f7fa feec 	bl	8000244 <__adddf3>
 800546c:	4602      	mov	r2, r0
 800546e:	460b      	mov	r3, r1
 8005470:	4630      	mov	r0, r6
 8005472:	4639      	mov	r1, r7
 8005474:	f7fb fb2c 	bl	8000ad0 <__aeabi_dcmpgt>
 8005478:	2800      	cmp	r0, #0
 800547a:	d163      	bne.n	8005544 <_dtoa_r+0x6d4>
 800547c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005480:	2000      	movs	r0, #0
 8005482:	49a8      	ldr	r1, [pc, #672]	; (8005724 <_dtoa_r+0x8b4>)
 8005484:	f7fa fedc 	bl	8000240 <__aeabi_dsub>
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	4630      	mov	r0, r6
 800548e:	4639      	mov	r1, r7
 8005490:	f7fb fb00 	bl	8000a94 <__aeabi_dcmplt>
 8005494:	2800      	cmp	r0, #0
 8005496:	f43f af1e 	beq.w	80052d6 <_dtoa_r+0x466>
 800549a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800549c:	1e7b      	subs	r3, r7, #1
 800549e:	9314      	str	r3, [sp, #80]	; 0x50
 80054a0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80054a4:	2b30      	cmp	r3, #48	; 0x30
 80054a6:	d0f8      	beq.n	800549a <_dtoa_r+0x62a>
 80054a8:	46c3      	mov	fp, r8
 80054aa:	e03b      	b.n	8005524 <_dtoa_r+0x6b4>
 80054ac:	4b9e      	ldr	r3, [pc, #632]	; (8005728 <_dtoa_r+0x8b8>)
 80054ae:	f7fb f87f 	bl	80005b0 <__aeabi_dmul>
 80054b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054b6:	e7bc      	b.n	8005432 <_dtoa_r+0x5c2>
 80054b8:	9f03      	ldr	r7, [sp, #12]
 80054ba:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80054be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054c2:	4640      	mov	r0, r8
 80054c4:	4649      	mov	r1, r9
 80054c6:	f7fb f99d 	bl	8000804 <__aeabi_ddiv>
 80054ca:	f7fb fb21 	bl	8000b10 <__aeabi_d2iz>
 80054ce:	4604      	mov	r4, r0
 80054d0:	f7fb f804 	bl	80004dc <__aeabi_i2d>
 80054d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054d8:	f7fb f86a 	bl	80005b0 <__aeabi_dmul>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	4640      	mov	r0, r8
 80054e2:	4649      	mov	r1, r9
 80054e4:	f7fa feac 	bl	8000240 <__aeabi_dsub>
 80054e8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80054ec:	f807 6b01 	strb.w	r6, [r7], #1
 80054f0:	9e03      	ldr	r6, [sp, #12]
 80054f2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80054f6:	1bbe      	subs	r6, r7, r6
 80054f8:	45b4      	cmp	ip, r6
 80054fa:	4602      	mov	r2, r0
 80054fc:	460b      	mov	r3, r1
 80054fe:	d136      	bne.n	800556e <_dtoa_r+0x6fe>
 8005500:	f7fa fea0 	bl	8000244 <__adddf3>
 8005504:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005508:	4680      	mov	r8, r0
 800550a:	4689      	mov	r9, r1
 800550c:	f7fb fae0 	bl	8000ad0 <__aeabi_dcmpgt>
 8005510:	bb58      	cbnz	r0, 800556a <_dtoa_r+0x6fa>
 8005512:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005516:	4640      	mov	r0, r8
 8005518:	4649      	mov	r1, r9
 800551a:	f7fb fab1 	bl	8000a80 <__aeabi_dcmpeq>
 800551e:	b108      	cbz	r0, 8005524 <_dtoa_r+0x6b4>
 8005520:	07e3      	lsls	r3, r4, #31
 8005522:	d422      	bmi.n	800556a <_dtoa_r+0x6fa>
 8005524:	4651      	mov	r1, sl
 8005526:	4628      	mov	r0, r5
 8005528:	f000 fbc2 	bl	8005cb0 <_Bfree>
 800552c:	2300      	movs	r3, #0
 800552e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005530:	703b      	strb	r3, [r7, #0]
 8005532:	f10b 0301 	add.w	r3, fp, #1
 8005536:	6013      	str	r3, [r2, #0]
 8005538:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800553a:	2b00      	cmp	r3, #0
 800553c:	f43f ace6 	beq.w	8004f0c <_dtoa_r+0x9c>
 8005540:	601f      	str	r7, [r3, #0]
 8005542:	e4e3      	b.n	8004f0c <_dtoa_r+0x9c>
 8005544:	4627      	mov	r7, r4
 8005546:	463b      	mov	r3, r7
 8005548:	461f      	mov	r7, r3
 800554a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800554e:	2a39      	cmp	r2, #57	; 0x39
 8005550:	d107      	bne.n	8005562 <_dtoa_r+0x6f2>
 8005552:	9a03      	ldr	r2, [sp, #12]
 8005554:	429a      	cmp	r2, r3
 8005556:	d1f7      	bne.n	8005548 <_dtoa_r+0x6d8>
 8005558:	2230      	movs	r2, #48	; 0x30
 800555a:	9903      	ldr	r1, [sp, #12]
 800555c:	f108 0801 	add.w	r8, r8, #1
 8005560:	700a      	strb	r2, [r1, #0]
 8005562:	781a      	ldrb	r2, [r3, #0]
 8005564:	3201      	adds	r2, #1
 8005566:	701a      	strb	r2, [r3, #0]
 8005568:	e79e      	b.n	80054a8 <_dtoa_r+0x638>
 800556a:	46d8      	mov	r8, fp
 800556c:	e7eb      	b.n	8005546 <_dtoa_r+0x6d6>
 800556e:	2200      	movs	r2, #0
 8005570:	4b6d      	ldr	r3, [pc, #436]	; (8005728 <_dtoa_r+0x8b8>)
 8005572:	f7fb f81d 	bl	80005b0 <__aeabi_dmul>
 8005576:	2200      	movs	r2, #0
 8005578:	2300      	movs	r3, #0
 800557a:	4680      	mov	r8, r0
 800557c:	4689      	mov	r9, r1
 800557e:	f7fb fa7f 	bl	8000a80 <__aeabi_dcmpeq>
 8005582:	2800      	cmp	r0, #0
 8005584:	d09b      	beq.n	80054be <_dtoa_r+0x64e>
 8005586:	e7cd      	b.n	8005524 <_dtoa_r+0x6b4>
 8005588:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800558a:	2a00      	cmp	r2, #0
 800558c:	f000 80c4 	beq.w	8005718 <_dtoa_r+0x8a8>
 8005590:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005592:	2a01      	cmp	r2, #1
 8005594:	f300 80a8 	bgt.w	80056e8 <_dtoa_r+0x878>
 8005598:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800559a:	2a00      	cmp	r2, #0
 800559c:	f000 80a0 	beq.w	80056e0 <_dtoa_r+0x870>
 80055a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80055a4:	464f      	mov	r7, r9
 80055a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80055a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055aa:	2101      	movs	r1, #1
 80055ac:	441a      	add	r2, r3
 80055ae:	4628      	mov	r0, r5
 80055b0:	4499      	add	r9, r3
 80055b2:	9209      	str	r2, [sp, #36]	; 0x24
 80055b4:	f000 fc7c 	bl	8005eb0 <__i2b>
 80055b8:	4606      	mov	r6, r0
 80055ba:	b15f      	cbz	r7, 80055d4 <_dtoa_r+0x764>
 80055bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055be:	2b00      	cmp	r3, #0
 80055c0:	dd08      	ble.n	80055d4 <_dtoa_r+0x764>
 80055c2:	42bb      	cmp	r3, r7
 80055c4:	bfa8      	it	ge
 80055c6:	463b      	movge	r3, r7
 80055c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055ca:	eba9 0903 	sub.w	r9, r9, r3
 80055ce:	1aff      	subs	r7, r7, r3
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	9309      	str	r3, [sp, #36]	; 0x24
 80055d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055d6:	b1f3      	cbz	r3, 8005616 <_dtoa_r+0x7a6>
 80055d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f000 80a0 	beq.w	8005720 <_dtoa_r+0x8b0>
 80055e0:	2c00      	cmp	r4, #0
 80055e2:	dd10      	ble.n	8005606 <_dtoa_r+0x796>
 80055e4:	4631      	mov	r1, r6
 80055e6:	4622      	mov	r2, r4
 80055e8:	4628      	mov	r0, r5
 80055ea:	f000 fd1f 	bl	800602c <__pow5mult>
 80055ee:	4652      	mov	r2, sl
 80055f0:	4601      	mov	r1, r0
 80055f2:	4606      	mov	r6, r0
 80055f4:	4628      	mov	r0, r5
 80055f6:	f000 fc71 	bl	8005edc <__multiply>
 80055fa:	4680      	mov	r8, r0
 80055fc:	4651      	mov	r1, sl
 80055fe:	4628      	mov	r0, r5
 8005600:	f000 fb56 	bl	8005cb0 <_Bfree>
 8005604:	46c2      	mov	sl, r8
 8005606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005608:	1b1a      	subs	r2, r3, r4
 800560a:	d004      	beq.n	8005616 <_dtoa_r+0x7a6>
 800560c:	4651      	mov	r1, sl
 800560e:	4628      	mov	r0, r5
 8005610:	f000 fd0c 	bl	800602c <__pow5mult>
 8005614:	4682      	mov	sl, r0
 8005616:	2101      	movs	r1, #1
 8005618:	4628      	mov	r0, r5
 800561a:	f000 fc49 	bl	8005eb0 <__i2b>
 800561e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005620:	4604      	mov	r4, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	f340 8082 	ble.w	800572c <_dtoa_r+0x8bc>
 8005628:	461a      	mov	r2, r3
 800562a:	4601      	mov	r1, r0
 800562c:	4628      	mov	r0, r5
 800562e:	f000 fcfd 	bl	800602c <__pow5mult>
 8005632:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005634:	4604      	mov	r4, r0
 8005636:	2b01      	cmp	r3, #1
 8005638:	dd7b      	ble.n	8005732 <_dtoa_r+0x8c2>
 800563a:	f04f 0800 	mov.w	r8, #0
 800563e:	6923      	ldr	r3, [r4, #16]
 8005640:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005644:	6918      	ldr	r0, [r3, #16]
 8005646:	f000 fbe5 	bl	8005e14 <__hi0bits>
 800564a:	f1c0 0020 	rsb	r0, r0, #32
 800564e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005650:	4418      	add	r0, r3
 8005652:	f010 001f 	ands.w	r0, r0, #31
 8005656:	f000 8092 	beq.w	800577e <_dtoa_r+0x90e>
 800565a:	f1c0 0320 	rsb	r3, r0, #32
 800565e:	2b04      	cmp	r3, #4
 8005660:	f340 8085 	ble.w	800576e <_dtoa_r+0x8fe>
 8005664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005666:	f1c0 001c 	rsb	r0, r0, #28
 800566a:	4403      	add	r3, r0
 800566c:	4481      	add	r9, r0
 800566e:	4407      	add	r7, r0
 8005670:	9309      	str	r3, [sp, #36]	; 0x24
 8005672:	f1b9 0f00 	cmp.w	r9, #0
 8005676:	dd05      	ble.n	8005684 <_dtoa_r+0x814>
 8005678:	4651      	mov	r1, sl
 800567a:	464a      	mov	r2, r9
 800567c:	4628      	mov	r0, r5
 800567e:	f000 fd2f 	bl	80060e0 <__lshift>
 8005682:	4682      	mov	sl, r0
 8005684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005686:	2b00      	cmp	r3, #0
 8005688:	dd05      	ble.n	8005696 <_dtoa_r+0x826>
 800568a:	4621      	mov	r1, r4
 800568c:	461a      	mov	r2, r3
 800568e:	4628      	mov	r0, r5
 8005690:	f000 fd26 	bl	80060e0 <__lshift>
 8005694:	4604      	mov	r4, r0
 8005696:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005698:	2b00      	cmp	r3, #0
 800569a:	d072      	beq.n	8005782 <_dtoa_r+0x912>
 800569c:	4621      	mov	r1, r4
 800569e:	4650      	mov	r0, sl
 80056a0:	f000 fd8a 	bl	80061b8 <__mcmp>
 80056a4:	2800      	cmp	r0, #0
 80056a6:	da6c      	bge.n	8005782 <_dtoa_r+0x912>
 80056a8:	2300      	movs	r3, #0
 80056aa:	4651      	mov	r1, sl
 80056ac:	220a      	movs	r2, #10
 80056ae:	4628      	mov	r0, r5
 80056b0:	f000 fb20 	bl	8005cf4 <__multadd>
 80056b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056b6:	4682      	mov	sl, r0
 80056b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f000 81ac 	beq.w	8005a1a <_dtoa_r+0xbaa>
 80056c2:	2300      	movs	r3, #0
 80056c4:	4631      	mov	r1, r6
 80056c6:	220a      	movs	r2, #10
 80056c8:	4628      	mov	r0, r5
 80056ca:	f000 fb13 	bl	8005cf4 <__multadd>
 80056ce:	9b06      	ldr	r3, [sp, #24]
 80056d0:	4606      	mov	r6, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f300 8093 	bgt.w	80057fe <_dtoa_r+0x98e>
 80056d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056da:	2b02      	cmp	r3, #2
 80056dc:	dc59      	bgt.n	8005792 <_dtoa_r+0x922>
 80056de:	e08e      	b.n	80057fe <_dtoa_r+0x98e>
 80056e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80056e2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80056e6:	e75d      	b.n	80055a4 <_dtoa_r+0x734>
 80056e8:	9b08      	ldr	r3, [sp, #32]
 80056ea:	1e5c      	subs	r4, r3, #1
 80056ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056ee:	42a3      	cmp	r3, r4
 80056f0:	bfbf      	itttt	lt
 80056f2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80056f4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80056f6:	1ae3      	sublt	r3, r4, r3
 80056f8:	18d2      	addlt	r2, r2, r3
 80056fa:	bfa8      	it	ge
 80056fc:	1b1c      	subge	r4, r3, r4
 80056fe:	9b08      	ldr	r3, [sp, #32]
 8005700:	bfbe      	ittt	lt
 8005702:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005704:	920e      	strlt	r2, [sp, #56]	; 0x38
 8005706:	2400      	movlt	r4, #0
 8005708:	2b00      	cmp	r3, #0
 800570a:	bfb5      	itete	lt
 800570c:	eba9 0703 	sublt.w	r7, r9, r3
 8005710:	464f      	movge	r7, r9
 8005712:	2300      	movlt	r3, #0
 8005714:	9b08      	ldrge	r3, [sp, #32]
 8005716:	e747      	b.n	80055a8 <_dtoa_r+0x738>
 8005718:	464f      	mov	r7, r9
 800571a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800571c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800571e:	e74c      	b.n	80055ba <_dtoa_r+0x74a>
 8005720:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005722:	e773      	b.n	800560c <_dtoa_r+0x79c>
 8005724:	3fe00000 	.word	0x3fe00000
 8005728:	40240000 	.word	0x40240000
 800572c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800572e:	2b01      	cmp	r3, #1
 8005730:	dc18      	bgt.n	8005764 <_dtoa_r+0x8f4>
 8005732:	9b04      	ldr	r3, [sp, #16]
 8005734:	b9b3      	cbnz	r3, 8005764 <_dtoa_r+0x8f4>
 8005736:	9b05      	ldr	r3, [sp, #20]
 8005738:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800573c:	b993      	cbnz	r3, 8005764 <_dtoa_r+0x8f4>
 800573e:	9b05      	ldr	r3, [sp, #20]
 8005740:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005744:	0d1b      	lsrs	r3, r3, #20
 8005746:	051b      	lsls	r3, r3, #20
 8005748:	b17b      	cbz	r3, 800576a <_dtoa_r+0x8fa>
 800574a:	f04f 0801 	mov.w	r8, #1
 800574e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005750:	f109 0901 	add.w	r9, r9, #1
 8005754:	3301      	adds	r3, #1
 8005756:	9309      	str	r3, [sp, #36]	; 0x24
 8005758:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800575a:	2b00      	cmp	r3, #0
 800575c:	f47f af6f 	bne.w	800563e <_dtoa_r+0x7ce>
 8005760:	2001      	movs	r0, #1
 8005762:	e774      	b.n	800564e <_dtoa_r+0x7de>
 8005764:	f04f 0800 	mov.w	r8, #0
 8005768:	e7f6      	b.n	8005758 <_dtoa_r+0x8e8>
 800576a:	4698      	mov	r8, r3
 800576c:	e7f4      	b.n	8005758 <_dtoa_r+0x8e8>
 800576e:	d080      	beq.n	8005672 <_dtoa_r+0x802>
 8005770:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005772:	331c      	adds	r3, #28
 8005774:	441a      	add	r2, r3
 8005776:	4499      	add	r9, r3
 8005778:	441f      	add	r7, r3
 800577a:	9209      	str	r2, [sp, #36]	; 0x24
 800577c:	e779      	b.n	8005672 <_dtoa_r+0x802>
 800577e:	4603      	mov	r3, r0
 8005780:	e7f6      	b.n	8005770 <_dtoa_r+0x900>
 8005782:	9b08      	ldr	r3, [sp, #32]
 8005784:	2b00      	cmp	r3, #0
 8005786:	dc34      	bgt.n	80057f2 <_dtoa_r+0x982>
 8005788:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800578a:	2b02      	cmp	r3, #2
 800578c:	dd31      	ble.n	80057f2 <_dtoa_r+0x982>
 800578e:	9b08      	ldr	r3, [sp, #32]
 8005790:	9306      	str	r3, [sp, #24]
 8005792:	9b06      	ldr	r3, [sp, #24]
 8005794:	b963      	cbnz	r3, 80057b0 <_dtoa_r+0x940>
 8005796:	4621      	mov	r1, r4
 8005798:	2205      	movs	r2, #5
 800579a:	4628      	mov	r0, r5
 800579c:	f000 faaa 	bl	8005cf4 <__multadd>
 80057a0:	4601      	mov	r1, r0
 80057a2:	4604      	mov	r4, r0
 80057a4:	4650      	mov	r0, sl
 80057a6:	f000 fd07 	bl	80061b8 <__mcmp>
 80057aa:	2800      	cmp	r0, #0
 80057ac:	f73f adbf 	bgt.w	800532e <_dtoa_r+0x4be>
 80057b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80057b2:	9f03      	ldr	r7, [sp, #12]
 80057b4:	ea6f 0b03 	mvn.w	fp, r3
 80057b8:	f04f 0800 	mov.w	r8, #0
 80057bc:	4621      	mov	r1, r4
 80057be:	4628      	mov	r0, r5
 80057c0:	f000 fa76 	bl	8005cb0 <_Bfree>
 80057c4:	2e00      	cmp	r6, #0
 80057c6:	f43f aead 	beq.w	8005524 <_dtoa_r+0x6b4>
 80057ca:	f1b8 0f00 	cmp.w	r8, #0
 80057ce:	d005      	beq.n	80057dc <_dtoa_r+0x96c>
 80057d0:	45b0      	cmp	r8, r6
 80057d2:	d003      	beq.n	80057dc <_dtoa_r+0x96c>
 80057d4:	4641      	mov	r1, r8
 80057d6:	4628      	mov	r0, r5
 80057d8:	f000 fa6a 	bl	8005cb0 <_Bfree>
 80057dc:	4631      	mov	r1, r6
 80057de:	4628      	mov	r0, r5
 80057e0:	f000 fa66 	bl	8005cb0 <_Bfree>
 80057e4:	e69e      	b.n	8005524 <_dtoa_r+0x6b4>
 80057e6:	2400      	movs	r4, #0
 80057e8:	4626      	mov	r6, r4
 80057ea:	e7e1      	b.n	80057b0 <_dtoa_r+0x940>
 80057ec:	46c3      	mov	fp, r8
 80057ee:	4626      	mov	r6, r4
 80057f0:	e59d      	b.n	800532e <_dtoa_r+0x4be>
 80057f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 80c8 	beq.w	800598a <_dtoa_r+0xb1a>
 80057fa:	9b08      	ldr	r3, [sp, #32]
 80057fc:	9306      	str	r3, [sp, #24]
 80057fe:	2f00      	cmp	r7, #0
 8005800:	dd05      	ble.n	800580e <_dtoa_r+0x99e>
 8005802:	4631      	mov	r1, r6
 8005804:	463a      	mov	r2, r7
 8005806:	4628      	mov	r0, r5
 8005808:	f000 fc6a 	bl	80060e0 <__lshift>
 800580c:	4606      	mov	r6, r0
 800580e:	f1b8 0f00 	cmp.w	r8, #0
 8005812:	d05b      	beq.n	80058cc <_dtoa_r+0xa5c>
 8005814:	4628      	mov	r0, r5
 8005816:	6871      	ldr	r1, [r6, #4]
 8005818:	f000 fa0a 	bl	8005c30 <_Balloc>
 800581c:	4607      	mov	r7, r0
 800581e:	b928      	cbnz	r0, 800582c <_dtoa_r+0x9bc>
 8005820:	4602      	mov	r2, r0
 8005822:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005826:	4b81      	ldr	r3, [pc, #516]	; (8005a2c <_dtoa_r+0xbbc>)
 8005828:	f7ff bb36 	b.w	8004e98 <_dtoa_r+0x28>
 800582c:	6932      	ldr	r2, [r6, #16]
 800582e:	f106 010c 	add.w	r1, r6, #12
 8005832:	3202      	adds	r2, #2
 8005834:	0092      	lsls	r2, r2, #2
 8005836:	300c      	adds	r0, #12
 8005838:	f002 f94a 	bl	8007ad0 <memcpy>
 800583c:	2201      	movs	r2, #1
 800583e:	4639      	mov	r1, r7
 8005840:	4628      	mov	r0, r5
 8005842:	f000 fc4d 	bl	80060e0 <__lshift>
 8005846:	46b0      	mov	r8, r6
 8005848:	4606      	mov	r6, r0
 800584a:	9b03      	ldr	r3, [sp, #12]
 800584c:	9a03      	ldr	r2, [sp, #12]
 800584e:	3301      	adds	r3, #1
 8005850:	9308      	str	r3, [sp, #32]
 8005852:	9b06      	ldr	r3, [sp, #24]
 8005854:	4413      	add	r3, r2
 8005856:	930b      	str	r3, [sp, #44]	; 0x2c
 8005858:	9b04      	ldr	r3, [sp, #16]
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	930a      	str	r3, [sp, #40]	; 0x28
 8005860:	9b08      	ldr	r3, [sp, #32]
 8005862:	4621      	mov	r1, r4
 8005864:	3b01      	subs	r3, #1
 8005866:	4650      	mov	r0, sl
 8005868:	9304      	str	r3, [sp, #16]
 800586a:	f7ff fa75 	bl	8004d58 <quorem>
 800586e:	4641      	mov	r1, r8
 8005870:	9006      	str	r0, [sp, #24]
 8005872:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005876:	4650      	mov	r0, sl
 8005878:	f000 fc9e 	bl	80061b8 <__mcmp>
 800587c:	4632      	mov	r2, r6
 800587e:	9009      	str	r0, [sp, #36]	; 0x24
 8005880:	4621      	mov	r1, r4
 8005882:	4628      	mov	r0, r5
 8005884:	f000 fcb4 	bl	80061f0 <__mdiff>
 8005888:	68c2      	ldr	r2, [r0, #12]
 800588a:	4607      	mov	r7, r0
 800588c:	bb02      	cbnz	r2, 80058d0 <_dtoa_r+0xa60>
 800588e:	4601      	mov	r1, r0
 8005890:	4650      	mov	r0, sl
 8005892:	f000 fc91 	bl	80061b8 <__mcmp>
 8005896:	4602      	mov	r2, r0
 8005898:	4639      	mov	r1, r7
 800589a:	4628      	mov	r0, r5
 800589c:	920c      	str	r2, [sp, #48]	; 0x30
 800589e:	f000 fa07 	bl	8005cb0 <_Bfree>
 80058a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80058a6:	9f08      	ldr	r7, [sp, #32]
 80058a8:	ea43 0102 	orr.w	r1, r3, r2
 80058ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058ae:	4319      	orrs	r1, r3
 80058b0:	d110      	bne.n	80058d4 <_dtoa_r+0xa64>
 80058b2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80058b6:	d029      	beq.n	800590c <_dtoa_r+0xa9c>
 80058b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	dd02      	ble.n	80058c4 <_dtoa_r+0xa54>
 80058be:	9b06      	ldr	r3, [sp, #24]
 80058c0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80058c4:	9b04      	ldr	r3, [sp, #16]
 80058c6:	f883 9000 	strb.w	r9, [r3]
 80058ca:	e777      	b.n	80057bc <_dtoa_r+0x94c>
 80058cc:	4630      	mov	r0, r6
 80058ce:	e7ba      	b.n	8005846 <_dtoa_r+0x9d6>
 80058d0:	2201      	movs	r2, #1
 80058d2:	e7e1      	b.n	8005898 <_dtoa_r+0xa28>
 80058d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	db04      	blt.n	80058e4 <_dtoa_r+0xa74>
 80058da:	9922      	ldr	r1, [sp, #136]	; 0x88
 80058dc:	430b      	orrs	r3, r1
 80058de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80058e0:	430b      	orrs	r3, r1
 80058e2:	d120      	bne.n	8005926 <_dtoa_r+0xab6>
 80058e4:	2a00      	cmp	r2, #0
 80058e6:	dded      	ble.n	80058c4 <_dtoa_r+0xa54>
 80058e8:	4651      	mov	r1, sl
 80058ea:	2201      	movs	r2, #1
 80058ec:	4628      	mov	r0, r5
 80058ee:	f000 fbf7 	bl	80060e0 <__lshift>
 80058f2:	4621      	mov	r1, r4
 80058f4:	4682      	mov	sl, r0
 80058f6:	f000 fc5f 	bl	80061b8 <__mcmp>
 80058fa:	2800      	cmp	r0, #0
 80058fc:	dc03      	bgt.n	8005906 <_dtoa_r+0xa96>
 80058fe:	d1e1      	bne.n	80058c4 <_dtoa_r+0xa54>
 8005900:	f019 0f01 	tst.w	r9, #1
 8005904:	d0de      	beq.n	80058c4 <_dtoa_r+0xa54>
 8005906:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800590a:	d1d8      	bne.n	80058be <_dtoa_r+0xa4e>
 800590c:	2339      	movs	r3, #57	; 0x39
 800590e:	9a04      	ldr	r2, [sp, #16]
 8005910:	7013      	strb	r3, [r2, #0]
 8005912:	463b      	mov	r3, r7
 8005914:	461f      	mov	r7, r3
 8005916:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800591a:	3b01      	subs	r3, #1
 800591c:	2a39      	cmp	r2, #57	; 0x39
 800591e:	d06b      	beq.n	80059f8 <_dtoa_r+0xb88>
 8005920:	3201      	adds	r2, #1
 8005922:	701a      	strb	r2, [r3, #0]
 8005924:	e74a      	b.n	80057bc <_dtoa_r+0x94c>
 8005926:	2a00      	cmp	r2, #0
 8005928:	dd07      	ble.n	800593a <_dtoa_r+0xaca>
 800592a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800592e:	d0ed      	beq.n	800590c <_dtoa_r+0xa9c>
 8005930:	9a04      	ldr	r2, [sp, #16]
 8005932:	f109 0301 	add.w	r3, r9, #1
 8005936:	7013      	strb	r3, [r2, #0]
 8005938:	e740      	b.n	80057bc <_dtoa_r+0x94c>
 800593a:	9b08      	ldr	r3, [sp, #32]
 800593c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800593e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005942:	4293      	cmp	r3, r2
 8005944:	d042      	beq.n	80059cc <_dtoa_r+0xb5c>
 8005946:	4651      	mov	r1, sl
 8005948:	2300      	movs	r3, #0
 800594a:	220a      	movs	r2, #10
 800594c:	4628      	mov	r0, r5
 800594e:	f000 f9d1 	bl	8005cf4 <__multadd>
 8005952:	45b0      	cmp	r8, r6
 8005954:	4682      	mov	sl, r0
 8005956:	f04f 0300 	mov.w	r3, #0
 800595a:	f04f 020a 	mov.w	r2, #10
 800595e:	4641      	mov	r1, r8
 8005960:	4628      	mov	r0, r5
 8005962:	d107      	bne.n	8005974 <_dtoa_r+0xb04>
 8005964:	f000 f9c6 	bl	8005cf4 <__multadd>
 8005968:	4680      	mov	r8, r0
 800596a:	4606      	mov	r6, r0
 800596c:	9b08      	ldr	r3, [sp, #32]
 800596e:	3301      	adds	r3, #1
 8005970:	9308      	str	r3, [sp, #32]
 8005972:	e775      	b.n	8005860 <_dtoa_r+0x9f0>
 8005974:	f000 f9be 	bl	8005cf4 <__multadd>
 8005978:	4631      	mov	r1, r6
 800597a:	4680      	mov	r8, r0
 800597c:	2300      	movs	r3, #0
 800597e:	220a      	movs	r2, #10
 8005980:	4628      	mov	r0, r5
 8005982:	f000 f9b7 	bl	8005cf4 <__multadd>
 8005986:	4606      	mov	r6, r0
 8005988:	e7f0      	b.n	800596c <_dtoa_r+0xafc>
 800598a:	9b08      	ldr	r3, [sp, #32]
 800598c:	9306      	str	r3, [sp, #24]
 800598e:	9f03      	ldr	r7, [sp, #12]
 8005990:	4621      	mov	r1, r4
 8005992:	4650      	mov	r0, sl
 8005994:	f7ff f9e0 	bl	8004d58 <quorem>
 8005998:	9b03      	ldr	r3, [sp, #12]
 800599a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800599e:	f807 9b01 	strb.w	r9, [r7], #1
 80059a2:	1afa      	subs	r2, r7, r3
 80059a4:	9b06      	ldr	r3, [sp, #24]
 80059a6:	4293      	cmp	r3, r2
 80059a8:	dd07      	ble.n	80059ba <_dtoa_r+0xb4a>
 80059aa:	4651      	mov	r1, sl
 80059ac:	2300      	movs	r3, #0
 80059ae:	220a      	movs	r2, #10
 80059b0:	4628      	mov	r0, r5
 80059b2:	f000 f99f 	bl	8005cf4 <__multadd>
 80059b6:	4682      	mov	sl, r0
 80059b8:	e7ea      	b.n	8005990 <_dtoa_r+0xb20>
 80059ba:	9b06      	ldr	r3, [sp, #24]
 80059bc:	f04f 0800 	mov.w	r8, #0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	bfcc      	ite	gt
 80059c4:	461f      	movgt	r7, r3
 80059c6:	2701      	movle	r7, #1
 80059c8:	9b03      	ldr	r3, [sp, #12]
 80059ca:	441f      	add	r7, r3
 80059cc:	4651      	mov	r1, sl
 80059ce:	2201      	movs	r2, #1
 80059d0:	4628      	mov	r0, r5
 80059d2:	f000 fb85 	bl	80060e0 <__lshift>
 80059d6:	4621      	mov	r1, r4
 80059d8:	4682      	mov	sl, r0
 80059da:	f000 fbed 	bl	80061b8 <__mcmp>
 80059de:	2800      	cmp	r0, #0
 80059e0:	dc97      	bgt.n	8005912 <_dtoa_r+0xaa2>
 80059e2:	d102      	bne.n	80059ea <_dtoa_r+0xb7a>
 80059e4:	f019 0f01 	tst.w	r9, #1
 80059e8:	d193      	bne.n	8005912 <_dtoa_r+0xaa2>
 80059ea:	463b      	mov	r3, r7
 80059ec:	461f      	mov	r7, r3
 80059ee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059f2:	2a30      	cmp	r2, #48	; 0x30
 80059f4:	d0fa      	beq.n	80059ec <_dtoa_r+0xb7c>
 80059f6:	e6e1      	b.n	80057bc <_dtoa_r+0x94c>
 80059f8:	9a03      	ldr	r2, [sp, #12]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d18a      	bne.n	8005914 <_dtoa_r+0xaa4>
 80059fe:	2331      	movs	r3, #49	; 0x31
 8005a00:	f10b 0b01 	add.w	fp, fp, #1
 8005a04:	e797      	b.n	8005936 <_dtoa_r+0xac6>
 8005a06:	4b0a      	ldr	r3, [pc, #40]	; (8005a30 <_dtoa_r+0xbc0>)
 8005a08:	f7ff ba9f 	b.w	8004f4a <_dtoa_r+0xda>
 8005a0c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f47f aa77 	bne.w	8004f02 <_dtoa_r+0x92>
 8005a14:	4b07      	ldr	r3, [pc, #28]	; (8005a34 <_dtoa_r+0xbc4>)
 8005a16:	f7ff ba98 	b.w	8004f4a <_dtoa_r+0xda>
 8005a1a:	9b06      	ldr	r3, [sp, #24]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	dcb6      	bgt.n	800598e <_dtoa_r+0xb1e>
 8005a20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	f73f aeb5 	bgt.w	8005792 <_dtoa_r+0x922>
 8005a28:	e7b1      	b.n	800598e <_dtoa_r+0xb1e>
 8005a2a:	bf00      	nop
 8005a2c:	08009d7f 	.word	0x08009d7f
 8005a30:	08009cda 	.word	0x08009cda
 8005a34:	08009d03 	.word	0x08009d03

08005a38 <_free_r>:
 8005a38:	b538      	push	{r3, r4, r5, lr}
 8005a3a:	4605      	mov	r5, r0
 8005a3c:	2900      	cmp	r1, #0
 8005a3e:	d040      	beq.n	8005ac2 <_free_r+0x8a>
 8005a40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a44:	1f0c      	subs	r4, r1, #4
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	bfb8      	it	lt
 8005a4a:	18e4      	addlt	r4, r4, r3
 8005a4c:	f000 f8e4 	bl	8005c18 <__malloc_lock>
 8005a50:	4a1c      	ldr	r2, [pc, #112]	; (8005ac4 <_free_r+0x8c>)
 8005a52:	6813      	ldr	r3, [r2, #0]
 8005a54:	b933      	cbnz	r3, 8005a64 <_free_r+0x2c>
 8005a56:	6063      	str	r3, [r4, #4]
 8005a58:	6014      	str	r4, [r2, #0]
 8005a5a:	4628      	mov	r0, r5
 8005a5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a60:	f000 b8e0 	b.w	8005c24 <__malloc_unlock>
 8005a64:	42a3      	cmp	r3, r4
 8005a66:	d908      	bls.n	8005a7a <_free_r+0x42>
 8005a68:	6820      	ldr	r0, [r4, #0]
 8005a6a:	1821      	adds	r1, r4, r0
 8005a6c:	428b      	cmp	r3, r1
 8005a6e:	bf01      	itttt	eq
 8005a70:	6819      	ldreq	r1, [r3, #0]
 8005a72:	685b      	ldreq	r3, [r3, #4]
 8005a74:	1809      	addeq	r1, r1, r0
 8005a76:	6021      	streq	r1, [r4, #0]
 8005a78:	e7ed      	b.n	8005a56 <_free_r+0x1e>
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	b10b      	cbz	r3, 8005a84 <_free_r+0x4c>
 8005a80:	42a3      	cmp	r3, r4
 8005a82:	d9fa      	bls.n	8005a7a <_free_r+0x42>
 8005a84:	6811      	ldr	r1, [r2, #0]
 8005a86:	1850      	adds	r0, r2, r1
 8005a88:	42a0      	cmp	r0, r4
 8005a8a:	d10b      	bne.n	8005aa4 <_free_r+0x6c>
 8005a8c:	6820      	ldr	r0, [r4, #0]
 8005a8e:	4401      	add	r1, r0
 8005a90:	1850      	adds	r0, r2, r1
 8005a92:	4283      	cmp	r3, r0
 8005a94:	6011      	str	r1, [r2, #0]
 8005a96:	d1e0      	bne.n	8005a5a <_free_r+0x22>
 8005a98:	6818      	ldr	r0, [r3, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	4408      	add	r0, r1
 8005a9e:	6010      	str	r0, [r2, #0]
 8005aa0:	6053      	str	r3, [r2, #4]
 8005aa2:	e7da      	b.n	8005a5a <_free_r+0x22>
 8005aa4:	d902      	bls.n	8005aac <_free_r+0x74>
 8005aa6:	230c      	movs	r3, #12
 8005aa8:	602b      	str	r3, [r5, #0]
 8005aaa:	e7d6      	b.n	8005a5a <_free_r+0x22>
 8005aac:	6820      	ldr	r0, [r4, #0]
 8005aae:	1821      	adds	r1, r4, r0
 8005ab0:	428b      	cmp	r3, r1
 8005ab2:	bf01      	itttt	eq
 8005ab4:	6819      	ldreq	r1, [r3, #0]
 8005ab6:	685b      	ldreq	r3, [r3, #4]
 8005ab8:	1809      	addeq	r1, r1, r0
 8005aba:	6021      	streq	r1, [r4, #0]
 8005abc:	6063      	str	r3, [r4, #4]
 8005abe:	6054      	str	r4, [r2, #4]
 8005ac0:	e7cb      	b.n	8005a5a <_free_r+0x22>
 8005ac2:	bd38      	pop	{r3, r4, r5, pc}
 8005ac4:	200003d8 	.word	0x200003d8

08005ac8 <malloc>:
 8005ac8:	4b02      	ldr	r3, [pc, #8]	; (8005ad4 <malloc+0xc>)
 8005aca:	4601      	mov	r1, r0
 8005acc:	6818      	ldr	r0, [r3, #0]
 8005ace:	f000 b823 	b.w	8005b18 <_malloc_r>
 8005ad2:	bf00      	nop
 8005ad4:	20000068 	.word	0x20000068

08005ad8 <sbrk_aligned>:
 8005ad8:	b570      	push	{r4, r5, r6, lr}
 8005ada:	4e0e      	ldr	r6, [pc, #56]	; (8005b14 <sbrk_aligned+0x3c>)
 8005adc:	460c      	mov	r4, r1
 8005ade:	6831      	ldr	r1, [r6, #0]
 8005ae0:	4605      	mov	r5, r0
 8005ae2:	b911      	cbnz	r1, 8005aea <sbrk_aligned+0x12>
 8005ae4:	f001 ffe4 	bl	8007ab0 <_sbrk_r>
 8005ae8:	6030      	str	r0, [r6, #0]
 8005aea:	4621      	mov	r1, r4
 8005aec:	4628      	mov	r0, r5
 8005aee:	f001 ffdf 	bl	8007ab0 <_sbrk_r>
 8005af2:	1c43      	adds	r3, r0, #1
 8005af4:	d00a      	beq.n	8005b0c <sbrk_aligned+0x34>
 8005af6:	1cc4      	adds	r4, r0, #3
 8005af8:	f024 0403 	bic.w	r4, r4, #3
 8005afc:	42a0      	cmp	r0, r4
 8005afe:	d007      	beq.n	8005b10 <sbrk_aligned+0x38>
 8005b00:	1a21      	subs	r1, r4, r0
 8005b02:	4628      	mov	r0, r5
 8005b04:	f001 ffd4 	bl	8007ab0 <_sbrk_r>
 8005b08:	3001      	adds	r0, #1
 8005b0a:	d101      	bne.n	8005b10 <sbrk_aligned+0x38>
 8005b0c:	f04f 34ff 	mov.w	r4, #4294967295
 8005b10:	4620      	mov	r0, r4
 8005b12:	bd70      	pop	{r4, r5, r6, pc}
 8005b14:	200003dc 	.word	0x200003dc

08005b18 <_malloc_r>:
 8005b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b1c:	1ccd      	adds	r5, r1, #3
 8005b1e:	f025 0503 	bic.w	r5, r5, #3
 8005b22:	3508      	adds	r5, #8
 8005b24:	2d0c      	cmp	r5, #12
 8005b26:	bf38      	it	cc
 8005b28:	250c      	movcc	r5, #12
 8005b2a:	2d00      	cmp	r5, #0
 8005b2c:	4607      	mov	r7, r0
 8005b2e:	db01      	blt.n	8005b34 <_malloc_r+0x1c>
 8005b30:	42a9      	cmp	r1, r5
 8005b32:	d905      	bls.n	8005b40 <_malloc_r+0x28>
 8005b34:	230c      	movs	r3, #12
 8005b36:	2600      	movs	r6, #0
 8005b38:	603b      	str	r3, [r7, #0]
 8005b3a:	4630      	mov	r0, r6
 8005b3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b40:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005c14 <_malloc_r+0xfc>
 8005b44:	f000 f868 	bl	8005c18 <__malloc_lock>
 8005b48:	f8d8 3000 	ldr.w	r3, [r8]
 8005b4c:	461c      	mov	r4, r3
 8005b4e:	bb5c      	cbnz	r4, 8005ba8 <_malloc_r+0x90>
 8005b50:	4629      	mov	r1, r5
 8005b52:	4638      	mov	r0, r7
 8005b54:	f7ff ffc0 	bl	8005ad8 <sbrk_aligned>
 8005b58:	1c43      	adds	r3, r0, #1
 8005b5a:	4604      	mov	r4, r0
 8005b5c:	d155      	bne.n	8005c0a <_malloc_r+0xf2>
 8005b5e:	f8d8 4000 	ldr.w	r4, [r8]
 8005b62:	4626      	mov	r6, r4
 8005b64:	2e00      	cmp	r6, #0
 8005b66:	d145      	bne.n	8005bf4 <_malloc_r+0xdc>
 8005b68:	2c00      	cmp	r4, #0
 8005b6a:	d048      	beq.n	8005bfe <_malloc_r+0xe6>
 8005b6c:	6823      	ldr	r3, [r4, #0]
 8005b6e:	4631      	mov	r1, r6
 8005b70:	4638      	mov	r0, r7
 8005b72:	eb04 0903 	add.w	r9, r4, r3
 8005b76:	f001 ff9b 	bl	8007ab0 <_sbrk_r>
 8005b7a:	4581      	cmp	r9, r0
 8005b7c:	d13f      	bne.n	8005bfe <_malloc_r+0xe6>
 8005b7e:	6821      	ldr	r1, [r4, #0]
 8005b80:	4638      	mov	r0, r7
 8005b82:	1a6d      	subs	r5, r5, r1
 8005b84:	4629      	mov	r1, r5
 8005b86:	f7ff ffa7 	bl	8005ad8 <sbrk_aligned>
 8005b8a:	3001      	adds	r0, #1
 8005b8c:	d037      	beq.n	8005bfe <_malloc_r+0xe6>
 8005b8e:	6823      	ldr	r3, [r4, #0]
 8005b90:	442b      	add	r3, r5
 8005b92:	6023      	str	r3, [r4, #0]
 8005b94:	f8d8 3000 	ldr.w	r3, [r8]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d038      	beq.n	8005c0e <_malloc_r+0xf6>
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	42a2      	cmp	r2, r4
 8005ba0:	d12b      	bne.n	8005bfa <_malloc_r+0xe2>
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	605a      	str	r2, [r3, #4]
 8005ba6:	e00f      	b.n	8005bc8 <_malloc_r+0xb0>
 8005ba8:	6822      	ldr	r2, [r4, #0]
 8005baa:	1b52      	subs	r2, r2, r5
 8005bac:	d41f      	bmi.n	8005bee <_malloc_r+0xd6>
 8005bae:	2a0b      	cmp	r2, #11
 8005bb0:	d917      	bls.n	8005be2 <_malloc_r+0xca>
 8005bb2:	1961      	adds	r1, r4, r5
 8005bb4:	42a3      	cmp	r3, r4
 8005bb6:	6025      	str	r5, [r4, #0]
 8005bb8:	bf18      	it	ne
 8005bba:	6059      	strne	r1, [r3, #4]
 8005bbc:	6863      	ldr	r3, [r4, #4]
 8005bbe:	bf08      	it	eq
 8005bc0:	f8c8 1000 	streq.w	r1, [r8]
 8005bc4:	5162      	str	r2, [r4, r5]
 8005bc6:	604b      	str	r3, [r1, #4]
 8005bc8:	4638      	mov	r0, r7
 8005bca:	f104 060b 	add.w	r6, r4, #11
 8005bce:	f000 f829 	bl	8005c24 <__malloc_unlock>
 8005bd2:	f026 0607 	bic.w	r6, r6, #7
 8005bd6:	1d23      	adds	r3, r4, #4
 8005bd8:	1af2      	subs	r2, r6, r3
 8005bda:	d0ae      	beq.n	8005b3a <_malloc_r+0x22>
 8005bdc:	1b9b      	subs	r3, r3, r6
 8005bde:	50a3      	str	r3, [r4, r2]
 8005be0:	e7ab      	b.n	8005b3a <_malloc_r+0x22>
 8005be2:	42a3      	cmp	r3, r4
 8005be4:	6862      	ldr	r2, [r4, #4]
 8005be6:	d1dd      	bne.n	8005ba4 <_malloc_r+0x8c>
 8005be8:	f8c8 2000 	str.w	r2, [r8]
 8005bec:	e7ec      	b.n	8005bc8 <_malloc_r+0xb0>
 8005bee:	4623      	mov	r3, r4
 8005bf0:	6864      	ldr	r4, [r4, #4]
 8005bf2:	e7ac      	b.n	8005b4e <_malloc_r+0x36>
 8005bf4:	4634      	mov	r4, r6
 8005bf6:	6876      	ldr	r6, [r6, #4]
 8005bf8:	e7b4      	b.n	8005b64 <_malloc_r+0x4c>
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	e7cc      	b.n	8005b98 <_malloc_r+0x80>
 8005bfe:	230c      	movs	r3, #12
 8005c00:	4638      	mov	r0, r7
 8005c02:	603b      	str	r3, [r7, #0]
 8005c04:	f000 f80e 	bl	8005c24 <__malloc_unlock>
 8005c08:	e797      	b.n	8005b3a <_malloc_r+0x22>
 8005c0a:	6025      	str	r5, [r4, #0]
 8005c0c:	e7dc      	b.n	8005bc8 <_malloc_r+0xb0>
 8005c0e:	605b      	str	r3, [r3, #4]
 8005c10:	deff      	udf	#255	; 0xff
 8005c12:	bf00      	nop
 8005c14:	200003d8 	.word	0x200003d8

08005c18 <__malloc_lock>:
 8005c18:	4801      	ldr	r0, [pc, #4]	; (8005c20 <__malloc_lock+0x8>)
 8005c1a:	f7ff b888 	b.w	8004d2e <__retarget_lock_acquire_recursive>
 8005c1e:	bf00      	nop
 8005c20:	200003d4 	.word	0x200003d4

08005c24 <__malloc_unlock>:
 8005c24:	4801      	ldr	r0, [pc, #4]	; (8005c2c <__malloc_unlock+0x8>)
 8005c26:	f7ff b883 	b.w	8004d30 <__retarget_lock_release_recursive>
 8005c2a:	bf00      	nop
 8005c2c:	200003d4 	.word	0x200003d4

08005c30 <_Balloc>:
 8005c30:	b570      	push	{r4, r5, r6, lr}
 8005c32:	69c6      	ldr	r6, [r0, #28]
 8005c34:	4604      	mov	r4, r0
 8005c36:	460d      	mov	r5, r1
 8005c38:	b976      	cbnz	r6, 8005c58 <_Balloc+0x28>
 8005c3a:	2010      	movs	r0, #16
 8005c3c:	f7ff ff44 	bl	8005ac8 <malloc>
 8005c40:	4602      	mov	r2, r0
 8005c42:	61e0      	str	r0, [r4, #28]
 8005c44:	b920      	cbnz	r0, 8005c50 <_Balloc+0x20>
 8005c46:	216b      	movs	r1, #107	; 0x6b
 8005c48:	4b17      	ldr	r3, [pc, #92]	; (8005ca8 <_Balloc+0x78>)
 8005c4a:	4818      	ldr	r0, [pc, #96]	; (8005cac <_Balloc+0x7c>)
 8005c4c:	f001 ff54 	bl	8007af8 <__assert_func>
 8005c50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c54:	6006      	str	r6, [r0, #0]
 8005c56:	60c6      	str	r6, [r0, #12]
 8005c58:	69e6      	ldr	r6, [r4, #28]
 8005c5a:	68f3      	ldr	r3, [r6, #12]
 8005c5c:	b183      	cbz	r3, 8005c80 <_Balloc+0x50>
 8005c5e:	69e3      	ldr	r3, [r4, #28]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005c66:	b9b8      	cbnz	r0, 8005c98 <_Balloc+0x68>
 8005c68:	2101      	movs	r1, #1
 8005c6a:	fa01 f605 	lsl.w	r6, r1, r5
 8005c6e:	1d72      	adds	r2, r6, #5
 8005c70:	4620      	mov	r0, r4
 8005c72:	0092      	lsls	r2, r2, #2
 8005c74:	f001 ff5e 	bl	8007b34 <_calloc_r>
 8005c78:	b160      	cbz	r0, 8005c94 <_Balloc+0x64>
 8005c7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005c7e:	e00e      	b.n	8005c9e <_Balloc+0x6e>
 8005c80:	2221      	movs	r2, #33	; 0x21
 8005c82:	2104      	movs	r1, #4
 8005c84:	4620      	mov	r0, r4
 8005c86:	f001 ff55 	bl	8007b34 <_calloc_r>
 8005c8a:	69e3      	ldr	r3, [r4, #28]
 8005c8c:	60f0      	str	r0, [r6, #12]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1e4      	bne.n	8005c5e <_Balloc+0x2e>
 8005c94:	2000      	movs	r0, #0
 8005c96:	bd70      	pop	{r4, r5, r6, pc}
 8005c98:	6802      	ldr	r2, [r0, #0]
 8005c9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005ca4:	e7f7      	b.n	8005c96 <_Balloc+0x66>
 8005ca6:	bf00      	nop
 8005ca8:	08009d10 	.word	0x08009d10
 8005cac:	08009d90 	.word	0x08009d90

08005cb0 <_Bfree>:
 8005cb0:	b570      	push	{r4, r5, r6, lr}
 8005cb2:	69c6      	ldr	r6, [r0, #28]
 8005cb4:	4605      	mov	r5, r0
 8005cb6:	460c      	mov	r4, r1
 8005cb8:	b976      	cbnz	r6, 8005cd8 <_Bfree+0x28>
 8005cba:	2010      	movs	r0, #16
 8005cbc:	f7ff ff04 	bl	8005ac8 <malloc>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	61e8      	str	r0, [r5, #28]
 8005cc4:	b920      	cbnz	r0, 8005cd0 <_Bfree+0x20>
 8005cc6:	218f      	movs	r1, #143	; 0x8f
 8005cc8:	4b08      	ldr	r3, [pc, #32]	; (8005cec <_Bfree+0x3c>)
 8005cca:	4809      	ldr	r0, [pc, #36]	; (8005cf0 <_Bfree+0x40>)
 8005ccc:	f001 ff14 	bl	8007af8 <__assert_func>
 8005cd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005cd4:	6006      	str	r6, [r0, #0]
 8005cd6:	60c6      	str	r6, [r0, #12]
 8005cd8:	b13c      	cbz	r4, 8005cea <_Bfree+0x3a>
 8005cda:	69eb      	ldr	r3, [r5, #28]
 8005cdc:	6862      	ldr	r2, [r4, #4]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ce4:	6021      	str	r1, [r4, #0]
 8005ce6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005cea:	bd70      	pop	{r4, r5, r6, pc}
 8005cec:	08009d10 	.word	0x08009d10
 8005cf0:	08009d90 	.word	0x08009d90

08005cf4 <__multadd>:
 8005cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cf8:	4607      	mov	r7, r0
 8005cfa:	460c      	mov	r4, r1
 8005cfc:	461e      	mov	r6, r3
 8005cfe:	2000      	movs	r0, #0
 8005d00:	690d      	ldr	r5, [r1, #16]
 8005d02:	f101 0c14 	add.w	ip, r1, #20
 8005d06:	f8dc 3000 	ldr.w	r3, [ip]
 8005d0a:	3001      	adds	r0, #1
 8005d0c:	b299      	uxth	r1, r3
 8005d0e:	fb02 6101 	mla	r1, r2, r1, r6
 8005d12:	0c1e      	lsrs	r6, r3, #16
 8005d14:	0c0b      	lsrs	r3, r1, #16
 8005d16:	fb02 3306 	mla	r3, r2, r6, r3
 8005d1a:	b289      	uxth	r1, r1
 8005d1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005d20:	4285      	cmp	r5, r0
 8005d22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005d26:	f84c 1b04 	str.w	r1, [ip], #4
 8005d2a:	dcec      	bgt.n	8005d06 <__multadd+0x12>
 8005d2c:	b30e      	cbz	r6, 8005d72 <__multadd+0x7e>
 8005d2e:	68a3      	ldr	r3, [r4, #8]
 8005d30:	42ab      	cmp	r3, r5
 8005d32:	dc19      	bgt.n	8005d68 <__multadd+0x74>
 8005d34:	6861      	ldr	r1, [r4, #4]
 8005d36:	4638      	mov	r0, r7
 8005d38:	3101      	adds	r1, #1
 8005d3a:	f7ff ff79 	bl	8005c30 <_Balloc>
 8005d3e:	4680      	mov	r8, r0
 8005d40:	b928      	cbnz	r0, 8005d4e <__multadd+0x5a>
 8005d42:	4602      	mov	r2, r0
 8005d44:	21ba      	movs	r1, #186	; 0xba
 8005d46:	4b0c      	ldr	r3, [pc, #48]	; (8005d78 <__multadd+0x84>)
 8005d48:	480c      	ldr	r0, [pc, #48]	; (8005d7c <__multadd+0x88>)
 8005d4a:	f001 fed5 	bl	8007af8 <__assert_func>
 8005d4e:	6922      	ldr	r2, [r4, #16]
 8005d50:	f104 010c 	add.w	r1, r4, #12
 8005d54:	3202      	adds	r2, #2
 8005d56:	0092      	lsls	r2, r2, #2
 8005d58:	300c      	adds	r0, #12
 8005d5a:	f001 feb9 	bl	8007ad0 <memcpy>
 8005d5e:	4621      	mov	r1, r4
 8005d60:	4638      	mov	r0, r7
 8005d62:	f7ff ffa5 	bl	8005cb0 <_Bfree>
 8005d66:	4644      	mov	r4, r8
 8005d68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005d6c:	3501      	adds	r5, #1
 8005d6e:	615e      	str	r6, [r3, #20]
 8005d70:	6125      	str	r5, [r4, #16]
 8005d72:	4620      	mov	r0, r4
 8005d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d78:	08009d7f 	.word	0x08009d7f
 8005d7c:	08009d90 	.word	0x08009d90

08005d80 <__s2b>:
 8005d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d84:	4615      	mov	r5, r2
 8005d86:	2209      	movs	r2, #9
 8005d88:	461f      	mov	r7, r3
 8005d8a:	3308      	adds	r3, #8
 8005d8c:	460c      	mov	r4, r1
 8005d8e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d92:	4606      	mov	r6, r0
 8005d94:	2201      	movs	r2, #1
 8005d96:	2100      	movs	r1, #0
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	db09      	blt.n	8005db0 <__s2b+0x30>
 8005d9c:	4630      	mov	r0, r6
 8005d9e:	f7ff ff47 	bl	8005c30 <_Balloc>
 8005da2:	b940      	cbnz	r0, 8005db6 <__s2b+0x36>
 8005da4:	4602      	mov	r2, r0
 8005da6:	21d3      	movs	r1, #211	; 0xd3
 8005da8:	4b18      	ldr	r3, [pc, #96]	; (8005e0c <__s2b+0x8c>)
 8005daa:	4819      	ldr	r0, [pc, #100]	; (8005e10 <__s2b+0x90>)
 8005dac:	f001 fea4 	bl	8007af8 <__assert_func>
 8005db0:	0052      	lsls	r2, r2, #1
 8005db2:	3101      	adds	r1, #1
 8005db4:	e7f0      	b.n	8005d98 <__s2b+0x18>
 8005db6:	9b08      	ldr	r3, [sp, #32]
 8005db8:	2d09      	cmp	r5, #9
 8005dba:	6143      	str	r3, [r0, #20]
 8005dbc:	f04f 0301 	mov.w	r3, #1
 8005dc0:	6103      	str	r3, [r0, #16]
 8005dc2:	dd16      	ble.n	8005df2 <__s2b+0x72>
 8005dc4:	f104 0909 	add.w	r9, r4, #9
 8005dc8:	46c8      	mov	r8, r9
 8005dca:	442c      	add	r4, r5
 8005dcc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005dd0:	4601      	mov	r1, r0
 8005dd2:	220a      	movs	r2, #10
 8005dd4:	4630      	mov	r0, r6
 8005dd6:	3b30      	subs	r3, #48	; 0x30
 8005dd8:	f7ff ff8c 	bl	8005cf4 <__multadd>
 8005ddc:	45a0      	cmp	r8, r4
 8005dde:	d1f5      	bne.n	8005dcc <__s2b+0x4c>
 8005de0:	f1a5 0408 	sub.w	r4, r5, #8
 8005de4:	444c      	add	r4, r9
 8005de6:	1b2d      	subs	r5, r5, r4
 8005de8:	1963      	adds	r3, r4, r5
 8005dea:	42bb      	cmp	r3, r7
 8005dec:	db04      	blt.n	8005df8 <__s2b+0x78>
 8005dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005df2:	2509      	movs	r5, #9
 8005df4:	340a      	adds	r4, #10
 8005df6:	e7f6      	b.n	8005de6 <__s2b+0x66>
 8005df8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005dfc:	4601      	mov	r1, r0
 8005dfe:	220a      	movs	r2, #10
 8005e00:	4630      	mov	r0, r6
 8005e02:	3b30      	subs	r3, #48	; 0x30
 8005e04:	f7ff ff76 	bl	8005cf4 <__multadd>
 8005e08:	e7ee      	b.n	8005de8 <__s2b+0x68>
 8005e0a:	bf00      	nop
 8005e0c:	08009d7f 	.word	0x08009d7f
 8005e10:	08009d90 	.word	0x08009d90

08005e14 <__hi0bits>:
 8005e14:	0c02      	lsrs	r2, r0, #16
 8005e16:	0412      	lsls	r2, r2, #16
 8005e18:	4603      	mov	r3, r0
 8005e1a:	b9ca      	cbnz	r2, 8005e50 <__hi0bits+0x3c>
 8005e1c:	0403      	lsls	r3, r0, #16
 8005e1e:	2010      	movs	r0, #16
 8005e20:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005e24:	bf04      	itt	eq
 8005e26:	021b      	lsleq	r3, r3, #8
 8005e28:	3008      	addeq	r0, #8
 8005e2a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005e2e:	bf04      	itt	eq
 8005e30:	011b      	lsleq	r3, r3, #4
 8005e32:	3004      	addeq	r0, #4
 8005e34:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005e38:	bf04      	itt	eq
 8005e3a:	009b      	lsleq	r3, r3, #2
 8005e3c:	3002      	addeq	r0, #2
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	db05      	blt.n	8005e4e <__hi0bits+0x3a>
 8005e42:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005e46:	f100 0001 	add.w	r0, r0, #1
 8005e4a:	bf08      	it	eq
 8005e4c:	2020      	moveq	r0, #32
 8005e4e:	4770      	bx	lr
 8005e50:	2000      	movs	r0, #0
 8005e52:	e7e5      	b.n	8005e20 <__hi0bits+0xc>

08005e54 <__lo0bits>:
 8005e54:	6803      	ldr	r3, [r0, #0]
 8005e56:	4602      	mov	r2, r0
 8005e58:	f013 0007 	ands.w	r0, r3, #7
 8005e5c:	d00b      	beq.n	8005e76 <__lo0bits+0x22>
 8005e5e:	07d9      	lsls	r1, r3, #31
 8005e60:	d421      	bmi.n	8005ea6 <__lo0bits+0x52>
 8005e62:	0798      	lsls	r0, r3, #30
 8005e64:	bf49      	itett	mi
 8005e66:	085b      	lsrmi	r3, r3, #1
 8005e68:	089b      	lsrpl	r3, r3, #2
 8005e6a:	2001      	movmi	r0, #1
 8005e6c:	6013      	strmi	r3, [r2, #0]
 8005e6e:	bf5c      	itt	pl
 8005e70:	2002      	movpl	r0, #2
 8005e72:	6013      	strpl	r3, [r2, #0]
 8005e74:	4770      	bx	lr
 8005e76:	b299      	uxth	r1, r3
 8005e78:	b909      	cbnz	r1, 8005e7e <__lo0bits+0x2a>
 8005e7a:	2010      	movs	r0, #16
 8005e7c:	0c1b      	lsrs	r3, r3, #16
 8005e7e:	b2d9      	uxtb	r1, r3
 8005e80:	b909      	cbnz	r1, 8005e86 <__lo0bits+0x32>
 8005e82:	3008      	adds	r0, #8
 8005e84:	0a1b      	lsrs	r3, r3, #8
 8005e86:	0719      	lsls	r1, r3, #28
 8005e88:	bf04      	itt	eq
 8005e8a:	091b      	lsreq	r3, r3, #4
 8005e8c:	3004      	addeq	r0, #4
 8005e8e:	0799      	lsls	r1, r3, #30
 8005e90:	bf04      	itt	eq
 8005e92:	089b      	lsreq	r3, r3, #2
 8005e94:	3002      	addeq	r0, #2
 8005e96:	07d9      	lsls	r1, r3, #31
 8005e98:	d403      	bmi.n	8005ea2 <__lo0bits+0x4e>
 8005e9a:	085b      	lsrs	r3, r3, #1
 8005e9c:	f100 0001 	add.w	r0, r0, #1
 8005ea0:	d003      	beq.n	8005eaa <__lo0bits+0x56>
 8005ea2:	6013      	str	r3, [r2, #0]
 8005ea4:	4770      	bx	lr
 8005ea6:	2000      	movs	r0, #0
 8005ea8:	4770      	bx	lr
 8005eaa:	2020      	movs	r0, #32
 8005eac:	4770      	bx	lr
	...

08005eb0 <__i2b>:
 8005eb0:	b510      	push	{r4, lr}
 8005eb2:	460c      	mov	r4, r1
 8005eb4:	2101      	movs	r1, #1
 8005eb6:	f7ff febb 	bl	8005c30 <_Balloc>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	b928      	cbnz	r0, 8005eca <__i2b+0x1a>
 8005ebe:	f240 1145 	movw	r1, #325	; 0x145
 8005ec2:	4b04      	ldr	r3, [pc, #16]	; (8005ed4 <__i2b+0x24>)
 8005ec4:	4804      	ldr	r0, [pc, #16]	; (8005ed8 <__i2b+0x28>)
 8005ec6:	f001 fe17 	bl	8007af8 <__assert_func>
 8005eca:	2301      	movs	r3, #1
 8005ecc:	6144      	str	r4, [r0, #20]
 8005ece:	6103      	str	r3, [r0, #16]
 8005ed0:	bd10      	pop	{r4, pc}
 8005ed2:	bf00      	nop
 8005ed4:	08009d7f 	.word	0x08009d7f
 8005ed8:	08009d90 	.word	0x08009d90

08005edc <__multiply>:
 8005edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ee0:	4691      	mov	r9, r2
 8005ee2:	690a      	ldr	r2, [r1, #16]
 8005ee4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005ee8:	460c      	mov	r4, r1
 8005eea:	429a      	cmp	r2, r3
 8005eec:	bfbe      	ittt	lt
 8005eee:	460b      	movlt	r3, r1
 8005ef0:	464c      	movlt	r4, r9
 8005ef2:	4699      	movlt	r9, r3
 8005ef4:	6927      	ldr	r7, [r4, #16]
 8005ef6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005efa:	68a3      	ldr	r3, [r4, #8]
 8005efc:	6861      	ldr	r1, [r4, #4]
 8005efe:	eb07 060a 	add.w	r6, r7, sl
 8005f02:	42b3      	cmp	r3, r6
 8005f04:	b085      	sub	sp, #20
 8005f06:	bfb8      	it	lt
 8005f08:	3101      	addlt	r1, #1
 8005f0a:	f7ff fe91 	bl	8005c30 <_Balloc>
 8005f0e:	b930      	cbnz	r0, 8005f1e <__multiply+0x42>
 8005f10:	4602      	mov	r2, r0
 8005f12:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005f16:	4b43      	ldr	r3, [pc, #268]	; (8006024 <__multiply+0x148>)
 8005f18:	4843      	ldr	r0, [pc, #268]	; (8006028 <__multiply+0x14c>)
 8005f1a:	f001 fded 	bl	8007af8 <__assert_func>
 8005f1e:	f100 0514 	add.w	r5, r0, #20
 8005f22:	462b      	mov	r3, r5
 8005f24:	2200      	movs	r2, #0
 8005f26:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005f2a:	4543      	cmp	r3, r8
 8005f2c:	d321      	bcc.n	8005f72 <__multiply+0x96>
 8005f2e:	f104 0314 	add.w	r3, r4, #20
 8005f32:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005f36:	f109 0314 	add.w	r3, r9, #20
 8005f3a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005f3e:	9202      	str	r2, [sp, #8]
 8005f40:	1b3a      	subs	r2, r7, r4
 8005f42:	3a15      	subs	r2, #21
 8005f44:	f022 0203 	bic.w	r2, r2, #3
 8005f48:	3204      	adds	r2, #4
 8005f4a:	f104 0115 	add.w	r1, r4, #21
 8005f4e:	428f      	cmp	r7, r1
 8005f50:	bf38      	it	cc
 8005f52:	2204      	movcc	r2, #4
 8005f54:	9201      	str	r2, [sp, #4]
 8005f56:	9a02      	ldr	r2, [sp, #8]
 8005f58:	9303      	str	r3, [sp, #12]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d80c      	bhi.n	8005f78 <__multiply+0x9c>
 8005f5e:	2e00      	cmp	r6, #0
 8005f60:	dd03      	ble.n	8005f6a <__multiply+0x8e>
 8005f62:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d05a      	beq.n	8006020 <__multiply+0x144>
 8005f6a:	6106      	str	r6, [r0, #16]
 8005f6c:	b005      	add	sp, #20
 8005f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f72:	f843 2b04 	str.w	r2, [r3], #4
 8005f76:	e7d8      	b.n	8005f2a <__multiply+0x4e>
 8005f78:	f8b3 a000 	ldrh.w	sl, [r3]
 8005f7c:	f1ba 0f00 	cmp.w	sl, #0
 8005f80:	d023      	beq.n	8005fca <__multiply+0xee>
 8005f82:	46a9      	mov	r9, r5
 8005f84:	f04f 0c00 	mov.w	ip, #0
 8005f88:	f104 0e14 	add.w	lr, r4, #20
 8005f8c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005f90:	f8d9 1000 	ldr.w	r1, [r9]
 8005f94:	fa1f fb82 	uxth.w	fp, r2
 8005f98:	b289      	uxth	r1, r1
 8005f9a:	fb0a 110b 	mla	r1, sl, fp, r1
 8005f9e:	4461      	add	r1, ip
 8005fa0:	f8d9 c000 	ldr.w	ip, [r9]
 8005fa4:	0c12      	lsrs	r2, r2, #16
 8005fa6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005faa:	fb0a c202 	mla	r2, sl, r2, ip
 8005fae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005fb2:	b289      	uxth	r1, r1
 8005fb4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005fb8:	4577      	cmp	r7, lr
 8005fba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005fbe:	f849 1b04 	str.w	r1, [r9], #4
 8005fc2:	d8e3      	bhi.n	8005f8c <__multiply+0xb0>
 8005fc4:	9a01      	ldr	r2, [sp, #4]
 8005fc6:	f845 c002 	str.w	ip, [r5, r2]
 8005fca:	9a03      	ldr	r2, [sp, #12]
 8005fcc:	3304      	adds	r3, #4
 8005fce:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005fd2:	f1b9 0f00 	cmp.w	r9, #0
 8005fd6:	d021      	beq.n	800601c <__multiply+0x140>
 8005fd8:	46ae      	mov	lr, r5
 8005fda:	f04f 0a00 	mov.w	sl, #0
 8005fde:	6829      	ldr	r1, [r5, #0]
 8005fe0:	f104 0c14 	add.w	ip, r4, #20
 8005fe4:	f8bc b000 	ldrh.w	fp, [ip]
 8005fe8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005fec:	b289      	uxth	r1, r1
 8005fee:	fb09 220b 	mla	r2, r9, fp, r2
 8005ff2:	4452      	add	r2, sl
 8005ff4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005ff8:	f84e 1b04 	str.w	r1, [lr], #4
 8005ffc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006000:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006004:	f8be 1000 	ldrh.w	r1, [lr]
 8006008:	4567      	cmp	r7, ip
 800600a:	fb09 110a 	mla	r1, r9, sl, r1
 800600e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006012:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006016:	d8e5      	bhi.n	8005fe4 <__multiply+0x108>
 8006018:	9a01      	ldr	r2, [sp, #4]
 800601a:	50a9      	str	r1, [r5, r2]
 800601c:	3504      	adds	r5, #4
 800601e:	e79a      	b.n	8005f56 <__multiply+0x7a>
 8006020:	3e01      	subs	r6, #1
 8006022:	e79c      	b.n	8005f5e <__multiply+0x82>
 8006024:	08009d7f 	.word	0x08009d7f
 8006028:	08009d90 	.word	0x08009d90

0800602c <__pow5mult>:
 800602c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006030:	4615      	mov	r5, r2
 8006032:	f012 0203 	ands.w	r2, r2, #3
 8006036:	4606      	mov	r6, r0
 8006038:	460f      	mov	r7, r1
 800603a:	d007      	beq.n	800604c <__pow5mult+0x20>
 800603c:	4c25      	ldr	r4, [pc, #148]	; (80060d4 <__pow5mult+0xa8>)
 800603e:	3a01      	subs	r2, #1
 8006040:	2300      	movs	r3, #0
 8006042:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006046:	f7ff fe55 	bl	8005cf4 <__multadd>
 800604a:	4607      	mov	r7, r0
 800604c:	10ad      	asrs	r5, r5, #2
 800604e:	d03d      	beq.n	80060cc <__pow5mult+0xa0>
 8006050:	69f4      	ldr	r4, [r6, #28]
 8006052:	b97c      	cbnz	r4, 8006074 <__pow5mult+0x48>
 8006054:	2010      	movs	r0, #16
 8006056:	f7ff fd37 	bl	8005ac8 <malloc>
 800605a:	4602      	mov	r2, r0
 800605c:	61f0      	str	r0, [r6, #28]
 800605e:	b928      	cbnz	r0, 800606c <__pow5mult+0x40>
 8006060:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006064:	4b1c      	ldr	r3, [pc, #112]	; (80060d8 <__pow5mult+0xac>)
 8006066:	481d      	ldr	r0, [pc, #116]	; (80060dc <__pow5mult+0xb0>)
 8006068:	f001 fd46 	bl	8007af8 <__assert_func>
 800606c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006070:	6004      	str	r4, [r0, #0]
 8006072:	60c4      	str	r4, [r0, #12]
 8006074:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006078:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800607c:	b94c      	cbnz	r4, 8006092 <__pow5mult+0x66>
 800607e:	f240 2171 	movw	r1, #625	; 0x271
 8006082:	4630      	mov	r0, r6
 8006084:	f7ff ff14 	bl	8005eb0 <__i2b>
 8006088:	2300      	movs	r3, #0
 800608a:	4604      	mov	r4, r0
 800608c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006090:	6003      	str	r3, [r0, #0]
 8006092:	f04f 0900 	mov.w	r9, #0
 8006096:	07eb      	lsls	r3, r5, #31
 8006098:	d50a      	bpl.n	80060b0 <__pow5mult+0x84>
 800609a:	4639      	mov	r1, r7
 800609c:	4622      	mov	r2, r4
 800609e:	4630      	mov	r0, r6
 80060a0:	f7ff ff1c 	bl	8005edc <__multiply>
 80060a4:	4680      	mov	r8, r0
 80060a6:	4639      	mov	r1, r7
 80060a8:	4630      	mov	r0, r6
 80060aa:	f7ff fe01 	bl	8005cb0 <_Bfree>
 80060ae:	4647      	mov	r7, r8
 80060b0:	106d      	asrs	r5, r5, #1
 80060b2:	d00b      	beq.n	80060cc <__pow5mult+0xa0>
 80060b4:	6820      	ldr	r0, [r4, #0]
 80060b6:	b938      	cbnz	r0, 80060c8 <__pow5mult+0x9c>
 80060b8:	4622      	mov	r2, r4
 80060ba:	4621      	mov	r1, r4
 80060bc:	4630      	mov	r0, r6
 80060be:	f7ff ff0d 	bl	8005edc <__multiply>
 80060c2:	6020      	str	r0, [r4, #0]
 80060c4:	f8c0 9000 	str.w	r9, [r0]
 80060c8:	4604      	mov	r4, r0
 80060ca:	e7e4      	b.n	8006096 <__pow5mult+0x6a>
 80060cc:	4638      	mov	r0, r7
 80060ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060d2:	bf00      	nop
 80060d4:	08009ee0 	.word	0x08009ee0
 80060d8:	08009d10 	.word	0x08009d10
 80060dc:	08009d90 	.word	0x08009d90

080060e0 <__lshift>:
 80060e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060e4:	460c      	mov	r4, r1
 80060e6:	4607      	mov	r7, r0
 80060e8:	4691      	mov	r9, r2
 80060ea:	6923      	ldr	r3, [r4, #16]
 80060ec:	6849      	ldr	r1, [r1, #4]
 80060ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80060f2:	68a3      	ldr	r3, [r4, #8]
 80060f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80060f8:	f108 0601 	add.w	r6, r8, #1
 80060fc:	42b3      	cmp	r3, r6
 80060fe:	db0b      	blt.n	8006118 <__lshift+0x38>
 8006100:	4638      	mov	r0, r7
 8006102:	f7ff fd95 	bl	8005c30 <_Balloc>
 8006106:	4605      	mov	r5, r0
 8006108:	b948      	cbnz	r0, 800611e <__lshift+0x3e>
 800610a:	4602      	mov	r2, r0
 800610c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006110:	4b27      	ldr	r3, [pc, #156]	; (80061b0 <__lshift+0xd0>)
 8006112:	4828      	ldr	r0, [pc, #160]	; (80061b4 <__lshift+0xd4>)
 8006114:	f001 fcf0 	bl	8007af8 <__assert_func>
 8006118:	3101      	adds	r1, #1
 800611a:	005b      	lsls	r3, r3, #1
 800611c:	e7ee      	b.n	80060fc <__lshift+0x1c>
 800611e:	2300      	movs	r3, #0
 8006120:	f100 0114 	add.w	r1, r0, #20
 8006124:	f100 0210 	add.w	r2, r0, #16
 8006128:	4618      	mov	r0, r3
 800612a:	4553      	cmp	r3, sl
 800612c:	db33      	blt.n	8006196 <__lshift+0xb6>
 800612e:	6920      	ldr	r0, [r4, #16]
 8006130:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006134:	f104 0314 	add.w	r3, r4, #20
 8006138:	f019 091f 	ands.w	r9, r9, #31
 800613c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006140:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006144:	d02b      	beq.n	800619e <__lshift+0xbe>
 8006146:	468a      	mov	sl, r1
 8006148:	2200      	movs	r2, #0
 800614a:	f1c9 0e20 	rsb	lr, r9, #32
 800614e:	6818      	ldr	r0, [r3, #0]
 8006150:	fa00 f009 	lsl.w	r0, r0, r9
 8006154:	4310      	orrs	r0, r2
 8006156:	f84a 0b04 	str.w	r0, [sl], #4
 800615a:	f853 2b04 	ldr.w	r2, [r3], #4
 800615e:	459c      	cmp	ip, r3
 8006160:	fa22 f20e 	lsr.w	r2, r2, lr
 8006164:	d8f3      	bhi.n	800614e <__lshift+0x6e>
 8006166:	ebac 0304 	sub.w	r3, ip, r4
 800616a:	3b15      	subs	r3, #21
 800616c:	f023 0303 	bic.w	r3, r3, #3
 8006170:	3304      	adds	r3, #4
 8006172:	f104 0015 	add.w	r0, r4, #21
 8006176:	4584      	cmp	ip, r0
 8006178:	bf38      	it	cc
 800617a:	2304      	movcc	r3, #4
 800617c:	50ca      	str	r2, [r1, r3]
 800617e:	b10a      	cbz	r2, 8006184 <__lshift+0xa4>
 8006180:	f108 0602 	add.w	r6, r8, #2
 8006184:	3e01      	subs	r6, #1
 8006186:	4638      	mov	r0, r7
 8006188:	4621      	mov	r1, r4
 800618a:	612e      	str	r6, [r5, #16]
 800618c:	f7ff fd90 	bl	8005cb0 <_Bfree>
 8006190:	4628      	mov	r0, r5
 8006192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006196:	f842 0f04 	str.w	r0, [r2, #4]!
 800619a:	3301      	adds	r3, #1
 800619c:	e7c5      	b.n	800612a <__lshift+0x4a>
 800619e:	3904      	subs	r1, #4
 80061a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80061a4:	459c      	cmp	ip, r3
 80061a6:	f841 2f04 	str.w	r2, [r1, #4]!
 80061aa:	d8f9      	bhi.n	80061a0 <__lshift+0xc0>
 80061ac:	e7ea      	b.n	8006184 <__lshift+0xa4>
 80061ae:	bf00      	nop
 80061b0:	08009d7f 	.word	0x08009d7f
 80061b4:	08009d90 	.word	0x08009d90

080061b8 <__mcmp>:
 80061b8:	4603      	mov	r3, r0
 80061ba:	690a      	ldr	r2, [r1, #16]
 80061bc:	6900      	ldr	r0, [r0, #16]
 80061be:	b530      	push	{r4, r5, lr}
 80061c0:	1a80      	subs	r0, r0, r2
 80061c2:	d10d      	bne.n	80061e0 <__mcmp+0x28>
 80061c4:	3314      	adds	r3, #20
 80061c6:	3114      	adds	r1, #20
 80061c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80061cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80061d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80061d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80061d8:	4295      	cmp	r5, r2
 80061da:	d002      	beq.n	80061e2 <__mcmp+0x2a>
 80061dc:	d304      	bcc.n	80061e8 <__mcmp+0x30>
 80061de:	2001      	movs	r0, #1
 80061e0:	bd30      	pop	{r4, r5, pc}
 80061e2:	42a3      	cmp	r3, r4
 80061e4:	d3f4      	bcc.n	80061d0 <__mcmp+0x18>
 80061e6:	e7fb      	b.n	80061e0 <__mcmp+0x28>
 80061e8:	f04f 30ff 	mov.w	r0, #4294967295
 80061ec:	e7f8      	b.n	80061e0 <__mcmp+0x28>
	...

080061f0 <__mdiff>:
 80061f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f4:	460d      	mov	r5, r1
 80061f6:	4607      	mov	r7, r0
 80061f8:	4611      	mov	r1, r2
 80061fa:	4628      	mov	r0, r5
 80061fc:	4614      	mov	r4, r2
 80061fe:	f7ff ffdb 	bl	80061b8 <__mcmp>
 8006202:	1e06      	subs	r6, r0, #0
 8006204:	d111      	bne.n	800622a <__mdiff+0x3a>
 8006206:	4631      	mov	r1, r6
 8006208:	4638      	mov	r0, r7
 800620a:	f7ff fd11 	bl	8005c30 <_Balloc>
 800620e:	4602      	mov	r2, r0
 8006210:	b928      	cbnz	r0, 800621e <__mdiff+0x2e>
 8006212:	f240 2137 	movw	r1, #567	; 0x237
 8006216:	4b3a      	ldr	r3, [pc, #232]	; (8006300 <__mdiff+0x110>)
 8006218:	483a      	ldr	r0, [pc, #232]	; (8006304 <__mdiff+0x114>)
 800621a:	f001 fc6d 	bl	8007af8 <__assert_func>
 800621e:	2301      	movs	r3, #1
 8006220:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006224:	4610      	mov	r0, r2
 8006226:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800622a:	bfa4      	itt	ge
 800622c:	4623      	movge	r3, r4
 800622e:	462c      	movge	r4, r5
 8006230:	4638      	mov	r0, r7
 8006232:	6861      	ldr	r1, [r4, #4]
 8006234:	bfa6      	itte	ge
 8006236:	461d      	movge	r5, r3
 8006238:	2600      	movge	r6, #0
 800623a:	2601      	movlt	r6, #1
 800623c:	f7ff fcf8 	bl	8005c30 <_Balloc>
 8006240:	4602      	mov	r2, r0
 8006242:	b918      	cbnz	r0, 800624c <__mdiff+0x5c>
 8006244:	f240 2145 	movw	r1, #581	; 0x245
 8006248:	4b2d      	ldr	r3, [pc, #180]	; (8006300 <__mdiff+0x110>)
 800624a:	e7e5      	b.n	8006218 <__mdiff+0x28>
 800624c:	f102 0814 	add.w	r8, r2, #20
 8006250:	46c2      	mov	sl, r8
 8006252:	f04f 0c00 	mov.w	ip, #0
 8006256:	6927      	ldr	r7, [r4, #16]
 8006258:	60c6      	str	r6, [r0, #12]
 800625a:	692e      	ldr	r6, [r5, #16]
 800625c:	f104 0014 	add.w	r0, r4, #20
 8006260:	f105 0914 	add.w	r9, r5, #20
 8006264:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006268:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800626c:	3410      	adds	r4, #16
 800626e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006272:	f859 3b04 	ldr.w	r3, [r9], #4
 8006276:	fa1f f18b 	uxth.w	r1, fp
 800627a:	4461      	add	r1, ip
 800627c:	fa1f fc83 	uxth.w	ip, r3
 8006280:	0c1b      	lsrs	r3, r3, #16
 8006282:	eba1 010c 	sub.w	r1, r1, ip
 8006286:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800628a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800628e:	b289      	uxth	r1, r1
 8006290:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006294:	454e      	cmp	r6, r9
 8006296:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800629a:	f84a 1b04 	str.w	r1, [sl], #4
 800629e:	d8e6      	bhi.n	800626e <__mdiff+0x7e>
 80062a0:	1b73      	subs	r3, r6, r5
 80062a2:	3b15      	subs	r3, #21
 80062a4:	f023 0303 	bic.w	r3, r3, #3
 80062a8:	3515      	adds	r5, #21
 80062aa:	3304      	adds	r3, #4
 80062ac:	42ae      	cmp	r6, r5
 80062ae:	bf38      	it	cc
 80062b0:	2304      	movcc	r3, #4
 80062b2:	4418      	add	r0, r3
 80062b4:	4443      	add	r3, r8
 80062b6:	461e      	mov	r6, r3
 80062b8:	4605      	mov	r5, r0
 80062ba:	4575      	cmp	r5, lr
 80062bc:	d30e      	bcc.n	80062dc <__mdiff+0xec>
 80062be:	f10e 0103 	add.w	r1, lr, #3
 80062c2:	1a09      	subs	r1, r1, r0
 80062c4:	f021 0103 	bic.w	r1, r1, #3
 80062c8:	3803      	subs	r0, #3
 80062ca:	4586      	cmp	lr, r0
 80062cc:	bf38      	it	cc
 80062ce:	2100      	movcc	r1, #0
 80062d0:	440b      	add	r3, r1
 80062d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80062d6:	b189      	cbz	r1, 80062fc <__mdiff+0x10c>
 80062d8:	6117      	str	r7, [r2, #16]
 80062da:	e7a3      	b.n	8006224 <__mdiff+0x34>
 80062dc:	f855 8b04 	ldr.w	r8, [r5], #4
 80062e0:	fa1f f188 	uxth.w	r1, r8
 80062e4:	4461      	add	r1, ip
 80062e6:	140c      	asrs	r4, r1, #16
 80062e8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80062ec:	b289      	uxth	r1, r1
 80062ee:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80062f2:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80062f6:	f846 1b04 	str.w	r1, [r6], #4
 80062fa:	e7de      	b.n	80062ba <__mdiff+0xca>
 80062fc:	3f01      	subs	r7, #1
 80062fe:	e7e8      	b.n	80062d2 <__mdiff+0xe2>
 8006300:	08009d7f 	.word	0x08009d7f
 8006304:	08009d90 	.word	0x08009d90

08006308 <__ulp>:
 8006308:	4b0e      	ldr	r3, [pc, #56]	; (8006344 <__ulp+0x3c>)
 800630a:	400b      	ands	r3, r1
 800630c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006310:	2b00      	cmp	r3, #0
 8006312:	dc08      	bgt.n	8006326 <__ulp+0x1e>
 8006314:	425b      	negs	r3, r3
 8006316:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800631a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800631e:	da04      	bge.n	800632a <__ulp+0x22>
 8006320:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006324:	4113      	asrs	r3, r2
 8006326:	2200      	movs	r2, #0
 8006328:	e008      	b.n	800633c <__ulp+0x34>
 800632a:	f1a2 0314 	sub.w	r3, r2, #20
 800632e:	2b1e      	cmp	r3, #30
 8006330:	bfd6      	itet	le
 8006332:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006336:	2201      	movgt	r2, #1
 8006338:	40da      	lsrle	r2, r3
 800633a:	2300      	movs	r3, #0
 800633c:	4619      	mov	r1, r3
 800633e:	4610      	mov	r0, r2
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	7ff00000 	.word	0x7ff00000

08006348 <__b2d>:
 8006348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800634a:	6905      	ldr	r5, [r0, #16]
 800634c:	f100 0714 	add.w	r7, r0, #20
 8006350:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006354:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006358:	1f2e      	subs	r6, r5, #4
 800635a:	4620      	mov	r0, r4
 800635c:	f7ff fd5a 	bl	8005e14 <__hi0bits>
 8006360:	f1c0 0220 	rsb	r2, r0, #32
 8006364:	280a      	cmp	r0, #10
 8006366:	4603      	mov	r3, r0
 8006368:	f8df c068 	ldr.w	ip, [pc, #104]	; 80063d4 <__b2d+0x8c>
 800636c:	600a      	str	r2, [r1, #0]
 800636e:	dc12      	bgt.n	8006396 <__b2d+0x4e>
 8006370:	f1c0 0e0b 	rsb	lr, r0, #11
 8006374:	fa24 f20e 	lsr.w	r2, r4, lr
 8006378:	42b7      	cmp	r7, r6
 800637a:	ea42 010c 	orr.w	r1, r2, ip
 800637e:	bf2c      	ite	cs
 8006380:	2200      	movcs	r2, #0
 8006382:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006386:	3315      	adds	r3, #21
 8006388:	fa04 f303 	lsl.w	r3, r4, r3
 800638c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006390:	431a      	orrs	r2, r3
 8006392:	4610      	mov	r0, r2
 8006394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006396:	42b7      	cmp	r7, r6
 8006398:	bf2e      	itee	cs
 800639a:	2200      	movcs	r2, #0
 800639c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80063a0:	f1a5 0608 	subcc.w	r6, r5, #8
 80063a4:	3b0b      	subs	r3, #11
 80063a6:	d012      	beq.n	80063ce <__b2d+0x86>
 80063a8:	f1c3 0520 	rsb	r5, r3, #32
 80063ac:	fa22 f105 	lsr.w	r1, r2, r5
 80063b0:	409c      	lsls	r4, r3
 80063b2:	430c      	orrs	r4, r1
 80063b4:	42be      	cmp	r6, r7
 80063b6:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 80063ba:	bf94      	ite	ls
 80063bc:	2400      	movls	r4, #0
 80063be:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80063c2:	409a      	lsls	r2, r3
 80063c4:	40ec      	lsrs	r4, r5
 80063c6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80063ca:	4322      	orrs	r2, r4
 80063cc:	e7e1      	b.n	8006392 <__b2d+0x4a>
 80063ce:	ea44 010c 	orr.w	r1, r4, ip
 80063d2:	e7de      	b.n	8006392 <__b2d+0x4a>
 80063d4:	3ff00000 	.word	0x3ff00000

080063d8 <__d2b>:
 80063d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063da:	2101      	movs	r1, #1
 80063dc:	4617      	mov	r7, r2
 80063de:	461c      	mov	r4, r3
 80063e0:	9e08      	ldr	r6, [sp, #32]
 80063e2:	f7ff fc25 	bl	8005c30 <_Balloc>
 80063e6:	4605      	mov	r5, r0
 80063e8:	b930      	cbnz	r0, 80063f8 <__d2b+0x20>
 80063ea:	4602      	mov	r2, r0
 80063ec:	f240 310f 	movw	r1, #783	; 0x30f
 80063f0:	4b22      	ldr	r3, [pc, #136]	; (800647c <__d2b+0xa4>)
 80063f2:	4823      	ldr	r0, [pc, #140]	; (8006480 <__d2b+0xa8>)
 80063f4:	f001 fb80 	bl	8007af8 <__assert_func>
 80063f8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80063fc:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006400:	bb24      	cbnz	r4, 800644c <__d2b+0x74>
 8006402:	2f00      	cmp	r7, #0
 8006404:	9301      	str	r3, [sp, #4]
 8006406:	d026      	beq.n	8006456 <__d2b+0x7e>
 8006408:	4668      	mov	r0, sp
 800640a:	9700      	str	r7, [sp, #0]
 800640c:	f7ff fd22 	bl	8005e54 <__lo0bits>
 8006410:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006414:	b1e8      	cbz	r0, 8006452 <__d2b+0x7a>
 8006416:	f1c0 0320 	rsb	r3, r0, #32
 800641a:	fa02 f303 	lsl.w	r3, r2, r3
 800641e:	430b      	orrs	r3, r1
 8006420:	40c2      	lsrs	r2, r0
 8006422:	616b      	str	r3, [r5, #20]
 8006424:	9201      	str	r2, [sp, #4]
 8006426:	9b01      	ldr	r3, [sp, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	bf14      	ite	ne
 800642c:	2102      	movne	r1, #2
 800642e:	2101      	moveq	r1, #1
 8006430:	61ab      	str	r3, [r5, #24]
 8006432:	6129      	str	r1, [r5, #16]
 8006434:	b1bc      	cbz	r4, 8006466 <__d2b+0x8e>
 8006436:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800643a:	4404      	add	r4, r0
 800643c:	6034      	str	r4, [r6, #0]
 800643e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006444:	6018      	str	r0, [r3, #0]
 8006446:	4628      	mov	r0, r5
 8006448:	b003      	add	sp, #12
 800644a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800644c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006450:	e7d7      	b.n	8006402 <__d2b+0x2a>
 8006452:	6169      	str	r1, [r5, #20]
 8006454:	e7e7      	b.n	8006426 <__d2b+0x4e>
 8006456:	a801      	add	r0, sp, #4
 8006458:	f7ff fcfc 	bl	8005e54 <__lo0bits>
 800645c:	9b01      	ldr	r3, [sp, #4]
 800645e:	2101      	movs	r1, #1
 8006460:	616b      	str	r3, [r5, #20]
 8006462:	3020      	adds	r0, #32
 8006464:	e7e5      	b.n	8006432 <__d2b+0x5a>
 8006466:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800646a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800646e:	6030      	str	r0, [r6, #0]
 8006470:	6918      	ldr	r0, [r3, #16]
 8006472:	f7ff fccf 	bl	8005e14 <__hi0bits>
 8006476:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800647a:	e7e2      	b.n	8006442 <__d2b+0x6a>
 800647c:	08009d7f 	.word	0x08009d7f
 8006480:	08009d90 	.word	0x08009d90

08006484 <__ratio>:
 8006484:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006488:	4688      	mov	r8, r1
 800648a:	4669      	mov	r1, sp
 800648c:	4681      	mov	r9, r0
 800648e:	f7ff ff5b 	bl	8006348 <__b2d>
 8006492:	460f      	mov	r7, r1
 8006494:	4604      	mov	r4, r0
 8006496:	460d      	mov	r5, r1
 8006498:	4640      	mov	r0, r8
 800649a:	a901      	add	r1, sp, #4
 800649c:	f7ff ff54 	bl	8006348 <__b2d>
 80064a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80064a4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80064a8:	468b      	mov	fp, r1
 80064aa:	eba3 0c02 	sub.w	ip, r3, r2
 80064ae:	e9dd 3200 	ldrd	r3, r2, [sp]
 80064b2:	1a9b      	subs	r3, r3, r2
 80064b4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	bfd5      	itete	le
 80064bc:	460a      	movle	r2, r1
 80064be:	462a      	movgt	r2, r5
 80064c0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80064c4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80064c8:	bfd8      	it	le
 80064ca:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80064ce:	465b      	mov	r3, fp
 80064d0:	4602      	mov	r2, r0
 80064d2:	4639      	mov	r1, r7
 80064d4:	4620      	mov	r0, r4
 80064d6:	f7fa f995 	bl	8000804 <__aeabi_ddiv>
 80064da:	b003      	add	sp, #12
 80064dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080064e0 <__copybits>:
 80064e0:	3901      	subs	r1, #1
 80064e2:	b570      	push	{r4, r5, r6, lr}
 80064e4:	1149      	asrs	r1, r1, #5
 80064e6:	6914      	ldr	r4, [r2, #16]
 80064e8:	3101      	adds	r1, #1
 80064ea:	f102 0314 	add.w	r3, r2, #20
 80064ee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80064f2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80064f6:	1f05      	subs	r5, r0, #4
 80064f8:	42a3      	cmp	r3, r4
 80064fa:	d30c      	bcc.n	8006516 <__copybits+0x36>
 80064fc:	1aa3      	subs	r3, r4, r2
 80064fe:	3b11      	subs	r3, #17
 8006500:	f023 0303 	bic.w	r3, r3, #3
 8006504:	3211      	adds	r2, #17
 8006506:	42a2      	cmp	r2, r4
 8006508:	bf88      	it	hi
 800650a:	2300      	movhi	r3, #0
 800650c:	4418      	add	r0, r3
 800650e:	2300      	movs	r3, #0
 8006510:	4288      	cmp	r0, r1
 8006512:	d305      	bcc.n	8006520 <__copybits+0x40>
 8006514:	bd70      	pop	{r4, r5, r6, pc}
 8006516:	f853 6b04 	ldr.w	r6, [r3], #4
 800651a:	f845 6f04 	str.w	r6, [r5, #4]!
 800651e:	e7eb      	b.n	80064f8 <__copybits+0x18>
 8006520:	f840 3b04 	str.w	r3, [r0], #4
 8006524:	e7f4      	b.n	8006510 <__copybits+0x30>

08006526 <__any_on>:
 8006526:	f100 0214 	add.w	r2, r0, #20
 800652a:	6900      	ldr	r0, [r0, #16]
 800652c:	114b      	asrs	r3, r1, #5
 800652e:	4298      	cmp	r0, r3
 8006530:	b510      	push	{r4, lr}
 8006532:	db11      	blt.n	8006558 <__any_on+0x32>
 8006534:	dd0a      	ble.n	800654c <__any_on+0x26>
 8006536:	f011 011f 	ands.w	r1, r1, #31
 800653a:	d007      	beq.n	800654c <__any_on+0x26>
 800653c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006540:	fa24 f001 	lsr.w	r0, r4, r1
 8006544:	fa00 f101 	lsl.w	r1, r0, r1
 8006548:	428c      	cmp	r4, r1
 800654a:	d10b      	bne.n	8006564 <__any_on+0x3e>
 800654c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006550:	4293      	cmp	r3, r2
 8006552:	d803      	bhi.n	800655c <__any_on+0x36>
 8006554:	2000      	movs	r0, #0
 8006556:	bd10      	pop	{r4, pc}
 8006558:	4603      	mov	r3, r0
 800655a:	e7f7      	b.n	800654c <__any_on+0x26>
 800655c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006560:	2900      	cmp	r1, #0
 8006562:	d0f5      	beq.n	8006550 <__any_on+0x2a>
 8006564:	2001      	movs	r0, #1
 8006566:	e7f6      	b.n	8006556 <__any_on+0x30>

08006568 <sulp>:
 8006568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800656c:	460f      	mov	r7, r1
 800656e:	4690      	mov	r8, r2
 8006570:	f7ff feca 	bl	8006308 <__ulp>
 8006574:	4604      	mov	r4, r0
 8006576:	460d      	mov	r5, r1
 8006578:	f1b8 0f00 	cmp.w	r8, #0
 800657c:	d011      	beq.n	80065a2 <sulp+0x3a>
 800657e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006582:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006586:	2b00      	cmp	r3, #0
 8006588:	dd0b      	ble.n	80065a2 <sulp+0x3a>
 800658a:	2400      	movs	r4, #0
 800658c:	051b      	lsls	r3, r3, #20
 800658e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006592:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006596:	4622      	mov	r2, r4
 8006598:	462b      	mov	r3, r5
 800659a:	f7fa f809 	bl	80005b0 <__aeabi_dmul>
 800659e:	4604      	mov	r4, r0
 80065a0:	460d      	mov	r5, r1
 80065a2:	4620      	mov	r0, r4
 80065a4:	4629      	mov	r1, r5
 80065a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065aa:	0000      	movs	r0, r0
 80065ac:	0000      	movs	r0, r0
	...

080065b0 <_strtod_l>:
 80065b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065b4:	b09f      	sub	sp, #124	; 0x7c
 80065b6:	9217      	str	r2, [sp, #92]	; 0x5c
 80065b8:	2200      	movs	r2, #0
 80065ba:	4604      	mov	r4, r0
 80065bc:	921a      	str	r2, [sp, #104]	; 0x68
 80065be:	460d      	mov	r5, r1
 80065c0:	f04f 0800 	mov.w	r8, #0
 80065c4:	f04f 0900 	mov.w	r9, #0
 80065c8:	460a      	mov	r2, r1
 80065ca:	9219      	str	r2, [sp, #100]	; 0x64
 80065cc:	7811      	ldrb	r1, [r2, #0]
 80065ce:	292b      	cmp	r1, #43	; 0x2b
 80065d0:	d04a      	beq.n	8006668 <_strtod_l+0xb8>
 80065d2:	d838      	bhi.n	8006646 <_strtod_l+0x96>
 80065d4:	290d      	cmp	r1, #13
 80065d6:	d832      	bhi.n	800663e <_strtod_l+0x8e>
 80065d8:	2908      	cmp	r1, #8
 80065da:	d832      	bhi.n	8006642 <_strtod_l+0x92>
 80065dc:	2900      	cmp	r1, #0
 80065de:	d03b      	beq.n	8006658 <_strtod_l+0xa8>
 80065e0:	2200      	movs	r2, #0
 80065e2:	920e      	str	r2, [sp, #56]	; 0x38
 80065e4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80065e6:	7832      	ldrb	r2, [r6, #0]
 80065e8:	2a30      	cmp	r2, #48	; 0x30
 80065ea:	f040 80b2 	bne.w	8006752 <_strtod_l+0x1a2>
 80065ee:	7872      	ldrb	r2, [r6, #1]
 80065f0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80065f4:	2a58      	cmp	r2, #88	; 0x58
 80065f6:	d16e      	bne.n	80066d6 <_strtod_l+0x126>
 80065f8:	9302      	str	r3, [sp, #8]
 80065fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065fc:	4620      	mov	r0, r4
 80065fe:	9301      	str	r3, [sp, #4]
 8006600:	ab1a      	add	r3, sp, #104	; 0x68
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	4a8c      	ldr	r2, [pc, #560]	; (8006838 <_strtod_l+0x288>)
 8006606:	ab1b      	add	r3, sp, #108	; 0x6c
 8006608:	a919      	add	r1, sp, #100	; 0x64
 800660a:	f001 fb0f 	bl	8007c2c <__gethex>
 800660e:	f010 070f 	ands.w	r7, r0, #15
 8006612:	4605      	mov	r5, r0
 8006614:	d005      	beq.n	8006622 <_strtod_l+0x72>
 8006616:	2f06      	cmp	r7, #6
 8006618:	d128      	bne.n	800666c <_strtod_l+0xbc>
 800661a:	2300      	movs	r3, #0
 800661c:	3601      	adds	r6, #1
 800661e:	9619      	str	r6, [sp, #100]	; 0x64
 8006620:	930e      	str	r3, [sp, #56]	; 0x38
 8006622:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006624:	2b00      	cmp	r3, #0
 8006626:	f040 85a0 	bne.w	800716a <_strtod_l+0xbba>
 800662a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800662c:	b1cb      	cbz	r3, 8006662 <_strtod_l+0xb2>
 800662e:	4642      	mov	r2, r8
 8006630:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006634:	4610      	mov	r0, r2
 8006636:	4619      	mov	r1, r3
 8006638:	b01f      	add	sp, #124	; 0x7c
 800663a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800663e:	2920      	cmp	r1, #32
 8006640:	d1ce      	bne.n	80065e0 <_strtod_l+0x30>
 8006642:	3201      	adds	r2, #1
 8006644:	e7c1      	b.n	80065ca <_strtod_l+0x1a>
 8006646:	292d      	cmp	r1, #45	; 0x2d
 8006648:	d1ca      	bne.n	80065e0 <_strtod_l+0x30>
 800664a:	2101      	movs	r1, #1
 800664c:	910e      	str	r1, [sp, #56]	; 0x38
 800664e:	1c51      	adds	r1, r2, #1
 8006650:	9119      	str	r1, [sp, #100]	; 0x64
 8006652:	7852      	ldrb	r2, [r2, #1]
 8006654:	2a00      	cmp	r2, #0
 8006656:	d1c5      	bne.n	80065e4 <_strtod_l+0x34>
 8006658:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800665a:	9519      	str	r5, [sp, #100]	; 0x64
 800665c:	2b00      	cmp	r3, #0
 800665e:	f040 8582 	bne.w	8007166 <_strtod_l+0xbb6>
 8006662:	4642      	mov	r2, r8
 8006664:	464b      	mov	r3, r9
 8006666:	e7e5      	b.n	8006634 <_strtod_l+0x84>
 8006668:	2100      	movs	r1, #0
 800666a:	e7ef      	b.n	800664c <_strtod_l+0x9c>
 800666c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800666e:	b13a      	cbz	r2, 8006680 <_strtod_l+0xd0>
 8006670:	2135      	movs	r1, #53	; 0x35
 8006672:	a81c      	add	r0, sp, #112	; 0x70
 8006674:	f7ff ff34 	bl	80064e0 <__copybits>
 8006678:	4620      	mov	r0, r4
 800667a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800667c:	f7ff fb18 	bl	8005cb0 <_Bfree>
 8006680:	3f01      	subs	r7, #1
 8006682:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006684:	2f04      	cmp	r7, #4
 8006686:	d806      	bhi.n	8006696 <_strtod_l+0xe6>
 8006688:	e8df f007 	tbb	[pc, r7]
 800668c:	201d0314 	.word	0x201d0314
 8006690:	14          	.byte	0x14
 8006691:	00          	.byte	0x00
 8006692:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8006696:	05e9      	lsls	r1, r5, #23
 8006698:	bf48      	it	mi
 800669a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800669e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80066a2:	0d1b      	lsrs	r3, r3, #20
 80066a4:	051b      	lsls	r3, r3, #20
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1bb      	bne.n	8006622 <_strtod_l+0x72>
 80066aa:	f7fe fb15 	bl	8004cd8 <__errno>
 80066ae:	2322      	movs	r3, #34	; 0x22
 80066b0:	6003      	str	r3, [r0, #0]
 80066b2:	e7b6      	b.n	8006622 <_strtod_l+0x72>
 80066b4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80066b8:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80066bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80066c0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80066c4:	e7e7      	b.n	8006696 <_strtod_l+0xe6>
 80066c6:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800683c <_strtod_l+0x28c>
 80066ca:	e7e4      	b.n	8006696 <_strtod_l+0xe6>
 80066cc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80066d0:	f04f 38ff 	mov.w	r8, #4294967295
 80066d4:	e7df      	b.n	8006696 <_strtod_l+0xe6>
 80066d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80066d8:	1c5a      	adds	r2, r3, #1
 80066da:	9219      	str	r2, [sp, #100]	; 0x64
 80066dc:	785b      	ldrb	r3, [r3, #1]
 80066de:	2b30      	cmp	r3, #48	; 0x30
 80066e0:	d0f9      	beq.n	80066d6 <_strtod_l+0x126>
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d09d      	beq.n	8006622 <_strtod_l+0x72>
 80066e6:	2301      	movs	r3, #1
 80066e8:	f04f 0a00 	mov.w	sl, #0
 80066ec:	220a      	movs	r2, #10
 80066ee:	46d3      	mov	fp, sl
 80066f0:	9305      	str	r3, [sp, #20]
 80066f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80066f4:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80066f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80066fa:	9819      	ldr	r0, [sp, #100]	; 0x64
 80066fc:	7806      	ldrb	r6, [r0, #0]
 80066fe:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006702:	b2d9      	uxtb	r1, r3
 8006704:	2909      	cmp	r1, #9
 8006706:	d926      	bls.n	8006756 <_strtod_l+0x1a6>
 8006708:	2201      	movs	r2, #1
 800670a:	494d      	ldr	r1, [pc, #308]	; (8006840 <_strtod_l+0x290>)
 800670c:	f001 f9be 	bl	8007a8c <strncmp>
 8006710:	2800      	cmp	r0, #0
 8006712:	d030      	beq.n	8006776 <_strtod_l+0x1c6>
 8006714:	2000      	movs	r0, #0
 8006716:	4632      	mov	r2, r6
 8006718:	4603      	mov	r3, r0
 800671a:	465e      	mov	r6, fp
 800671c:	9008      	str	r0, [sp, #32]
 800671e:	2a65      	cmp	r2, #101	; 0x65
 8006720:	d001      	beq.n	8006726 <_strtod_l+0x176>
 8006722:	2a45      	cmp	r2, #69	; 0x45
 8006724:	d113      	bne.n	800674e <_strtod_l+0x19e>
 8006726:	b91e      	cbnz	r6, 8006730 <_strtod_l+0x180>
 8006728:	9a05      	ldr	r2, [sp, #20]
 800672a:	4302      	orrs	r2, r0
 800672c:	d094      	beq.n	8006658 <_strtod_l+0xa8>
 800672e:	2600      	movs	r6, #0
 8006730:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006732:	1c6a      	adds	r2, r5, #1
 8006734:	9219      	str	r2, [sp, #100]	; 0x64
 8006736:	786a      	ldrb	r2, [r5, #1]
 8006738:	2a2b      	cmp	r2, #43	; 0x2b
 800673a:	d074      	beq.n	8006826 <_strtod_l+0x276>
 800673c:	2a2d      	cmp	r2, #45	; 0x2d
 800673e:	d078      	beq.n	8006832 <_strtod_l+0x282>
 8006740:	f04f 0c00 	mov.w	ip, #0
 8006744:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006748:	2909      	cmp	r1, #9
 800674a:	d97f      	bls.n	800684c <_strtod_l+0x29c>
 800674c:	9519      	str	r5, [sp, #100]	; 0x64
 800674e:	2700      	movs	r7, #0
 8006750:	e09e      	b.n	8006890 <_strtod_l+0x2e0>
 8006752:	2300      	movs	r3, #0
 8006754:	e7c8      	b.n	80066e8 <_strtod_l+0x138>
 8006756:	f1bb 0f08 	cmp.w	fp, #8
 800675a:	bfd8      	it	le
 800675c:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800675e:	f100 0001 	add.w	r0, r0, #1
 8006762:	bfd6      	itet	le
 8006764:	fb02 3301 	mlale	r3, r2, r1, r3
 8006768:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800676c:	930a      	strle	r3, [sp, #40]	; 0x28
 800676e:	f10b 0b01 	add.w	fp, fp, #1
 8006772:	9019      	str	r0, [sp, #100]	; 0x64
 8006774:	e7c1      	b.n	80066fa <_strtod_l+0x14a>
 8006776:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006778:	1c5a      	adds	r2, r3, #1
 800677a:	9219      	str	r2, [sp, #100]	; 0x64
 800677c:	785a      	ldrb	r2, [r3, #1]
 800677e:	f1bb 0f00 	cmp.w	fp, #0
 8006782:	d037      	beq.n	80067f4 <_strtod_l+0x244>
 8006784:	465e      	mov	r6, fp
 8006786:	9008      	str	r0, [sp, #32]
 8006788:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800678c:	2b09      	cmp	r3, #9
 800678e:	d912      	bls.n	80067b6 <_strtod_l+0x206>
 8006790:	2301      	movs	r3, #1
 8006792:	e7c4      	b.n	800671e <_strtod_l+0x16e>
 8006794:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006796:	3001      	adds	r0, #1
 8006798:	1c5a      	adds	r2, r3, #1
 800679a:	9219      	str	r2, [sp, #100]	; 0x64
 800679c:	785a      	ldrb	r2, [r3, #1]
 800679e:	2a30      	cmp	r2, #48	; 0x30
 80067a0:	d0f8      	beq.n	8006794 <_strtod_l+0x1e4>
 80067a2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80067a6:	2b08      	cmp	r3, #8
 80067a8:	f200 84e4 	bhi.w	8007174 <_strtod_l+0xbc4>
 80067ac:	9008      	str	r0, [sp, #32]
 80067ae:	2000      	movs	r0, #0
 80067b0:	4606      	mov	r6, r0
 80067b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80067b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80067b6:	3a30      	subs	r2, #48	; 0x30
 80067b8:	f100 0301 	add.w	r3, r0, #1
 80067bc:	d014      	beq.n	80067e8 <_strtod_l+0x238>
 80067be:	9908      	ldr	r1, [sp, #32]
 80067c0:	eb00 0c06 	add.w	ip, r0, r6
 80067c4:	4419      	add	r1, r3
 80067c6:	9108      	str	r1, [sp, #32]
 80067c8:	4633      	mov	r3, r6
 80067ca:	210a      	movs	r1, #10
 80067cc:	4563      	cmp	r3, ip
 80067ce:	d113      	bne.n	80067f8 <_strtod_l+0x248>
 80067d0:	1833      	adds	r3, r6, r0
 80067d2:	2b08      	cmp	r3, #8
 80067d4:	f106 0601 	add.w	r6, r6, #1
 80067d8:	4406      	add	r6, r0
 80067da:	dc1a      	bgt.n	8006812 <_strtod_l+0x262>
 80067dc:	230a      	movs	r3, #10
 80067de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80067e0:	fb03 2301 	mla	r3, r3, r1, r2
 80067e4:	930a      	str	r3, [sp, #40]	; 0x28
 80067e6:	2300      	movs	r3, #0
 80067e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80067ea:	4618      	mov	r0, r3
 80067ec:	1c51      	adds	r1, r2, #1
 80067ee:	9119      	str	r1, [sp, #100]	; 0x64
 80067f0:	7852      	ldrb	r2, [r2, #1]
 80067f2:	e7c9      	b.n	8006788 <_strtod_l+0x1d8>
 80067f4:	4658      	mov	r0, fp
 80067f6:	e7d2      	b.n	800679e <_strtod_l+0x1ee>
 80067f8:	2b08      	cmp	r3, #8
 80067fa:	f103 0301 	add.w	r3, r3, #1
 80067fe:	dc03      	bgt.n	8006808 <_strtod_l+0x258>
 8006800:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006802:	434f      	muls	r7, r1
 8006804:	970a      	str	r7, [sp, #40]	; 0x28
 8006806:	e7e1      	b.n	80067cc <_strtod_l+0x21c>
 8006808:	2b10      	cmp	r3, #16
 800680a:	bfd8      	it	le
 800680c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006810:	e7dc      	b.n	80067cc <_strtod_l+0x21c>
 8006812:	2e10      	cmp	r6, #16
 8006814:	bfdc      	itt	le
 8006816:	230a      	movle	r3, #10
 8006818:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800681c:	e7e3      	b.n	80067e6 <_strtod_l+0x236>
 800681e:	2300      	movs	r3, #0
 8006820:	9308      	str	r3, [sp, #32]
 8006822:	2301      	movs	r3, #1
 8006824:	e780      	b.n	8006728 <_strtod_l+0x178>
 8006826:	f04f 0c00 	mov.w	ip, #0
 800682a:	1caa      	adds	r2, r5, #2
 800682c:	9219      	str	r2, [sp, #100]	; 0x64
 800682e:	78aa      	ldrb	r2, [r5, #2]
 8006830:	e788      	b.n	8006744 <_strtod_l+0x194>
 8006832:	f04f 0c01 	mov.w	ip, #1
 8006836:	e7f8      	b.n	800682a <_strtod_l+0x27a>
 8006838:	08009ef0 	.word	0x08009ef0
 800683c:	7ff00000 	.word	0x7ff00000
 8006840:	08009eec 	.word	0x08009eec
 8006844:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006846:	1c51      	adds	r1, r2, #1
 8006848:	9119      	str	r1, [sp, #100]	; 0x64
 800684a:	7852      	ldrb	r2, [r2, #1]
 800684c:	2a30      	cmp	r2, #48	; 0x30
 800684e:	d0f9      	beq.n	8006844 <_strtod_l+0x294>
 8006850:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006854:	2908      	cmp	r1, #8
 8006856:	f63f af7a 	bhi.w	800674e <_strtod_l+0x19e>
 800685a:	3a30      	subs	r2, #48	; 0x30
 800685c:	9209      	str	r2, [sp, #36]	; 0x24
 800685e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006860:	920c      	str	r2, [sp, #48]	; 0x30
 8006862:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006864:	1c57      	adds	r7, r2, #1
 8006866:	9719      	str	r7, [sp, #100]	; 0x64
 8006868:	7852      	ldrb	r2, [r2, #1]
 800686a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800686e:	f1be 0f09 	cmp.w	lr, #9
 8006872:	d938      	bls.n	80068e6 <_strtod_l+0x336>
 8006874:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006876:	1a7f      	subs	r7, r7, r1
 8006878:	2f08      	cmp	r7, #8
 800687a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800687e:	dc03      	bgt.n	8006888 <_strtod_l+0x2d8>
 8006880:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006882:	428f      	cmp	r7, r1
 8006884:	bfa8      	it	ge
 8006886:	460f      	movge	r7, r1
 8006888:	f1bc 0f00 	cmp.w	ip, #0
 800688c:	d000      	beq.n	8006890 <_strtod_l+0x2e0>
 800688e:	427f      	negs	r7, r7
 8006890:	2e00      	cmp	r6, #0
 8006892:	d14f      	bne.n	8006934 <_strtod_l+0x384>
 8006894:	9905      	ldr	r1, [sp, #20]
 8006896:	4301      	orrs	r1, r0
 8006898:	f47f aec3 	bne.w	8006622 <_strtod_l+0x72>
 800689c:	2b00      	cmp	r3, #0
 800689e:	f47f aedb 	bne.w	8006658 <_strtod_l+0xa8>
 80068a2:	2a69      	cmp	r2, #105	; 0x69
 80068a4:	d029      	beq.n	80068fa <_strtod_l+0x34a>
 80068a6:	dc26      	bgt.n	80068f6 <_strtod_l+0x346>
 80068a8:	2a49      	cmp	r2, #73	; 0x49
 80068aa:	d026      	beq.n	80068fa <_strtod_l+0x34a>
 80068ac:	2a4e      	cmp	r2, #78	; 0x4e
 80068ae:	f47f aed3 	bne.w	8006658 <_strtod_l+0xa8>
 80068b2:	499a      	ldr	r1, [pc, #616]	; (8006b1c <_strtod_l+0x56c>)
 80068b4:	a819      	add	r0, sp, #100	; 0x64
 80068b6:	f001 fbfb 	bl	80080b0 <__match>
 80068ba:	2800      	cmp	r0, #0
 80068bc:	f43f aecc 	beq.w	8006658 <_strtod_l+0xa8>
 80068c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	2b28      	cmp	r3, #40	; 0x28
 80068c6:	d12f      	bne.n	8006928 <_strtod_l+0x378>
 80068c8:	4995      	ldr	r1, [pc, #596]	; (8006b20 <_strtod_l+0x570>)
 80068ca:	aa1c      	add	r2, sp, #112	; 0x70
 80068cc:	a819      	add	r0, sp, #100	; 0x64
 80068ce:	f001 fc03 	bl	80080d8 <__hexnan>
 80068d2:	2805      	cmp	r0, #5
 80068d4:	d128      	bne.n	8006928 <_strtod_l+0x378>
 80068d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80068d8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80068dc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80068e0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80068e4:	e69d      	b.n	8006622 <_strtod_l+0x72>
 80068e6:	210a      	movs	r1, #10
 80068e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80068ea:	fb01 2107 	mla	r1, r1, r7, r2
 80068ee:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80068f2:	9209      	str	r2, [sp, #36]	; 0x24
 80068f4:	e7b5      	b.n	8006862 <_strtod_l+0x2b2>
 80068f6:	2a6e      	cmp	r2, #110	; 0x6e
 80068f8:	e7d9      	b.n	80068ae <_strtod_l+0x2fe>
 80068fa:	498a      	ldr	r1, [pc, #552]	; (8006b24 <_strtod_l+0x574>)
 80068fc:	a819      	add	r0, sp, #100	; 0x64
 80068fe:	f001 fbd7 	bl	80080b0 <__match>
 8006902:	2800      	cmp	r0, #0
 8006904:	f43f aea8 	beq.w	8006658 <_strtod_l+0xa8>
 8006908:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800690a:	4987      	ldr	r1, [pc, #540]	; (8006b28 <_strtod_l+0x578>)
 800690c:	3b01      	subs	r3, #1
 800690e:	a819      	add	r0, sp, #100	; 0x64
 8006910:	9319      	str	r3, [sp, #100]	; 0x64
 8006912:	f001 fbcd 	bl	80080b0 <__match>
 8006916:	b910      	cbnz	r0, 800691e <_strtod_l+0x36e>
 8006918:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800691a:	3301      	adds	r3, #1
 800691c:	9319      	str	r3, [sp, #100]	; 0x64
 800691e:	f04f 0800 	mov.w	r8, #0
 8006922:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8006b2c <_strtod_l+0x57c>
 8006926:	e67c      	b.n	8006622 <_strtod_l+0x72>
 8006928:	4881      	ldr	r0, [pc, #516]	; (8006b30 <_strtod_l+0x580>)
 800692a:	f001 f8df 	bl	8007aec <nan>
 800692e:	4680      	mov	r8, r0
 8006930:	4689      	mov	r9, r1
 8006932:	e676      	b.n	8006622 <_strtod_l+0x72>
 8006934:	9b08      	ldr	r3, [sp, #32]
 8006936:	f1bb 0f00 	cmp.w	fp, #0
 800693a:	bf08      	it	eq
 800693c:	46b3      	moveq	fp, r6
 800693e:	1afb      	subs	r3, r7, r3
 8006940:	2e10      	cmp	r6, #16
 8006942:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006944:	4635      	mov	r5, r6
 8006946:	9309      	str	r3, [sp, #36]	; 0x24
 8006948:	bfa8      	it	ge
 800694a:	2510      	movge	r5, #16
 800694c:	f7f9 fdb6 	bl	80004bc <__aeabi_ui2d>
 8006950:	2e09      	cmp	r6, #9
 8006952:	4680      	mov	r8, r0
 8006954:	4689      	mov	r9, r1
 8006956:	dd13      	ble.n	8006980 <_strtod_l+0x3d0>
 8006958:	4b76      	ldr	r3, [pc, #472]	; (8006b34 <_strtod_l+0x584>)
 800695a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800695e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006962:	f7f9 fe25 	bl	80005b0 <__aeabi_dmul>
 8006966:	4680      	mov	r8, r0
 8006968:	4650      	mov	r0, sl
 800696a:	4689      	mov	r9, r1
 800696c:	f7f9 fda6 	bl	80004bc <__aeabi_ui2d>
 8006970:	4602      	mov	r2, r0
 8006972:	460b      	mov	r3, r1
 8006974:	4640      	mov	r0, r8
 8006976:	4649      	mov	r1, r9
 8006978:	f7f9 fc64 	bl	8000244 <__adddf3>
 800697c:	4680      	mov	r8, r0
 800697e:	4689      	mov	r9, r1
 8006980:	2e0f      	cmp	r6, #15
 8006982:	dc36      	bgt.n	80069f2 <_strtod_l+0x442>
 8006984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006986:	2b00      	cmp	r3, #0
 8006988:	f43f ae4b 	beq.w	8006622 <_strtod_l+0x72>
 800698c:	dd22      	ble.n	80069d4 <_strtod_l+0x424>
 800698e:	2b16      	cmp	r3, #22
 8006990:	dc09      	bgt.n	80069a6 <_strtod_l+0x3f6>
 8006992:	4968      	ldr	r1, [pc, #416]	; (8006b34 <_strtod_l+0x584>)
 8006994:	4642      	mov	r2, r8
 8006996:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800699a:	464b      	mov	r3, r9
 800699c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069a0:	f7f9 fe06 	bl	80005b0 <__aeabi_dmul>
 80069a4:	e7c3      	b.n	800692e <_strtod_l+0x37e>
 80069a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069a8:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80069ac:	4293      	cmp	r3, r2
 80069ae:	db20      	blt.n	80069f2 <_strtod_l+0x442>
 80069b0:	4c60      	ldr	r4, [pc, #384]	; (8006b34 <_strtod_l+0x584>)
 80069b2:	f1c6 060f 	rsb	r6, r6, #15
 80069b6:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80069ba:	4642      	mov	r2, r8
 80069bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069c0:	464b      	mov	r3, r9
 80069c2:	f7f9 fdf5 	bl	80005b0 <__aeabi_dmul>
 80069c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069c8:	1b9e      	subs	r6, r3, r6
 80069ca:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80069ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80069d2:	e7e5      	b.n	80069a0 <_strtod_l+0x3f0>
 80069d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069d6:	3316      	adds	r3, #22
 80069d8:	db0b      	blt.n	80069f2 <_strtod_l+0x442>
 80069da:	9b08      	ldr	r3, [sp, #32]
 80069dc:	4640      	mov	r0, r8
 80069de:	1bdf      	subs	r7, r3, r7
 80069e0:	4b54      	ldr	r3, [pc, #336]	; (8006b34 <_strtod_l+0x584>)
 80069e2:	4649      	mov	r1, r9
 80069e4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80069e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069ec:	f7f9 ff0a 	bl	8000804 <__aeabi_ddiv>
 80069f0:	e79d      	b.n	800692e <_strtod_l+0x37e>
 80069f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069f4:	1b75      	subs	r5, r6, r5
 80069f6:	441d      	add	r5, r3
 80069f8:	2d00      	cmp	r5, #0
 80069fa:	dd70      	ble.n	8006ade <_strtod_l+0x52e>
 80069fc:	f015 030f 	ands.w	r3, r5, #15
 8006a00:	d00a      	beq.n	8006a18 <_strtod_l+0x468>
 8006a02:	494c      	ldr	r1, [pc, #304]	; (8006b34 <_strtod_l+0x584>)
 8006a04:	4642      	mov	r2, r8
 8006a06:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006a0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a0e:	464b      	mov	r3, r9
 8006a10:	f7f9 fdce 	bl	80005b0 <__aeabi_dmul>
 8006a14:	4680      	mov	r8, r0
 8006a16:	4689      	mov	r9, r1
 8006a18:	f035 050f 	bics.w	r5, r5, #15
 8006a1c:	d04d      	beq.n	8006aba <_strtod_l+0x50a>
 8006a1e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8006a22:	dd22      	ble.n	8006a6a <_strtod_l+0x4ba>
 8006a24:	2600      	movs	r6, #0
 8006a26:	46b3      	mov	fp, r6
 8006a28:	960b      	str	r6, [sp, #44]	; 0x2c
 8006a2a:	9608      	str	r6, [sp, #32]
 8006a2c:	2322      	movs	r3, #34	; 0x22
 8006a2e:	f04f 0800 	mov.w	r8, #0
 8006a32:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8006b2c <_strtod_l+0x57c>
 8006a36:	6023      	str	r3, [r4, #0]
 8006a38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f43f adf1 	beq.w	8006622 <_strtod_l+0x72>
 8006a40:	4620      	mov	r0, r4
 8006a42:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006a44:	f7ff f934 	bl	8005cb0 <_Bfree>
 8006a48:	4620      	mov	r0, r4
 8006a4a:	9908      	ldr	r1, [sp, #32]
 8006a4c:	f7ff f930 	bl	8005cb0 <_Bfree>
 8006a50:	4659      	mov	r1, fp
 8006a52:	4620      	mov	r0, r4
 8006a54:	f7ff f92c 	bl	8005cb0 <_Bfree>
 8006a58:	4620      	mov	r0, r4
 8006a5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a5c:	f7ff f928 	bl	8005cb0 <_Bfree>
 8006a60:	4631      	mov	r1, r6
 8006a62:	4620      	mov	r0, r4
 8006a64:	f7ff f924 	bl	8005cb0 <_Bfree>
 8006a68:	e5db      	b.n	8006622 <_strtod_l+0x72>
 8006a6a:	4b33      	ldr	r3, [pc, #204]	; (8006b38 <_strtod_l+0x588>)
 8006a6c:	4640      	mov	r0, r8
 8006a6e:	9305      	str	r3, [sp, #20]
 8006a70:	2300      	movs	r3, #0
 8006a72:	4649      	mov	r1, r9
 8006a74:	469a      	mov	sl, r3
 8006a76:	112d      	asrs	r5, r5, #4
 8006a78:	2d01      	cmp	r5, #1
 8006a7a:	dc21      	bgt.n	8006ac0 <_strtod_l+0x510>
 8006a7c:	b10b      	cbz	r3, 8006a82 <_strtod_l+0x4d2>
 8006a7e:	4680      	mov	r8, r0
 8006a80:	4689      	mov	r9, r1
 8006a82:	492d      	ldr	r1, [pc, #180]	; (8006b38 <_strtod_l+0x588>)
 8006a84:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006a88:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006a8c:	4642      	mov	r2, r8
 8006a8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a92:	464b      	mov	r3, r9
 8006a94:	f7f9 fd8c 	bl	80005b0 <__aeabi_dmul>
 8006a98:	4b24      	ldr	r3, [pc, #144]	; (8006b2c <_strtod_l+0x57c>)
 8006a9a:	460a      	mov	r2, r1
 8006a9c:	400b      	ands	r3, r1
 8006a9e:	4927      	ldr	r1, [pc, #156]	; (8006b3c <_strtod_l+0x58c>)
 8006aa0:	4680      	mov	r8, r0
 8006aa2:	428b      	cmp	r3, r1
 8006aa4:	d8be      	bhi.n	8006a24 <_strtod_l+0x474>
 8006aa6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006aaa:	428b      	cmp	r3, r1
 8006aac:	bf86      	itte	hi
 8006aae:	f04f 38ff 	movhi.w	r8, #4294967295
 8006ab2:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8006b40 <_strtod_l+0x590>
 8006ab6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006aba:	2300      	movs	r3, #0
 8006abc:	9305      	str	r3, [sp, #20]
 8006abe:	e07b      	b.n	8006bb8 <_strtod_l+0x608>
 8006ac0:	07ea      	lsls	r2, r5, #31
 8006ac2:	d505      	bpl.n	8006ad0 <_strtod_l+0x520>
 8006ac4:	9b05      	ldr	r3, [sp, #20]
 8006ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aca:	f7f9 fd71 	bl	80005b0 <__aeabi_dmul>
 8006ace:	2301      	movs	r3, #1
 8006ad0:	9a05      	ldr	r2, [sp, #20]
 8006ad2:	f10a 0a01 	add.w	sl, sl, #1
 8006ad6:	3208      	adds	r2, #8
 8006ad8:	106d      	asrs	r5, r5, #1
 8006ada:	9205      	str	r2, [sp, #20]
 8006adc:	e7cc      	b.n	8006a78 <_strtod_l+0x4c8>
 8006ade:	d0ec      	beq.n	8006aba <_strtod_l+0x50a>
 8006ae0:	426d      	negs	r5, r5
 8006ae2:	f015 020f 	ands.w	r2, r5, #15
 8006ae6:	d00a      	beq.n	8006afe <_strtod_l+0x54e>
 8006ae8:	4b12      	ldr	r3, [pc, #72]	; (8006b34 <_strtod_l+0x584>)
 8006aea:	4640      	mov	r0, r8
 8006aec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006af0:	4649      	mov	r1, r9
 8006af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af6:	f7f9 fe85 	bl	8000804 <__aeabi_ddiv>
 8006afa:	4680      	mov	r8, r0
 8006afc:	4689      	mov	r9, r1
 8006afe:	112d      	asrs	r5, r5, #4
 8006b00:	d0db      	beq.n	8006aba <_strtod_l+0x50a>
 8006b02:	2d1f      	cmp	r5, #31
 8006b04:	dd1e      	ble.n	8006b44 <_strtod_l+0x594>
 8006b06:	2600      	movs	r6, #0
 8006b08:	46b3      	mov	fp, r6
 8006b0a:	960b      	str	r6, [sp, #44]	; 0x2c
 8006b0c:	9608      	str	r6, [sp, #32]
 8006b0e:	2322      	movs	r3, #34	; 0x22
 8006b10:	f04f 0800 	mov.w	r8, #0
 8006b14:	f04f 0900 	mov.w	r9, #0
 8006b18:	6023      	str	r3, [r4, #0]
 8006b1a:	e78d      	b.n	8006a38 <_strtod_l+0x488>
 8006b1c:	08009cd7 	.word	0x08009cd7
 8006b20:	08009f04 	.word	0x08009f04
 8006b24:	08009ccf 	.word	0x08009ccf
 8006b28:	08009d06 	.word	0x08009d06
 8006b2c:	7ff00000 	.word	0x7ff00000
 8006b30:	0800a095 	.word	0x0800a095
 8006b34:	08009e18 	.word	0x08009e18
 8006b38:	08009df0 	.word	0x08009df0
 8006b3c:	7ca00000 	.word	0x7ca00000
 8006b40:	7fefffff 	.word	0x7fefffff
 8006b44:	f015 0310 	ands.w	r3, r5, #16
 8006b48:	bf18      	it	ne
 8006b4a:	236a      	movne	r3, #106	; 0x6a
 8006b4c:	4640      	mov	r0, r8
 8006b4e:	9305      	str	r3, [sp, #20]
 8006b50:	4649      	mov	r1, r9
 8006b52:	2300      	movs	r3, #0
 8006b54:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8006e20 <_strtod_l+0x870>
 8006b58:	07ea      	lsls	r2, r5, #31
 8006b5a:	d504      	bpl.n	8006b66 <_strtod_l+0x5b6>
 8006b5c:	e9da 2300 	ldrd	r2, r3, [sl]
 8006b60:	f7f9 fd26 	bl	80005b0 <__aeabi_dmul>
 8006b64:	2301      	movs	r3, #1
 8006b66:	106d      	asrs	r5, r5, #1
 8006b68:	f10a 0a08 	add.w	sl, sl, #8
 8006b6c:	d1f4      	bne.n	8006b58 <_strtod_l+0x5a8>
 8006b6e:	b10b      	cbz	r3, 8006b74 <_strtod_l+0x5c4>
 8006b70:	4680      	mov	r8, r0
 8006b72:	4689      	mov	r9, r1
 8006b74:	9b05      	ldr	r3, [sp, #20]
 8006b76:	b1bb      	cbz	r3, 8006ba8 <_strtod_l+0x5f8>
 8006b78:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006b7c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	4649      	mov	r1, r9
 8006b84:	dd10      	ble.n	8006ba8 <_strtod_l+0x5f8>
 8006b86:	2b1f      	cmp	r3, #31
 8006b88:	f340 8128 	ble.w	8006ddc <_strtod_l+0x82c>
 8006b8c:	2b34      	cmp	r3, #52	; 0x34
 8006b8e:	bfd8      	it	le
 8006b90:	f04f 33ff 	movle.w	r3, #4294967295
 8006b94:	f04f 0800 	mov.w	r8, #0
 8006b98:	bfcf      	iteee	gt
 8006b9a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006b9e:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006ba2:	4093      	lslle	r3, r2
 8006ba4:	ea03 0901 	andle.w	r9, r3, r1
 8006ba8:	2200      	movs	r2, #0
 8006baa:	2300      	movs	r3, #0
 8006bac:	4640      	mov	r0, r8
 8006bae:	4649      	mov	r1, r9
 8006bb0:	f7f9 ff66 	bl	8000a80 <__aeabi_dcmpeq>
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	d1a6      	bne.n	8006b06 <_strtod_l+0x556>
 8006bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bba:	465a      	mov	r2, fp
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	4633      	mov	r3, r6
 8006bc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006bc4:	f7ff f8dc 	bl	8005d80 <__s2b>
 8006bc8:	900b      	str	r0, [sp, #44]	; 0x2c
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	f43f af2a 	beq.w	8006a24 <_strtod_l+0x474>
 8006bd0:	2600      	movs	r6, #0
 8006bd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bd4:	9b08      	ldr	r3, [sp, #32]
 8006bd6:	2a00      	cmp	r2, #0
 8006bd8:	eba3 0307 	sub.w	r3, r3, r7
 8006bdc:	bfa8      	it	ge
 8006bde:	2300      	movge	r3, #0
 8006be0:	46b3      	mov	fp, r6
 8006be2:	9312      	str	r3, [sp, #72]	; 0x48
 8006be4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006be8:	9316      	str	r3, [sp, #88]	; 0x58
 8006bea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bec:	4620      	mov	r0, r4
 8006bee:	6859      	ldr	r1, [r3, #4]
 8006bf0:	f7ff f81e 	bl	8005c30 <_Balloc>
 8006bf4:	9008      	str	r0, [sp, #32]
 8006bf6:	2800      	cmp	r0, #0
 8006bf8:	f43f af18 	beq.w	8006a2c <_strtod_l+0x47c>
 8006bfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bfe:	300c      	adds	r0, #12
 8006c00:	691a      	ldr	r2, [r3, #16]
 8006c02:	f103 010c 	add.w	r1, r3, #12
 8006c06:	3202      	adds	r2, #2
 8006c08:	0092      	lsls	r2, r2, #2
 8006c0a:	f000 ff61 	bl	8007ad0 <memcpy>
 8006c0e:	ab1c      	add	r3, sp, #112	; 0x70
 8006c10:	9301      	str	r3, [sp, #4]
 8006c12:	ab1b      	add	r3, sp, #108	; 0x6c
 8006c14:	9300      	str	r3, [sp, #0]
 8006c16:	4642      	mov	r2, r8
 8006c18:	464b      	mov	r3, r9
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8006c20:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8006c24:	f7ff fbd8 	bl	80063d8 <__d2b>
 8006c28:	901a      	str	r0, [sp, #104]	; 0x68
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	f43f aefe 	beq.w	8006a2c <_strtod_l+0x47c>
 8006c30:	2101      	movs	r1, #1
 8006c32:	4620      	mov	r0, r4
 8006c34:	f7ff f93c 	bl	8005eb0 <__i2b>
 8006c38:	4683      	mov	fp, r0
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	f43f aef6 	beq.w	8006a2c <_strtod_l+0x47c>
 8006c40:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8006c42:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006c44:	2f00      	cmp	r7, #0
 8006c46:	bfab      	itete	ge
 8006c48:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8006c4a:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006c4c:	eb07 0a03 	addge.w	sl, r7, r3
 8006c50:	1bdd      	sublt	r5, r3, r7
 8006c52:	9b05      	ldr	r3, [sp, #20]
 8006c54:	bfa8      	it	ge
 8006c56:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8006c58:	eba7 0703 	sub.w	r7, r7, r3
 8006c5c:	4417      	add	r7, r2
 8006c5e:	4b71      	ldr	r3, [pc, #452]	; (8006e24 <_strtod_l+0x874>)
 8006c60:	f107 37ff 	add.w	r7, r7, #4294967295
 8006c64:	bfb8      	it	lt
 8006c66:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8006c6a:	429f      	cmp	r7, r3
 8006c6c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006c70:	f280 80c7 	bge.w	8006e02 <_strtod_l+0x852>
 8006c74:	1bdb      	subs	r3, r3, r7
 8006c76:	2b1f      	cmp	r3, #31
 8006c78:	f04f 0101 	mov.w	r1, #1
 8006c7c:	eba2 0203 	sub.w	r2, r2, r3
 8006c80:	f300 80b3 	bgt.w	8006dea <_strtod_l+0x83a>
 8006c84:	fa01 f303 	lsl.w	r3, r1, r3
 8006c88:	9313      	str	r3, [sp, #76]	; 0x4c
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	9310      	str	r3, [sp, #64]	; 0x40
 8006c8e:	eb0a 0702 	add.w	r7, sl, r2
 8006c92:	9b05      	ldr	r3, [sp, #20]
 8006c94:	45ba      	cmp	sl, r7
 8006c96:	4415      	add	r5, r2
 8006c98:	441d      	add	r5, r3
 8006c9a:	4653      	mov	r3, sl
 8006c9c:	bfa8      	it	ge
 8006c9e:	463b      	movge	r3, r7
 8006ca0:	42ab      	cmp	r3, r5
 8006ca2:	bfa8      	it	ge
 8006ca4:	462b      	movge	r3, r5
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	bfc2      	ittt	gt
 8006caa:	1aff      	subgt	r7, r7, r3
 8006cac:	1aed      	subgt	r5, r5, r3
 8006cae:	ebaa 0a03 	subgt.w	sl, sl, r3
 8006cb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	dd17      	ble.n	8006ce8 <_strtod_l+0x738>
 8006cb8:	4659      	mov	r1, fp
 8006cba:	461a      	mov	r2, r3
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	f7ff f9b5 	bl	800602c <__pow5mult>
 8006cc2:	4683      	mov	fp, r0
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	f43f aeb1 	beq.w	8006a2c <_strtod_l+0x47c>
 8006cca:	4601      	mov	r1, r0
 8006ccc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006cce:	4620      	mov	r0, r4
 8006cd0:	f7ff f904 	bl	8005edc <__multiply>
 8006cd4:	900a      	str	r0, [sp, #40]	; 0x28
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	f43f aea8 	beq.w	8006a2c <_strtod_l+0x47c>
 8006cdc:	4620      	mov	r0, r4
 8006cde:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006ce0:	f7fe ffe6 	bl	8005cb0 <_Bfree>
 8006ce4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ce6:	931a      	str	r3, [sp, #104]	; 0x68
 8006ce8:	2f00      	cmp	r7, #0
 8006cea:	f300 808f 	bgt.w	8006e0c <_strtod_l+0x85c>
 8006cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	dd08      	ble.n	8006d06 <_strtod_l+0x756>
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006cf8:	9908      	ldr	r1, [sp, #32]
 8006cfa:	f7ff f997 	bl	800602c <__pow5mult>
 8006cfe:	9008      	str	r0, [sp, #32]
 8006d00:	2800      	cmp	r0, #0
 8006d02:	f43f ae93 	beq.w	8006a2c <_strtod_l+0x47c>
 8006d06:	2d00      	cmp	r5, #0
 8006d08:	dd08      	ble.n	8006d1c <_strtod_l+0x76c>
 8006d0a:	462a      	mov	r2, r5
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	9908      	ldr	r1, [sp, #32]
 8006d10:	f7ff f9e6 	bl	80060e0 <__lshift>
 8006d14:	9008      	str	r0, [sp, #32]
 8006d16:	2800      	cmp	r0, #0
 8006d18:	f43f ae88 	beq.w	8006a2c <_strtod_l+0x47c>
 8006d1c:	f1ba 0f00 	cmp.w	sl, #0
 8006d20:	dd08      	ble.n	8006d34 <_strtod_l+0x784>
 8006d22:	4659      	mov	r1, fp
 8006d24:	4652      	mov	r2, sl
 8006d26:	4620      	mov	r0, r4
 8006d28:	f7ff f9da 	bl	80060e0 <__lshift>
 8006d2c:	4683      	mov	fp, r0
 8006d2e:	2800      	cmp	r0, #0
 8006d30:	f43f ae7c 	beq.w	8006a2c <_strtod_l+0x47c>
 8006d34:	4620      	mov	r0, r4
 8006d36:	9a08      	ldr	r2, [sp, #32]
 8006d38:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006d3a:	f7ff fa59 	bl	80061f0 <__mdiff>
 8006d3e:	4606      	mov	r6, r0
 8006d40:	2800      	cmp	r0, #0
 8006d42:	f43f ae73 	beq.w	8006a2c <_strtod_l+0x47c>
 8006d46:	2500      	movs	r5, #0
 8006d48:	68c3      	ldr	r3, [r0, #12]
 8006d4a:	4659      	mov	r1, fp
 8006d4c:	60c5      	str	r5, [r0, #12]
 8006d4e:	930a      	str	r3, [sp, #40]	; 0x28
 8006d50:	f7ff fa32 	bl	80061b8 <__mcmp>
 8006d54:	42a8      	cmp	r0, r5
 8006d56:	da6b      	bge.n	8006e30 <_strtod_l+0x880>
 8006d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d5a:	ea53 0308 	orrs.w	r3, r3, r8
 8006d5e:	f040 808f 	bne.w	8006e80 <_strtod_l+0x8d0>
 8006d62:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f040 808a 	bne.w	8006e80 <_strtod_l+0x8d0>
 8006d6c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d70:	0d1b      	lsrs	r3, r3, #20
 8006d72:	051b      	lsls	r3, r3, #20
 8006d74:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006d78:	f240 8082 	bls.w	8006e80 <_strtod_l+0x8d0>
 8006d7c:	6973      	ldr	r3, [r6, #20]
 8006d7e:	b913      	cbnz	r3, 8006d86 <_strtod_l+0x7d6>
 8006d80:	6933      	ldr	r3, [r6, #16]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	dd7c      	ble.n	8006e80 <_strtod_l+0x8d0>
 8006d86:	4631      	mov	r1, r6
 8006d88:	2201      	movs	r2, #1
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	f7ff f9a8 	bl	80060e0 <__lshift>
 8006d90:	4659      	mov	r1, fp
 8006d92:	4606      	mov	r6, r0
 8006d94:	f7ff fa10 	bl	80061b8 <__mcmp>
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	dd71      	ble.n	8006e80 <_strtod_l+0x8d0>
 8006d9c:	9905      	ldr	r1, [sp, #20]
 8006d9e:	464b      	mov	r3, r9
 8006da0:	4a21      	ldr	r2, [pc, #132]	; (8006e28 <_strtod_l+0x878>)
 8006da2:	2900      	cmp	r1, #0
 8006da4:	f000 808d 	beq.w	8006ec2 <_strtod_l+0x912>
 8006da8:	ea02 0109 	and.w	r1, r2, r9
 8006dac:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006db0:	f300 8087 	bgt.w	8006ec2 <_strtod_l+0x912>
 8006db4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006db8:	f77f aea9 	ble.w	8006b0e <_strtod_l+0x55e>
 8006dbc:	4640      	mov	r0, r8
 8006dbe:	4649      	mov	r1, r9
 8006dc0:	4b1a      	ldr	r3, [pc, #104]	; (8006e2c <_strtod_l+0x87c>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f7f9 fbf4 	bl	80005b0 <__aeabi_dmul>
 8006dc8:	4b17      	ldr	r3, [pc, #92]	; (8006e28 <_strtod_l+0x878>)
 8006dca:	4680      	mov	r8, r0
 8006dcc:	400b      	ands	r3, r1
 8006dce:	4689      	mov	r9, r1
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f47f ae35 	bne.w	8006a40 <_strtod_l+0x490>
 8006dd6:	2322      	movs	r3, #34	; 0x22
 8006dd8:	6023      	str	r3, [r4, #0]
 8006dda:	e631      	b.n	8006a40 <_strtod_l+0x490>
 8006ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8006de0:	fa02 f303 	lsl.w	r3, r2, r3
 8006de4:	ea03 0808 	and.w	r8, r3, r8
 8006de8:	e6de      	b.n	8006ba8 <_strtod_l+0x5f8>
 8006dea:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8006dee:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8006df2:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8006df6:	37e2      	adds	r7, #226	; 0xe2
 8006df8:	fa01 f307 	lsl.w	r3, r1, r7
 8006dfc:	9310      	str	r3, [sp, #64]	; 0x40
 8006dfe:	9113      	str	r1, [sp, #76]	; 0x4c
 8006e00:	e745      	b.n	8006c8e <_strtod_l+0x6de>
 8006e02:	2300      	movs	r3, #0
 8006e04:	9310      	str	r3, [sp, #64]	; 0x40
 8006e06:	2301      	movs	r3, #1
 8006e08:	9313      	str	r3, [sp, #76]	; 0x4c
 8006e0a:	e740      	b.n	8006c8e <_strtod_l+0x6de>
 8006e0c:	463a      	mov	r2, r7
 8006e0e:	4620      	mov	r0, r4
 8006e10:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006e12:	f7ff f965 	bl	80060e0 <__lshift>
 8006e16:	901a      	str	r0, [sp, #104]	; 0x68
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	f47f af68 	bne.w	8006cee <_strtod_l+0x73e>
 8006e1e:	e605      	b.n	8006a2c <_strtod_l+0x47c>
 8006e20:	08009f18 	.word	0x08009f18
 8006e24:	fffffc02 	.word	0xfffffc02
 8006e28:	7ff00000 	.word	0x7ff00000
 8006e2c:	39500000 	.word	0x39500000
 8006e30:	46ca      	mov	sl, r9
 8006e32:	d165      	bne.n	8006f00 <_strtod_l+0x950>
 8006e34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e36:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e3a:	b352      	cbz	r2, 8006e92 <_strtod_l+0x8e2>
 8006e3c:	4a9e      	ldr	r2, [pc, #632]	; (80070b8 <_strtod_l+0xb08>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d12a      	bne.n	8006e98 <_strtod_l+0x8e8>
 8006e42:	9b05      	ldr	r3, [sp, #20]
 8006e44:	4641      	mov	r1, r8
 8006e46:	b1fb      	cbz	r3, 8006e88 <_strtod_l+0x8d8>
 8006e48:	4b9c      	ldr	r3, [pc, #624]	; (80070bc <_strtod_l+0xb0c>)
 8006e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e4e:	ea09 0303 	and.w	r3, r9, r3
 8006e52:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006e56:	d81a      	bhi.n	8006e8e <_strtod_l+0x8de>
 8006e58:	0d1b      	lsrs	r3, r3, #20
 8006e5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e62:	4299      	cmp	r1, r3
 8006e64:	d118      	bne.n	8006e98 <_strtod_l+0x8e8>
 8006e66:	4b96      	ldr	r3, [pc, #600]	; (80070c0 <_strtod_l+0xb10>)
 8006e68:	459a      	cmp	sl, r3
 8006e6a:	d102      	bne.n	8006e72 <_strtod_l+0x8c2>
 8006e6c:	3101      	adds	r1, #1
 8006e6e:	f43f addd 	beq.w	8006a2c <_strtod_l+0x47c>
 8006e72:	f04f 0800 	mov.w	r8, #0
 8006e76:	4b91      	ldr	r3, [pc, #580]	; (80070bc <_strtod_l+0xb0c>)
 8006e78:	ea0a 0303 	and.w	r3, sl, r3
 8006e7c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8006e80:	9b05      	ldr	r3, [sp, #20]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d19a      	bne.n	8006dbc <_strtod_l+0x80c>
 8006e86:	e5db      	b.n	8006a40 <_strtod_l+0x490>
 8006e88:	f04f 33ff 	mov.w	r3, #4294967295
 8006e8c:	e7e9      	b.n	8006e62 <_strtod_l+0x8b2>
 8006e8e:	4613      	mov	r3, r2
 8006e90:	e7e7      	b.n	8006e62 <_strtod_l+0x8b2>
 8006e92:	ea53 0308 	orrs.w	r3, r3, r8
 8006e96:	d081      	beq.n	8006d9c <_strtod_l+0x7ec>
 8006e98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e9a:	b1e3      	cbz	r3, 8006ed6 <_strtod_l+0x926>
 8006e9c:	ea13 0f0a 	tst.w	r3, sl
 8006ea0:	d0ee      	beq.n	8006e80 <_strtod_l+0x8d0>
 8006ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ea4:	4640      	mov	r0, r8
 8006ea6:	4649      	mov	r1, r9
 8006ea8:	9a05      	ldr	r2, [sp, #20]
 8006eaa:	b1c3      	cbz	r3, 8006ede <_strtod_l+0x92e>
 8006eac:	f7ff fb5c 	bl	8006568 <sulp>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006eb6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006eb8:	f7f9 f9c4 	bl	8000244 <__adddf3>
 8006ebc:	4680      	mov	r8, r0
 8006ebe:	4689      	mov	r9, r1
 8006ec0:	e7de      	b.n	8006e80 <_strtod_l+0x8d0>
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006ec8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006ecc:	f04f 38ff 	mov.w	r8, #4294967295
 8006ed0:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006ed4:	e7d4      	b.n	8006e80 <_strtod_l+0x8d0>
 8006ed6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006ed8:	ea13 0f08 	tst.w	r3, r8
 8006edc:	e7e0      	b.n	8006ea0 <_strtod_l+0x8f0>
 8006ede:	f7ff fb43 	bl	8006568 <sulp>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006ee8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006eea:	f7f9 f9a9 	bl	8000240 <__aeabi_dsub>
 8006eee:	2200      	movs	r2, #0
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	4680      	mov	r8, r0
 8006ef4:	4689      	mov	r9, r1
 8006ef6:	f7f9 fdc3 	bl	8000a80 <__aeabi_dcmpeq>
 8006efa:	2800      	cmp	r0, #0
 8006efc:	d0c0      	beq.n	8006e80 <_strtod_l+0x8d0>
 8006efe:	e606      	b.n	8006b0e <_strtod_l+0x55e>
 8006f00:	4659      	mov	r1, fp
 8006f02:	4630      	mov	r0, r6
 8006f04:	f7ff fabe 	bl	8006484 <__ratio>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006f10:	2200      	movs	r2, #0
 8006f12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f16:	f7f9 fdc7 	bl	8000aa8 <__aeabi_dcmple>
 8006f1a:	2800      	cmp	r0, #0
 8006f1c:	d06f      	beq.n	8006ffe <_strtod_l+0xa4e>
 8006f1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d17c      	bne.n	800701e <_strtod_l+0xa6e>
 8006f24:	f1b8 0f00 	cmp.w	r8, #0
 8006f28:	d159      	bne.n	8006fde <_strtod_l+0xa2e>
 8006f2a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d17b      	bne.n	800702a <_strtod_l+0xa7a>
 8006f32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f36:	2200      	movs	r2, #0
 8006f38:	4b62      	ldr	r3, [pc, #392]	; (80070c4 <_strtod_l+0xb14>)
 8006f3a:	f7f9 fdab 	bl	8000a94 <__aeabi_dcmplt>
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	d15a      	bne.n	8006ff8 <_strtod_l+0xa48>
 8006f42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f46:	2200      	movs	r2, #0
 8006f48:	4b5f      	ldr	r3, [pc, #380]	; (80070c8 <_strtod_l+0xb18>)
 8006f4a:	f7f9 fb31 	bl	80005b0 <__aeabi_dmul>
 8006f4e:	4605      	mov	r5, r0
 8006f50:	460f      	mov	r7, r1
 8006f52:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006f56:	9506      	str	r5, [sp, #24]
 8006f58:	9307      	str	r3, [sp, #28]
 8006f5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f5e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006f62:	4b56      	ldr	r3, [pc, #344]	; (80070bc <_strtod_l+0xb0c>)
 8006f64:	4a55      	ldr	r2, [pc, #340]	; (80070bc <_strtod_l+0xb0c>)
 8006f66:	ea0a 0303 	and.w	r3, sl, r3
 8006f6a:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f6c:	4b57      	ldr	r3, [pc, #348]	; (80070cc <_strtod_l+0xb1c>)
 8006f6e:	ea0a 0202 	and.w	r2, sl, r2
 8006f72:	429a      	cmp	r2, r3
 8006f74:	f040 80b0 	bne.w	80070d8 <_strtod_l+0xb28>
 8006f78:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8006f7c:	4640      	mov	r0, r8
 8006f7e:	4649      	mov	r1, r9
 8006f80:	f7ff f9c2 	bl	8006308 <__ulp>
 8006f84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f88:	f7f9 fb12 	bl	80005b0 <__aeabi_dmul>
 8006f8c:	4642      	mov	r2, r8
 8006f8e:	464b      	mov	r3, r9
 8006f90:	f7f9 f958 	bl	8000244 <__adddf3>
 8006f94:	f8df a124 	ldr.w	sl, [pc, #292]	; 80070bc <_strtod_l+0xb0c>
 8006f98:	4a4d      	ldr	r2, [pc, #308]	; (80070d0 <_strtod_l+0xb20>)
 8006f9a:	ea01 0a0a 	and.w	sl, r1, sl
 8006f9e:	4592      	cmp	sl, r2
 8006fa0:	4680      	mov	r8, r0
 8006fa2:	d948      	bls.n	8007036 <_strtod_l+0xa86>
 8006fa4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006fa6:	4b46      	ldr	r3, [pc, #280]	; (80070c0 <_strtod_l+0xb10>)
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d103      	bne.n	8006fb4 <_strtod_l+0xa04>
 8006fac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fae:	3301      	adds	r3, #1
 8006fb0:	f43f ad3c 	beq.w	8006a2c <_strtod_l+0x47c>
 8006fb4:	f04f 38ff 	mov.w	r8, #4294967295
 8006fb8:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80070c0 <_strtod_l+0xb10>
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006fc0:	f7fe fe76 	bl	8005cb0 <_Bfree>
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	9908      	ldr	r1, [sp, #32]
 8006fc8:	f7fe fe72 	bl	8005cb0 <_Bfree>
 8006fcc:	4659      	mov	r1, fp
 8006fce:	4620      	mov	r0, r4
 8006fd0:	f7fe fe6e 	bl	8005cb0 <_Bfree>
 8006fd4:	4631      	mov	r1, r6
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	f7fe fe6a 	bl	8005cb0 <_Bfree>
 8006fdc:	e605      	b.n	8006bea <_strtod_l+0x63a>
 8006fde:	f1b8 0f01 	cmp.w	r8, #1
 8006fe2:	d103      	bne.n	8006fec <_strtod_l+0xa3c>
 8006fe4:	f1b9 0f00 	cmp.w	r9, #0
 8006fe8:	f43f ad91 	beq.w	8006b0e <_strtod_l+0x55e>
 8006fec:	2200      	movs	r2, #0
 8006fee:	4b39      	ldr	r3, [pc, #228]	; (80070d4 <_strtod_l+0xb24>)
 8006ff0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006ff2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006ff6:	e016      	b.n	8007026 <_strtod_l+0xa76>
 8006ff8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006ffa:	4f33      	ldr	r7, [pc, #204]	; (80070c8 <_strtod_l+0xb18>)
 8006ffc:	e7a9      	b.n	8006f52 <_strtod_l+0x9a2>
 8006ffe:	4b32      	ldr	r3, [pc, #200]	; (80070c8 <_strtod_l+0xb18>)
 8007000:	2200      	movs	r2, #0
 8007002:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007006:	f7f9 fad3 	bl	80005b0 <__aeabi_dmul>
 800700a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800700c:	4605      	mov	r5, r0
 800700e:	460f      	mov	r7, r1
 8007010:	2b00      	cmp	r3, #0
 8007012:	d09e      	beq.n	8006f52 <_strtod_l+0x9a2>
 8007014:	4602      	mov	r2, r0
 8007016:	460b      	mov	r3, r1
 8007018:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800701c:	e79d      	b.n	8006f5a <_strtod_l+0x9aa>
 800701e:	2200      	movs	r2, #0
 8007020:	4b28      	ldr	r3, [pc, #160]	; (80070c4 <_strtod_l+0xb14>)
 8007022:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007026:	4f27      	ldr	r7, [pc, #156]	; (80070c4 <_strtod_l+0xb14>)
 8007028:	e797      	b.n	8006f5a <_strtod_l+0x9aa>
 800702a:	2200      	movs	r2, #0
 800702c:	4b29      	ldr	r3, [pc, #164]	; (80070d4 <_strtod_l+0xb24>)
 800702e:	4645      	mov	r5, r8
 8007030:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007034:	e7f7      	b.n	8007026 <_strtod_l+0xa76>
 8007036:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800703a:	9b05      	ldr	r3, [sp, #20]
 800703c:	46ca      	mov	sl, r9
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1bc      	bne.n	8006fbc <_strtod_l+0xa0c>
 8007042:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007046:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007048:	0d1b      	lsrs	r3, r3, #20
 800704a:	051b      	lsls	r3, r3, #20
 800704c:	429a      	cmp	r2, r3
 800704e:	d1b5      	bne.n	8006fbc <_strtod_l+0xa0c>
 8007050:	4628      	mov	r0, r5
 8007052:	4639      	mov	r1, r7
 8007054:	f7f9 fdf4 	bl	8000c40 <__aeabi_d2lz>
 8007058:	f7f9 fa7c 	bl	8000554 <__aeabi_l2d>
 800705c:	4602      	mov	r2, r0
 800705e:	460b      	mov	r3, r1
 8007060:	4628      	mov	r0, r5
 8007062:	4639      	mov	r1, r7
 8007064:	f7f9 f8ec 	bl	8000240 <__aeabi_dsub>
 8007068:	460b      	mov	r3, r1
 800706a:	4602      	mov	r2, r0
 800706c:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8007070:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007076:	ea4a 0a08 	orr.w	sl, sl, r8
 800707a:	ea5a 0a03 	orrs.w	sl, sl, r3
 800707e:	d06c      	beq.n	800715a <_strtod_l+0xbaa>
 8007080:	a309      	add	r3, pc, #36	; (adr r3, 80070a8 <_strtod_l+0xaf8>)
 8007082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007086:	f7f9 fd05 	bl	8000a94 <__aeabi_dcmplt>
 800708a:	2800      	cmp	r0, #0
 800708c:	f47f acd8 	bne.w	8006a40 <_strtod_l+0x490>
 8007090:	a307      	add	r3, pc, #28	; (adr r3, 80070b0 <_strtod_l+0xb00>)
 8007092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007096:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800709a:	f7f9 fd19 	bl	8000ad0 <__aeabi_dcmpgt>
 800709e:	2800      	cmp	r0, #0
 80070a0:	d08c      	beq.n	8006fbc <_strtod_l+0xa0c>
 80070a2:	e4cd      	b.n	8006a40 <_strtod_l+0x490>
 80070a4:	f3af 8000 	nop.w
 80070a8:	94a03595 	.word	0x94a03595
 80070ac:	3fdfffff 	.word	0x3fdfffff
 80070b0:	35afe535 	.word	0x35afe535
 80070b4:	3fe00000 	.word	0x3fe00000
 80070b8:	000fffff 	.word	0x000fffff
 80070bc:	7ff00000 	.word	0x7ff00000
 80070c0:	7fefffff 	.word	0x7fefffff
 80070c4:	3ff00000 	.word	0x3ff00000
 80070c8:	3fe00000 	.word	0x3fe00000
 80070cc:	7fe00000 	.word	0x7fe00000
 80070d0:	7c9fffff 	.word	0x7c9fffff
 80070d4:	bff00000 	.word	0xbff00000
 80070d8:	9b05      	ldr	r3, [sp, #20]
 80070da:	b333      	cbz	r3, 800712a <_strtod_l+0xb7a>
 80070dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80070de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80070e2:	d822      	bhi.n	800712a <_strtod_l+0xb7a>
 80070e4:	a328      	add	r3, pc, #160	; (adr r3, 8007188 <_strtod_l+0xbd8>)
 80070e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ea:	4628      	mov	r0, r5
 80070ec:	4639      	mov	r1, r7
 80070ee:	f7f9 fcdb 	bl	8000aa8 <__aeabi_dcmple>
 80070f2:	b1a0      	cbz	r0, 800711e <_strtod_l+0xb6e>
 80070f4:	4639      	mov	r1, r7
 80070f6:	4628      	mov	r0, r5
 80070f8:	f7f9 fd32 	bl	8000b60 <__aeabi_d2uiz>
 80070fc:	2801      	cmp	r0, #1
 80070fe:	bf38      	it	cc
 8007100:	2001      	movcc	r0, #1
 8007102:	f7f9 f9db 	bl	80004bc <__aeabi_ui2d>
 8007106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007108:	4605      	mov	r5, r0
 800710a:	460f      	mov	r7, r1
 800710c:	bb03      	cbnz	r3, 8007150 <_strtod_l+0xba0>
 800710e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007112:	9014      	str	r0, [sp, #80]	; 0x50
 8007114:	9315      	str	r3, [sp, #84]	; 0x54
 8007116:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800711a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800711e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007120:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007122:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007126:	1a9b      	subs	r3, r3, r2
 8007128:	9311      	str	r3, [sp, #68]	; 0x44
 800712a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800712c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800712e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8007132:	f7ff f8e9 	bl	8006308 <__ulp>
 8007136:	4602      	mov	r2, r0
 8007138:	460b      	mov	r3, r1
 800713a:	4640      	mov	r0, r8
 800713c:	4649      	mov	r1, r9
 800713e:	f7f9 fa37 	bl	80005b0 <__aeabi_dmul>
 8007142:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007144:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007146:	f7f9 f87d 	bl	8000244 <__adddf3>
 800714a:	4680      	mov	r8, r0
 800714c:	4689      	mov	r9, r1
 800714e:	e774      	b.n	800703a <_strtod_l+0xa8a>
 8007150:	4602      	mov	r2, r0
 8007152:	460b      	mov	r3, r1
 8007154:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007158:	e7dd      	b.n	8007116 <_strtod_l+0xb66>
 800715a:	a30d      	add	r3, pc, #52	; (adr r3, 8007190 <_strtod_l+0xbe0>)
 800715c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007160:	f7f9 fc98 	bl	8000a94 <__aeabi_dcmplt>
 8007164:	e79b      	b.n	800709e <_strtod_l+0xaee>
 8007166:	2300      	movs	r3, #0
 8007168:	930e      	str	r3, [sp, #56]	; 0x38
 800716a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800716c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800716e:	6013      	str	r3, [r2, #0]
 8007170:	f7ff ba5b 	b.w	800662a <_strtod_l+0x7a>
 8007174:	2a65      	cmp	r2, #101	; 0x65
 8007176:	f43f ab52 	beq.w	800681e <_strtod_l+0x26e>
 800717a:	2a45      	cmp	r2, #69	; 0x45
 800717c:	f43f ab4f 	beq.w	800681e <_strtod_l+0x26e>
 8007180:	2301      	movs	r3, #1
 8007182:	f7ff bb87 	b.w	8006894 <_strtod_l+0x2e4>
 8007186:	bf00      	nop
 8007188:	ffc00000 	.word	0xffc00000
 800718c:	41dfffff 	.word	0x41dfffff
 8007190:	94a03595 	.word	0x94a03595
 8007194:	3fcfffff 	.word	0x3fcfffff

08007198 <_strtod_r>:
 8007198:	4b01      	ldr	r3, [pc, #4]	; (80071a0 <_strtod_r+0x8>)
 800719a:	f7ff ba09 	b.w	80065b0 <_strtod_l>
 800719e:	bf00      	nop
 80071a0:	2000006c 	.word	0x2000006c

080071a4 <_strtol_l.constprop.0>:
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071aa:	4686      	mov	lr, r0
 80071ac:	4690      	mov	r8, r2
 80071ae:	d001      	beq.n	80071b4 <_strtol_l.constprop.0+0x10>
 80071b0:	2b24      	cmp	r3, #36	; 0x24
 80071b2:	d906      	bls.n	80071c2 <_strtol_l.constprop.0+0x1e>
 80071b4:	f7fd fd90 	bl	8004cd8 <__errno>
 80071b8:	2316      	movs	r3, #22
 80071ba:	6003      	str	r3, [r0, #0]
 80071bc:	2000      	movs	r0, #0
 80071be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071c2:	460d      	mov	r5, r1
 80071c4:	4835      	ldr	r0, [pc, #212]	; (800729c <_strtol_l.constprop.0+0xf8>)
 80071c6:	462a      	mov	r2, r5
 80071c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071cc:	5d06      	ldrb	r6, [r0, r4]
 80071ce:	f016 0608 	ands.w	r6, r6, #8
 80071d2:	d1f8      	bne.n	80071c6 <_strtol_l.constprop.0+0x22>
 80071d4:	2c2d      	cmp	r4, #45	; 0x2d
 80071d6:	d12e      	bne.n	8007236 <_strtol_l.constprop.0+0x92>
 80071d8:	2601      	movs	r6, #1
 80071da:	782c      	ldrb	r4, [r5, #0]
 80071dc:	1c95      	adds	r5, r2, #2
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d057      	beq.n	8007292 <_strtol_l.constprop.0+0xee>
 80071e2:	2b10      	cmp	r3, #16
 80071e4:	d109      	bne.n	80071fa <_strtol_l.constprop.0+0x56>
 80071e6:	2c30      	cmp	r4, #48	; 0x30
 80071e8:	d107      	bne.n	80071fa <_strtol_l.constprop.0+0x56>
 80071ea:	782a      	ldrb	r2, [r5, #0]
 80071ec:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80071f0:	2a58      	cmp	r2, #88	; 0x58
 80071f2:	d149      	bne.n	8007288 <_strtol_l.constprop.0+0xe4>
 80071f4:	2310      	movs	r3, #16
 80071f6:	786c      	ldrb	r4, [r5, #1]
 80071f8:	3502      	adds	r5, #2
 80071fa:	2200      	movs	r2, #0
 80071fc:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8007200:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007204:	fbbc f9f3 	udiv	r9, ip, r3
 8007208:	4610      	mov	r0, r2
 800720a:	fb03 ca19 	mls	sl, r3, r9, ip
 800720e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007212:	2f09      	cmp	r7, #9
 8007214:	d814      	bhi.n	8007240 <_strtol_l.constprop.0+0x9c>
 8007216:	463c      	mov	r4, r7
 8007218:	42a3      	cmp	r3, r4
 800721a:	dd20      	ble.n	800725e <_strtol_l.constprop.0+0xba>
 800721c:	1c57      	adds	r7, r2, #1
 800721e:	d007      	beq.n	8007230 <_strtol_l.constprop.0+0x8c>
 8007220:	4581      	cmp	r9, r0
 8007222:	d319      	bcc.n	8007258 <_strtol_l.constprop.0+0xb4>
 8007224:	d101      	bne.n	800722a <_strtol_l.constprop.0+0x86>
 8007226:	45a2      	cmp	sl, r4
 8007228:	db16      	blt.n	8007258 <_strtol_l.constprop.0+0xb4>
 800722a:	2201      	movs	r2, #1
 800722c:	fb00 4003 	mla	r0, r0, r3, r4
 8007230:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007234:	e7eb      	b.n	800720e <_strtol_l.constprop.0+0x6a>
 8007236:	2c2b      	cmp	r4, #43	; 0x2b
 8007238:	bf04      	itt	eq
 800723a:	782c      	ldrbeq	r4, [r5, #0]
 800723c:	1c95      	addeq	r5, r2, #2
 800723e:	e7ce      	b.n	80071de <_strtol_l.constprop.0+0x3a>
 8007240:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007244:	2f19      	cmp	r7, #25
 8007246:	d801      	bhi.n	800724c <_strtol_l.constprop.0+0xa8>
 8007248:	3c37      	subs	r4, #55	; 0x37
 800724a:	e7e5      	b.n	8007218 <_strtol_l.constprop.0+0x74>
 800724c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007250:	2f19      	cmp	r7, #25
 8007252:	d804      	bhi.n	800725e <_strtol_l.constprop.0+0xba>
 8007254:	3c57      	subs	r4, #87	; 0x57
 8007256:	e7df      	b.n	8007218 <_strtol_l.constprop.0+0x74>
 8007258:	f04f 32ff 	mov.w	r2, #4294967295
 800725c:	e7e8      	b.n	8007230 <_strtol_l.constprop.0+0x8c>
 800725e:	1c53      	adds	r3, r2, #1
 8007260:	d108      	bne.n	8007274 <_strtol_l.constprop.0+0xd0>
 8007262:	2322      	movs	r3, #34	; 0x22
 8007264:	4660      	mov	r0, ip
 8007266:	f8ce 3000 	str.w	r3, [lr]
 800726a:	f1b8 0f00 	cmp.w	r8, #0
 800726e:	d0a6      	beq.n	80071be <_strtol_l.constprop.0+0x1a>
 8007270:	1e69      	subs	r1, r5, #1
 8007272:	e006      	b.n	8007282 <_strtol_l.constprop.0+0xde>
 8007274:	b106      	cbz	r6, 8007278 <_strtol_l.constprop.0+0xd4>
 8007276:	4240      	negs	r0, r0
 8007278:	f1b8 0f00 	cmp.w	r8, #0
 800727c:	d09f      	beq.n	80071be <_strtol_l.constprop.0+0x1a>
 800727e:	2a00      	cmp	r2, #0
 8007280:	d1f6      	bne.n	8007270 <_strtol_l.constprop.0+0xcc>
 8007282:	f8c8 1000 	str.w	r1, [r8]
 8007286:	e79a      	b.n	80071be <_strtol_l.constprop.0+0x1a>
 8007288:	2430      	movs	r4, #48	; 0x30
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1b5      	bne.n	80071fa <_strtol_l.constprop.0+0x56>
 800728e:	2308      	movs	r3, #8
 8007290:	e7b3      	b.n	80071fa <_strtol_l.constprop.0+0x56>
 8007292:	2c30      	cmp	r4, #48	; 0x30
 8007294:	d0a9      	beq.n	80071ea <_strtol_l.constprop.0+0x46>
 8007296:	230a      	movs	r3, #10
 8007298:	e7af      	b.n	80071fa <_strtol_l.constprop.0+0x56>
 800729a:	bf00      	nop
 800729c:	08009f41 	.word	0x08009f41

080072a0 <_strtol_r>:
 80072a0:	f7ff bf80 	b.w	80071a4 <_strtol_l.constprop.0>

080072a4 <__ssputs_r>:
 80072a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072a8:	461f      	mov	r7, r3
 80072aa:	688e      	ldr	r6, [r1, #8]
 80072ac:	4682      	mov	sl, r0
 80072ae:	42be      	cmp	r6, r7
 80072b0:	460c      	mov	r4, r1
 80072b2:	4690      	mov	r8, r2
 80072b4:	680b      	ldr	r3, [r1, #0]
 80072b6:	d82c      	bhi.n	8007312 <__ssputs_r+0x6e>
 80072b8:	898a      	ldrh	r2, [r1, #12]
 80072ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80072be:	d026      	beq.n	800730e <__ssputs_r+0x6a>
 80072c0:	6965      	ldr	r5, [r4, #20]
 80072c2:	6909      	ldr	r1, [r1, #16]
 80072c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072c8:	eba3 0901 	sub.w	r9, r3, r1
 80072cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072d0:	1c7b      	adds	r3, r7, #1
 80072d2:	444b      	add	r3, r9
 80072d4:	106d      	asrs	r5, r5, #1
 80072d6:	429d      	cmp	r5, r3
 80072d8:	bf38      	it	cc
 80072da:	461d      	movcc	r5, r3
 80072dc:	0553      	lsls	r3, r2, #21
 80072de:	d527      	bpl.n	8007330 <__ssputs_r+0x8c>
 80072e0:	4629      	mov	r1, r5
 80072e2:	f7fe fc19 	bl	8005b18 <_malloc_r>
 80072e6:	4606      	mov	r6, r0
 80072e8:	b360      	cbz	r0, 8007344 <__ssputs_r+0xa0>
 80072ea:	464a      	mov	r2, r9
 80072ec:	6921      	ldr	r1, [r4, #16]
 80072ee:	f000 fbef 	bl	8007ad0 <memcpy>
 80072f2:	89a3      	ldrh	r3, [r4, #12]
 80072f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80072f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072fc:	81a3      	strh	r3, [r4, #12]
 80072fe:	6126      	str	r6, [r4, #16]
 8007300:	444e      	add	r6, r9
 8007302:	6026      	str	r6, [r4, #0]
 8007304:	463e      	mov	r6, r7
 8007306:	6165      	str	r5, [r4, #20]
 8007308:	eba5 0509 	sub.w	r5, r5, r9
 800730c:	60a5      	str	r5, [r4, #8]
 800730e:	42be      	cmp	r6, r7
 8007310:	d900      	bls.n	8007314 <__ssputs_r+0x70>
 8007312:	463e      	mov	r6, r7
 8007314:	4632      	mov	r2, r6
 8007316:	4641      	mov	r1, r8
 8007318:	6820      	ldr	r0, [r4, #0]
 800731a:	f000 fb9d 	bl	8007a58 <memmove>
 800731e:	2000      	movs	r0, #0
 8007320:	68a3      	ldr	r3, [r4, #8]
 8007322:	1b9b      	subs	r3, r3, r6
 8007324:	60a3      	str	r3, [r4, #8]
 8007326:	6823      	ldr	r3, [r4, #0]
 8007328:	4433      	add	r3, r6
 800732a:	6023      	str	r3, [r4, #0]
 800732c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007330:	462a      	mov	r2, r5
 8007332:	f000 ff7e 	bl	8008232 <_realloc_r>
 8007336:	4606      	mov	r6, r0
 8007338:	2800      	cmp	r0, #0
 800733a:	d1e0      	bne.n	80072fe <__ssputs_r+0x5a>
 800733c:	4650      	mov	r0, sl
 800733e:	6921      	ldr	r1, [r4, #16]
 8007340:	f7fe fb7a 	bl	8005a38 <_free_r>
 8007344:	230c      	movs	r3, #12
 8007346:	f8ca 3000 	str.w	r3, [sl]
 800734a:	89a3      	ldrh	r3, [r4, #12]
 800734c:	f04f 30ff 	mov.w	r0, #4294967295
 8007350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007354:	81a3      	strh	r3, [r4, #12]
 8007356:	e7e9      	b.n	800732c <__ssputs_r+0x88>

08007358 <_svfiprintf_r>:
 8007358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800735c:	4698      	mov	r8, r3
 800735e:	898b      	ldrh	r3, [r1, #12]
 8007360:	4607      	mov	r7, r0
 8007362:	061b      	lsls	r3, r3, #24
 8007364:	460d      	mov	r5, r1
 8007366:	4614      	mov	r4, r2
 8007368:	b09d      	sub	sp, #116	; 0x74
 800736a:	d50e      	bpl.n	800738a <_svfiprintf_r+0x32>
 800736c:	690b      	ldr	r3, [r1, #16]
 800736e:	b963      	cbnz	r3, 800738a <_svfiprintf_r+0x32>
 8007370:	2140      	movs	r1, #64	; 0x40
 8007372:	f7fe fbd1 	bl	8005b18 <_malloc_r>
 8007376:	6028      	str	r0, [r5, #0]
 8007378:	6128      	str	r0, [r5, #16]
 800737a:	b920      	cbnz	r0, 8007386 <_svfiprintf_r+0x2e>
 800737c:	230c      	movs	r3, #12
 800737e:	603b      	str	r3, [r7, #0]
 8007380:	f04f 30ff 	mov.w	r0, #4294967295
 8007384:	e0d0      	b.n	8007528 <_svfiprintf_r+0x1d0>
 8007386:	2340      	movs	r3, #64	; 0x40
 8007388:	616b      	str	r3, [r5, #20]
 800738a:	2300      	movs	r3, #0
 800738c:	9309      	str	r3, [sp, #36]	; 0x24
 800738e:	2320      	movs	r3, #32
 8007390:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007394:	2330      	movs	r3, #48	; 0x30
 8007396:	f04f 0901 	mov.w	r9, #1
 800739a:	f8cd 800c 	str.w	r8, [sp, #12]
 800739e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007540 <_svfiprintf_r+0x1e8>
 80073a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073a6:	4623      	mov	r3, r4
 80073a8:	469a      	mov	sl, r3
 80073aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073ae:	b10a      	cbz	r2, 80073b4 <_svfiprintf_r+0x5c>
 80073b0:	2a25      	cmp	r2, #37	; 0x25
 80073b2:	d1f9      	bne.n	80073a8 <_svfiprintf_r+0x50>
 80073b4:	ebba 0b04 	subs.w	fp, sl, r4
 80073b8:	d00b      	beq.n	80073d2 <_svfiprintf_r+0x7a>
 80073ba:	465b      	mov	r3, fp
 80073bc:	4622      	mov	r2, r4
 80073be:	4629      	mov	r1, r5
 80073c0:	4638      	mov	r0, r7
 80073c2:	f7ff ff6f 	bl	80072a4 <__ssputs_r>
 80073c6:	3001      	adds	r0, #1
 80073c8:	f000 80a9 	beq.w	800751e <_svfiprintf_r+0x1c6>
 80073cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073ce:	445a      	add	r2, fp
 80073d0:	9209      	str	r2, [sp, #36]	; 0x24
 80073d2:	f89a 3000 	ldrb.w	r3, [sl]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f000 80a1 	beq.w	800751e <_svfiprintf_r+0x1c6>
 80073dc:	2300      	movs	r3, #0
 80073de:	f04f 32ff 	mov.w	r2, #4294967295
 80073e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073e6:	f10a 0a01 	add.w	sl, sl, #1
 80073ea:	9304      	str	r3, [sp, #16]
 80073ec:	9307      	str	r3, [sp, #28]
 80073ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073f2:	931a      	str	r3, [sp, #104]	; 0x68
 80073f4:	4654      	mov	r4, sl
 80073f6:	2205      	movs	r2, #5
 80073f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073fc:	4850      	ldr	r0, [pc, #320]	; (8007540 <_svfiprintf_r+0x1e8>)
 80073fe:	f7fd fc98 	bl	8004d32 <memchr>
 8007402:	9a04      	ldr	r2, [sp, #16]
 8007404:	b9d8      	cbnz	r0, 800743e <_svfiprintf_r+0xe6>
 8007406:	06d0      	lsls	r0, r2, #27
 8007408:	bf44      	itt	mi
 800740a:	2320      	movmi	r3, #32
 800740c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007410:	0711      	lsls	r1, r2, #28
 8007412:	bf44      	itt	mi
 8007414:	232b      	movmi	r3, #43	; 0x2b
 8007416:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800741a:	f89a 3000 	ldrb.w	r3, [sl]
 800741e:	2b2a      	cmp	r3, #42	; 0x2a
 8007420:	d015      	beq.n	800744e <_svfiprintf_r+0xf6>
 8007422:	4654      	mov	r4, sl
 8007424:	2000      	movs	r0, #0
 8007426:	f04f 0c0a 	mov.w	ip, #10
 800742a:	9a07      	ldr	r2, [sp, #28]
 800742c:	4621      	mov	r1, r4
 800742e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007432:	3b30      	subs	r3, #48	; 0x30
 8007434:	2b09      	cmp	r3, #9
 8007436:	d94d      	bls.n	80074d4 <_svfiprintf_r+0x17c>
 8007438:	b1b0      	cbz	r0, 8007468 <_svfiprintf_r+0x110>
 800743a:	9207      	str	r2, [sp, #28]
 800743c:	e014      	b.n	8007468 <_svfiprintf_r+0x110>
 800743e:	eba0 0308 	sub.w	r3, r0, r8
 8007442:	fa09 f303 	lsl.w	r3, r9, r3
 8007446:	4313      	orrs	r3, r2
 8007448:	46a2      	mov	sl, r4
 800744a:	9304      	str	r3, [sp, #16]
 800744c:	e7d2      	b.n	80073f4 <_svfiprintf_r+0x9c>
 800744e:	9b03      	ldr	r3, [sp, #12]
 8007450:	1d19      	adds	r1, r3, #4
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	9103      	str	r1, [sp, #12]
 8007456:	2b00      	cmp	r3, #0
 8007458:	bfbb      	ittet	lt
 800745a:	425b      	neglt	r3, r3
 800745c:	f042 0202 	orrlt.w	r2, r2, #2
 8007460:	9307      	strge	r3, [sp, #28]
 8007462:	9307      	strlt	r3, [sp, #28]
 8007464:	bfb8      	it	lt
 8007466:	9204      	strlt	r2, [sp, #16]
 8007468:	7823      	ldrb	r3, [r4, #0]
 800746a:	2b2e      	cmp	r3, #46	; 0x2e
 800746c:	d10c      	bne.n	8007488 <_svfiprintf_r+0x130>
 800746e:	7863      	ldrb	r3, [r4, #1]
 8007470:	2b2a      	cmp	r3, #42	; 0x2a
 8007472:	d134      	bne.n	80074de <_svfiprintf_r+0x186>
 8007474:	9b03      	ldr	r3, [sp, #12]
 8007476:	3402      	adds	r4, #2
 8007478:	1d1a      	adds	r2, r3, #4
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	9203      	str	r2, [sp, #12]
 800747e:	2b00      	cmp	r3, #0
 8007480:	bfb8      	it	lt
 8007482:	f04f 33ff 	movlt.w	r3, #4294967295
 8007486:	9305      	str	r3, [sp, #20]
 8007488:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007544 <_svfiprintf_r+0x1ec>
 800748c:	2203      	movs	r2, #3
 800748e:	4650      	mov	r0, sl
 8007490:	7821      	ldrb	r1, [r4, #0]
 8007492:	f7fd fc4e 	bl	8004d32 <memchr>
 8007496:	b138      	cbz	r0, 80074a8 <_svfiprintf_r+0x150>
 8007498:	2240      	movs	r2, #64	; 0x40
 800749a:	9b04      	ldr	r3, [sp, #16]
 800749c:	eba0 000a 	sub.w	r0, r0, sl
 80074a0:	4082      	lsls	r2, r0
 80074a2:	4313      	orrs	r3, r2
 80074a4:	3401      	adds	r4, #1
 80074a6:	9304      	str	r3, [sp, #16]
 80074a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074ac:	2206      	movs	r2, #6
 80074ae:	4826      	ldr	r0, [pc, #152]	; (8007548 <_svfiprintf_r+0x1f0>)
 80074b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074b4:	f7fd fc3d 	bl	8004d32 <memchr>
 80074b8:	2800      	cmp	r0, #0
 80074ba:	d038      	beq.n	800752e <_svfiprintf_r+0x1d6>
 80074bc:	4b23      	ldr	r3, [pc, #140]	; (800754c <_svfiprintf_r+0x1f4>)
 80074be:	bb1b      	cbnz	r3, 8007508 <_svfiprintf_r+0x1b0>
 80074c0:	9b03      	ldr	r3, [sp, #12]
 80074c2:	3307      	adds	r3, #7
 80074c4:	f023 0307 	bic.w	r3, r3, #7
 80074c8:	3308      	adds	r3, #8
 80074ca:	9303      	str	r3, [sp, #12]
 80074cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074ce:	4433      	add	r3, r6
 80074d0:	9309      	str	r3, [sp, #36]	; 0x24
 80074d2:	e768      	b.n	80073a6 <_svfiprintf_r+0x4e>
 80074d4:	460c      	mov	r4, r1
 80074d6:	2001      	movs	r0, #1
 80074d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80074dc:	e7a6      	b.n	800742c <_svfiprintf_r+0xd4>
 80074de:	2300      	movs	r3, #0
 80074e0:	f04f 0c0a 	mov.w	ip, #10
 80074e4:	4619      	mov	r1, r3
 80074e6:	3401      	adds	r4, #1
 80074e8:	9305      	str	r3, [sp, #20]
 80074ea:	4620      	mov	r0, r4
 80074ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074f0:	3a30      	subs	r2, #48	; 0x30
 80074f2:	2a09      	cmp	r2, #9
 80074f4:	d903      	bls.n	80074fe <_svfiprintf_r+0x1a6>
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d0c6      	beq.n	8007488 <_svfiprintf_r+0x130>
 80074fa:	9105      	str	r1, [sp, #20]
 80074fc:	e7c4      	b.n	8007488 <_svfiprintf_r+0x130>
 80074fe:	4604      	mov	r4, r0
 8007500:	2301      	movs	r3, #1
 8007502:	fb0c 2101 	mla	r1, ip, r1, r2
 8007506:	e7f0      	b.n	80074ea <_svfiprintf_r+0x192>
 8007508:	ab03      	add	r3, sp, #12
 800750a:	9300      	str	r3, [sp, #0]
 800750c:	462a      	mov	r2, r5
 800750e:	4638      	mov	r0, r7
 8007510:	4b0f      	ldr	r3, [pc, #60]	; (8007550 <_svfiprintf_r+0x1f8>)
 8007512:	a904      	add	r1, sp, #16
 8007514:	f7fc fc86 	bl	8003e24 <_printf_float>
 8007518:	1c42      	adds	r2, r0, #1
 800751a:	4606      	mov	r6, r0
 800751c:	d1d6      	bne.n	80074cc <_svfiprintf_r+0x174>
 800751e:	89ab      	ldrh	r3, [r5, #12]
 8007520:	065b      	lsls	r3, r3, #25
 8007522:	f53f af2d 	bmi.w	8007380 <_svfiprintf_r+0x28>
 8007526:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007528:	b01d      	add	sp, #116	; 0x74
 800752a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800752e:	ab03      	add	r3, sp, #12
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	462a      	mov	r2, r5
 8007534:	4638      	mov	r0, r7
 8007536:	4b06      	ldr	r3, [pc, #24]	; (8007550 <_svfiprintf_r+0x1f8>)
 8007538:	a904      	add	r1, sp, #16
 800753a:	f7fc ff13 	bl	8004364 <_printf_i>
 800753e:	e7eb      	b.n	8007518 <_svfiprintf_r+0x1c0>
 8007540:	0800a041 	.word	0x0800a041
 8007544:	0800a047 	.word	0x0800a047
 8007548:	0800a04b 	.word	0x0800a04b
 800754c:	08003e25 	.word	0x08003e25
 8007550:	080072a5 	.word	0x080072a5

08007554 <__sfputc_r>:
 8007554:	6893      	ldr	r3, [r2, #8]
 8007556:	b410      	push	{r4}
 8007558:	3b01      	subs	r3, #1
 800755a:	2b00      	cmp	r3, #0
 800755c:	6093      	str	r3, [r2, #8]
 800755e:	da07      	bge.n	8007570 <__sfputc_r+0x1c>
 8007560:	6994      	ldr	r4, [r2, #24]
 8007562:	42a3      	cmp	r3, r4
 8007564:	db01      	blt.n	800756a <__sfputc_r+0x16>
 8007566:	290a      	cmp	r1, #10
 8007568:	d102      	bne.n	8007570 <__sfputc_r+0x1c>
 800756a:	bc10      	pop	{r4}
 800756c:	f000 b9de 	b.w	800792c <__swbuf_r>
 8007570:	6813      	ldr	r3, [r2, #0]
 8007572:	1c58      	adds	r0, r3, #1
 8007574:	6010      	str	r0, [r2, #0]
 8007576:	7019      	strb	r1, [r3, #0]
 8007578:	4608      	mov	r0, r1
 800757a:	bc10      	pop	{r4}
 800757c:	4770      	bx	lr

0800757e <__sfputs_r>:
 800757e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007580:	4606      	mov	r6, r0
 8007582:	460f      	mov	r7, r1
 8007584:	4614      	mov	r4, r2
 8007586:	18d5      	adds	r5, r2, r3
 8007588:	42ac      	cmp	r4, r5
 800758a:	d101      	bne.n	8007590 <__sfputs_r+0x12>
 800758c:	2000      	movs	r0, #0
 800758e:	e007      	b.n	80075a0 <__sfputs_r+0x22>
 8007590:	463a      	mov	r2, r7
 8007592:	4630      	mov	r0, r6
 8007594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007598:	f7ff ffdc 	bl	8007554 <__sfputc_r>
 800759c:	1c43      	adds	r3, r0, #1
 800759e:	d1f3      	bne.n	8007588 <__sfputs_r+0xa>
 80075a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080075a4 <_vfiprintf_r>:
 80075a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075a8:	460d      	mov	r5, r1
 80075aa:	4614      	mov	r4, r2
 80075ac:	4698      	mov	r8, r3
 80075ae:	4606      	mov	r6, r0
 80075b0:	b09d      	sub	sp, #116	; 0x74
 80075b2:	b118      	cbz	r0, 80075bc <_vfiprintf_r+0x18>
 80075b4:	6a03      	ldr	r3, [r0, #32]
 80075b6:	b90b      	cbnz	r3, 80075bc <_vfiprintf_r+0x18>
 80075b8:	f7fd fa90 	bl	8004adc <__sinit>
 80075bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075be:	07d9      	lsls	r1, r3, #31
 80075c0:	d405      	bmi.n	80075ce <_vfiprintf_r+0x2a>
 80075c2:	89ab      	ldrh	r3, [r5, #12]
 80075c4:	059a      	lsls	r2, r3, #22
 80075c6:	d402      	bmi.n	80075ce <_vfiprintf_r+0x2a>
 80075c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075ca:	f7fd fbb0 	bl	8004d2e <__retarget_lock_acquire_recursive>
 80075ce:	89ab      	ldrh	r3, [r5, #12]
 80075d0:	071b      	lsls	r3, r3, #28
 80075d2:	d501      	bpl.n	80075d8 <_vfiprintf_r+0x34>
 80075d4:	692b      	ldr	r3, [r5, #16]
 80075d6:	b99b      	cbnz	r3, 8007600 <_vfiprintf_r+0x5c>
 80075d8:	4629      	mov	r1, r5
 80075da:	4630      	mov	r0, r6
 80075dc:	f000 f9e4 	bl	80079a8 <__swsetup_r>
 80075e0:	b170      	cbz	r0, 8007600 <_vfiprintf_r+0x5c>
 80075e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075e4:	07dc      	lsls	r4, r3, #31
 80075e6:	d504      	bpl.n	80075f2 <_vfiprintf_r+0x4e>
 80075e8:	f04f 30ff 	mov.w	r0, #4294967295
 80075ec:	b01d      	add	sp, #116	; 0x74
 80075ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075f2:	89ab      	ldrh	r3, [r5, #12]
 80075f4:	0598      	lsls	r0, r3, #22
 80075f6:	d4f7      	bmi.n	80075e8 <_vfiprintf_r+0x44>
 80075f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075fa:	f7fd fb99 	bl	8004d30 <__retarget_lock_release_recursive>
 80075fe:	e7f3      	b.n	80075e8 <_vfiprintf_r+0x44>
 8007600:	2300      	movs	r3, #0
 8007602:	9309      	str	r3, [sp, #36]	; 0x24
 8007604:	2320      	movs	r3, #32
 8007606:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800760a:	2330      	movs	r3, #48	; 0x30
 800760c:	f04f 0901 	mov.w	r9, #1
 8007610:	f8cd 800c 	str.w	r8, [sp, #12]
 8007614:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80077c4 <_vfiprintf_r+0x220>
 8007618:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800761c:	4623      	mov	r3, r4
 800761e:	469a      	mov	sl, r3
 8007620:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007624:	b10a      	cbz	r2, 800762a <_vfiprintf_r+0x86>
 8007626:	2a25      	cmp	r2, #37	; 0x25
 8007628:	d1f9      	bne.n	800761e <_vfiprintf_r+0x7a>
 800762a:	ebba 0b04 	subs.w	fp, sl, r4
 800762e:	d00b      	beq.n	8007648 <_vfiprintf_r+0xa4>
 8007630:	465b      	mov	r3, fp
 8007632:	4622      	mov	r2, r4
 8007634:	4629      	mov	r1, r5
 8007636:	4630      	mov	r0, r6
 8007638:	f7ff ffa1 	bl	800757e <__sfputs_r>
 800763c:	3001      	adds	r0, #1
 800763e:	f000 80a9 	beq.w	8007794 <_vfiprintf_r+0x1f0>
 8007642:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007644:	445a      	add	r2, fp
 8007646:	9209      	str	r2, [sp, #36]	; 0x24
 8007648:	f89a 3000 	ldrb.w	r3, [sl]
 800764c:	2b00      	cmp	r3, #0
 800764e:	f000 80a1 	beq.w	8007794 <_vfiprintf_r+0x1f0>
 8007652:	2300      	movs	r3, #0
 8007654:	f04f 32ff 	mov.w	r2, #4294967295
 8007658:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800765c:	f10a 0a01 	add.w	sl, sl, #1
 8007660:	9304      	str	r3, [sp, #16]
 8007662:	9307      	str	r3, [sp, #28]
 8007664:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007668:	931a      	str	r3, [sp, #104]	; 0x68
 800766a:	4654      	mov	r4, sl
 800766c:	2205      	movs	r2, #5
 800766e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007672:	4854      	ldr	r0, [pc, #336]	; (80077c4 <_vfiprintf_r+0x220>)
 8007674:	f7fd fb5d 	bl	8004d32 <memchr>
 8007678:	9a04      	ldr	r2, [sp, #16]
 800767a:	b9d8      	cbnz	r0, 80076b4 <_vfiprintf_r+0x110>
 800767c:	06d1      	lsls	r1, r2, #27
 800767e:	bf44      	itt	mi
 8007680:	2320      	movmi	r3, #32
 8007682:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007686:	0713      	lsls	r3, r2, #28
 8007688:	bf44      	itt	mi
 800768a:	232b      	movmi	r3, #43	; 0x2b
 800768c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007690:	f89a 3000 	ldrb.w	r3, [sl]
 8007694:	2b2a      	cmp	r3, #42	; 0x2a
 8007696:	d015      	beq.n	80076c4 <_vfiprintf_r+0x120>
 8007698:	4654      	mov	r4, sl
 800769a:	2000      	movs	r0, #0
 800769c:	f04f 0c0a 	mov.w	ip, #10
 80076a0:	9a07      	ldr	r2, [sp, #28]
 80076a2:	4621      	mov	r1, r4
 80076a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076a8:	3b30      	subs	r3, #48	; 0x30
 80076aa:	2b09      	cmp	r3, #9
 80076ac:	d94d      	bls.n	800774a <_vfiprintf_r+0x1a6>
 80076ae:	b1b0      	cbz	r0, 80076de <_vfiprintf_r+0x13a>
 80076b0:	9207      	str	r2, [sp, #28]
 80076b2:	e014      	b.n	80076de <_vfiprintf_r+0x13a>
 80076b4:	eba0 0308 	sub.w	r3, r0, r8
 80076b8:	fa09 f303 	lsl.w	r3, r9, r3
 80076bc:	4313      	orrs	r3, r2
 80076be:	46a2      	mov	sl, r4
 80076c0:	9304      	str	r3, [sp, #16]
 80076c2:	e7d2      	b.n	800766a <_vfiprintf_r+0xc6>
 80076c4:	9b03      	ldr	r3, [sp, #12]
 80076c6:	1d19      	adds	r1, r3, #4
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	9103      	str	r1, [sp, #12]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	bfbb      	ittet	lt
 80076d0:	425b      	neglt	r3, r3
 80076d2:	f042 0202 	orrlt.w	r2, r2, #2
 80076d6:	9307      	strge	r3, [sp, #28]
 80076d8:	9307      	strlt	r3, [sp, #28]
 80076da:	bfb8      	it	lt
 80076dc:	9204      	strlt	r2, [sp, #16]
 80076de:	7823      	ldrb	r3, [r4, #0]
 80076e0:	2b2e      	cmp	r3, #46	; 0x2e
 80076e2:	d10c      	bne.n	80076fe <_vfiprintf_r+0x15a>
 80076e4:	7863      	ldrb	r3, [r4, #1]
 80076e6:	2b2a      	cmp	r3, #42	; 0x2a
 80076e8:	d134      	bne.n	8007754 <_vfiprintf_r+0x1b0>
 80076ea:	9b03      	ldr	r3, [sp, #12]
 80076ec:	3402      	adds	r4, #2
 80076ee:	1d1a      	adds	r2, r3, #4
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	9203      	str	r2, [sp, #12]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	bfb8      	it	lt
 80076f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80076fc:	9305      	str	r3, [sp, #20]
 80076fe:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80077c8 <_vfiprintf_r+0x224>
 8007702:	2203      	movs	r2, #3
 8007704:	4650      	mov	r0, sl
 8007706:	7821      	ldrb	r1, [r4, #0]
 8007708:	f7fd fb13 	bl	8004d32 <memchr>
 800770c:	b138      	cbz	r0, 800771e <_vfiprintf_r+0x17a>
 800770e:	2240      	movs	r2, #64	; 0x40
 8007710:	9b04      	ldr	r3, [sp, #16]
 8007712:	eba0 000a 	sub.w	r0, r0, sl
 8007716:	4082      	lsls	r2, r0
 8007718:	4313      	orrs	r3, r2
 800771a:	3401      	adds	r4, #1
 800771c:	9304      	str	r3, [sp, #16]
 800771e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007722:	2206      	movs	r2, #6
 8007724:	4829      	ldr	r0, [pc, #164]	; (80077cc <_vfiprintf_r+0x228>)
 8007726:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800772a:	f7fd fb02 	bl	8004d32 <memchr>
 800772e:	2800      	cmp	r0, #0
 8007730:	d03f      	beq.n	80077b2 <_vfiprintf_r+0x20e>
 8007732:	4b27      	ldr	r3, [pc, #156]	; (80077d0 <_vfiprintf_r+0x22c>)
 8007734:	bb1b      	cbnz	r3, 800777e <_vfiprintf_r+0x1da>
 8007736:	9b03      	ldr	r3, [sp, #12]
 8007738:	3307      	adds	r3, #7
 800773a:	f023 0307 	bic.w	r3, r3, #7
 800773e:	3308      	adds	r3, #8
 8007740:	9303      	str	r3, [sp, #12]
 8007742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007744:	443b      	add	r3, r7
 8007746:	9309      	str	r3, [sp, #36]	; 0x24
 8007748:	e768      	b.n	800761c <_vfiprintf_r+0x78>
 800774a:	460c      	mov	r4, r1
 800774c:	2001      	movs	r0, #1
 800774e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007752:	e7a6      	b.n	80076a2 <_vfiprintf_r+0xfe>
 8007754:	2300      	movs	r3, #0
 8007756:	f04f 0c0a 	mov.w	ip, #10
 800775a:	4619      	mov	r1, r3
 800775c:	3401      	adds	r4, #1
 800775e:	9305      	str	r3, [sp, #20]
 8007760:	4620      	mov	r0, r4
 8007762:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007766:	3a30      	subs	r2, #48	; 0x30
 8007768:	2a09      	cmp	r2, #9
 800776a:	d903      	bls.n	8007774 <_vfiprintf_r+0x1d0>
 800776c:	2b00      	cmp	r3, #0
 800776e:	d0c6      	beq.n	80076fe <_vfiprintf_r+0x15a>
 8007770:	9105      	str	r1, [sp, #20]
 8007772:	e7c4      	b.n	80076fe <_vfiprintf_r+0x15a>
 8007774:	4604      	mov	r4, r0
 8007776:	2301      	movs	r3, #1
 8007778:	fb0c 2101 	mla	r1, ip, r1, r2
 800777c:	e7f0      	b.n	8007760 <_vfiprintf_r+0x1bc>
 800777e:	ab03      	add	r3, sp, #12
 8007780:	9300      	str	r3, [sp, #0]
 8007782:	462a      	mov	r2, r5
 8007784:	4630      	mov	r0, r6
 8007786:	4b13      	ldr	r3, [pc, #76]	; (80077d4 <_vfiprintf_r+0x230>)
 8007788:	a904      	add	r1, sp, #16
 800778a:	f7fc fb4b 	bl	8003e24 <_printf_float>
 800778e:	4607      	mov	r7, r0
 8007790:	1c78      	adds	r0, r7, #1
 8007792:	d1d6      	bne.n	8007742 <_vfiprintf_r+0x19e>
 8007794:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007796:	07d9      	lsls	r1, r3, #31
 8007798:	d405      	bmi.n	80077a6 <_vfiprintf_r+0x202>
 800779a:	89ab      	ldrh	r3, [r5, #12]
 800779c:	059a      	lsls	r2, r3, #22
 800779e:	d402      	bmi.n	80077a6 <_vfiprintf_r+0x202>
 80077a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077a2:	f7fd fac5 	bl	8004d30 <__retarget_lock_release_recursive>
 80077a6:	89ab      	ldrh	r3, [r5, #12]
 80077a8:	065b      	lsls	r3, r3, #25
 80077aa:	f53f af1d 	bmi.w	80075e8 <_vfiprintf_r+0x44>
 80077ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077b0:	e71c      	b.n	80075ec <_vfiprintf_r+0x48>
 80077b2:	ab03      	add	r3, sp, #12
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	462a      	mov	r2, r5
 80077b8:	4630      	mov	r0, r6
 80077ba:	4b06      	ldr	r3, [pc, #24]	; (80077d4 <_vfiprintf_r+0x230>)
 80077bc:	a904      	add	r1, sp, #16
 80077be:	f7fc fdd1 	bl	8004364 <_printf_i>
 80077c2:	e7e4      	b.n	800778e <_vfiprintf_r+0x1ea>
 80077c4:	0800a041 	.word	0x0800a041
 80077c8:	0800a047 	.word	0x0800a047
 80077cc:	0800a04b 	.word	0x0800a04b
 80077d0:	08003e25 	.word	0x08003e25
 80077d4:	0800757f 	.word	0x0800757f

080077d8 <__sflush_r>:
 80077d8:	898a      	ldrh	r2, [r1, #12]
 80077da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077dc:	4605      	mov	r5, r0
 80077de:	0710      	lsls	r0, r2, #28
 80077e0:	460c      	mov	r4, r1
 80077e2:	d457      	bmi.n	8007894 <__sflush_r+0xbc>
 80077e4:	684b      	ldr	r3, [r1, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	dc04      	bgt.n	80077f4 <__sflush_r+0x1c>
 80077ea:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	dc01      	bgt.n	80077f4 <__sflush_r+0x1c>
 80077f0:	2000      	movs	r0, #0
 80077f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80077f6:	2e00      	cmp	r6, #0
 80077f8:	d0fa      	beq.n	80077f0 <__sflush_r+0x18>
 80077fa:	2300      	movs	r3, #0
 80077fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007800:	682f      	ldr	r7, [r5, #0]
 8007802:	6a21      	ldr	r1, [r4, #32]
 8007804:	602b      	str	r3, [r5, #0]
 8007806:	d032      	beq.n	800786e <__sflush_r+0x96>
 8007808:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800780a:	89a3      	ldrh	r3, [r4, #12]
 800780c:	075a      	lsls	r2, r3, #29
 800780e:	d505      	bpl.n	800781c <__sflush_r+0x44>
 8007810:	6863      	ldr	r3, [r4, #4]
 8007812:	1ac0      	subs	r0, r0, r3
 8007814:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007816:	b10b      	cbz	r3, 800781c <__sflush_r+0x44>
 8007818:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800781a:	1ac0      	subs	r0, r0, r3
 800781c:	2300      	movs	r3, #0
 800781e:	4602      	mov	r2, r0
 8007820:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007822:	4628      	mov	r0, r5
 8007824:	6a21      	ldr	r1, [r4, #32]
 8007826:	47b0      	blx	r6
 8007828:	1c43      	adds	r3, r0, #1
 800782a:	89a3      	ldrh	r3, [r4, #12]
 800782c:	d106      	bne.n	800783c <__sflush_r+0x64>
 800782e:	6829      	ldr	r1, [r5, #0]
 8007830:	291d      	cmp	r1, #29
 8007832:	d82b      	bhi.n	800788c <__sflush_r+0xb4>
 8007834:	4a28      	ldr	r2, [pc, #160]	; (80078d8 <__sflush_r+0x100>)
 8007836:	410a      	asrs	r2, r1
 8007838:	07d6      	lsls	r6, r2, #31
 800783a:	d427      	bmi.n	800788c <__sflush_r+0xb4>
 800783c:	2200      	movs	r2, #0
 800783e:	6062      	str	r2, [r4, #4]
 8007840:	6922      	ldr	r2, [r4, #16]
 8007842:	04d9      	lsls	r1, r3, #19
 8007844:	6022      	str	r2, [r4, #0]
 8007846:	d504      	bpl.n	8007852 <__sflush_r+0x7a>
 8007848:	1c42      	adds	r2, r0, #1
 800784a:	d101      	bne.n	8007850 <__sflush_r+0x78>
 800784c:	682b      	ldr	r3, [r5, #0]
 800784e:	b903      	cbnz	r3, 8007852 <__sflush_r+0x7a>
 8007850:	6560      	str	r0, [r4, #84]	; 0x54
 8007852:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007854:	602f      	str	r7, [r5, #0]
 8007856:	2900      	cmp	r1, #0
 8007858:	d0ca      	beq.n	80077f0 <__sflush_r+0x18>
 800785a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800785e:	4299      	cmp	r1, r3
 8007860:	d002      	beq.n	8007868 <__sflush_r+0x90>
 8007862:	4628      	mov	r0, r5
 8007864:	f7fe f8e8 	bl	8005a38 <_free_r>
 8007868:	2000      	movs	r0, #0
 800786a:	6360      	str	r0, [r4, #52]	; 0x34
 800786c:	e7c1      	b.n	80077f2 <__sflush_r+0x1a>
 800786e:	2301      	movs	r3, #1
 8007870:	4628      	mov	r0, r5
 8007872:	47b0      	blx	r6
 8007874:	1c41      	adds	r1, r0, #1
 8007876:	d1c8      	bne.n	800780a <__sflush_r+0x32>
 8007878:	682b      	ldr	r3, [r5, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d0c5      	beq.n	800780a <__sflush_r+0x32>
 800787e:	2b1d      	cmp	r3, #29
 8007880:	d001      	beq.n	8007886 <__sflush_r+0xae>
 8007882:	2b16      	cmp	r3, #22
 8007884:	d101      	bne.n	800788a <__sflush_r+0xb2>
 8007886:	602f      	str	r7, [r5, #0]
 8007888:	e7b2      	b.n	80077f0 <__sflush_r+0x18>
 800788a:	89a3      	ldrh	r3, [r4, #12]
 800788c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007890:	81a3      	strh	r3, [r4, #12]
 8007892:	e7ae      	b.n	80077f2 <__sflush_r+0x1a>
 8007894:	690f      	ldr	r7, [r1, #16]
 8007896:	2f00      	cmp	r7, #0
 8007898:	d0aa      	beq.n	80077f0 <__sflush_r+0x18>
 800789a:	0793      	lsls	r3, r2, #30
 800789c:	bf18      	it	ne
 800789e:	2300      	movne	r3, #0
 80078a0:	680e      	ldr	r6, [r1, #0]
 80078a2:	bf08      	it	eq
 80078a4:	694b      	ldreq	r3, [r1, #20]
 80078a6:	1bf6      	subs	r6, r6, r7
 80078a8:	600f      	str	r7, [r1, #0]
 80078aa:	608b      	str	r3, [r1, #8]
 80078ac:	2e00      	cmp	r6, #0
 80078ae:	dd9f      	ble.n	80077f0 <__sflush_r+0x18>
 80078b0:	4633      	mov	r3, r6
 80078b2:	463a      	mov	r2, r7
 80078b4:	4628      	mov	r0, r5
 80078b6:	6a21      	ldr	r1, [r4, #32]
 80078b8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80078bc:	47e0      	blx	ip
 80078be:	2800      	cmp	r0, #0
 80078c0:	dc06      	bgt.n	80078d0 <__sflush_r+0xf8>
 80078c2:	89a3      	ldrh	r3, [r4, #12]
 80078c4:	f04f 30ff 	mov.w	r0, #4294967295
 80078c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078cc:	81a3      	strh	r3, [r4, #12]
 80078ce:	e790      	b.n	80077f2 <__sflush_r+0x1a>
 80078d0:	4407      	add	r7, r0
 80078d2:	1a36      	subs	r6, r6, r0
 80078d4:	e7ea      	b.n	80078ac <__sflush_r+0xd4>
 80078d6:	bf00      	nop
 80078d8:	dfbffffe 	.word	0xdfbffffe

080078dc <_fflush_r>:
 80078dc:	b538      	push	{r3, r4, r5, lr}
 80078de:	690b      	ldr	r3, [r1, #16]
 80078e0:	4605      	mov	r5, r0
 80078e2:	460c      	mov	r4, r1
 80078e4:	b913      	cbnz	r3, 80078ec <_fflush_r+0x10>
 80078e6:	2500      	movs	r5, #0
 80078e8:	4628      	mov	r0, r5
 80078ea:	bd38      	pop	{r3, r4, r5, pc}
 80078ec:	b118      	cbz	r0, 80078f6 <_fflush_r+0x1a>
 80078ee:	6a03      	ldr	r3, [r0, #32]
 80078f0:	b90b      	cbnz	r3, 80078f6 <_fflush_r+0x1a>
 80078f2:	f7fd f8f3 	bl	8004adc <__sinit>
 80078f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d0f3      	beq.n	80078e6 <_fflush_r+0xa>
 80078fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007900:	07d0      	lsls	r0, r2, #31
 8007902:	d404      	bmi.n	800790e <_fflush_r+0x32>
 8007904:	0599      	lsls	r1, r3, #22
 8007906:	d402      	bmi.n	800790e <_fflush_r+0x32>
 8007908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800790a:	f7fd fa10 	bl	8004d2e <__retarget_lock_acquire_recursive>
 800790e:	4628      	mov	r0, r5
 8007910:	4621      	mov	r1, r4
 8007912:	f7ff ff61 	bl	80077d8 <__sflush_r>
 8007916:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007918:	4605      	mov	r5, r0
 800791a:	07da      	lsls	r2, r3, #31
 800791c:	d4e4      	bmi.n	80078e8 <_fflush_r+0xc>
 800791e:	89a3      	ldrh	r3, [r4, #12]
 8007920:	059b      	lsls	r3, r3, #22
 8007922:	d4e1      	bmi.n	80078e8 <_fflush_r+0xc>
 8007924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007926:	f7fd fa03 	bl	8004d30 <__retarget_lock_release_recursive>
 800792a:	e7dd      	b.n	80078e8 <_fflush_r+0xc>

0800792c <__swbuf_r>:
 800792c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800792e:	460e      	mov	r6, r1
 8007930:	4614      	mov	r4, r2
 8007932:	4605      	mov	r5, r0
 8007934:	b118      	cbz	r0, 800793e <__swbuf_r+0x12>
 8007936:	6a03      	ldr	r3, [r0, #32]
 8007938:	b90b      	cbnz	r3, 800793e <__swbuf_r+0x12>
 800793a:	f7fd f8cf 	bl	8004adc <__sinit>
 800793e:	69a3      	ldr	r3, [r4, #24]
 8007940:	60a3      	str	r3, [r4, #8]
 8007942:	89a3      	ldrh	r3, [r4, #12]
 8007944:	071a      	lsls	r2, r3, #28
 8007946:	d525      	bpl.n	8007994 <__swbuf_r+0x68>
 8007948:	6923      	ldr	r3, [r4, #16]
 800794a:	b31b      	cbz	r3, 8007994 <__swbuf_r+0x68>
 800794c:	6823      	ldr	r3, [r4, #0]
 800794e:	6922      	ldr	r2, [r4, #16]
 8007950:	b2f6      	uxtb	r6, r6
 8007952:	1a98      	subs	r0, r3, r2
 8007954:	6963      	ldr	r3, [r4, #20]
 8007956:	4637      	mov	r7, r6
 8007958:	4283      	cmp	r3, r0
 800795a:	dc04      	bgt.n	8007966 <__swbuf_r+0x3a>
 800795c:	4621      	mov	r1, r4
 800795e:	4628      	mov	r0, r5
 8007960:	f7ff ffbc 	bl	80078dc <_fflush_r>
 8007964:	b9e0      	cbnz	r0, 80079a0 <__swbuf_r+0x74>
 8007966:	68a3      	ldr	r3, [r4, #8]
 8007968:	3b01      	subs	r3, #1
 800796a:	60a3      	str	r3, [r4, #8]
 800796c:	6823      	ldr	r3, [r4, #0]
 800796e:	1c5a      	adds	r2, r3, #1
 8007970:	6022      	str	r2, [r4, #0]
 8007972:	701e      	strb	r6, [r3, #0]
 8007974:	6962      	ldr	r2, [r4, #20]
 8007976:	1c43      	adds	r3, r0, #1
 8007978:	429a      	cmp	r2, r3
 800797a:	d004      	beq.n	8007986 <__swbuf_r+0x5a>
 800797c:	89a3      	ldrh	r3, [r4, #12]
 800797e:	07db      	lsls	r3, r3, #31
 8007980:	d506      	bpl.n	8007990 <__swbuf_r+0x64>
 8007982:	2e0a      	cmp	r6, #10
 8007984:	d104      	bne.n	8007990 <__swbuf_r+0x64>
 8007986:	4621      	mov	r1, r4
 8007988:	4628      	mov	r0, r5
 800798a:	f7ff ffa7 	bl	80078dc <_fflush_r>
 800798e:	b938      	cbnz	r0, 80079a0 <__swbuf_r+0x74>
 8007990:	4638      	mov	r0, r7
 8007992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007994:	4621      	mov	r1, r4
 8007996:	4628      	mov	r0, r5
 8007998:	f000 f806 	bl	80079a8 <__swsetup_r>
 800799c:	2800      	cmp	r0, #0
 800799e:	d0d5      	beq.n	800794c <__swbuf_r+0x20>
 80079a0:	f04f 37ff 	mov.w	r7, #4294967295
 80079a4:	e7f4      	b.n	8007990 <__swbuf_r+0x64>
	...

080079a8 <__swsetup_r>:
 80079a8:	b538      	push	{r3, r4, r5, lr}
 80079aa:	4b2a      	ldr	r3, [pc, #168]	; (8007a54 <__swsetup_r+0xac>)
 80079ac:	4605      	mov	r5, r0
 80079ae:	6818      	ldr	r0, [r3, #0]
 80079b0:	460c      	mov	r4, r1
 80079b2:	b118      	cbz	r0, 80079bc <__swsetup_r+0x14>
 80079b4:	6a03      	ldr	r3, [r0, #32]
 80079b6:	b90b      	cbnz	r3, 80079bc <__swsetup_r+0x14>
 80079b8:	f7fd f890 	bl	8004adc <__sinit>
 80079bc:	89a3      	ldrh	r3, [r4, #12]
 80079be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079c2:	0718      	lsls	r0, r3, #28
 80079c4:	d422      	bmi.n	8007a0c <__swsetup_r+0x64>
 80079c6:	06d9      	lsls	r1, r3, #27
 80079c8:	d407      	bmi.n	80079da <__swsetup_r+0x32>
 80079ca:	2309      	movs	r3, #9
 80079cc:	602b      	str	r3, [r5, #0]
 80079ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80079d2:	f04f 30ff 	mov.w	r0, #4294967295
 80079d6:	81a3      	strh	r3, [r4, #12]
 80079d8:	e034      	b.n	8007a44 <__swsetup_r+0x9c>
 80079da:	0758      	lsls	r0, r3, #29
 80079dc:	d512      	bpl.n	8007a04 <__swsetup_r+0x5c>
 80079de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079e0:	b141      	cbz	r1, 80079f4 <__swsetup_r+0x4c>
 80079e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079e6:	4299      	cmp	r1, r3
 80079e8:	d002      	beq.n	80079f0 <__swsetup_r+0x48>
 80079ea:	4628      	mov	r0, r5
 80079ec:	f7fe f824 	bl	8005a38 <_free_r>
 80079f0:	2300      	movs	r3, #0
 80079f2:	6363      	str	r3, [r4, #52]	; 0x34
 80079f4:	89a3      	ldrh	r3, [r4, #12]
 80079f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80079fa:	81a3      	strh	r3, [r4, #12]
 80079fc:	2300      	movs	r3, #0
 80079fe:	6063      	str	r3, [r4, #4]
 8007a00:	6923      	ldr	r3, [r4, #16]
 8007a02:	6023      	str	r3, [r4, #0]
 8007a04:	89a3      	ldrh	r3, [r4, #12]
 8007a06:	f043 0308 	orr.w	r3, r3, #8
 8007a0a:	81a3      	strh	r3, [r4, #12]
 8007a0c:	6923      	ldr	r3, [r4, #16]
 8007a0e:	b94b      	cbnz	r3, 8007a24 <__swsetup_r+0x7c>
 8007a10:	89a3      	ldrh	r3, [r4, #12]
 8007a12:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a1a:	d003      	beq.n	8007a24 <__swsetup_r+0x7c>
 8007a1c:	4621      	mov	r1, r4
 8007a1e:	4628      	mov	r0, r5
 8007a20:	f000 fc7b 	bl	800831a <__smakebuf_r>
 8007a24:	89a0      	ldrh	r0, [r4, #12]
 8007a26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a2a:	f010 0301 	ands.w	r3, r0, #1
 8007a2e:	d00a      	beq.n	8007a46 <__swsetup_r+0x9e>
 8007a30:	2300      	movs	r3, #0
 8007a32:	60a3      	str	r3, [r4, #8]
 8007a34:	6963      	ldr	r3, [r4, #20]
 8007a36:	425b      	negs	r3, r3
 8007a38:	61a3      	str	r3, [r4, #24]
 8007a3a:	6923      	ldr	r3, [r4, #16]
 8007a3c:	b943      	cbnz	r3, 8007a50 <__swsetup_r+0xa8>
 8007a3e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a42:	d1c4      	bne.n	80079ce <__swsetup_r+0x26>
 8007a44:	bd38      	pop	{r3, r4, r5, pc}
 8007a46:	0781      	lsls	r1, r0, #30
 8007a48:	bf58      	it	pl
 8007a4a:	6963      	ldrpl	r3, [r4, #20]
 8007a4c:	60a3      	str	r3, [r4, #8]
 8007a4e:	e7f4      	b.n	8007a3a <__swsetup_r+0x92>
 8007a50:	2000      	movs	r0, #0
 8007a52:	e7f7      	b.n	8007a44 <__swsetup_r+0x9c>
 8007a54:	20000068 	.word	0x20000068

08007a58 <memmove>:
 8007a58:	4288      	cmp	r0, r1
 8007a5a:	b510      	push	{r4, lr}
 8007a5c:	eb01 0402 	add.w	r4, r1, r2
 8007a60:	d902      	bls.n	8007a68 <memmove+0x10>
 8007a62:	4284      	cmp	r4, r0
 8007a64:	4623      	mov	r3, r4
 8007a66:	d807      	bhi.n	8007a78 <memmove+0x20>
 8007a68:	1e43      	subs	r3, r0, #1
 8007a6a:	42a1      	cmp	r1, r4
 8007a6c:	d008      	beq.n	8007a80 <memmove+0x28>
 8007a6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a76:	e7f8      	b.n	8007a6a <memmove+0x12>
 8007a78:	4601      	mov	r1, r0
 8007a7a:	4402      	add	r2, r0
 8007a7c:	428a      	cmp	r2, r1
 8007a7e:	d100      	bne.n	8007a82 <memmove+0x2a>
 8007a80:	bd10      	pop	{r4, pc}
 8007a82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a8a:	e7f7      	b.n	8007a7c <memmove+0x24>

08007a8c <strncmp>:
 8007a8c:	b510      	push	{r4, lr}
 8007a8e:	b16a      	cbz	r2, 8007aac <strncmp+0x20>
 8007a90:	3901      	subs	r1, #1
 8007a92:	1884      	adds	r4, r0, r2
 8007a94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a98:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d103      	bne.n	8007aa8 <strncmp+0x1c>
 8007aa0:	42a0      	cmp	r0, r4
 8007aa2:	d001      	beq.n	8007aa8 <strncmp+0x1c>
 8007aa4:	2a00      	cmp	r2, #0
 8007aa6:	d1f5      	bne.n	8007a94 <strncmp+0x8>
 8007aa8:	1ad0      	subs	r0, r2, r3
 8007aaa:	bd10      	pop	{r4, pc}
 8007aac:	4610      	mov	r0, r2
 8007aae:	e7fc      	b.n	8007aaa <strncmp+0x1e>

08007ab0 <_sbrk_r>:
 8007ab0:	b538      	push	{r3, r4, r5, lr}
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	4d05      	ldr	r5, [pc, #20]	; (8007acc <_sbrk_r+0x1c>)
 8007ab6:	4604      	mov	r4, r0
 8007ab8:	4608      	mov	r0, r1
 8007aba:	602b      	str	r3, [r5, #0]
 8007abc:	f7fa fa0a 	bl	8001ed4 <_sbrk>
 8007ac0:	1c43      	adds	r3, r0, #1
 8007ac2:	d102      	bne.n	8007aca <_sbrk_r+0x1a>
 8007ac4:	682b      	ldr	r3, [r5, #0]
 8007ac6:	b103      	cbz	r3, 8007aca <_sbrk_r+0x1a>
 8007ac8:	6023      	str	r3, [r4, #0]
 8007aca:	bd38      	pop	{r3, r4, r5, pc}
 8007acc:	200003d0 	.word	0x200003d0

08007ad0 <memcpy>:
 8007ad0:	440a      	add	r2, r1
 8007ad2:	4291      	cmp	r1, r2
 8007ad4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ad8:	d100      	bne.n	8007adc <memcpy+0xc>
 8007ada:	4770      	bx	lr
 8007adc:	b510      	push	{r4, lr}
 8007ade:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ae2:	4291      	cmp	r1, r2
 8007ae4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ae8:	d1f9      	bne.n	8007ade <memcpy+0xe>
 8007aea:	bd10      	pop	{r4, pc}

08007aec <nan>:
 8007aec:	2000      	movs	r0, #0
 8007aee:	4901      	ldr	r1, [pc, #4]	; (8007af4 <nan+0x8>)
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	7ff80000 	.word	0x7ff80000

08007af8 <__assert_func>:
 8007af8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007afa:	4614      	mov	r4, r2
 8007afc:	461a      	mov	r2, r3
 8007afe:	4b09      	ldr	r3, [pc, #36]	; (8007b24 <__assert_func+0x2c>)
 8007b00:	4605      	mov	r5, r0
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	68d8      	ldr	r0, [r3, #12]
 8007b06:	b14c      	cbz	r4, 8007b1c <__assert_func+0x24>
 8007b08:	4b07      	ldr	r3, [pc, #28]	; (8007b28 <__assert_func+0x30>)
 8007b0a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b0e:	9100      	str	r1, [sp, #0]
 8007b10:	462b      	mov	r3, r5
 8007b12:	4906      	ldr	r1, [pc, #24]	; (8007b2c <__assert_func+0x34>)
 8007b14:	f000 fbca 	bl	80082ac <fiprintf>
 8007b18:	f000 fc5e 	bl	80083d8 <abort>
 8007b1c:	4b04      	ldr	r3, [pc, #16]	; (8007b30 <__assert_func+0x38>)
 8007b1e:	461c      	mov	r4, r3
 8007b20:	e7f3      	b.n	8007b0a <__assert_func+0x12>
 8007b22:	bf00      	nop
 8007b24:	20000068 	.word	0x20000068
 8007b28:	0800a05a 	.word	0x0800a05a
 8007b2c:	0800a067 	.word	0x0800a067
 8007b30:	0800a095 	.word	0x0800a095

08007b34 <_calloc_r>:
 8007b34:	b570      	push	{r4, r5, r6, lr}
 8007b36:	fba1 5402 	umull	r5, r4, r1, r2
 8007b3a:	b934      	cbnz	r4, 8007b4a <_calloc_r+0x16>
 8007b3c:	4629      	mov	r1, r5
 8007b3e:	f7fd ffeb 	bl	8005b18 <_malloc_r>
 8007b42:	4606      	mov	r6, r0
 8007b44:	b928      	cbnz	r0, 8007b52 <_calloc_r+0x1e>
 8007b46:	4630      	mov	r0, r6
 8007b48:	bd70      	pop	{r4, r5, r6, pc}
 8007b4a:	220c      	movs	r2, #12
 8007b4c:	2600      	movs	r6, #0
 8007b4e:	6002      	str	r2, [r0, #0]
 8007b50:	e7f9      	b.n	8007b46 <_calloc_r+0x12>
 8007b52:	462a      	mov	r2, r5
 8007b54:	4621      	mov	r1, r4
 8007b56:	f7fd f86c 	bl	8004c32 <memset>
 8007b5a:	e7f4      	b.n	8007b46 <_calloc_r+0x12>

08007b5c <rshift>:
 8007b5c:	6903      	ldr	r3, [r0, #16]
 8007b5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b62:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007b66:	f100 0414 	add.w	r4, r0, #20
 8007b6a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007b6e:	dd46      	ble.n	8007bfe <rshift+0xa2>
 8007b70:	f011 011f 	ands.w	r1, r1, #31
 8007b74:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007b78:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007b7c:	d10c      	bne.n	8007b98 <rshift+0x3c>
 8007b7e:	4629      	mov	r1, r5
 8007b80:	f100 0710 	add.w	r7, r0, #16
 8007b84:	42b1      	cmp	r1, r6
 8007b86:	d335      	bcc.n	8007bf4 <rshift+0x98>
 8007b88:	1a9b      	subs	r3, r3, r2
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	1eea      	subs	r2, r5, #3
 8007b8e:	4296      	cmp	r6, r2
 8007b90:	bf38      	it	cc
 8007b92:	2300      	movcc	r3, #0
 8007b94:	4423      	add	r3, r4
 8007b96:	e015      	b.n	8007bc4 <rshift+0x68>
 8007b98:	46a1      	mov	r9, r4
 8007b9a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007b9e:	f1c1 0820 	rsb	r8, r1, #32
 8007ba2:	40cf      	lsrs	r7, r1
 8007ba4:	f105 0e04 	add.w	lr, r5, #4
 8007ba8:	4576      	cmp	r6, lr
 8007baa:	46f4      	mov	ip, lr
 8007bac:	d816      	bhi.n	8007bdc <rshift+0x80>
 8007bae:	1a9a      	subs	r2, r3, r2
 8007bb0:	0092      	lsls	r2, r2, #2
 8007bb2:	3a04      	subs	r2, #4
 8007bb4:	3501      	adds	r5, #1
 8007bb6:	42ae      	cmp	r6, r5
 8007bb8:	bf38      	it	cc
 8007bba:	2200      	movcc	r2, #0
 8007bbc:	18a3      	adds	r3, r4, r2
 8007bbe:	50a7      	str	r7, [r4, r2]
 8007bc0:	b107      	cbz	r7, 8007bc4 <rshift+0x68>
 8007bc2:	3304      	adds	r3, #4
 8007bc4:	42a3      	cmp	r3, r4
 8007bc6:	eba3 0204 	sub.w	r2, r3, r4
 8007bca:	bf08      	it	eq
 8007bcc:	2300      	moveq	r3, #0
 8007bce:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007bd2:	6102      	str	r2, [r0, #16]
 8007bd4:	bf08      	it	eq
 8007bd6:	6143      	streq	r3, [r0, #20]
 8007bd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bdc:	f8dc c000 	ldr.w	ip, [ip]
 8007be0:	fa0c fc08 	lsl.w	ip, ip, r8
 8007be4:	ea4c 0707 	orr.w	r7, ip, r7
 8007be8:	f849 7b04 	str.w	r7, [r9], #4
 8007bec:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007bf0:	40cf      	lsrs	r7, r1
 8007bf2:	e7d9      	b.n	8007ba8 <rshift+0x4c>
 8007bf4:	f851 cb04 	ldr.w	ip, [r1], #4
 8007bf8:	f847 cf04 	str.w	ip, [r7, #4]!
 8007bfc:	e7c2      	b.n	8007b84 <rshift+0x28>
 8007bfe:	4623      	mov	r3, r4
 8007c00:	e7e0      	b.n	8007bc4 <rshift+0x68>

08007c02 <__hexdig_fun>:
 8007c02:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007c06:	2b09      	cmp	r3, #9
 8007c08:	d802      	bhi.n	8007c10 <__hexdig_fun+0xe>
 8007c0a:	3820      	subs	r0, #32
 8007c0c:	b2c0      	uxtb	r0, r0
 8007c0e:	4770      	bx	lr
 8007c10:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007c14:	2b05      	cmp	r3, #5
 8007c16:	d801      	bhi.n	8007c1c <__hexdig_fun+0x1a>
 8007c18:	3847      	subs	r0, #71	; 0x47
 8007c1a:	e7f7      	b.n	8007c0c <__hexdig_fun+0xa>
 8007c1c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007c20:	2b05      	cmp	r3, #5
 8007c22:	d801      	bhi.n	8007c28 <__hexdig_fun+0x26>
 8007c24:	3827      	subs	r0, #39	; 0x27
 8007c26:	e7f1      	b.n	8007c0c <__hexdig_fun+0xa>
 8007c28:	2000      	movs	r0, #0
 8007c2a:	4770      	bx	lr

08007c2c <__gethex>:
 8007c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c30:	4681      	mov	r9, r0
 8007c32:	468a      	mov	sl, r1
 8007c34:	4617      	mov	r7, r2
 8007c36:	680a      	ldr	r2, [r1, #0]
 8007c38:	b085      	sub	sp, #20
 8007c3a:	f102 0b02 	add.w	fp, r2, #2
 8007c3e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007c42:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007c46:	9302      	str	r3, [sp, #8]
 8007c48:	32fe      	adds	r2, #254	; 0xfe
 8007c4a:	eb02 030b 	add.w	r3, r2, fp
 8007c4e:	46d8      	mov	r8, fp
 8007c50:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8007c54:	9301      	str	r3, [sp, #4]
 8007c56:	2830      	cmp	r0, #48	; 0x30
 8007c58:	d0f7      	beq.n	8007c4a <__gethex+0x1e>
 8007c5a:	f7ff ffd2 	bl	8007c02 <__hexdig_fun>
 8007c5e:	4604      	mov	r4, r0
 8007c60:	2800      	cmp	r0, #0
 8007c62:	d138      	bne.n	8007cd6 <__gethex+0xaa>
 8007c64:	2201      	movs	r2, #1
 8007c66:	4640      	mov	r0, r8
 8007c68:	49a7      	ldr	r1, [pc, #668]	; (8007f08 <__gethex+0x2dc>)
 8007c6a:	f7ff ff0f 	bl	8007a8c <strncmp>
 8007c6e:	4606      	mov	r6, r0
 8007c70:	2800      	cmp	r0, #0
 8007c72:	d169      	bne.n	8007d48 <__gethex+0x11c>
 8007c74:	f898 0001 	ldrb.w	r0, [r8, #1]
 8007c78:	465d      	mov	r5, fp
 8007c7a:	f7ff ffc2 	bl	8007c02 <__hexdig_fun>
 8007c7e:	2800      	cmp	r0, #0
 8007c80:	d064      	beq.n	8007d4c <__gethex+0x120>
 8007c82:	465a      	mov	r2, fp
 8007c84:	7810      	ldrb	r0, [r2, #0]
 8007c86:	4690      	mov	r8, r2
 8007c88:	2830      	cmp	r0, #48	; 0x30
 8007c8a:	f102 0201 	add.w	r2, r2, #1
 8007c8e:	d0f9      	beq.n	8007c84 <__gethex+0x58>
 8007c90:	f7ff ffb7 	bl	8007c02 <__hexdig_fun>
 8007c94:	2301      	movs	r3, #1
 8007c96:	fab0 f480 	clz	r4, r0
 8007c9a:	465e      	mov	r6, fp
 8007c9c:	0964      	lsrs	r4, r4, #5
 8007c9e:	9301      	str	r3, [sp, #4]
 8007ca0:	4642      	mov	r2, r8
 8007ca2:	4615      	mov	r5, r2
 8007ca4:	7828      	ldrb	r0, [r5, #0]
 8007ca6:	3201      	adds	r2, #1
 8007ca8:	f7ff ffab 	bl	8007c02 <__hexdig_fun>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	d1f8      	bne.n	8007ca2 <__gethex+0x76>
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	4994      	ldr	r1, [pc, #592]	; (8007f08 <__gethex+0x2dc>)
 8007cb6:	f7ff fee9 	bl	8007a8c <strncmp>
 8007cba:	b978      	cbnz	r0, 8007cdc <__gethex+0xb0>
 8007cbc:	b946      	cbnz	r6, 8007cd0 <__gethex+0xa4>
 8007cbe:	1c6e      	adds	r6, r5, #1
 8007cc0:	4632      	mov	r2, r6
 8007cc2:	4615      	mov	r5, r2
 8007cc4:	7828      	ldrb	r0, [r5, #0]
 8007cc6:	3201      	adds	r2, #1
 8007cc8:	f7ff ff9b 	bl	8007c02 <__hexdig_fun>
 8007ccc:	2800      	cmp	r0, #0
 8007cce:	d1f8      	bne.n	8007cc2 <__gethex+0x96>
 8007cd0:	1b73      	subs	r3, r6, r5
 8007cd2:	009e      	lsls	r6, r3, #2
 8007cd4:	e004      	b.n	8007ce0 <__gethex+0xb4>
 8007cd6:	2400      	movs	r4, #0
 8007cd8:	4626      	mov	r6, r4
 8007cda:	e7e1      	b.n	8007ca0 <__gethex+0x74>
 8007cdc:	2e00      	cmp	r6, #0
 8007cde:	d1f7      	bne.n	8007cd0 <__gethex+0xa4>
 8007ce0:	782b      	ldrb	r3, [r5, #0]
 8007ce2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007ce6:	2b50      	cmp	r3, #80	; 0x50
 8007ce8:	d13d      	bne.n	8007d66 <__gethex+0x13a>
 8007cea:	786b      	ldrb	r3, [r5, #1]
 8007cec:	2b2b      	cmp	r3, #43	; 0x2b
 8007cee:	d02f      	beq.n	8007d50 <__gethex+0x124>
 8007cf0:	2b2d      	cmp	r3, #45	; 0x2d
 8007cf2:	d031      	beq.n	8007d58 <__gethex+0x12c>
 8007cf4:	f04f 0b00 	mov.w	fp, #0
 8007cf8:	1c69      	adds	r1, r5, #1
 8007cfa:	7808      	ldrb	r0, [r1, #0]
 8007cfc:	f7ff ff81 	bl	8007c02 <__hexdig_fun>
 8007d00:	1e42      	subs	r2, r0, #1
 8007d02:	b2d2      	uxtb	r2, r2
 8007d04:	2a18      	cmp	r2, #24
 8007d06:	d82e      	bhi.n	8007d66 <__gethex+0x13a>
 8007d08:	f1a0 0210 	sub.w	r2, r0, #16
 8007d0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007d10:	f7ff ff77 	bl	8007c02 <__hexdig_fun>
 8007d14:	f100 3cff 	add.w	ip, r0, #4294967295
 8007d18:	fa5f fc8c 	uxtb.w	ip, ip
 8007d1c:	f1bc 0f18 	cmp.w	ip, #24
 8007d20:	d91d      	bls.n	8007d5e <__gethex+0x132>
 8007d22:	f1bb 0f00 	cmp.w	fp, #0
 8007d26:	d000      	beq.n	8007d2a <__gethex+0xfe>
 8007d28:	4252      	negs	r2, r2
 8007d2a:	4416      	add	r6, r2
 8007d2c:	f8ca 1000 	str.w	r1, [sl]
 8007d30:	b1dc      	cbz	r4, 8007d6a <__gethex+0x13e>
 8007d32:	9b01      	ldr	r3, [sp, #4]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	bf14      	ite	ne
 8007d38:	f04f 0800 	movne.w	r8, #0
 8007d3c:	f04f 0806 	moveq.w	r8, #6
 8007d40:	4640      	mov	r0, r8
 8007d42:	b005      	add	sp, #20
 8007d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d48:	4645      	mov	r5, r8
 8007d4a:	4626      	mov	r6, r4
 8007d4c:	2401      	movs	r4, #1
 8007d4e:	e7c7      	b.n	8007ce0 <__gethex+0xb4>
 8007d50:	f04f 0b00 	mov.w	fp, #0
 8007d54:	1ca9      	adds	r1, r5, #2
 8007d56:	e7d0      	b.n	8007cfa <__gethex+0xce>
 8007d58:	f04f 0b01 	mov.w	fp, #1
 8007d5c:	e7fa      	b.n	8007d54 <__gethex+0x128>
 8007d5e:	230a      	movs	r3, #10
 8007d60:	fb03 0002 	mla	r0, r3, r2, r0
 8007d64:	e7d0      	b.n	8007d08 <__gethex+0xdc>
 8007d66:	4629      	mov	r1, r5
 8007d68:	e7e0      	b.n	8007d2c <__gethex+0x100>
 8007d6a:	4621      	mov	r1, r4
 8007d6c:	eba5 0308 	sub.w	r3, r5, r8
 8007d70:	3b01      	subs	r3, #1
 8007d72:	2b07      	cmp	r3, #7
 8007d74:	dc0a      	bgt.n	8007d8c <__gethex+0x160>
 8007d76:	4648      	mov	r0, r9
 8007d78:	f7fd ff5a 	bl	8005c30 <_Balloc>
 8007d7c:	4604      	mov	r4, r0
 8007d7e:	b940      	cbnz	r0, 8007d92 <__gethex+0x166>
 8007d80:	4602      	mov	r2, r0
 8007d82:	21e4      	movs	r1, #228	; 0xe4
 8007d84:	4b61      	ldr	r3, [pc, #388]	; (8007f0c <__gethex+0x2e0>)
 8007d86:	4862      	ldr	r0, [pc, #392]	; (8007f10 <__gethex+0x2e4>)
 8007d88:	f7ff feb6 	bl	8007af8 <__assert_func>
 8007d8c:	3101      	adds	r1, #1
 8007d8e:	105b      	asrs	r3, r3, #1
 8007d90:	e7ef      	b.n	8007d72 <__gethex+0x146>
 8007d92:	2300      	movs	r3, #0
 8007d94:	469b      	mov	fp, r3
 8007d96:	f100 0a14 	add.w	sl, r0, #20
 8007d9a:	f8cd a004 	str.w	sl, [sp, #4]
 8007d9e:	45a8      	cmp	r8, r5
 8007da0:	d344      	bcc.n	8007e2c <__gethex+0x200>
 8007da2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007da6:	4658      	mov	r0, fp
 8007da8:	f848 bb04 	str.w	fp, [r8], #4
 8007dac:	eba8 080a 	sub.w	r8, r8, sl
 8007db0:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8007db4:	6122      	str	r2, [r4, #16]
 8007db6:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8007dba:	f7fe f82b 	bl	8005e14 <__hi0bits>
 8007dbe:	683d      	ldr	r5, [r7, #0]
 8007dc0:	eba8 0800 	sub.w	r8, r8, r0
 8007dc4:	45a8      	cmp	r8, r5
 8007dc6:	dd59      	ble.n	8007e7c <__gethex+0x250>
 8007dc8:	eba8 0805 	sub.w	r8, r8, r5
 8007dcc:	4641      	mov	r1, r8
 8007dce:	4620      	mov	r0, r4
 8007dd0:	f7fe fba9 	bl	8006526 <__any_on>
 8007dd4:	4683      	mov	fp, r0
 8007dd6:	b1b8      	cbz	r0, 8007e08 <__gethex+0x1dc>
 8007dd8:	f04f 0b01 	mov.w	fp, #1
 8007ddc:	f108 33ff 	add.w	r3, r8, #4294967295
 8007de0:	1159      	asrs	r1, r3, #5
 8007de2:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007de6:	f003 021f 	and.w	r2, r3, #31
 8007dea:	fa0b f202 	lsl.w	r2, fp, r2
 8007dee:	420a      	tst	r2, r1
 8007df0:	d00a      	beq.n	8007e08 <__gethex+0x1dc>
 8007df2:	455b      	cmp	r3, fp
 8007df4:	dd06      	ble.n	8007e04 <__gethex+0x1d8>
 8007df6:	4620      	mov	r0, r4
 8007df8:	f1a8 0102 	sub.w	r1, r8, #2
 8007dfc:	f7fe fb93 	bl	8006526 <__any_on>
 8007e00:	2800      	cmp	r0, #0
 8007e02:	d138      	bne.n	8007e76 <__gethex+0x24a>
 8007e04:	f04f 0b02 	mov.w	fp, #2
 8007e08:	4641      	mov	r1, r8
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	f7ff fea6 	bl	8007b5c <rshift>
 8007e10:	4446      	add	r6, r8
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	42b3      	cmp	r3, r6
 8007e16:	da41      	bge.n	8007e9c <__gethex+0x270>
 8007e18:	4621      	mov	r1, r4
 8007e1a:	4648      	mov	r0, r9
 8007e1c:	f7fd ff48 	bl	8005cb0 <_Bfree>
 8007e20:	2300      	movs	r3, #0
 8007e22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e24:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8007e28:	6013      	str	r3, [r2, #0]
 8007e2a:	e789      	b.n	8007d40 <__gethex+0x114>
 8007e2c:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8007e30:	2a2e      	cmp	r2, #46	; 0x2e
 8007e32:	d014      	beq.n	8007e5e <__gethex+0x232>
 8007e34:	2b20      	cmp	r3, #32
 8007e36:	d106      	bne.n	8007e46 <__gethex+0x21a>
 8007e38:	9b01      	ldr	r3, [sp, #4]
 8007e3a:	f843 bb04 	str.w	fp, [r3], #4
 8007e3e:	f04f 0b00 	mov.w	fp, #0
 8007e42:	9301      	str	r3, [sp, #4]
 8007e44:	465b      	mov	r3, fp
 8007e46:	7828      	ldrb	r0, [r5, #0]
 8007e48:	9303      	str	r3, [sp, #12]
 8007e4a:	f7ff feda 	bl	8007c02 <__hexdig_fun>
 8007e4e:	9b03      	ldr	r3, [sp, #12]
 8007e50:	f000 000f 	and.w	r0, r0, #15
 8007e54:	4098      	lsls	r0, r3
 8007e56:	ea4b 0b00 	orr.w	fp, fp, r0
 8007e5a:	3304      	adds	r3, #4
 8007e5c:	e79f      	b.n	8007d9e <__gethex+0x172>
 8007e5e:	45a8      	cmp	r8, r5
 8007e60:	d8e8      	bhi.n	8007e34 <__gethex+0x208>
 8007e62:	2201      	movs	r2, #1
 8007e64:	4628      	mov	r0, r5
 8007e66:	4928      	ldr	r1, [pc, #160]	; (8007f08 <__gethex+0x2dc>)
 8007e68:	9303      	str	r3, [sp, #12]
 8007e6a:	f7ff fe0f 	bl	8007a8c <strncmp>
 8007e6e:	9b03      	ldr	r3, [sp, #12]
 8007e70:	2800      	cmp	r0, #0
 8007e72:	d1df      	bne.n	8007e34 <__gethex+0x208>
 8007e74:	e793      	b.n	8007d9e <__gethex+0x172>
 8007e76:	f04f 0b03 	mov.w	fp, #3
 8007e7a:	e7c5      	b.n	8007e08 <__gethex+0x1dc>
 8007e7c:	da0b      	bge.n	8007e96 <__gethex+0x26a>
 8007e7e:	eba5 0808 	sub.w	r8, r5, r8
 8007e82:	4621      	mov	r1, r4
 8007e84:	4642      	mov	r2, r8
 8007e86:	4648      	mov	r0, r9
 8007e88:	f7fe f92a 	bl	80060e0 <__lshift>
 8007e8c:	4604      	mov	r4, r0
 8007e8e:	eba6 0608 	sub.w	r6, r6, r8
 8007e92:	f100 0a14 	add.w	sl, r0, #20
 8007e96:	f04f 0b00 	mov.w	fp, #0
 8007e9a:	e7ba      	b.n	8007e12 <__gethex+0x1e6>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	42b3      	cmp	r3, r6
 8007ea0:	dd74      	ble.n	8007f8c <__gethex+0x360>
 8007ea2:	1b9e      	subs	r6, r3, r6
 8007ea4:	42b5      	cmp	r5, r6
 8007ea6:	dc35      	bgt.n	8007f14 <__gethex+0x2e8>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	d023      	beq.n	8007ef6 <__gethex+0x2ca>
 8007eae:	2b03      	cmp	r3, #3
 8007eb0:	d025      	beq.n	8007efe <__gethex+0x2d2>
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d115      	bne.n	8007ee2 <__gethex+0x2b6>
 8007eb6:	42b5      	cmp	r5, r6
 8007eb8:	d113      	bne.n	8007ee2 <__gethex+0x2b6>
 8007eba:	2d01      	cmp	r5, #1
 8007ebc:	d10b      	bne.n	8007ed6 <__gethex+0x2aa>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	9a02      	ldr	r2, [sp, #8]
 8007ec2:	f04f 0862 	mov.w	r8, #98	; 0x62
 8007ec6:	6013      	str	r3, [r2, #0]
 8007ec8:	2301      	movs	r3, #1
 8007eca:	6123      	str	r3, [r4, #16]
 8007ecc:	f8ca 3000 	str.w	r3, [sl]
 8007ed0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ed2:	601c      	str	r4, [r3, #0]
 8007ed4:	e734      	b.n	8007d40 <__gethex+0x114>
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	1e69      	subs	r1, r5, #1
 8007eda:	f7fe fb24 	bl	8006526 <__any_on>
 8007ede:	2800      	cmp	r0, #0
 8007ee0:	d1ed      	bne.n	8007ebe <__gethex+0x292>
 8007ee2:	4621      	mov	r1, r4
 8007ee4:	4648      	mov	r0, r9
 8007ee6:	f7fd fee3 	bl	8005cb0 <_Bfree>
 8007eea:	2300      	movs	r3, #0
 8007eec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007eee:	f04f 0850 	mov.w	r8, #80	; 0x50
 8007ef2:	6013      	str	r3, [r2, #0]
 8007ef4:	e724      	b.n	8007d40 <__gethex+0x114>
 8007ef6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d1f2      	bne.n	8007ee2 <__gethex+0x2b6>
 8007efc:	e7df      	b.n	8007ebe <__gethex+0x292>
 8007efe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1dc      	bne.n	8007ebe <__gethex+0x292>
 8007f04:	e7ed      	b.n	8007ee2 <__gethex+0x2b6>
 8007f06:	bf00      	nop
 8007f08:	08009eec 	.word	0x08009eec
 8007f0c:	08009d7f 	.word	0x08009d7f
 8007f10:	0800a096 	.word	0x0800a096
 8007f14:	f106 38ff 	add.w	r8, r6, #4294967295
 8007f18:	f1bb 0f00 	cmp.w	fp, #0
 8007f1c:	d133      	bne.n	8007f86 <__gethex+0x35a>
 8007f1e:	f1b8 0f00 	cmp.w	r8, #0
 8007f22:	d004      	beq.n	8007f2e <__gethex+0x302>
 8007f24:	4641      	mov	r1, r8
 8007f26:	4620      	mov	r0, r4
 8007f28:	f7fe fafd 	bl	8006526 <__any_on>
 8007f2c:	4683      	mov	fp, r0
 8007f2e:	2301      	movs	r3, #1
 8007f30:	ea4f 1268 	mov.w	r2, r8, asr #5
 8007f34:	f008 081f 	and.w	r8, r8, #31
 8007f38:	fa03 f308 	lsl.w	r3, r3, r8
 8007f3c:	f04f 0802 	mov.w	r8, #2
 8007f40:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007f44:	4631      	mov	r1, r6
 8007f46:	4213      	tst	r3, r2
 8007f48:	4620      	mov	r0, r4
 8007f4a:	bf18      	it	ne
 8007f4c:	f04b 0b02 	orrne.w	fp, fp, #2
 8007f50:	1bad      	subs	r5, r5, r6
 8007f52:	f7ff fe03 	bl	8007b5c <rshift>
 8007f56:	687e      	ldr	r6, [r7, #4]
 8007f58:	f1bb 0f00 	cmp.w	fp, #0
 8007f5c:	d04a      	beq.n	8007ff4 <__gethex+0x3c8>
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d016      	beq.n	8007f92 <__gethex+0x366>
 8007f64:	2b03      	cmp	r3, #3
 8007f66:	d018      	beq.n	8007f9a <__gethex+0x36e>
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d109      	bne.n	8007f80 <__gethex+0x354>
 8007f6c:	f01b 0f02 	tst.w	fp, #2
 8007f70:	d006      	beq.n	8007f80 <__gethex+0x354>
 8007f72:	f8da 3000 	ldr.w	r3, [sl]
 8007f76:	ea4b 0b03 	orr.w	fp, fp, r3
 8007f7a:	f01b 0f01 	tst.w	fp, #1
 8007f7e:	d10f      	bne.n	8007fa0 <__gethex+0x374>
 8007f80:	f048 0810 	orr.w	r8, r8, #16
 8007f84:	e036      	b.n	8007ff4 <__gethex+0x3c8>
 8007f86:	f04f 0b01 	mov.w	fp, #1
 8007f8a:	e7d0      	b.n	8007f2e <__gethex+0x302>
 8007f8c:	f04f 0801 	mov.w	r8, #1
 8007f90:	e7e2      	b.n	8007f58 <__gethex+0x32c>
 8007f92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f94:	f1c3 0301 	rsb	r3, r3, #1
 8007f98:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d0ef      	beq.n	8007f80 <__gethex+0x354>
 8007fa0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007fa4:	f104 0214 	add.w	r2, r4, #20
 8007fa8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8007fac:	9301      	str	r3, [sp, #4]
 8007fae:	2300      	movs	r3, #0
 8007fb0:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8007fb4:	4694      	mov	ip, r2
 8007fb6:	f852 1b04 	ldr.w	r1, [r2], #4
 8007fba:	f1b1 3fff 	cmp.w	r1, #4294967295
 8007fbe:	d01e      	beq.n	8007ffe <__gethex+0x3d2>
 8007fc0:	3101      	adds	r1, #1
 8007fc2:	f8cc 1000 	str.w	r1, [ip]
 8007fc6:	f1b8 0f02 	cmp.w	r8, #2
 8007fca:	f104 0214 	add.w	r2, r4, #20
 8007fce:	d13d      	bne.n	800804c <__gethex+0x420>
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	42ab      	cmp	r3, r5
 8007fd6:	d10b      	bne.n	8007ff0 <__gethex+0x3c4>
 8007fd8:	2301      	movs	r3, #1
 8007fda:	1169      	asrs	r1, r5, #5
 8007fdc:	f005 051f 	and.w	r5, r5, #31
 8007fe0:	fa03 f505 	lsl.w	r5, r3, r5
 8007fe4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007fe8:	421d      	tst	r5, r3
 8007fea:	bf18      	it	ne
 8007fec:	f04f 0801 	movne.w	r8, #1
 8007ff0:	f048 0820 	orr.w	r8, r8, #32
 8007ff4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ff6:	601c      	str	r4, [r3, #0]
 8007ff8:	9b02      	ldr	r3, [sp, #8]
 8007ffa:	601e      	str	r6, [r3, #0]
 8007ffc:	e6a0      	b.n	8007d40 <__gethex+0x114>
 8007ffe:	4290      	cmp	r0, r2
 8008000:	f842 3c04 	str.w	r3, [r2, #-4]
 8008004:	d8d6      	bhi.n	8007fb4 <__gethex+0x388>
 8008006:	68a2      	ldr	r2, [r4, #8]
 8008008:	4593      	cmp	fp, r2
 800800a:	db17      	blt.n	800803c <__gethex+0x410>
 800800c:	6861      	ldr	r1, [r4, #4]
 800800e:	4648      	mov	r0, r9
 8008010:	3101      	adds	r1, #1
 8008012:	f7fd fe0d 	bl	8005c30 <_Balloc>
 8008016:	4682      	mov	sl, r0
 8008018:	b918      	cbnz	r0, 8008022 <__gethex+0x3f6>
 800801a:	4602      	mov	r2, r0
 800801c:	2184      	movs	r1, #132	; 0x84
 800801e:	4b1a      	ldr	r3, [pc, #104]	; (8008088 <__gethex+0x45c>)
 8008020:	e6b1      	b.n	8007d86 <__gethex+0x15a>
 8008022:	6922      	ldr	r2, [r4, #16]
 8008024:	f104 010c 	add.w	r1, r4, #12
 8008028:	3202      	adds	r2, #2
 800802a:	0092      	lsls	r2, r2, #2
 800802c:	300c      	adds	r0, #12
 800802e:	f7ff fd4f 	bl	8007ad0 <memcpy>
 8008032:	4621      	mov	r1, r4
 8008034:	4648      	mov	r0, r9
 8008036:	f7fd fe3b 	bl	8005cb0 <_Bfree>
 800803a:	4654      	mov	r4, sl
 800803c:	6922      	ldr	r2, [r4, #16]
 800803e:	1c51      	adds	r1, r2, #1
 8008040:	6121      	str	r1, [r4, #16]
 8008042:	2101      	movs	r1, #1
 8008044:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008048:	6151      	str	r1, [r2, #20]
 800804a:	e7bc      	b.n	8007fc6 <__gethex+0x39a>
 800804c:	6921      	ldr	r1, [r4, #16]
 800804e:	4559      	cmp	r1, fp
 8008050:	dd0b      	ble.n	800806a <__gethex+0x43e>
 8008052:	2101      	movs	r1, #1
 8008054:	4620      	mov	r0, r4
 8008056:	f7ff fd81 	bl	8007b5c <rshift>
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	3601      	adds	r6, #1
 800805e:	42b3      	cmp	r3, r6
 8008060:	f6ff aeda 	blt.w	8007e18 <__gethex+0x1ec>
 8008064:	f04f 0801 	mov.w	r8, #1
 8008068:	e7c2      	b.n	8007ff0 <__gethex+0x3c4>
 800806a:	f015 051f 	ands.w	r5, r5, #31
 800806e:	d0f9      	beq.n	8008064 <__gethex+0x438>
 8008070:	9b01      	ldr	r3, [sp, #4]
 8008072:	f1c5 0520 	rsb	r5, r5, #32
 8008076:	441a      	add	r2, r3
 8008078:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800807c:	f7fd feca 	bl	8005e14 <__hi0bits>
 8008080:	42a8      	cmp	r0, r5
 8008082:	dbe6      	blt.n	8008052 <__gethex+0x426>
 8008084:	e7ee      	b.n	8008064 <__gethex+0x438>
 8008086:	bf00      	nop
 8008088:	08009d7f 	.word	0x08009d7f

0800808c <L_shift>:
 800808c:	f1c2 0208 	rsb	r2, r2, #8
 8008090:	0092      	lsls	r2, r2, #2
 8008092:	b570      	push	{r4, r5, r6, lr}
 8008094:	f1c2 0620 	rsb	r6, r2, #32
 8008098:	6843      	ldr	r3, [r0, #4]
 800809a:	6804      	ldr	r4, [r0, #0]
 800809c:	fa03 f506 	lsl.w	r5, r3, r6
 80080a0:	432c      	orrs	r4, r5
 80080a2:	40d3      	lsrs	r3, r2
 80080a4:	6004      	str	r4, [r0, #0]
 80080a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80080aa:	4288      	cmp	r0, r1
 80080ac:	d3f4      	bcc.n	8008098 <L_shift+0xc>
 80080ae:	bd70      	pop	{r4, r5, r6, pc}

080080b0 <__match>:
 80080b0:	b530      	push	{r4, r5, lr}
 80080b2:	6803      	ldr	r3, [r0, #0]
 80080b4:	3301      	adds	r3, #1
 80080b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080ba:	b914      	cbnz	r4, 80080c2 <__match+0x12>
 80080bc:	6003      	str	r3, [r0, #0]
 80080be:	2001      	movs	r0, #1
 80080c0:	bd30      	pop	{r4, r5, pc}
 80080c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80080ca:	2d19      	cmp	r5, #25
 80080cc:	bf98      	it	ls
 80080ce:	3220      	addls	r2, #32
 80080d0:	42a2      	cmp	r2, r4
 80080d2:	d0f0      	beq.n	80080b6 <__match+0x6>
 80080d4:	2000      	movs	r0, #0
 80080d6:	e7f3      	b.n	80080c0 <__match+0x10>

080080d8 <__hexnan>:
 80080d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080dc:	2500      	movs	r5, #0
 80080de:	680b      	ldr	r3, [r1, #0]
 80080e0:	4682      	mov	sl, r0
 80080e2:	115e      	asrs	r6, r3, #5
 80080e4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80080e8:	f013 031f 	ands.w	r3, r3, #31
 80080ec:	bf18      	it	ne
 80080ee:	3604      	addne	r6, #4
 80080f0:	1f37      	subs	r7, r6, #4
 80080f2:	4690      	mov	r8, r2
 80080f4:	46b9      	mov	r9, r7
 80080f6:	463c      	mov	r4, r7
 80080f8:	46ab      	mov	fp, r5
 80080fa:	b087      	sub	sp, #28
 80080fc:	6801      	ldr	r1, [r0, #0]
 80080fe:	9301      	str	r3, [sp, #4]
 8008100:	f846 5c04 	str.w	r5, [r6, #-4]
 8008104:	9502      	str	r5, [sp, #8]
 8008106:	784a      	ldrb	r2, [r1, #1]
 8008108:	1c4b      	adds	r3, r1, #1
 800810a:	9303      	str	r3, [sp, #12]
 800810c:	b342      	cbz	r2, 8008160 <__hexnan+0x88>
 800810e:	4610      	mov	r0, r2
 8008110:	9105      	str	r1, [sp, #20]
 8008112:	9204      	str	r2, [sp, #16]
 8008114:	f7ff fd75 	bl	8007c02 <__hexdig_fun>
 8008118:	2800      	cmp	r0, #0
 800811a:	d14f      	bne.n	80081bc <__hexnan+0xe4>
 800811c:	9a04      	ldr	r2, [sp, #16]
 800811e:	9905      	ldr	r1, [sp, #20]
 8008120:	2a20      	cmp	r2, #32
 8008122:	d818      	bhi.n	8008156 <__hexnan+0x7e>
 8008124:	9b02      	ldr	r3, [sp, #8]
 8008126:	459b      	cmp	fp, r3
 8008128:	dd13      	ble.n	8008152 <__hexnan+0x7a>
 800812a:	454c      	cmp	r4, r9
 800812c:	d206      	bcs.n	800813c <__hexnan+0x64>
 800812e:	2d07      	cmp	r5, #7
 8008130:	dc04      	bgt.n	800813c <__hexnan+0x64>
 8008132:	462a      	mov	r2, r5
 8008134:	4649      	mov	r1, r9
 8008136:	4620      	mov	r0, r4
 8008138:	f7ff ffa8 	bl	800808c <L_shift>
 800813c:	4544      	cmp	r4, r8
 800813e:	d950      	bls.n	80081e2 <__hexnan+0x10a>
 8008140:	2300      	movs	r3, #0
 8008142:	f1a4 0904 	sub.w	r9, r4, #4
 8008146:	f844 3c04 	str.w	r3, [r4, #-4]
 800814a:	461d      	mov	r5, r3
 800814c:	464c      	mov	r4, r9
 800814e:	f8cd b008 	str.w	fp, [sp, #8]
 8008152:	9903      	ldr	r1, [sp, #12]
 8008154:	e7d7      	b.n	8008106 <__hexnan+0x2e>
 8008156:	2a29      	cmp	r2, #41	; 0x29
 8008158:	d155      	bne.n	8008206 <__hexnan+0x12e>
 800815a:	3102      	adds	r1, #2
 800815c:	f8ca 1000 	str.w	r1, [sl]
 8008160:	f1bb 0f00 	cmp.w	fp, #0
 8008164:	d04f      	beq.n	8008206 <__hexnan+0x12e>
 8008166:	454c      	cmp	r4, r9
 8008168:	d206      	bcs.n	8008178 <__hexnan+0xa0>
 800816a:	2d07      	cmp	r5, #7
 800816c:	dc04      	bgt.n	8008178 <__hexnan+0xa0>
 800816e:	462a      	mov	r2, r5
 8008170:	4649      	mov	r1, r9
 8008172:	4620      	mov	r0, r4
 8008174:	f7ff ff8a 	bl	800808c <L_shift>
 8008178:	4544      	cmp	r4, r8
 800817a:	d934      	bls.n	80081e6 <__hexnan+0x10e>
 800817c:	4623      	mov	r3, r4
 800817e:	f1a8 0204 	sub.w	r2, r8, #4
 8008182:	f853 1b04 	ldr.w	r1, [r3], #4
 8008186:	429f      	cmp	r7, r3
 8008188:	f842 1f04 	str.w	r1, [r2, #4]!
 800818c:	d2f9      	bcs.n	8008182 <__hexnan+0xaa>
 800818e:	1b3b      	subs	r3, r7, r4
 8008190:	f023 0303 	bic.w	r3, r3, #3
 8008194:	3304      	adds	r3, #4
 8008196:	3e03      	subs	r6, #3
 8008198:	3401      	adds	r4, #1
 800819a:	42a6      	cmp	r6, r4
 800819c:	bf38      	it	cc
 800819e:	2304      	movcc	r3, #4
 80081a0:	2200      	movs	r2, #0
 80081a2:	4443      	add	r3, r8
 80081a4:	f843 2b04 	str.w	r2, [r3], #4
 80081a8:	429f      	cmp	r7, r3
 80081aa:	d2fb      	bcs.n	80081a4 <__hexnan+0xcc>
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	b91b      	cbnz	r3, 80081b8 <__hexnan+0xe0>
 80081b0:	4547      	cmp	r7, r8
 80081b2:	d126      	bne.n	8008202 <__hexnan+0x12a>
 80081b4:	2301      	movs	r3, #1
 80081b6:	603b      	str	r3, [r7, #0]
 80081b8:	2005      	movs	r0, #5
 80081ba:	e025      	b.n	8008208 <__hexnan+0x130>
 80081bc:	3501      	adds	r5, #1
 80081be:	2d08      	cmp	r5, #8
 80081c0:	f10b 0b01 	add.w	fp, fp, #1
 80081c4:	dd06      	ble.n	80081d4 <__hexnan+0xfc>
 80081c6:	4544      	cmp	r4, r8
 80081c8:	d9c3      	bls.n	8008152 <__hexnan+0x7a>
 80081ca:	2300      	movs	r3, #0
 80081cc:	2501      	movs	r5, #1
 80081ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80081d2:	3c04      	subs	r4, #4
 80081d4:	6822      	ldr	r2, [r4, #0]
 80081d6:	f000 000f 	and.w	r0, r0, #15
 80081da:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80081de:	6020      	str	r0, [r4, #0]
 80081e0:	e7b7      	b.n	8008152 <__hexnan+0x7a>
 80081e2:	2508      	movs	r5, #8
 80081e4:	e7b5      	b.n	8008152 <__hexnan+0x7a>
 80081e6:	9b01      	ldr	r3, [sp, #4]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d0df      	beq.n	80081ac <__hexnan+0xd4>
 80081ec:	f04f 32ff 	mov.w	r2, #4294967295
 80081f0:	f1c3 0320 	rsb	r3, r3, #32
 80081f4:	40da      	lsrs	r2, r3
 80081f6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80081fa:	4013      	ands	r3, r2
 80081fc:	f846 3c04 	str.w	r3, [r6, #-4]
 8008200:	e7d4      	b.n	80081ac <__hexnan+0xd4>
 8008202:	3f04      	subs	r7, #4
 8008204:	e7d2      	b.n	80081ac <__hexnan+0xd4>
 8008206:	2004      	movs	r0, #4
 8008208:	b007      	add	sp, #28
 800820a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800820e <__ascii_mbtowc>:
 800820e:	b082      	sub	sp, #8
 8008210:	b901      	cbnz	r1, 8008214 <__ascii_mbtowc+0x6>
 8008212:	a901      	add	r1, sp, #4
 8008214:	b142      	cbz	r2, 8008228 <__ascii_mbtowc+0x1a>
 8008216:	b14b      	cbz	r3, 800822c <__ascii_mbtowc+0x1e>
 8008218:	7813      	ldrb	r3, [r2, #0]
 800821a:	600b      	str	r3, [r1, #0]
 800821c:	7812      	ldrb	r2, [r2, #0]
 800821e:	1e10      	subs	r0, r2, #0
 8008220:	bf18      	it	ne
 8008222:	2001      	movne	r0, #1
 8008224:	b002      	add	sp, #8
 8008226:	4770      	bx	lr
 8008228:	4610      	mov	r0, r2
 800822a:	e7fb      	b.n	8008224 <__ascii_mbtowc+0x16>
 800822c:	f06f 0001 	mvn.w	r0, #1
 8008230:	e7f8      	b.n	8008224 <__ascii_mbtowc+0x16>

08008232 <_realloc_r>:
 8008232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008236:	4680      	mov	r8, r0
 8008238:	4614      	mov	r4, r2
 800823a:	460e      	mov	r6, r1
 800823c:	b921      	cbnz	r1, 8008248 <_realloc_r+0x16>
 800823e:	4611      	mov	r1, r2
 8008240:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008244:	f7fd bc68 	b.w	8005b18 <_malloc_r>
 8008248:	b92a      	cbnz	r2, 8008256 <_realloc_r+0x24>
 800824a:	f7fd fbf5 	bl	8005a38 <_free_r>
 800824e:	4625      	mov	r5, r4
 8008250:	4628      	mov	r0, r5
 8008252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008256:	f000 f8c6 	bl	80083e6 <_malloc_usable_size_r>
 800825a:	4284      	cmp	r4, r0
 800825c:	4607      	mov	r7, r0
 800825e:	d802      	bhi.n	8008266 <_realloc_r+0x34>
 8008260:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008264:	d812      	bhi.n	800828c <_realloc_r+0x5a>
 8008266:	4621      	mov	r1, r4
 8008268:	4640      	mov	r0, r8
 800826a:	f7fd fc55 	bl	8005b18 <_malloc_r>
 800826e:	4605      	mov	r5, r0
 8008270:	2800      	cmp	r0, #0
 8008272:	d0ed      	beq.n	8008250 <_realloc_r+0x1e>
 8008274:	42bc      	cmp	r4, r7
 8008276:	4622      	mov	r2, r4
 8008278:	4631      	mov	r1, r6
 800827a:	bf28      	it	cs
 800827c:	463a      	movcs	r2, r7
 800827e:	f7ff fc27 	bl	8007ad0 <memcpy>
 8008282:	4631      	mov	r1, r6
 8008284:	4640      	mov	r0, r8
 8008286:	f7fd fbd7 	bl	8005a38 <_free_r>
 800828a:	e7e1      	b.n	8008250 <_realloc_r+0x1e>
 800828c:	4635      	mov	r5, r6
 800828e:	e7df      	b.n	8008250 <_realloc_r+0x1e>

08008290 <__ascii_wctomb>:
 8008290:	4603      	mov	r3, r0
 8008292:	4608      	mov	r0, r1
 8008294:	b141      	cbz	r1, 80082a8 <__ascii_wctomb+0x18>
 8008296:	2aff      	cmp	r2, #255	; 0xff
 8008298:	d904      	bls.n	80082a4 <__ascii_wctomb+0x14>
 800829a:	228a      	movs	r2, #138	; 0x8a
 800829c:	f04f 30ff 	mov.w	r0, #4294967295
 80082a0:	601a      	str	r2, [r3, #0]
 80082a2:	4770      	bx	lr
 80082a4:	2001      	movs	r0, #1
 80082a6:	700a      	strb	r2, [r1, #0]
 80082a8:	4770      	bx	lr
	...

080082ac <fiprintf>:
 80082ac:	b40e      	push	{r1, r2, r3}
 80082ae:	b503      	push	{r0, r1, lr}
 80082b0:	4601      	mov	r1, r0
 80082b2:	ab03      	add	r3, sp, #12
 80082b4:	4805      	ldr	r0, [pc, #20]	; (80082cc <fiprintf+0x20>)
 80082b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80082ba:	6800      	ldr	r0, [r0, #0]
 80082bc:	9301      	str	r3, [sp, #4]
 80082be:	f7ff f971 	bl	80075a4 <_vfiprintf_r>
 80082c2:	b002      	add	sp, #8
 80082c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80082c8:	b003      	add	sp, #12
 80082ca:	4770      	bx	lr
 80082cc:	20000068 	.word	0x20000068

080082d0 <__swhatbuf_r>:
 80082d0:	b570      	push	{r4, r5, r6, lr}
 80082d2:	460c      	mov	r4, r1
 80082d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082d8:	4615      	mov	r5, r2
 80082da:	2900      	cmp	r1, #0
 80082dc:	461e      	mov	r6, r3
 80082de:	b096      	sub	sp, #88	; 0x58
 80082e0:	da0c      	bge.n	80082fc <__swhatbuf_r+0x2c>
 80082e2:	89a3      	ldrh	r3, [r4, #12]
 80082e4:	2100      	movs	r1, #0
 80082e6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80082ea:	bf0c      	ite	eq
 80082ec:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80082f0:	2340      	movne	r3, #64	; 0x40
 80082f2:	2000      	movs	r0, #0
 80082f4:	6031      	str	r1, [r6, #0]
 80082f6:	602b      	str	r3, [r5, #0]
 80082f8:	b016      	add	sp, #88	; 0x58
 80082fa:	bd70      	pop	{r4, r5, r6, pc}
 80082fc:	466a      	mov	r2, sp
 80082fe:	f000 f849 	bl	8008394 <_fstat_r>
 8008302:	2800      	cmp	r0, #0
 8008304:	dbed      	blt.n	80082e2 <__swhatbuf_r+0x12>
 8008306:	9901      	ldr	r1, [sp, #4]
 8008308:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800830c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008310:	4259      	negs	r1, r3
 8008312:	4159      	adcs	r1, r3
 8008314:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008318:	e7eb      	b.n	80082f2 <__swhatbuf_r+0x22>

0800831a <__smakebuf_r>:
 800831a:	898b      	ldrh	r3, [r1, #12]
 800831c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800831e:	079d      	lsls	r5, r3, #30
 8008320:	4606      	mov	r6, r0
 8008322:	460c      	mov	r4, r1
 8008324:	d507      	bpl.n	8008336 <__smakebuf_r+0x1c>
 8008326:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800832a:	6023      	str	r3, [r4, #0]
 800832c:	6123      	str	r3, [r4, #16]
 800832e:	2301      	movs	r3, #1
 8008330:	6163      	str	r3, [r4, #20]
 8008332:	b002      	add	sp, #8
 8008334:	bd70      	pop	{r4, r5, r6, pc}
 8008336:	466a      	mov	r2, sp
 8008338:	ab01      	add	r3, sp, #4
 800833a:	f7ff ffc9 	bl	80082d0 <__swhatbuf_r>
 800833e:	9900      	ldr	r1, [sp, #0]
 8008340:	4605      	mov	r5, r0
 8008342:	4630      	mov	r0, r6
 8008344:	f7fd fbe8 	bl	8005b18 <_malloc_r>
 8008348:	b948      	cbnz	r0, 800835e <__smakebuf_r+0x44>
 800834a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800834e:	059a      	lsls	r2, r3, #22
 8008350:	d4ef      	bmi.n	8008332 <__smakebuf_r+0x18>
 8008352:	f023 0303 	bic.w	r3, r3, #3
 8008356:	f043 0302 	orr.w	r3, r3, #2
 800835a:	81a3      	strh	r3, [r4, #12]
 800835c:	e7e3      	b.n	8008326 <__smakebuf_r+0xc>
 800835e:	89a3      	ldrh	r3, [r4, #12]
 8008360:	6020      	str	r0, [r4, #0]
 8008362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008366:	81a3      	strh	r3, [r4, #12]
 8008368:	9b00      	ldr	r3, [sp, #0]
 800836a:	6120      	str	r0, [r4, #16]
 800836c:	6163      	str	r3, [r4, #20]
 800836e:	9b01      	ldr	r3, [sp, #4]
 8008370:	b15b      	cbz	r3, 800838a <__smakebuf_r+0x70>
 8008372:	4630      	mov	r0, r6
 8008374:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008378:	f000 f81e 	bl	80083b8 <_isatty_r>
 800837c:	b128      	cbz	r0, 800838a <__smakebuf_r+0x70>
 800837e:	89a3      	ldrh	r3, [r4, #12]
 8008380:	f023 0303 	bic.w	r3, r3, #3
 8008384:	f043 0301 	orr.w	r3, r3, #1
 8008388:	81a3      	strh	r3, [r4, #12]
 800838a:	89a3      	ldrh	r3, [r4, #12]
 800838c:	431d      	orrs	r5, r3
 800838e:	81a5      	strh	r5, [r4, #12]
 8008390:	e7cf      	b.n	8008332 <__smakebuf_r+0x18>
	...

08008394 <_fstat_r>:
 8008394:	b538      	push	{r3, r4, r5, lr}
 8008396:	2300      	movs	r3, #0
 8008398:	4d06      	ldr	r5, [pc, #24]	; (80083b4 <_fstat_r+0x20>)
 800839a:	4604      	mov	r4, r0
 800839c:	4608      	mov	r0, r1
 800839e:	4611      	mov	r1, r2
 80083a0:	602b      	str	r3, [r5, #0]
 80083a2:	f7f9 fd71 	bl	8001e88 <_fstat>
 80083a6:	1c43      	adds	r3, r0, #1
 80083a8:	d102      	bne.n	80083b0 <_fstat_r+0x1c>
 80083aa:	682b      	ldr	r3, [r5, #0]
 80083ac:	b103      	cbz	r3, 80083b0 <_fstat_r+0x1c>
 80083ae:	6023      	str	r3, [r4, #0]
 80083b0:	bd38      	pop	{r3, r4, r5, pc}
 80083b2:	bf00      	nop
 80083b4:	200003d0 	.word	0x200003d0

080083b8 <_isatty_r>:
 80083b8:	b538      	push	{r3, r4, r5, lr}
 80083ba:	2300      	movs	r3, #0
 80083bc:	4d05      	ldr	r5, [pc, #20]	; (80083d4 <_isatty_r+0x1c>)
 80083be:	4604      	mov	r4, r0
 80083c0:	4608      	mov	r0, r1
 80083c2:	602b      	str	r3, [r5, #0]
 80083c4:	f7f9 fd6f 	bl	8001ea6 <_isatty>
 80083c8:	1c43      	adds	r3, r0, #1
 80083ca:	d102      	bne.n	80083d2 <_isatty_r+0x1a>
 80083cc:	682b      	ldr	r3, [r5, #0]
 80083ce:	b103      	cbz	r3, 80083d2 <_isatty_r+0x1a>
 80083d0:	6023      	str	r3, [r4, #0]
 80083d2:	bd38      	pop	{r3, r4, r5, pc}
 80083d4:	200003d0 	.word	0x200003d0

080083d8 <abort>:
 80083d8:	2006      	movs	r0, #6
 80083da:	b508      	push	{r3, lr}
 80083dc:	f000 f834 	bl	8008448 <raise>
 80083e0:	2001      	movs	r0, #1
 80083e2:	f7f9 fd03 	bl	8001dec <_exit>

080083e6 <_malloc_usable_size_r>:
 80083e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083ea:	1f18      	subs	r0, r3, #4
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	bfbc      	itt	lt
 80083f0:	580b      	ldrlt	r3, [r1, r0]
 80083f2:	18c0      	addlt	r0, r0, r3
 80083f4:	4770      	bx	lr

080083f6 <_raise_r>:
 80083f6:	291f      	cmp	r1, #31
 80083f8:	b538      	push	{r3, r4, r5, lr}
 80083fa:	4604      	mov	r4, r0
 80083fc:	460d      	mov	r5, r1
 80083fe:	d904      	bls.n	800840a <_raise_r+0x14>
 8008400:	2316      	movs	r3, #22
 8008402:	6003      	str	r3, [r0, #0]
 8008404:	f04f 30ff 	mov.w	r0, #4294967295
 8008408:	bd38      	pop	{r3, r4, r5, pc}
 800840a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800840c:	b112      	cbz	r2, 8008414 <_raise_r+0x1e>
 800840e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008412:	b94b      	cbnz	r3, 8008428 <_raise_r+0x32>
 8008414:	4620      	mov	r0, r4
 8008416:	f000 f831 	bl	800847c <_getpid_r>
 800841a:	462a      	mov	r2, r5
 800841c:	4601      	mov	r1, r0
 800841e:	4620      	mov	r0, r4
 8008420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008424:	f000 b818 	b.w	8008458 <_kill_r>
 8008428:	2b01      	cmp	r3, #1
 800842a:	d00a      	beq.n	8008442 <_raise_r+0x4c>
 800842c:	1c59      	adds	r1, r3, #1
 800842e:	d103      	bne.n	8008438 <_raise_r+0x42>
 8008430:	2316      	movs	r3, #22
 8008432:	6003      	str	r3, [r0, #0]
 8008434:	2001      	movs	r0, #1
 8008436:	e7e7      	b.n	8008408 <_raise_r+0x12>
 8008438:	2400      	movs	r4, #0
 800843a:	4628      	mov	r0, r5
 800843c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008440:	4798      	blx	r3
 8008442:	2000      	movs	r0, #0
 8008444:	e7e0      	b.n	8008408 <_raise_r+0x12>
	...

08008448 <raise>:
 8008448:	4b02      	ldr	r3, [pc, #8]	; (8008454 <raise+0xc>)
 800844a:	4601      	mov	r1, r0
 800844c:	6818      	ldr	r0, [r3, #0]
 800844e:	f7ff bfd2 	b.w	80083f6 <_raise_r>
 8008452:	bf00      	nop
 8008454:	20000068 	.word	0x20000068

08008458 <_kill_r>:
 8008458:	b538      	push	{r3, r4, r5, lr}
 800845a:	2300      	movs	r3, #0
 800845c:	4d06      	ldr	r5, [pc, #24]	; (8008478 <_kill_r+0x20>)
 800845e:	4604      	mov	r4, r0
 8008460:	4608      	mov	r0, r1
 8008462:	4611      	mov	r1, r2
 8008464:	602b      	str	r3, [r5, #0]
 8008466:	f7f9 fcb1 	bl	8001dcc <_kill>
 800846a:	1c43      	adds	r3, r0, #1
 800846c:	d102      	bne.n	8008474 <_kill_r+0x1c>
 800846e:	682b      	ldr	r3, [r5, #0]
 8008470:	b103      	cbz	r3, 8008474 <_kill_r+0x1c>
 8008472:	6023      	str	r3, [r4, #0]
 8008474:	bd38      	pop	{r3, r4, r5, pc}
 8008476:	bf00      	nop
 8008478:	200003d0 	.word	0x200003d0

0800847c <_getpid_r>:
 800847c:	f7f9 bc9f 	b.w	8001dbe <_getpid>

08008480 <_init>:
 8008480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008482:	bf00      	nop
 8008484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008486:	bc08      	pop	{r3}
 8008488:	469e      	mov	lr, r3
 800848a:	4770      	bx	lr

0800848c <_fini>:
 800848c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800848e:	bf00      	nop
 8008490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008492:	bc08      	pop	{r3}
 8008494:	469e      	mov	lr, r3
 8008496:	4770      	bx	lr
