
lab12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000890c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018c4  08008af4  08008af4  00018af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3b8  0800a3b8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800a3b8  0800a3b8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a3b8  0800a3b8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3b8  0800a3b8  0001a3b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3bc  0800a3bc  0001a3bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800a3c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b4  20000010  0800a3d0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  0800a3d0  000204c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008ba0  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e85  00000000  00000000  00028c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000878  00000000  00000000  0002aaa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000067b  00000000  00000000  0002b320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000199ff  00000000  00000000  0002b99b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ccdf  00000000  00000000  0004539a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009070e  00000000  00000000  00052079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002170  00000000  00000000  000e2788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000e48f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000010 	.word	0x20000010
 8000204:	00000000 	.word	0x00000000
 8000208:	08008adc 	.word	0x08008adc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000014 	.word	0x20000014
 8000224:	08008adc 	.word	0x08008adc

08000228 <__aeabi_dmul>:
 8000228:	b570      	push	{r4, r5, r6, lr}
 800022a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800022e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000236:	bf1d      	ittte	ne
 8000238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800023c:	ea94 0f0c 	teqne	r4, ip
 8000240:	ea95 0f0c 	teqne	r5, ip
 8000244:	f000 f8de 	bleq	8000404 <__aeabi_dmul+0x1dc>
 8000248:	442c      	add	r4, r5
 800024a:	ea81 0603 	eor.w	r6, r1, r3
 800024e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000252:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000256:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800025a:	bf18      	it	ne
 800025c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000260:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000264:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000268:	d038      	beq.n	80002dc <__aeabi_dmul+0xb4>
 800026a:	fba0 ce02 	umull	ip, lr, r0, r2
 800026e:	f04f 0500 	mov.w	r5, #0
 8000272:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000276:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800027a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800027e:	f04f 0600 	mov.w	r6, #0
 8000282:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000286:	f09c 0f00 	teq	ip, #0
 800028a:	bf18      	it	ne
 800028c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000290:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000294:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000298:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800029c:	d204      	bcs.n	80002a8 <__aeabi_dmul+0x80>
 800029e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002a2:	416d      	adcs	r5, r5
 80002a4:	eb46 0606 	adc.w	r6, r6, r6
 80002a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002c0:	bf88      	it	hi
 80002c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002c6:	d81e      	bhi.n	8000306 <__aeabi_dmul+0xde>
 80002c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002cc:	bf08      	it	eq
 80002ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002d2:	f150 0000 	adcs.w	r0, r0, #0
 80002d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002e0:	ea46 0101 	orr.w	r1, r6, r1
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	ea81 0103 	eor.w	r1, r1, r3
 80002ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f0:	bfc2      	ittt	gt
 80002f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002fa:	bd70      	popgt	{r4, r5, r6, pc}
 80002fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000300:	f04f 0e00 	mov.w	lr, #0
 8000304:	3c01      	subs	r4, #1
 8000306:	f300 80ab 	bgt.w	8000460 <__aeabi_dmul+0x238>
 800030a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800030e:	bfde      	ittt	le
 8000310:	2000      	movle	r0, #0
 8000312:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000316:	bd70      	pople	{r4, r5, r6, pc}
 8000318:	f1c4 0400 	rsb	r4, r4, #0
 800031c:	3c20      	subs	r4, #32
 800031e:	da35      	bge.n	800038c <__aeabi_dmul+0x164>
 8000320:	340c      	adds	r4, #12
 8000322:	dc1b      	bgt.n	800035c <__aeabi_dmul+0x134>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f305 	lsl.w	r3, r0, r5
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f205 	lsl.w	r2, r1, r5
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000340:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000344:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000348:	fa21 f604 	lsr.w	r6, r1, r4
 800034c:	eb42 0106 	adc.w	r1, r2, r6
 8000350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000354:	bf08      	it	eq
 8000356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f1c4 040c 	rsb	r4, r4, #12
 8000360:	f1c4 0520 	rsb	r5, r4, #32
 8000364:	fa00 f304 	lsl.w	r3, r0, r4
 8000368:	fa20 f005 	lsr.w	r0, r0, r5
 800036c:	fa01 f204 	lsl.w	r2, r1, r4
 8000370:	ea40 0002 	orr.w	r0, r0, r2
 8000374:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000378:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f1c4 0520 	rsb	r5, r4, #32
 8000390:	fa00 f205 	lsl.w	r2, r0, r5
 8000394:	ea4e 0e02 	orr.w	lr, lr, r2
 8000398:	fa20 f304 	lsr.w	r3, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea43 0302 	orr.w	r3, r3, r2
 80003a4:	fa21 f004 	lsr.w	r0, r1, r4
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	fa21 f204 	lsr.w	r2, r1, r4
 80003b0:	ea20 0002 	bic.w	r0, r0, r2
 80003b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f094 0f00 	teq	r4, #0
 80003c8:	d10f      	bne.n	80003ea <__aeabi_dmul+0x1c2>
 80003ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ce:	0040      	lsls	r0, r0, #1
 80003d0:	eb41 0101 	adc.w	r1, r1, r1
 80003d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3c01      	subeq	r4, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1a6>
 80003de:	ea41 0106 	orr.w	r1, r1, r6
 80003e2:	f095 0f00 	teq	r5, #0
 80003e6:	bf18      	it	ne
 80003e8:	4770      	bxne	lr
 80003ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ee:	0052      	lsls	r2, r2, #1
 80003f0:	eb43 0303 	adc.w	r3, r3, r3
 80003f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003f8:	bf08      	it	eq
 80003fa:	3d01      	subeq	r5, #1
 80003fc:	d0f7      	beq.n	80003ee <__aeabi_dmul+0x1c6>
 80003fe:	ea43 0306 	orr.w	r3, r3, r6
 8000402:	4770      	bx	lr
 8000404:	ea94 0f0c 	teq	r4, ip
 8000408:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800040c:	bf18      	it	ne
 800040e:	ea95 0f0c 	teqne	r5, ip
 8000412:	d00c      	beq.n	800042e <__aeabi_dmul+0x206>
 8000414:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000418:	bf18      	it	ne
 800041a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041e:	d1d1      	bne.n	80003c4 <__aeabi_dmul+0x19c>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd70      	pop	{r4, r5, r6, pc}
 800042e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000432:	bf06      	itte	eq
 8000434:	4610      	moveq	r0, r2
 8000436:	4619      	moveq	r1, r3
 8000438:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800043c:	d019      	beq.n	8000472 <__aeabi_dmul+0x24a>
 800043e:	ea94 0f0c 	teq	r4, ip
 8000442:	d102      	bne.n	800044a <__aeabi_dmul+0x222>
 8000444:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000448:	d113      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800044a:	ea95 0f0c 	teq	r5, ip
 800044e:	d105      	bne.n	800045c <__aeabi_dmul+0x234>
 8000450:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000454:	bf1c      	itt	ne
 8000456:	4610      	movne	r0, r2
 8000458:	4619      	movne	r1, r3
 800045a:	d10a      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800045c:	ea81 0103 	eor.w	r1, r1, r3
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000464:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd70      	pop	{r4, r5, r6, pc}
 8000472:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000476:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800047a:	bd70      	pop	{r4, r5, r6, pc}

0800047c <__aeabi_drsub>:
 800047c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e002      	b.n	8000488 <__adddf3>
 8000482:	bf00      	nop

08000484 <__aeabi_dsub>:
 8000484:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000488 <__adddf3>:
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800048e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000492:	ea94 0f05 	teq	r4, r5
 8000496:	bf08      	it	eq
 8000498:	ea90 0f02 	teqeq	r0, r2
 800049c:	bf1f      	itttt	ne
 800049e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ae:	f000 80e2 	beq.w	8000676 <__adddf3+0x1ee>
 80004b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ba:	bfb8      	it	lt
 80004bc:	426d      	neglt	r5, r5
 80004be:	dd0c      	ble.n	80004da <__adddf3+0x52>
 80004c0:	442c      	add	r4, r5
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	ea82 0000 	eor.w	r0, r2, r0
 80004ce:	ea83 0101 	eor.w	r1, r3, r1
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	2d36      	cmp	r5, #54	; 0x36
 80004dc:	bf88      	it	hi
 80004de:	bd30      	pophi	{r4, r5, pc}
 80004e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f0:	d002      	beq.n	80004f8 <__adddf3+0x70>
 80004f2:	4240      	negs	r0, r0
 80004f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000500:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000504:	d002      	beq.n	800050c <__adddf3+0x84>
 8000506:	4252      	negs	r2, r2
 8000508:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800050c:	ea94 0f05 	teq	r4, r5
 8000510:	f000 80a7 	beq.w	8000662 <__adddf3+0x1da>
 8000514:	f1a4 0401 	sub.w	r4, r4, #1
 8000518:	f1d5 0e20 	rsbs	lr, r5, #32
 800051c:	db0d      	blt.n	800053a <__adddf3+0xb2>
 800051e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000522:	fa22 f205 	lsr.w	r2, r2, r5
 8000526:	1880      	adds	r0, r0, r2
 8000528:	f141 0100 	adc.w	r1, r1, #0
 800052c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000530:	1880      	adds	r0, r0, r2
 8000532:	fa43 f305 	asr.w	r3, r3, r5
 8000536:	4159      	adcs	r1, r3
 8000538:	e00e      	b.n	8000558 <__adddf3+0xd0>
 800053a:	f1a5 0520 	sub.w	r5, r5, #32
 800053e:	f10e 0e20 	add.w	lr, lr, #32
 8000542:	2a01      	cmp	r2, #1
 8000544:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000548:	bf28      	it	cs
 800054a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800054e:	fa43 f305 	asr.w	r3, r3, r5
 8000552:	18c0      	adds	r0, r0, r3
 8000554:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	d507      	bpl.n	800056e <__adddf3+0xe6>
 800055e:	f04f 0e00 	mov.w	lr, #0
 8000562:	f1dc 0c00 	rsbs	ip, ip, #0
 8000566:	eb7e 0000 	sbcs.w	r0, lr, r0
 800056a:	eb6e 0101 	sbc.w	r1, lr, r1
 800056e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000572:	d31b      	bcc.n	80005ac <__adddf3+0x124>
 8000574:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000578:	d30c      	bcc.n	8000594 <__adddf3+0x10c>
 800057a:	0849      	lsrs	r1, r1, #1
 800057c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000580:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000584:	f104 0401 	add.w	r4, r4, #1
 8000588:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800058c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000590:	f080 809a 	bcs.w	80006c8 <__adddf3+0x240>
 8000594:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	ea41 0105 	orr.w	r1, r1, r5
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b0:	4140      	adcs	r0, r0
 80005b2:	eb41 0101 	adc.w	r1, r1, r1
 80005b6:	3c01      	subs	r4, #1
 80005b8:	bf28      	it	cs
 80005ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005be:	d2e9      	bcs.n	8000594 <__adddf3+0x10c>
 80005c0:	f091 0f00 	teq	r1, #0
 80005c4:	bf04      	itt	eq
 80005c6:	4601      	moveq	r1, r0
 80005c8:	2000      	moveq	r0, #0
 80005ca:	fab1 f381 	clz	r3, r1
 80005ce:	bf08      	it	eq
 80005d0:	3320      	addeq	r3, #32
 80005d2:	f1a3 030b 	sub.w	r3, r3, #11
 80005d6:	f1b3 0220 	subs.w	r2, r3, #32
 80005da:	da0c      	bge.n	80005f6 <__adddf3+0x16e>
 80005dc:	320c      	adds	r2, #12
 80005de:	dd08      	ble.n	80005f2 <__adddf3+0x16a>
 80005e0:	f102 0c14 	add.w	ip, r2, #20
 80005e4:	f1c2 020c 	rsb	r2, r2, #12
 80005e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ec:	fa21 f102 	lsr.w	r1, r1, r2
 80005f0:	e00c      	b.n	800060c <__adddf3+0x184>
 80005f2:	f102 0214 	add.w	r2, r2, #20
 80005f6:	bfd8      	it	le
 80005f8:	f1c2 0c20 	rsble	ip, r2, #32
 80005fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000600:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000604:	bfdc      	itt	le
 8000606:	ea41 010c 	orrle.w	r1, r1, ip
 800060a:	4090      	lslle	r0, r2
 800060c:	1ae4      	subs	r4, r4, r3
 800060e:	bfa2      	ittt	ge
 8000610:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000614:	4329      	orrge	r1, r5
 8000616:	bd30      	popge	{r4, r5, pc}
 8000618:	ea6f 0404 	mvn.w	r4, r4
 800061c:	3c1f      	subs	r4, #31
 800061e:	da1c      	bge.n	800065a <__adddf3+0x1d2>
 8000620:	340c      	adds	r4, #12
 8000622:	dc0e      	bgt.n	8000642 <__adddf3+0x1ba>
 8000624:	f104 0414 	add.w	r4, r4, #20
 8000628:	f1c4 0220 	rsb	r2, r4, #32
 800062c:	fa20 f004 	lsr.w	r0, r0, r4
 8000630:	fa01 f302 	lsl.w	r3, r1, r2
 8000634:	ea40 0003 	orr.w	r0, r0, r3
 8000638:	fa21 f304 	lsr.w	r3, r1, r4
 800063c:	ea45 0103 	orr.w	r1, r5, r3
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f1c4 040c 	rsb	r4, r4, #12
 8000646:	f1c4 0220 	rsb	r2, r4, #32
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 f304 	lsl.w	r3, r1, r4
 8000652:	ea40 0003 	orr.w	r0, r0, r3
 8000656:	4629      	mov	r1, r5
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	fa21 f004 	lsr.w	r0, r1, r4
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	f094 0f00 	teq	r4, #0
 8000666:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800066a:	bf06      	itte	eq
 800066c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000670:	3401      	addeq	r4, #1
 8000672:	3d01      	subne	r5, #1
 8000674:	e74e      	b.n	8000514 <__adddf3+0x8c>
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf18      	it	ne
 800067c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000680:	d029      	beq.n	80006d6 <__adddf3+0x24e>
 8000682:	ea94 0f05 	teq	r4, r5
 8000686:	bf08      	it	eq
 8000688:	ea90 0f02 	teqeq	r0, r2
 800068c:	d005      	beq.n	800069a <__adddf3+0x212>
 800068e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000692:	bf04      	itt	eq
 8000694:	4619      	moveq	r1, r3
 8000696:	4610      	moveq	r0, r2
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea91 0f03 	teq	r1, r3
 800069e:	bf1e      	ittt	ne
 80006a0:	2100      	movne	r1, #0
 80006a2:	2000      	movne	r0, #0
 80006a4:	bd30      	popne	{r4, r5, pc}
 80006a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006aa:	d105      	bne.n	80006b8 <__adddf3+0x230>
 80006ac:	0040      	lsls	r0, r0, #1
 80006ae:	4149      	adcs	r1, r1
 80006b0:	bf28      	it	cs
 80006b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd30      	pop	{r4, r5, pc}
 80006b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006bc:	bf3c      	itt	cc
 80006be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006c2:	bd30      	popcc	{r4, r5, pc}
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006da:	bf1a      	itte	ne
 80006dc:	4619      	movne	r1, r3
 80006de:	4610      	movne	r0, r2
 80006e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006e4:	bf1c      	itt	ne
 80006e6:	460b      	movne	r3, r1
 80006e8:	4602      	movne	r2, r0
 80006ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ee:	bf06      	itte	eq
 80006f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006f4:	ea91 0f03 	teqeq	r1, r3
 80006f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	bf00      	nop

08000700 <__aeabi_ui2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f04f 0500 	mov.w	r5, #0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e750      	b.n	80005c0 <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_i2d>:
 8000720:	f090 0f00 	teq	r0, #0
 8000724:	bf04      	itt	eq
 8000726:	2100      	moveq	r1, #0
 8000728:	4770      	bxeq	lr
 800072a:	b530      	push	{r4, r5, lr}
 800072c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000730:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000734:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000738:	bf48      	it	mi
 800073a:	4240      	negmi	r0, r0
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	e73e      	b.n	80005c0 <__adddf3+0x138>
 8000742:	bf00      	nop

08000744 <__aeabi_f2d>:
 8000744:	0042      	lsls	r2, r0, #1
 8000746:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800074a:	ea4f 0131 	mov.w	r1, r1, rrx
 800074e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000752:	bf1f      	itttt	ne
 8000754:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000758:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800075c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000760:	4770      	bxne	lr
 8000762:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000766:	bf08      	it	eq
 8000768:	4770      	bxeq	lr
 800076a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800076e:	bf04      	itt	eq
 8000770:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 7460 	mov.w	r4, #896	; 0x380
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	e71c      	b.n	80005c0 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_ul2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f04f 0500 	mov.w	r5, #0
 8000796:	e00a      	b.n	80007ae <__aeabi_l2d+0x16>

08000798 <__aeabi_l2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007a6:	d502      	bpl.n	80007ae <__aeabi_l2d+0x16>
 80007a8:	4240      	negs	r0, r0
 80007aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ba:	f43f aed8 	beq.w	800056e <__adddf3+0xe6>
 80007be:	f04f 0203 	mov.w	r2, #3
 80007c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c6:	bf18      	it	ne
 80007c8:	3203      	addne	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007d6:	f1c2 0320 	rsb	r3, r2, #32
 80007da:	fa00 fc03 	lsl.w	ip, r0, r3
 80007de:	fa20 f002 	lsr.w	r0, r0, r2
 80007e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007e6:	ea40 000e 	orr.w	r0, r0, lr
 80007ea:	fa21 f102 	lsr.w	r1, r1, r2
 80007ee:	4414      	add	r4, r2
 80007f0:	e6bd      	b.n	800056e <__adddf3+0xe6>
 80007f2:	bf00      	nop

080007f4 <__aeabi_d2uiz>:
 80007f4:	004a      	lsls	r2, r1, #1
 80007f6:	d211      	bcs.n	800081c <__aeabi_d2uiz+0x28>
 80007f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007fc:	d211      	bcs.n	8000822 <__aeabi_d2uiz+0x2e>
 80007fe:	d50d      	bpl.n	800081c <__aeabi_d2uiz+0x28>
 8000800:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000804:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000808:	d40e      	bmi.n	8000828 <__aeabi_d2uiz+0x34>
 800080a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800080e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000812:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000816:	fa23 f002 	lsr.w	r0, r3, r2
 800081a:	4770      	bx	lr
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	4770      	bx	lr
 8000822:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000826:	d102      	bne.n	800082e <__aeabi_d2uiz+0x3a>
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	4770      	bx	lr
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	4770      	bx	lr

08000834 <AT24CXX_Init>:
//2010/6/10
//V1.2

//初始化IIC接口
void AT24CXX_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	IIC_Init();
 8000838:	f005 fee4 	bl	8006604 <IIC_Init>
}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}

08000840 <AT24CXX_ReadOneByte>:
//在AT24CXX指定地址读出一个数据
//ReadAddr:开始读数的地址
//返回值  :读到的数据
uint8_t AT24CXX_ReadOneByte(uint16_t ReadAddr)
{				  
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	80fb      	strh	r3, [r7, #6]
	uint8_t temp=0;
 800084a:	2300      	movs	r3, #0
 800084c:	73fb      	strb	r3, [r7, #15]
    IIC_Start();  
 800084e:	f005 feeb 	bl	8006628 <IIC_Start>
	{
		IIC_Send_Byte(0XA0);	   //发送写命令
		IIC_Wait_Ack();
		IIC_Send_Byte(ReadAddr>>8);//发送高地址
		IIC_Wait_Ack();		 
	}else IIC_Send_Byte(0XA0+((ReadAddr/256)<<1));   //发送器件地址0XA0,写数据
 8000852:	88fb      	ldrh	r3, [r7, #6]
 8000854:	0a1b      	lsrs	r3, r3, #8
 8000856:	b29b      	uxth	r3, r3
 8000858:	b2db      	uxtb	r3, r3
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	b2db      	uxtb	r3, r3
 800085e:	3b60      	subs	r3, #96	; 0x60
 8000860:	b2db      	uxtb	r3, r3
 8000862:	4618      	mov	r0, r3
 8000864:	f005 ffe4 	bl	8006830 <IIC_Send_Byte>

	IIC_Wait_Ack(); 
 8000868:	f005 ff3e 	bl	80066e8 <IIC_Wait_Ack>
    IIC_Send_Byte(ReadAddr%256);   //发送低地址
 800086c:	88fb      	ldrh	r3, [r7, #6]
 800086e:	b2db      	uxtb	r3, r3
 8000870:	4618      	mov	r0, r3
 8000872:	f005 ffdd 	bl	8006830 <IIC_Send_Byte>
	IIC_Wait_Ack();	    
 8000876:	f005 ff37 	bl	80066e8 <IIC_Wait_Ack>
	IIC_Start();  	 	   
 800087a:	f005 fed5 	bl	8006628 <IIC_Start>
	IIC_Send_Byte(0XA1);           //进入接收模式
 800087e:	20a1      	movs	r0, #161	; 0xa1
 8000880:	f005 ffd6 	bl	8006830 <IIC_Send_Byte>
	IIC_Wait_Ack();	 
 8000884:	f005 ff30 	bl	80066e8 <IIC_Wait_Ack>
    temp=IIC_Read_Byte(0);		   
 8000888:	2000      	movs	r0, #0
 800088a:	f006 f819 	bl	80068c0 <IIC_Read_Byte>
 800088e:	4603      	mov	r3, r0
 8000890:	73fb      	strb	r3, [r7, #15]
    IIC_Stop();//产生一个停止条件
 8000892:	f005 fef9 	bl	8006688 <IIC_Stop>
	return temp;
 8000896:	7bfb      	ldrb	r3, [r7, #15]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <AT24CXX_WriteOneByte>:
//在AT24CXX指定地址写入一个数据
//WriteAddr  :写入数据的目的地址
//DataToWrite:要写入的数据
void AT24CXX_WriteOneByte(uint16_t WriteAddr,uint8_t DataToWrite)
{				   	  	    																 
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	460a      	mov	r2, r1
 80008aa:	80fb      	strh	r3, [r7, #6]
 80008ac:	4613      	mov	r3, r2
 80008ae:	717b      	strb	r3, [r7, #5]
    IIC_Start();  
 80008b0:	f005 feba 	bl	8006628 <IIC_Start>
		IIC_Send_Byte(0XA0);	    //发送写命令
		IIC_Wait_Ack();
		IIC_Send_Byte(WriteAddr>>8);//发送高地址
 	}else
	{
		IIC_Send_Byte(0XA0+((WriteAddr/256)<<1));   //发送器件地址0XA0,写数据
 80008b4:	88fb      	ldrh	r3, [r7, #6]
 80008b6:	0a1b      	lsrs	r3, r3, #8
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	3b60      	subs	r3, #96	; 0x60
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	4618      	mov	r0, r3
 80008c6:	f005 ffb3 	bl	8006830 <IIC_Send_Byte>
	}	 
	IIC_Wait_Ack();	   
 80008ca:	f005 ff0d 	bl	80066e8 <IIC_Wait_Ack>
    IIC_Send_Byte(WriteAddr%256);   //发送低地址
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f005 ffac 	bl	8006830 <IIC_Send_Byte>
	IIC_Wait_Ack(); 	 										  		   
 80008d8:	f005 ff06 	bl	80066e8 <IIC_Wait_Ack>
	IIC_Send_Byte(DataToWrite);     //发送字节
 80008dc:	797b      	ldrb	r3, [r7, #5]
 80008de:	4618      	mov	r0, r3
 80008e0:	f005 ffa6 	bl	8006830 <IIC_Send_Byte>
	IIC_Wait_Ack();  		    	   
 80008e4:	f005 ff00 	bl	80066e8 <IIC_Wait_Ack>
    IIC_Stop();//产生一个停止条件
 80008e8:	f005 fece 	bl	8006688 <IIC_Stop>
	HAL_Delay(10);
 80008ec:	200a      	movs	r0, #10
 80008ee:	f006 f9dd 	bl	8006cac <HAL_Delay>
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <AT24CXX_Check>:
//这里用了24XX的最后一个地址(255)来存储标志字.
//如果用其他24C系列,这个地址要修改
//返回1:检测失败
//返回0:检测成功
uint8_t AT24CXX_Check(void)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b082      	sub	sp, #8
 80008fe:	af00      	add	r7, sp, #0
	uint8_t temp;
	temp=AT24CXX_ReadOneByte(255);//避免每次开机都写AT24CXX
 8000900:	20ff      	movs	r0, #255	; 0xff
 8000902:	f7ff ff9d 	bl	8000840 <AT24CXX_ReadOneByte>
 8000906:	4603      	mov	r3, r0
 8000908:	71fb      	strb	r3, [r7, #7]
	if(temp==0X55)return 0;		   
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	2b55      	cmp	r3, #85	; 0x55
 800090e:	d101      	bne.n	8000914 <AT24CXX_Check+0x1a>
 8000910:	2300      	movs	r3, #0
 8000912:	e00e      	b.n	8000932 <AT24CXX_Check+0x38>
	else//排除第一次初始化的情况
	{
		AT24CXX_WriteOneByte(255,0X55);
 8000914:	2155      	movs	r1, #85	; 0x55
 8000916:	20ff      	movs	r0, #255	; 0xff
 8000918:	f7ff ffc2 	bl	80008a0 <AT24CXX_WriteOneByte>
	    temp=AT24CXX_ReadOneByte(255);	  
 800091c:	20ff      	movs	r0, #255	; 0xff
 800091e:	f7ff ff8f 	bl	8000840 <AT24CXX_ReadOneByte>
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
		if(temp==0X55)return 0;
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	2b55      	cmp	r3, #85	; 0x55
 800092a:	d101      	bne.n	8000930 <AT24CXX_Check+0x36>
 800092c:	2300      	movs	r3, #0
 800092e:	e000      	b.n	8000932 <AT24CXX_Check+0x38>
	}
	return 1;											  
 8000930:	2301      	movs	r3, #1
}
 8000932:	4618      	mov	r0, r3
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <AT24CXX_Read>:
//在AT24CXX里面的指定地址开始读出指定个数的数据
//ReadAddr :开始读出的地址 对24c02为0~255
//pBuffer  :数据数组首地址
//NumToRead:要读出数据的个数
void AT24CXX_Read(uint16_t ReadAddr,uint8_t *pBuffer,uint16_t NumToRead)
{
 800093a:	b590      	push	{r4, r7, lr}
 800093c:	b083      	sub	sp, #12
 800093e:	af00      	add	r7, sp, #0
 8000940:	4603      	mov	r3, r0
 8000942:	6039      	str	r1, [r7, #0]
 8000944:	80fb      	strh	r3, [r7, #6]
 8000946:	4613      	mov	r3, r2
 8000948:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 800094a:	e00d      	b.n	8000968 <AT24CXX_Read+0x2e>
	{
		*pBuffer++=AT24CXX_ReadOneByte(ReadAddr++);	
 800094c:	88fb      	ldrh	r3, [r7, #6]
 800094e:	1c5a      	adds	r2, r3, #1
 8000950:	80fa      	strh	r2, [r7, #6]
 8000952:	683c      	ldr	r4, [r7, #0]
 8000954:	1c62      	adds	r2, r4, #1
 8000956:	603a      	str	r2, [r7, #0]
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ff71 	bl	8000840 <AT24CXX_ReadOneByte>
 800095e:	4603      	mov	r3, r0
 8000960:	7023      	strb	r3, [r4, #0]
		NumToRead--;
 8000962:	88bb      	ldrh	r3, [r7, #4]
 8000964:	3b01      	subs	r3, #1
 8000966:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 8000968:	88bb      	ldrh	r3, [r7, #4]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d1ee      	bne.n	800094c <AT24CXX_Read+0x12>
	}
}  
 800096e:	bf00      	nop
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	bd90      	pop	{r4, r7, pc}

08000978 <AT24CXX_Write>:
//在AT24CXX里面的指定地址开始写入指定个数的数据
//WriteAddr :开始写入的地址 对24c02为0~255
//pBuffer   :数据数组首地址
//NumToWrite:要写入数据的个数
void AT24CXX_Write(uint16_t WriteAddr,uint8_t *pBuffer,uint16_t NumToWrite)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	6039      	str	r1, [r7, #0]
 8000982:	80fb      	strh	r3, [r7, #6]
 8000984:	4613      	mov	r3, r2
 8000986:	80bb      	strh	r3, [r7, #4]
	while(NumToWrite--)
 8000988:	e00c      	b.n	80009a4 <AT24CXX_Write+0x2c>
	{
		AT24CXX_WriteOneByte(WriteAddr,*pBuffer);
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	781a      	ldrb	r2, [r3, #0]
 800098e:	88fb      	ldrh	r3, [r7, #6]
 8000990:	4611      	mov	r1, r2
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff ff84 	bl	80008a0 <AT24CXX_WriteOneByte>
		WriteAddr++;
 8000998:	88fb      	ldrh	r3, [r7, #6]
 800099a:	3301      	adds	r3, #1
 800099c:	80fb      	strh	r3, [r7, #6]
		pBuffer++;
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	3301      	adds	r3, #1
 80009a2:	603b      	str	r3, [r7, #0]
	while(NumToWrite--)
 80009a4:	88bb      	ldrh	r3, [r7, #4]
 80009a6:	1e5a      	subs	r2, r3, #1
 80009a8:	80ba      	strh	r2, [r7, #4]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d1ed      	bne.n	800098a <AT24CXX_Write+0x12>
	}
}
 80009ae:	bf00      	nop
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009be:	f107 0310 	add.w	r3, r7, #16
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009cc:	4b46      	ldr	r3, [pc, #280]	; (8000ae8 <MX_GPIO_Init+0x130>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a45      	ldr	r2, [pc, #276]	; (8000ae8 <MX_GPIO_Init+0x130>)
 80009d2:	f043 0320 	orr.w	r3, r3, #32
 80009d6:	6193      	str	r3, [r2, #24]
 80009d8:	4b43      	ldr	r3, [pc, #268]	; (8000ae8 <MX_GPIO_Init+0x130>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	f003 0320 	and.w	r3, r3, #32
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e4:	4b40      	ldr	r3, [pc, #256]	; (8000ae8 <MX_GPIO_Init+0x130>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4a3f      	ldr	r2, [pc, #252]	; (8000ae8 <MX_GPIO_Init+0x130>)
 80009ea:	f043 0310 	orr.w	r3, r3, #16
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	4b3d      	ldr	r3, [pc, #244]	; (8000ae8 <MX_GPIO_Init+0x130>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f003 0310 	and.w	r3, r3, #16
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fc:	4b3a      	ldr	r3, [pc, #232]	; (8000ae8 <MX_GPIO_Init+0x130>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	4a39      	ldr	r2, [pc, #228]	; (8000ae8 <MX_GPIO_Init+0x130>)
 8000a02:	f043 0304 	orr.w	r3, r3, #4
 8000a06:	6193      	str	r3, [r2, #24]
 8000a08:	4b37      	ldr	r3, [pc, #220]	; (8000ae8 <MX_GPIO_Init+0x130>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f003 0304 	and.w	r3, r3, #4
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000a14:	2201      	movs	r2, #1
 8000a16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a1a:	4834      	ldr	r0, [pc, #208]	; (8000aec <MX_GPIO_Init+0x134>)
 8000a1c:	f006 fd65 	bl	80074ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IIC_SDA_Pin|IIC_SCL_Pin, GPIO_PIN_RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000a26:	4832      	ldr	r0, [pc, #200]	; (8000af0 <MX_GPIO_Init+0x138>)
 8000a28:	f006 fd5f 	bl	80074ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	2104      	movs	r1, #4
 8000a30:	4830      	ldr	r0, [pc, #192]	; (8000af4 <MX_GPIO_Init+0x13c>)
 8000a32:	f006 fd5a 	bl	80074ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 8000a36:	2320      	movs	r3, #32
 8000a38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 0310 	add.w	r3, r7, #16
 8000a46:	4619      	mov	r1, r3
 8000a48:	4829      	ldr	r0, [pc, #164]	; (8000af0 <MX_GPIO_Init+0x138>)
 8000a4a:	f006 fba3 	bl	8007194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8000a4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 0310 	add.w	r3, r7, #16
 8000a64:	4619      	mov	r1, r3
 8000a66:	4821      	ldr	r0, [pc, #132]	; (8000aec <MX_GPIO_Init+0x134>)
 8000a68:	f006 fb94 	bl	8007194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8000a6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 0310 	add.w	r3, r7, #16
 8000a7e:	4619      	mov	r1, r3
 8000a80:	481a      	ldr	r0, [pc, #104]	; (8000aec <MX_GPIO_Init+0x134>)
 8000a82:	f006 fb87 	bl	8007194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IIC_SDA_Pin;
 8000a86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a8c:	2311      	movs	r3, #17
 8000a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2302      	movs	r3, #2
 8000a96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IIC_SDA_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 0310 	add.w	r3, r7, #16
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4814      	ldr	r0, [pc, #80]	; (8000af0 <MX_GPIO_Init+0x138>)
 8000aa0:	f006 fb78 	bl	8007194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IIC_SCL_Pin;
 8000aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IIC_SCL_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 0310 	add.w	r3, r7, #16
 8000aba:	4619      	mov	r1, r3
 8000abc:	480c      	ldr	r0, [pc, #48]	; (8000af0 <MX_GPIO_Init+0x138>)
 8000abe:	f006 fb69 	bl	8007194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000ac2:	2304      	movs	r3, #4
 8000ac4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 0310 	add.w	r3, r7, #16
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4806      	ldr	r0, [pc, #24]	; (8000af4 <MX_GPIO_Init+0x13c>)
 8000ada:	f006 fb5b 	bl	8007194 <HAL_GPIO_Init>

}
 8000ade:	bf00      	nop
 8000ae0:	3720      	adds	r7, #32
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40010800 	.word	0x40010800
 8000af0:	40011000 	.word	0x40011000
 8000af4:	40011400 	.word	0x40011400

08000af8 <delay_us>:
//3,取消ILI93XX的Rxx寄存器定义
//V3.0 20150423
//修改SSD1963 LCD屏的驱动参数.
//////////////////////////////////////////////////////////////////////////////////	 

void delay_us(uint32_t nus) {
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]

}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bc80      	pop	{r7}
 8000b08:	4770      	bx	lr
	...

08000b0c <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <LCD_WR_REG+0x40>)
 8000b18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b1c:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <LCD_WR_REG+0x40>)
 8000b20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b24:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000b26:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <LCD_WR_REG+0x44>)
 8000b28:	88fb      	ldrh	r3, [r7, #6]
 8000b2a:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000b2c:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <LCD_WR_REG+0x40>)
 8000b2e:	2280      	movs	r2, #128	; 0x80
 8000b30:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <LCD_WR_REG+0x40>)
 8000b34:	2280      	movs	r2, #128	; 0x80
 8000b36:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <LCD_WR_REG+0x40>)
 8000b3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b3e:	611a      	str	r2, [r3, #16]
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	40011000 	.word	0x40011000
 8000b50:	40010c00 	.word	0x40010c00

08000b54 <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 8000b5e:	4b0d      	ldr	r3, [pc, #52]	; (8000b94 <LCD_WR_DATAX+0x40>)
 8000b60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b64:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <LCD_WR_DATAX+0x40>)
 8000b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b6c:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <LCD_WR_DATAX+0x44>)
 8000b70:	88fb      	ldrh	r3, [r7, #6]
 8000b72:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000b74:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <LCD_WR_DATAX+0x40>)
 8000b76:	2280      	movs	r2, #128	; 0x80
 8000b78:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <LCD_WR_DATAX+0x40>)
 8000b7c:	2280      	movs	r2, #128	; 0x80
 8000b7e:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <LCD_WR_DATAX+0x40>)
 8000b82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b86:	611a      	str	r2, [r3, #16]
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	40011000 	.word	0x40011000
 8000b98:	40010c00 	.word	0x40010c00

08000b9c <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 8000ba2:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <LCD_RD_DATA+0x7c>)
 8000ba4:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000ba8:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 8000baa:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <LCD_RD_DATA+0x7c>)
 8000bac:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000bb0:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 8000bb2:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <LCD_RD_DATA+0x7c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8000bb8:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <LCD_RD_DATA+0x80>)
 8000bba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bbe:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000bc0:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <LCD_RD_DATA+0x80>)
 8000bc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bc6:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8000bc8:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <LCD_RD_DATA+0x80>)
 8000bca:	2240      	movs	r2, #64	; 0x40
 8000bcc:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 8000bce:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <LCD_RD_DATA+0x84>)
 8000bd0:	889b      	ldrh	r3, [r3, #4]
 8000bd2:	f648 1289 	movw	r2, #35209	; 0x8989
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d102      	bne.n	8000be0 <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 8000bda:	2001      	movs	r0, #1
 8000bdc:	f006 f866 	bl	8006cac <HAL_Delay>
	t = DATAIN
 8000be0:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <LCD_RD_DATA+0x7c>)
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 8000be6:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <LCD_RD_DATA+0x80>)
 8000be8:	2240      	movs	r2, #64	; 0x40
 8000bea:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000bec:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <LCD_RD_DATA+0x80>)
 8000bee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bf2:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 8000bf4:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <LCD_RD_DATA+0x7c>)
 8000bf6:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000bfa:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <LCD_RD_DATA+0x7c>)
 8000bfe:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000c02:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <LCD_RD_DATA+0x7c>)
 8000c06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c0a:	60da      	str	r2, [r3, #12]
	return t;
 8000c0c:	88fb      	ldrh	r3, [r7, #6]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40010c00 	.word	0x40010c00
 8000c1c:	40011000 	.word	0x40011000
 8000c20:	20000030 	.word	0x20000030

08000c24 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	460a      	mov	r2, r1
 8000c2e:	80fb      	strh	r3, [r7, #6]
 8000c30:	4613      	mov	r3, r2
 8000c32:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ff68 	bl	8000b0c <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <LCD_WriteReg+0x4c>)
 8000c3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c42:	611a      	str	r2, [r3, #16]
 8000c44:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <LCD_WriteReg+0x4c>)
 8000c46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c4a:	615a      	str	r2, [r3, #20]
 8000c4c:	4a09      	ldr	r2, [pc, #36]	; (8000c74 <LCD_WriteReg+0x50>)
 8000c4e:	88bb      	ldrh	r3, [r7, #4]
 8000c50:	60d3      	str	r3, [r2, #12]
 8000c52:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <LCD_WriteReg+0x4c>)
 8000c54:	2280      	movs	r2, #128	; 0x80
 8000c56:	615a      	str	r2, [r3, #20]
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <LCD_WriteReg+0x4c>)
 8000c5a:	2280      	movs	r2, #128	; 0x80
 8000c5c:	611a      	str	r2, [r3, #16]
 8000c5e:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <LCD_WriteReg+0x4c>)
 8000c60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c64:	611a      	str	r2, [r3, #16]
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40011000 	.word	0x40011000
 8000c74:	40010c00 	.word	0x40010c00

08000c78 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 8000c82:	88fb      	ldrh	r3, [r7, #6]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ff41 	bl	8000b0c <LCD_WR_REG>
	return LCD_RD_DATA();
 8000c8a:	f7ff ff87 	bl	8000b9c <LCD_RD_DATA>
 8000c8e:	4603      	mov	r3, r0
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <LCD_WriteRAM_Prepare+0x14>)
 8000c9e:	891b      	ldrh	r3, [r3, #8]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ff33 	bl	8000b0c <LCD_WR_REG>
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000030 	.word	0x20000030

08000cb0 <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	460a      	mov	r2, r1
 8000cba:	80fb      	strh	r3, [r7, #6]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8000cc0:	4b73      	ldr	r3, [pc, #460]	; (8000e90 <LCD_SetCursor+0x1e0>)
 8000cc2:	889b      	ldrh	r3, [r3, #4]
 8000cc4:	f249 3241 	movw	r2, #37697	; 0x9341
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d005      	beq.n	8000cd8 <LCD_SetCursor+0x28>
 8000ccc:	4b70      	ldr	r3, [pc, #448]	; (8000e90 <LCD_SetCursor+0x1e0>)
 8000cce:	889b      	ldrh	r3, [r3, #4]
 8000cd0:	f245 3210 	movw	r2, #21264	; 0x5310
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d164      	bne.n	8000da2 <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8000cd8:	4b6d      	ldr	r3, [pc, #436]	; (8000e90 <LCD_SetCursor+0x1e0>)
 8000cda:	895b      	ldrh	r3, [r3, #10]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff15 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000ce2:	4b6c      	ldr	r3, [pc, #432]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000ce4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ce8:	611a      	str	r2, [r3, #16]
 8000cea:	4b6a      	ldr	r3, [pc, #424]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000cec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cf0:	615a      	str	r2, [r3, #20]
 8000cf2:	88fb      	ldrh	r3, [r7, #6]
 8000cf4:	0a1b      	lsrs	r3, r3, #8
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	4b67      	ldr	r3, [pc, #412]	; (8000e98 <LCD_SetCursor+0x1e8>)
 8000cfa:	60da      	str	r2, [r3, #12]
 8000cfc:	4b65      	ldr	r3, [pc, #404]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000cfe:	2280      	movs	r2, #128	; 0x80
 8000d00:	615a      	str	r2, [r3, #20]
 8000d02:	4b64      	ldr	r3, [pc, #400]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000d04:	2280      	movs	r2, #128	; 0x80
 8000d06:	611a      	str	r2, [r3, #16]
 8000d08:	4b62      	ldr	r3, [pc, #392]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d0e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000d10:	4b60      	ldr	r3, [pc, #384]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000d12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d16:	611a      	str	r2, [r3, #16]
 8000d18:	4b5e      	ldr	r3, [pc, #376]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000d1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d1e:	615a      	str	r2, [r3, #20]
 8000d20:	88fb      	ldrh	r3, [r7, #6]
 8000d22:	4a5d      	ldr	r2, [pc, #372]	; (8000e98 <LCD_SetCursor+0x1e8>)
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	60d3      	str	r3, [r2, #12]
 8000d28:	4b5a      	ldr	r3, [pc, #360]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000d2a:	2280      	movs	r2, #128	; 0x80
 8000d2c:	615a      	str	r2, [r3, #20]
 8000d2e:	4b59      	ldr	r3, [pc, #356]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	611a      	str	r2, [r3, #16]
 8000d34:	4b57      	ldr	r3, [pc, #348]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000d36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d3a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000d3c:	4b54      	ldr	r3, [pc, #336]	; (8000e90 <LCD_SetCursor+0x1e0>)
 8000d3e:	899b      	ldrh	r3, [r3, #12]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fee3 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000d46:	4b53      	ldr	r3, [pc, #332]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000d48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d4c:	611a      	str	r2, [r3, #16]
 8000d4e:	4b51      	ldr	r3, [pc, #324]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000d50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d54:	615a      	str	r2, [r3, #20]
 8000d56:	88bb      	ldrh	r3, [r7, #4]
 8000d58:	0a1b      	lsrs	r3, r3, #8
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	4b4e      	ldr	r3, [pc, #312]	; (8000e98 <LCD_SetCursor+0x1e8>)
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	4b4c      	ldr	r3, [pc, #304]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000d62:	2280      	movs	r2, #128	; 0x80
 8000d64:	615a      	str	r2, [r3, #20]
 8000d66:	4b4b      	ldr	r3, [pc, #300]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000d68:	2280      	movs	r2, #128	; 0x80
 8000d6a:	611a      	str	r2, [r3, #16]
 8000d6c:	4b49      	ldr	r3, [pc, #292]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000d6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d72:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000d74:	4b47      	ldr	r3, [pc, #284]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000d76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d7a:	611a      	str	r2, [r3, #16]
 8000d7c:	4b45      	ldr	r3, [pc, #276]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000d7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d82:	615a      	str	r2, [r3, #20]
 8000d84:	88bb      	ldrh	r3, [r7, #4]
 8000d86:	4a44      	ldr	r2, [pc, #272]	; (8000e98 <LCD_SetCursor+0x1e8>)
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	60d3      	str	r3, [r2, #12]
 8000d8c:	4b41      	ldr	r3, [pc, #260]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000d8e:	2280      	movs	r2, #128	; 0x80
 8000d90:	615a      	str	r2, [r3, #20]
 8000d92:	4b40      	ldr	r3, [pc, #256]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000d94:	2280      	movs	r2, #128	; 0x80
 8000d96:	611a      	str	r2, [r3, #16]
 8000d98:	4b3e      	ldr	r3, [pc, #248]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000d9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d9e:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8000da0:	e248      	b.n	8001234 <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8000da2:	4b3b      	ldr	r3, [pc, #236]	; (8000e90 <LCD_SetCursor+0x1e0>)
 8000da4:	889b      	ldrh	r3, [r3, #4]
 8000da6:	f646 0204 	movw	r2, #26628	; 0x6804
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d176      	bne.n	8000e9c <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 8000dae:	4b38      	ldr	r3, [pc, #224]	; (8000e90 <LCD_SetCursor+0x1e0>)
 8000db0:	799b      	ldrb	r3, [r3, #6]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d106      	bne.n	8000dc4 <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8000db6:	4b36      	ldr	r3, [pc, #216]	; (8000e90 <LCD_SetCursor+0x1e0>)
 8000db8:	881a      	ldrh	r2, [r3, #0]
 8000dba:	88fb      	ldrh	r3, [r7, #6]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8000dc4:	4b32      	ldr	r3, [pc, #200]	; (8000e90 <LCD_SetCursor+0x1e0>)
 8000dc6:	895b      	ldrh	r3, [r3, #10]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fe9f 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000dce:	4b31      	ldr	r3, [pc, #196]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000dd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dd4:	611a      	str	r2, [r3, #16]
 8000dd6:	4b2f      	ldr	r3, [pc, #188]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ddc:	615a      	str	r2, [r3, #20]
 8000dde:	88fb      	ldrh	r3, [r7, #6]
 8000de0:	0a1b      	lsrs	r3, r3, #8
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	4b2c      	ldr	r3, [pc, #176]	; (8000e98 <LCD_SetCursor+0x1e8>)
 8000de6:	60da      	str	r2, [r3, #12]
 8000de8:	4b2a      	ldr	r3, [pc, #168]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000dea:	2280      	movs	r2, #128	; 0x80
 8000dec:	615a      	str	r2, [r3, #20]
 8000dee:	4b29      	ldr	r3, [pc, #164]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000df0:	2280      	movs	r2, #128	; 0x80
 8000df2:	611a      	str	r2, [r3, #16]
 8000df4:	4b27      	ldr	r3, [pc, #156]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000df6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dfa:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000dfc:	4b25      	ldr	r3, [pc, #148]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000dfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e02:	611a      	str	r2, [r3, #16]
 8000e04:	4b23      	ldr	r3, [pc, #140]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000e06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e0a:	615a      	str	r2, [r3, #20]
 8000e0c:	88fb      	ldrh	r3, [r7, #6]
 8000e0e:	4a22      	ldr	r2, [pc, #136]	; (8000e98 <LCD_SetCursor+0x1e8>)
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	60d3      	str	r3, [r2, #12]
 8000e14:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000e16:	2280      	movs	r2, #128	; 0x80
 8000e18:	615a      	str	r2, [r3, #20]
 8000e1a:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000e1c:	2280      	movs	r2, #128	; 0x80
 8000e1e:	611a      	str	r2, [r3, #16]
 8000e20:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000e22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e26:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000e28:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <LCD_SetCursor+0x1e0>)
 8000e2a:	899b      	ldrh	r3, [r3, #12]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fe6d 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000e34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e38:	611a      	str	r2, [r3, #16]
 8000e3a:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e40:	615a      	str	r2, [r3, #20]
 8000e42:	88bb      	ldrh	r3, [r7, #4]
 8000e44:	0a1b      	lsrs	r3, r3, #8
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <LCD_SetCursor+0x1e8>)
 8000e4a:	60da      	str	r2, [r3, #12]
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000e4e:	2280      	movs	r2, #128	; 0x80
 8000e50:	615a      	str	r2, [r3, #20]
 8000e52:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000e54:	2280      	movs	r2, #128	; 0x80
 8000e56:	611a      	str	r2, [r3, #16]
 8000e58:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000e5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e5e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000e62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e66:	611a      	str	r2, [r3, #16]
 8000e68:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000e6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e6e:	615a      	str	r2, [r3, #20]
 8000e70:	88bb      	ldrh	r3, [r7, #4]
 8000e72:	4a09      	ldr	r2, [pc, #36]	; (8000e98 <LCD_SetCursor+0x1e8>)
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	60d3      	str	r3, [r2, #12]
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000e7a:	2280      	movs	r2, #128	; 0x80
 8000e7c:	615a      	str	r2, [r3, #20]
 8000e7e:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000e80:	2280      	movs	r2, #128	; 0x80
 8000e82:	611a      	str	r2, [r3, #16]
 8000e84:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <LCD_SetCursor+0x1e4>)
 8000e86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e8a:	611a      	str	r2, [r3, #16]
}
 8000e8c:	e1d2      	b.n	8001234 <LCD_SetCursor+0x584>
 8000e8e:	bf00      	nop
 8000e90:	20000030 	.word	0x20000030
 8000e94:	40011000 	.word	0x40011000
 8000e98:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8000e9c:	4b99      	ldr	r3, [pc, #612]	; (8001104 <LCD_SetCursor+0x454>)
 8000e9e:	889b      	ldrh	r3, [r3, #4]
 8000ea0:	f641 1263 	movw	r2, #6499	; 0x1963
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	f040 8133 	bne.w	8001110 <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 8000eaa:	4b96      	ldr	r3, [pc, #600]	; (8001104 <LCD_SetCursor+0x454>)
 8000eac:	799b      	ldrb	r3, [r3, #6]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d163      	bne.n	8000f7a <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8000eb2:	4b94      	ldr	r3, [pc, #592]	; (8001104 <LCD_SetCursor+0x454>)
 8000eb4:	881a      	ldrh	r2, [r3, #0]
 8000eb6:	88fb      	ldrh	r3, [r7, #6]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8000ec0:	4b90      	ldr	r3, [pc, #576]	; (8001104 <LCD_SetCursor+0x454>)
 8000ec2:	895b      	ldrh	r3, [r3, #10]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fe21 	bl	8000b0c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8000eca:	4b8f      	ldr	r3, [pc, #572]	; (8001108 <LCD_SetCursor+0x458>)
 8000ecc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ed0:	611a      	str	r2, [r3, #16]
 8000ed2:	4b8d      	ldr	r3, [pc, #564]	; (8001108 <LCD_SetCursor+0x458>)
 8000ed4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ed8:	615a      	str	r2, [r3, #20]
 8000eda:	4b8c      	ldr	r3, [pc, #560]	; (800110c <LCD_SetCursor+0x45c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	4b89      	ldr	r3, [pc, #548]	; (8001108 <LCD_SetCursor+0x458>)
 8000ee2:	2280      	movs	r2, #128	; 0x80
 8000ee4:	615a      	str	r2, [r3, #20]
 8000ee6:	4b88      	ldr	r3, [pc, #544]	; (8001108 <LCD_SetCursor+0x458>)
 8000ee8:	2280      	movs	r2, #128	; 0x80
 8000eea:	611a      	str	r2, [r3, #16]
 8000eec:	4b86      	ldr	r3, [pc, #536]	; (8001108 <LCD_SetCursor+0x458>)
 8000eee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef2:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8000ef4:	4b84      	ldr	r3, [pc, #528]	; (8001108 <LCD_SetCursor+0x458>)
 8000ef6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000efa:	611a      	str	r2, [r3, #16]
 8000efc:	4b82      	ldr	r3, [pc, #520]	; (8001108 <LCD_SetCursor+0x458>)
 8000efe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f02:	615a      	str	r2, [r3, #20]
 8000f04:	4b81      	ldr	r3, [pc, #516]	; (800110c <LCD_SetCursor+0x45c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	4b7f      	ldr	r3, [pc, #508]	; (8001108 <LCD_SetCursor+0x458>)
 8000f0c:	2280      	movs	r2, #128	; 0x80
 8000f0e:	615a      	str	r2, [r3, #20]
 8000f10:	4b7d      	ldr	r3, [pc, #500]	; (8001108 <LCD_SetCursor+0x458>)
 8000f12:	2280      	movs	r2, #128	; 0x80
 8000f14:	611a      	str	r2, [r3, #16]
 8000f16:	4b7c      	ldr	r3, [pc, #496]	; (8001108 <LCD_SetCursor+0x458>)
 8000f18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f1c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 8000f1e:	4b7a      	ldr	r3, [pc, #488]	; (8001108 <LCD_SetCursor+0x458>)
 8000f20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f24:	611a      	str	r2, [r3, #16]
 8000f26:	4b78      	ldr	r3, [pc, #480]	; (8001108 <LCD_SetCursor+0x458>)
 8000f28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f2c:	615a      	str	r2, [r3, #20]
 8000f2e:	88fb      	ldrh	r3, [r7, #6]
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	4b75      	ldr	r3, [pc, #468]	; (800110c <LCD_SetCursor+0x45c>)
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	4b73      	ldr	r3, [pc, #460]	; (8001108 <LCD_SetCursor+0x458>)
 8000f3a:	2280      	movs	r2, #128	; 0x80
 8000f3c:	615a      	str	r2, [r3, #20]
 8000f3e:	4b72      	ldr	r3, [pc, #456]	; (8001108 <LCD_SetCursor+0x458>)
 8000f40:	2280      	movs	r2, #128	; 0x80
 8000f42:	611a      	str	r2, [r3, #16]
 8000f44:	4b70      	ldr	r3, [pc, #448]	; (8001108 <LCD_SetCursor+0x458>)
 8000f46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f4a:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000f4c:	4b6e      	ldr	r3, [pc, #440]	; (8001108 <LCD_SetCursor+0x458>)
 8000f4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f52:	611a      	str	r2, [r3, #16]
 8000f54:	4b6c      	ldr	r3, [pc, #432]	; (8001108 <LCD_SetCursor+0x458>)
 8000f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f5a:	615a      	str	r2, [r3, #20]
 8000f5c:	88fb      	ldrh	r3, [r7, #6]
 8000f5e:	4a6b      	ldr	r2, [pc, #428]	; (800110c <LCD_SetCursor+0x45c>)
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	60d3      	str	r3, [r2, #12]
 8000f64:	4b68      	ldr	r3, [pc, #416]	; (8001108 <LCD_SetCursor+0x458>)
 8000f66:	2280      	movs	r2, #128	; 0x80
 8000f68:	615a      	str	r2, [r3, #20]
 8000f6a:	4b67      	ldr	r3, [pc, #412]	; (8001108 <LCD_SetCursor+0x458>)
 8000f6c:	2280      	movs	r2, #128	; 0x80
 8000f6e:	611a      	str	r2, [r3, #16]
 8000f70:	4b65      	ldr	r3, [pc, #404]	; (8001108 <LCD_SetCursor+0x458>)
 8000f72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f76:	611a      	str	r2, [r3, #16]
 8000f78:	e061      	b.n	800103e <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 8000f7a:	4b62      	ldr	r3, [pc, #392]	; (8001104 <LCD_SetCursor+0x454>)
 8000f7c:	895b      	ldrh	r3, [r3, #10]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fdc4 	bl	8000b0c <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 8000f84:	4b60      	ldr	r3, [pc, #384]	; (8001108 <LCD_SetCursor+0x458>)
 8000f86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f8a:	611a      	str	r2, [r3, #16]
 8000f8c:	4b5e      	ldr	r3, [pc, #376]	; (8001108 <LCD_SetCursor+0x458>)
 8000f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f92:	615a      	str	r2, [r3, #20]
 8000f94:	88fb      	ldrh	r3, [r7, #6]
 8000f96:	0a1b      	lsrs	r3, r3, #8
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	4b5c      	ldr	r3, [pc, #368]	; (800110c <LCD_SetCursor+0x45c>)
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	4b5a      	ldr	r3, [pc, #360]	; (8001108 <LCD_SetCursor+0x458>)
 8000fa0:	2280      	movs	r2, #128	; 0x80
 8000fa2:	615a      	str	r2, [r3, #20]
 8000fa4:	4b58      	ldr	r3, [pc, #352]	; (8001108 <LCD_SetCursor+0x458>)
 8000fa6:	2280      	movs	r2, #128	; 0x80
 8000fa8:	611a      	str	r2, [r3, #16]
 8000faa:	4b57      	ldr	r3, [pc, #348]	; (8001108 <LCD_SetCursor+0x458>)
 8000fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fb0:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000fb2:	4b55      	ldr	r3, [pc, #340]	; (8001108 <LCD_SetCursor+0x458>)
 8000fb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fb8:	611a      	str	r2, [r3, #16]
 8000fba:	4b53      	ldr	r3, [pc, #332]	; (8001108 <LCD_SetCursor+0x458>)
 8000fbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fc0:	615a      	str	r2, [r3, #20]
 8000fc2:	88fb      	ldrh	r3, [r7, #6]
 8000fc4:	4a51      	ldr	r2, [pc, #324]	; (800110c <LCD_SetCursor+0x45c>)
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	60d3      	str	r3, [r2, #12]
 8000fca:	4b4f      	ldr	r3, [pc, #316]	; (8001108 <LCD_SetCursor+0x458>)
 8000fcc:	2280      	movs	r2, #128	; 0x80
 8000fce:	615a      	str	r2, [r3, #20]
 8000fd0:	4b4d      	ldr	r3, [pc, #308]	; (8001108 <LCD_SetCursor+0x458>)
 8000fd2:	2280      	movs	r2, #128	; 0x80
 8000fd4:	611a      	str	r2, [r3, #16]
 8000fd6:	4b4c      	ldr	r3, [pc, #304]	; (8001108 <LCD_SetCursor+0x458>)
 8000fd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fdc:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8000fde:	4b4a      	ldr	r3, [pc, #296]	; (8001108 <LCD_SetCursor+0x458>)
 8000fe0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fe4:	611a      	str	r2, [r3, #16]
 8000fe6:	4b48      	ldr	r3, [pc, #288]	; (8001108 <LCD_SetCursor+0x458>)
 8000fe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fec:	615a      	str	r2, [r3, #20]
 8000fee:	4b45      	ldr	r3, [pc, #276]	; (8001104 <LCD_SetCursor+0x454>)
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	121a      	asrs	r2, r3, #8
 8000ff6:	4b45      	ldr	r3, [pc, #276]	; (800110c <LCD_SetCursor+0x45c>)
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	4b43      	ldr	r3, [pc, #268]	; (8001108 <LCD_SetCursor+0x458>)
 8000ffc:	2280      	movs	r2, #128	; 0x80
 8000ffe:	615a      	str	r2, [r3, #20]
 8001000:	4b41      	ldr	r3, [pc, #260]	; (8001108 <LCD_SetCursor+0x458>)
 8001002:	2280      	movs	r2, #128	; 0x80
 8001004:	611a      	str	r2, [r3, #16]
 8001006:	4b40      	ldr	r3, [pc, #256]	; (8001108 <LCD_SetCursor+0x458>)
 8001008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800100c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 800100e:	4b3e      	ldr	r3, [pc, #248]	; (8001108 <LCD_SetCursor+0x458>)
 8001010:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001014:	611a      	str	r2, [r3, #16]
 8001016:	4b3c      	ldr	r3, [pc, #240]	; (8001108 <LCD_SetCursor+0x458>)
 8001018:	f44f 7200 	mov.w	r2, #512	; 0x200
 800101c:	615a      	str	r2, [r3, #20]
 800101e:	4b39      	ldr	r3, [pc, #228]	; (8001104 <LCD_SetCursor+0x454>)
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	3b01      	subs	r3, #1
 8001024:	4a39      	ldr	r2, [pc, #228]	; (800110c <LCD_SetCursor+0x45c>)
 8001026:	b2db      	uxtb	r3, r3
 8001028:	60d3      	str	r3, [r2, #12]
 800102a:	4b37      	ldr	r3, [pc, #220]	; (8001108 <LCD_SetCursor+0x458>)
 800102c:	2280      	movs	r2, #128	; 0x80
 800102e:	615a      	str	r2, [r3, #20]
 8001030:	4b35      	ldr	r3, [pc, #212]	; (8001108 <LCD_SetCursor+0x458>)
 8001032:	2280      	movs	r2, #128	; 0x80
 8001034:	611a      	str	r2, [r3, #16]
 8001036:	4b34      	ldr	r3, [pc, #208]	; (8001108 <LCD_SetCursor+0x458>)
 8001038:	f44f 7200 	mov.w	r2, #512	; 0x200
 800103c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800103e:	4b31      	ldr	r3, [pc, #196]	; (8001104 <LCD_SetCursor+0x454>)
 8001040:	899b      	ldrh	r3, [r3, #12]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fd62 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8001048:	4b2f      	ldr	r3, [pc, #188]	; (8001108 <LCD_SetCursor+0x458>)
 800104a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800104e:	611a      	str	r2, [r3, #16]
 8001050:	4b2d      	ldr	r3, [pc, #180]	; (8001108 <LCD_SetCursor+0x458>)
 8001052:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001056:	615a      	str	r2, [r3, #20]
 8001058:	88bb      	ldrh	r3, [r7, #4]
 800105a:	0a1b      	lsrs	r3, r3, #8
 800105c:	b29a      	uxth	r2, r3
 800105e:	4b2b      	ldr	r3, [pc, #172]	; (800110c <LCD_SetCursor+0x45c>)
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	4b29      	ldr	r3, [pc, #164]	; (8001108 <LCD_SetCursor+0x458>)
 8001064:	2280      	movs	r2, #128	; 0x80
 8001066:	615a      	str	r2, [r3, #20]
 8001068:	4b27      	ldr	r3, [pc, #156]	; (8001108 <LCD_SetCursor+0x458>)
 800106a:	2280      	movs	r2, #128	; 0x80
 800106c:	611a      	str	r2, [r3, #16]
 800106e:	4b26      	ldr	r3, [pc, #152]	; (8001108 <LCD_SetCursor+0x458>)
 8001070:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001074:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8001076:	4b24      	ldr	r3, [pc, #144]	; (8001108 <LCD_SetCursor+0x458>)
 8001078:	f44f 7280 	mov.w	r2, #256	; 0x100
 800107c:	611a      	str	r2, [r3, #16]
 800107e:	4b22      	ldr	r3, [pc, #136]	; (8001108 <LCD_SetCursor+0x458>)
 8001080:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001084:	615a      	str	r2, [r3, #20]
 8001086:	88bb      	ldrh	r3, [r7, #4]
 8001088:	4a20      	ldr	r2, [pc, #128]	; (800110c <LCD_SetCursor+0x45c>)
 800108a:	b2db      	uxtb	r3, r3
 800108c:	60d3      	str	r3, [r2, #12]
 800108e:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <LCD_SetCursor+0x458>)
 8001090:	2280      	movs	r2, #128	; 0x80
 8001092:	615a      	str	r2, [r3, #20]
 8001094:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <LCD_SetCursor+0x458>)
 8001096:	2280      	movs	r2, #128	; 0x80
 8001098:	611a      	str	r2, [r3, #16]
 800109a:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <LCD_SetCursor+0x458>)
 800109c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010a0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 80010a2:	4b19      	ldr	r3, [pc, #100]	; (8001108 <LCD_SetCursor+0x458>)
 80010a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010a8:	611a      	str	r2, [r3, #16]
 80010aa:	4b17      	ldr	r3, [pc, #92]	; (8001108 <LCD_SetCursor+0x458>)
 80010ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010b0:	615a      	str	r2, [r3, #20]
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <LCD_SetCursor+0x454>)
 80010b4:	885b      	ldrh	r3, [r3, #2]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	121a      	asrs	r2, r3, #8
 80010ba:	4b14      	ldr	r3, [pc, #80]	; (800110c <LCD_SetCursor+0x45c>)
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	4b12      	ldr	r3, [pc, #72]	; (8001108 <LCD_SetCursor+0x458>)
 80010c0:	2280      	movs	r2, #128	; 0x80
 80010c2:	615a      	str	r2, [r3, #20]
 80010c4:	4b10      	ldr	r3, [pc, #64]	; (8001108 <LCD_SetCursor+0x458>)
 80010c6:	2280      	movs	r2, #128	; 0x80
 80010c8:	611a      	str	r2, [r3, #16]
 80010ca:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <LCD_SetCursor+0x458>)
 80010cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010d0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 80010d2:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <LCD_SetCursor+0x458>)
 80010d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010d8:	611a      	str	r2, [r3, #16]
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <LCD_SetCursor+0x458>)
 80010dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010e0:	615a      	str	r2, [r3, #20]
 80010e2:	4b08      	ldr	r3, [pc, #32]	; (8001104 <LCD_SetCursor+0x454>)
 80010e4:	885b      	ldrh	r3, [r3, #2]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	4a08      	ldr	r2, [pc, #32]	; (800110c <LCD_SetCursor+0x45c>)
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	60d3      	str	r3, [r2, #12]
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <LCD_SetCursor+0x458>)
 80010f0:	2280      	movs	r2, #128	; 0x80
 80010f2:	615a      	str	r2, [r3, #20]
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <LCD_SetCursor+0x458>)
 80010f6:	2280      	movs	r2, #128	; 0x80
 80010f8:	611a      	str	r2, [r3, #16]
 80010fa:	4b03      	ldr	r3, [pc, #12]	; (8001108 <LCD_SetCursor+0x458>)
 80010fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001100:	611a      	str	r2, [r3, #16]
}
 8001102:	e097      	b.n	8001234 <LCD_SetCursor+0x584>
 8001104:	20000030 	.word	0x20000030
 8001108:	40011000 	.word	0x40011000
 800110c:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 8001110:	4b4a      	ldr	r3, [pc, #296]	; (800123c <LCD_SetCursor+0x58c>)
 8001112:	889b      	ldrh	r3, [r3, #4]
 8001114:	f245 5210 	movw	r2, #21776	; 0x5510
 8001118:	4293      	cmp	r3, r2
 800111a:	d172      	bne.n	8001202 <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 800111c:	4b47      	ldr	r3, [pc, #284]	; (800123c <LCD_SetCursor+0x58c>)
 800111e:	895b      	ldrh	r3, [r3, #10]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fcf3 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8001126:	4b46      	ldr	r3, [pc, #280]	; (8001240 <LCD_SetCursor+0x590>)
 8001128:	f44f 7280 	mov.w	r2, #256	; 0x100
 800112c:	611a      	str	r2, [r3, #16]
 800112e:	4b44      	ldr	r3, [pc, #272]	; (8001240 <LCD_SetCursor+0x590>)
 8001130:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001134:	615a      	str	r2, [r3, #20]
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	0a1b      	lsrs	r3, r3, #8
 800113a:	b29a      	uxth	r2, r3
 800113c:	4b41      	ldr	r3, [pc, #260]	; (8001244 <LCD_SetCursor+0x594>)
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	4b3f      	ldr	r3, [pc, #252]	; (8001240 <LCD_SetCursor+0x590>)
 8001142:	2280      	movs	r2, #128	; 0x80
 8001144:	615a      	str	r2, [r3, #20]
 8001146:	4b3e      	ldr	r3, [pc, #248]	; (8001240 <LCD_SetCursor+0x590>)
 8001148:	2280      	movs	r2, #128	; 0x80
 800114a:	611a      	str	r2, [r3, #16]
 800114c:	4b3c      	ldr	r3, [pc, #240]	; (8001240 <LCD_SetCursor+0x590>)
 800114e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001152:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8001154:	4b39      	ldr	r3, [pc, #228]	; (800123c <LCD_SetCursor+0x58c>)
 8001156:	895b      	ldrh	r3, [r3, #10]
 8001158:	3301      	adds	r3, #1
 800115a:	b29b      	uxth	r3, r3
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fcd5 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 8001162:	4b37      	ldr	r3, [pc, #220]	; (8001240 <LCD_SetCursor+0x590>)
 8001164:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001168:	611a      	str	r2, [r3, #16]
 800116a:	4b35      	ldr	r3, [pc, #212]	; (8001240 <LCD_SetCursor+0x590>)
 800116c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001170:	615a      	str	r2, [r3, #20]
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	4a33      	ldr	r2, [pc, #204]	; (8001244 <LCD_SetCursor+0x594>)
 8001176:	b2db      	uxtb	r3, r3
 8001178:	60d3      	str	r3, [r2, #12]
 800117a:	4b31      	ldr	r3, [pc, #196]	; (8001240 <LCD_SetCursor+0x590>)
 800117c:	2280      	movs	r2, #128	; 0x80
 800117e:	615a      	str	r2, [r3, #20]
 8001180:	4b2f      	ldr	r3, [pc, #188]	; (8001240 <LCD_SetCursor+0x590>)
 8001182:	2280      	movs	r2, #128	; 0x80
 8001184:	611a      	str	r2, [r3, #16]
 8001186:	4b2e      	ldr	r3, [pc, #184]	; (8001240 <LCD_SetCursor+0x590>)
 8001188:	f44f 7200 	mov.w	r2, #512	; 0x200
 800118c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800118e:	4b2b      	ldr	r3, [pc, #172]	; (800123c <LCD_SetCursor+0x58c>)
 8001190:	899b      	ldrh	r3, [r3, #12]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fcba 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8001198:	4b29      	ldr	r3, [pc, #164]	; (8001240 <LCD_SetCursor+0x590>)
 800119a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800119e:	611a      	str	r2, [r3, #16]
 80011a0:	4b27      	ldr	r3, [pc, #156]	; (8001240 <LCD_SetCursor+0x590>)
 80011a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011a6:	615a      	str	r2, [r3, #20]
 80011a8:	88bb      	ldrh	r3, [r7, #4]
 80011aa:	0a1b      	lsrs	r3, r3, #8
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	4b25      	ldr	r3, [pc, #148]	; (8001244 <LCD_SetCursor+0x594>)
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	4b23      	ldr	r3, [pc, #140]	; (8001240 <LCD_SetCursor+0x590>)
 80011b4:	2280      	movs	r2, #128	; 0x80
 80011b6:	615a      	str	r2, [r3, #20]
 80011b8:	4b21      	ldr	r3, [pc, #132]	; (8001240 <LCD_SetCursor+0x590>)
 80011ba:	2280      	movs	r2, #128	; 0x80
 80011bc:	611a      	str	r2, [r3, #16]
 80011be:	4b20      	ldr	r3, [pc, #128]	; (8001240 <LCD_SetCursor+0x590>)
 80011c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c4:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 80011c6:	4b1d      	ldr	r3, [pc, #116]	; (800123c <LCD_SetCursor+0x58c>)
 80011c8:	899b      	ldrh	r3, [r3, #12]
 80011ca:	3301      	adds	r3, #1
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fc9c 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 80011d4:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <LCD_SetCursor+0x590>)
 80011d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011da:	611a      	str	r2, [r3, #16]
 80011dc:	4b18      	ldr	r3, [pc, #96]	; (8001240 <LCD_SetCursor+0x590>)
 80011de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011e2:	615a      	str	r2, [r3, #20]
 80011e4:	88bb      	ldrh	r3, [r7, #4]
 80011e6:	4a17      	ldr	r2, [pc, #92]	; (8001244 <LCD_SetCursor+0x594>)
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	60d3      	str	r3, [r2, #12]
 80011ec:	4b14      	ldr	r3, [pc, #80]	; (8001240 <LCD_SetCursor+0x590>)
 80011ee:	2280      	movs	r2, #128	; 0x80
 80011f0:	615a      	str	r2, [r3, #20]
 80011f2:	4b13      	ldr	r3, [pc, #76]	; (8001240 <LCD_SetCursor+0x590>)
 80011f4:	2280      	movs	r2, #128	; 0x80
 80011f6:	611a      	str	r2, [r3, #16]
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <LCD_SetCursor+0x590>)
 80011fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011fe:	611a      	str	r2, [r3, #16]
}
 8001200:	e018      	b.n	8001234 <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <LCD_SetCursor+0x58c>)
 8001204:	799b      	ldrb	r3, [r3, #6]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d106      	bne.n	8001218 <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <LCD_SetCursor+0x58c>)
 800120c:	881a      	ldrh	r2, [r3, #0]
 800120e:	88fb      	ldrh	r3, [r7, #6]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	b29b      	uxth	r3, r3
 8001214:	3b01      	subs	r3, #1
 8001216:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <LCD_SetCursor+0x58c>)
 800121a:	895b      	ldrh	r3, [r3, #10]
 800121c:	88fa      	ldrh	r2, [r7, #6]
 800121e:	4611      	mov	r1, r2
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fcff 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 8001226:	4b05      	ldr	r3, [pc, #20]	; (800123c <LCD_SetCursor+0x58c>)
 8001228:	899b      	ldrh	r3, [r3, #12]
 800122a:	88ba      	ldrh	r2, [r7, #4]
 800122c:	4611      	mov	r1, r2
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fcf8 	bl	8000c24 <LCD_WriteReg>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000030 	.word	0x20000030
 8001240:	40011000 	.word	0x40011000
 8001244:	40010c00 	.word	0x40010c00

08001248 <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 800125a:	4b78      	ldr	r3, [pc, #480]	; (800143c <LCD_Scan_Dir+0x1f4>)
 800125c:	799b      	ldrb	r3, [r3, #6]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d10b      	bne.n	800127a <LCD_Scan_Dir+0x32>
 8001262:	4b76      	ldr	r3, [pc, #472]	; (800143c <LCD_Scan_Dir+0x1f4>)
 8001264:	889b      	ldrh	r3, [r3, #4]
 8001266:	f646 0204 	movw	r2, #26628	; 0x6804
 800126a:	4293      	cmp	r3, r2
 800126c:	d005      	beq.n	800127a <LCD_Scan_Dir+0x32>
 800126e:	4b73      	ldr	r3, [pc, #460]	; (800143c <LCD_Scan_Dir+0x1f4>)
 8001270:	889b      	ldrh	r3, [r3, #4]
 8001272:	f641 1263 	movw	r2, #6499	; 0x1963
 8001276:	4293      	cmp	r3, r2
 8001278:	d109      	bne.n	800128e <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 800127a:	4b70      	ldr	r3, [pc, #448]	; (800143c <LCD_Scan_Dir+0x1f4>)
 800127c:	799b      	ldrb	r3, [r3, #6]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d134      	bne.n	80012ec <LCD_Scan_Dir+0xa4>
 8001282:	4b6e      	ldr	r3, [pc, #440]	; (800143c <LCD_Scan_Dir+0x1f4>)
 8001284:	889b      	ldrh	r3, [r3, #4]
 8001286:	f641 1263 	movw	r2, #6499	; 0x1963
 800128a:	4293      	cmp	r3, r2
 800128c:	d12e      	bne.n	80012ec <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	2b07      	cmp	r3, #7
 8001292:	d82b      	bhi.n	80012ec <LCD_Scan_Dir+0xa4>
 8001294:	a201      	add	r2, pc, #4	; (adr r2, 800129c <LCD_Scan_Dir+0x54>)
 8001296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800129a:	bf00      	nop
 800129c:	080012bd 	.word	0x080012bd
 80012a0:	080012c3 	.word	0x080012c3
 80012a4:	080012c9 	.word	0x080012c9
 80012a8:	080012cf 	.word	0x080012cf
 80012ac:	080012d5 	.word	0x080012d5
 80012b0:	080012db 	.word	0x080012db
 80012b4:	080012e1 	.word	0x080012e1
 80012b8:	080012e7 	.word	0x080012e7
		{
		case 0:
			dir = 6;
 80012bc:	2306      	movs	r3, #6
 80012be:	71fb      	strb	r3, [r7, #7]
			break;
 80012c0:	e014      	b.n	80012ec <LCD_Scan_Dir+0xa4>
		case 1:
			dir = 7;
 80012c2:	2307      	movs	r3, #7
 80012c4:	71fb      	strb	r3, [r7, #7]
			break;
 80012c6:	e011      	b.n	80012ec <LCD_Scan_Dir+0xa4>
		case 2:
			dir = 4;
 80012c8:	2304      	movs	r3, #4
 80012ca:	71fb      	strb	r3, [r7, #7]
			break;
 80012cc:	e00e      	b.n	80012ec <LCD_Scan_Dir+0xa4>
		case 3:
			dir = 5;
 80012ce:	2305      	movs	r3, #5
 80012d0:	71fb      	strb	r3, [r7, #7]
			break;
 80012d2:	e00b      	b.n	80012ec <LCD_Scan_Dir+0xa4>
		case 4:
			dir = 1;
 80012d4:	2301      	movs	r3, #1
 80012d6:	71fb      	strb	r3, [r7, #7]
			break;
 80012d8:	e008      	b.n	80012ec <LCD_Scan_Dir+0xa4>
		case 5:
			dir = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	71fb      	strb	r3, [r7, #7]
			break;
 80012de:	e005      	b.n	80012ec <LCD_Scan_Dir+0xa4>
		case 6:
			dir = 3;
 80012e0:	2303      	movs	r3, #3
 80012e2:	71fb      	strb	r3, [r7, #7]
			break;
 80012e4:	e002      	b.n	80012ec <LCD_Scan_Dir+0xa4>
		case 7:
			dir = 2;
 80012e6:	2302      	movs	r3, #2
 80012e8:	71fb      	strb	r3, [r7, #7]
			break;
 80012ea:	bf00      	nop
		}
	}
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 80012ec:	4b53      	ldr	r3, [pc, #332]	; (800143c <LCD_Scan_Dir+0x1f4>)
 80012ee:	889b      	ldrh	r3, [r3, #4]
 80012f0:	f249 3241 	movw	r2, #37697	; 0x9341
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d018      	beq.n	800132a <LCD_Scan_Dir+0xe2>
 80012f8:	4b50      	ldr	r3, [pc, #320]	; (800143c <LCD_Scan_Dir+0x1f4>)
 80012fa:	889b      	ldrh	r3, [r3, #4]
 80012fc:	f646 0204 	movw	r2, #26628	; 0x6804
 8001300:	4293      	cmp	r3, r2
 8001302:	d012      	beq.n	800132a <LCD_Scan_Dir+0xe2>
 8001304:	4b4d      	ldr	r3, [pc, #308]	; (800143c <LCD_Scan_Dir+0x1f4>)
 8001306:	889b      	ldrh	r3, [r3, #4]
 8001308:	f245 3210 	movw	r2, #21264	; 0x5310
 800130c:	4293      	cmp	r3, r2
 800130e:	d00c      	beq.n	800132a <LCD_Scan_Dir+0xe2>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 8001310:	4b4a      	ldr	r3, [pc, #296]	; (800143c <LCD_Scan_Dir+0x1f4>)
 8001312:	889b      	ldrh	r3, [r3, #4]
 8001314:	f245 5210 	movw	r2, #21776	; 0x5510
 8001318:	4293      	cmp	r3, r2
 800131a:	d006      	beq.n	800132a <LCD_Scan_Dir+0xe2>
 800131c:	4b47      	ldr	r3, [pc, #284]	; (800143c <LCD_Scan_Dir+0x1f4>)
 800131e:	889b      	ldrh	r3, [r3, #4]
 8001320:	f641 1263 	movw	r2, #6499	; 0x1963
 8001324:	4293      	cmp	r3, r2
 8001326:	f040 8250 	bne.w	80017ca <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	2b07      	cmp	r3, #7
 800132e:	d836      	bhi.n	800139e <LCD_Scan_Dir+0x156>
 8001330:	a201      	add	r2, pc, #4	; (adr r2, 8001338 <LCD_Scan_Dir+0xf0>)
 8001332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001336:	bf00      	nop
 8001338:	0800139f 	.word	0x0800139f
 800133c:	08001359 	.word	0x08001359
 8001340:	08001363 	.word	0x08001363
 8001344:	0800136d 	.word	0x0800136d
 8001348:	08001377 	.word	0x08001377
 800134c:	08001381 	.word	0x08001381
 8001350:	0800138b 	.word	0x0800138b
 8001354:	08001395 	.word	0x08001395
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 8001358:	89fb      	ldrh	r3, [r7, #14]
 800135a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800135e:	81fb      	strh	r3, [r7, #14]
			break;
 8001360:	e01d      	b.n	800139e <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 8001362:	89fb      	ldrh	r3, [r7, #14]
 8001364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001368:	81fb      	strh	r3, [r7, #14]
			break;
 800136a:	e018      	b.n	800139e <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 800136c:	89fb      	ldrh	r3, [r7, #14]
 800136e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001372:	81fb      	strh	r3, [r7, #14]
			break;
 8001374:	e013      	b.n	800139e <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 8001376:	89fb      	ldrh	r3, [r7, #14]
 8001378:	f043 0320 	orr.w	r3, r3, #32
 800137c:	81fb      	strh	r3, [r7, #14]
			break;
 800137e:	e00e      	b.n	800139e <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8001380:	89fb      	ldrh	r3, [r7, #14]
 8001382:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001386:	81fb      	strh	r3, [r7, #14]
			break;
 8001388:	e009      	b.n	800139e <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 800138a:	89fb      	ldrh	r3, [r7, #14]
 800138c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001390:	81fb      	strh	r3, [r7, #14]
			break;
 8001392:	e004      	b.n	800139e <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 8001394:	89fb      	ldrh	r3, [r7, #14]
 8001396:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800139a:	81fb      	strh	r3, [r7, #14]
			break;
 800139c:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 800139e:	4b27      	ldr	r3, [pc, #156]	; (800143c <LCD_Scan_Dir+0x1f4>)
 80013a0:	889b      	ldrh	r3, [r3, #4]
 80013a2:	f245 5210 	movw	r2, #21776	; 0x5510
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d103      	bne.n	80013b2 <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 80013aa:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 80013ae:	81bb      	strh	r3, [r7, #12]
 80013b0:	e001      	b.n	80013b6 <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 80013b2:	2336      	movs	r3, #54	; 0x36
 80013b4:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 80013b6:	4b21      	ldr	r3, [pc, #132]	; (800143c <LCD_Scan_Dir+0x1f4>)
 80013b8:	889b      	ldrh	r3, [r3, #4]
 80013ba:	f245 3210 	movw	r2, #21264	; 0x5310
 80013be:	4293      	cmp	r3, r2
 80013c0:	d00f      	beq.n	80013e2 <LCD_Scan_Dir+0x19a>
 80013c2:	4b1e      	ldr	r3, [pc, #120]	; (800143c <LCD_Scan_Dir+0x1f4>)
 80013c4:	889b      	ldrh	r3, [r3, #4]
 80013c6:	f245 5210 	movw	r2, #21776	; 0x5510
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d009      	beq.n	80013e2 <LCD_Scan_Dir+0x19a>
 80013ce:	4b1b      	ldr	r3, [pc, #108]	; (800143c <LCD_Scan_Dir+0x1f4>)
 80013d0:	889b      	ldrh	r3, [r3, #4]
 80013d2:	f641 1263 	movw	r2, #6499	; 0x1963
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d003      	beq.n	80013e2 <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 80013da:	89fb      	ldrh	r3, [r7, #14]
 80013dc:	f043 0308 	orr.w	r3, r3, #8
 80013e0:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 80013e2:	4b16      	ldr	r3, [pc, #88]	; (800143c <LCD_Scan_Dir+0x1f4>)
 80013e4:	889b      	ldrh	r3, [r3, #4]
 80013e6:	f646 0204 	movw	r2, #26628	; 0x6804
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d103      	bne.n	80013f6 <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 80013ee:	89fb      	ldrh	r3, [r7, #14]
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 80013f6:	89fa      	ldrh	r2, [r7, #14]
 80013f8:	89bb      	ldrh	r3, [r7, #12]
 80013fa:	4611      	mov	r1, r2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fc11 	bl	8000c24 <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <LCD_Scan_Dir+0x1f4>)
 8001404:	889b      	ldrh	r3, [r3, #4]
 8001406:	f641 1263 	movw	r2, #6499	; 0x1963
 800140a:	4293      	cmp	r3, r2
 800140c:	d028      	beq.n	8001460 <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 800140e:	89fb      	ldrh	r3, [r7, #14]
 8001410:	f003 0320 	and.w	r3, r3, #32
 8001414:	2b00      	cmp	r3, #0
 8001416:	d013      	beq.n	8001440 <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <LCD_Scan_Dir+0x1f4>)
 800141a:	881a      	ldrh	r2, [r3, #0]
 800141c:	4b07      	ldr	r3, [pc, #28]	; (800143c <LCD_Scan_Dir+0x1f4>)
 800141e:	885b      	ldrh	r3, [r3, #2]
 8001420:	429a      	cmp	r2, r3
 8001422:	d21d      	bcs.n	8001460 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <LCD_Scan_Dir+0x1f4>)
 8001426:	881b      	ldrh	r3, [r3, #0]
 8001428:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 800142a:	4b04      	ldr	r3, [pc, #16]	; (800143c <LCD_Scan_Dir+0x1f4>)
 800142c:	885a      	ldrh	r2, [r3, #2]
 800142e:	4b03      	ldr	r3, [pc, #12]	; (800143c <LCD_Scan_Dir+0x1f4>)
 8001430:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 8001432:	4a02      	ldr	r2, [pc, #8]	; (800143c <LCD_Scan_Dir+0x1f4>)
 8001434:	897b      	ldrh	r3, [r7, #10]
 8001436:	8053      	strh	r3, [r2, #2]
 8001438:	e012      	b.n	8001460 <LCD_Scan_Dir+0x218>
 800143a:	bf00      	nop
 800143c:	20000030 	.word	0x20000030
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 8001440:	4b7f      	ldr	r3, [pc, #508]	; (8001640 <LCD_Scan_Dir+0x3f8>)
 8001442:	881a      	ldrh	r2, [r3, #0]
 8001444:	4b7e      	ldr	r3, [pc, #504]	; (8001640 <LCD_Scan_Dir+0x3f8>)
 8001446:	885b      	ldrh	r3, [r3, #2]
 8001448:	429a      	cmp	r2, r3
 800144a:	d909      	bls.n	8001460 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 800144c:	4b7c      	ldr	r3, [pc, #496]	; (8001640 <LCD_Scan_Dir+0x3f8>)
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 8001452:	4b7b      	ldr	r3, [pc, #492]	; (8001640 <LCD_Scan_Dir+0x3f8>)
 8001454:	885a      	ldrh	r2, [r3, #2]
 8001456:	4b7a      	ldr	r3, [pc, #488]	; (8001640 <LCD_Scan_Dir+0x3f8>)
 8001458:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 800145a:	4a79      	ldr	r2, [pc, #484]	; (8001640 <LCD_Scan_Dir+0x3f8>)
 800145c:	897b      	ldrh	r3, [r7, #10]
 800145e:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 8001460:	4b77      	ldr	r3, [pc, #476]	; (8001640 <LCD_Scan_Dir+0x3f8>)
 8001462:	889b      	ldrh	r3, [r3, #4]
 8001464:	f245 5210 	movw	r2, #21776	; 0x5510
 8001468:	4293      	cmp	r3, r2
 800146a:	f040 80ef 	bne.w	800164c <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 800146e:	4b74      	ldr	r3, [pc, #464]	; (8001640 <LCD_Scan_Dir+0x3f8>)
 8001470:	895b      	ldrh	r3, [r3, #10]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fb4a 	bl	8000b0c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001478:	4b72      	ldr	r3, [pc, #456]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 800147a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800147e:	611a      	str	r2, [r3, #16]
 8001480:	4b70      	ldr	r3, [pc, #448]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 8001482:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001486:	615a      	str	r2, [r3, #20]
 8001488:	4b6f      	ldr	r3, [pc, #444]	; (8001648 <LCD_Scan_Dir+0x400>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	4b6d      	ldr	r3, [pc, #436]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 8001490:	2280      	movs	r2, #128	; 0x80
 8001492:	615a      	str	r2, [r3, #20]
 8001494:	4b6b      	ldr	r3, [pc, #428]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 8001496:	2280      	movs	r2, #128	; 0x80
 8001498:	611a      	str	r2, [r3, #16]
 800149a:	4b6a      	ldr	r3, [pc, #424]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 800149c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014a0:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 80014a2:	4b67      	ldr	r3, [pc, #412]	; (8001640 <LCD_Scan_Dir+0x3f8>)
 80014a4:	895b      	ldrh	r3, [r3, #10]
 80014a6:	3301      	adds	r3, #1
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fb2e 	bl	8000b0c <LCD_WR_REG>
			LCD_WR_DATA(0);
 80014b0:	4b64      	ldr	r3, [pc, #400]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 80014b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014b6:	611a      	str	r2, [r3, #16]
 80014b8:	4b62      	ldr	r3, [pc, #392]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 80014ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014be:	615a      	str	r2, [r3, #20]
 80014c0:	4b61      	ldr	r3, [pc, #388]	; (8001648 <LCD_Scan_Dir+0x400>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	4b5f      	ldr	r3, [pc, #380]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 80014c8:	2280      	movs	r2, #128	; 0x80
 80014ca:	615a      	str	r2, [r3, #20]
 80014cc:	4b5d      	ldr	r3, [pc, #372]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 80014ce:	2280      	movs	r2, #128	; 0x80
 80014d0:	611a      	str	r2, [r3, #16]
 80014d2:	4b5c      	ldr	r3, [pc, #368]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 80014d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014d8:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 80014da:	4b59      	ldr	r3, [pc, #356]	; (8001640 <LCD_Scan_Dir+0x3f8>)
 80014dc:	895b      	ldrh	r3, [r3, #10]
 80014de:	3302      	adds	r3, #2
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff fb12 	bl	8000b0c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 80014e8:	4b56      	ldr	r3, [pc, #344]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 80014ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ee:	611a      	str	r2, [r3, #16]
 80014f0:	4b54      	ldr	r3, [pc, #336]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 80014f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014f6:	615a      	str	r2, [r3, #20]
 80014f8:	4b51      	ldr	r3, [pc, #324]	; (8001640 <LCD_Scan_Dir+0x3f8>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	3b01      	subs	r3, #1
 80014fe:	121a      	asrs	r2, r3, #8
 8001500:	4b51      	ldr	r3, [pc, #324]	; (8001648 <LCD_Scan_Dir+0x400>)
 8001502:	60da      	str	r2, [r3, #12]
 8001504:	4b4f      	ldr	r3, [pc, #316]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 8001506:	2280      	movs	r2, #128	; 0x80
 8001508:	615a      	str	r2, [r3, #20]
 800150a:	4b4e      	ldr	r3, [pc, #312]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 800150c:	2280      	movs	r2, #128	; 0x80
 800150e:	611a      	str	r2, [r3, #16]
 8001510:	4b4c      	ldr	r3, [pc, #304]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 8001512:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001516:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 8001518:	4b49      	ldr	r3, [pc, #292]	; (8001640 <LCD_Scan_Dir+0x3f8>)
 800151a:	895b      	ldrh	r3, [r3, #10]
 800151c:	3303      	adds	r3, #3
 800151e:	b29b      	uxth	r3, r3
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff faf3 	bl	8000b0c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8001526:	4b47      	ldr	r3, [pc, #284]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 8001528:	f44f 7280 	mov.w	r2, #256	; 0x100
 800152c:	611a      	str	r2, [r3, #16]
 800152e:	4b45      	ldr	r3, [pc, #276]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 8001530:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001534:	615a      	str	r2, [r3, #20]
 8001536:	4b42      	ldr	r3, [pc, #264]	; (8001640 <LCD_Scan_Dir+0x3f8>)
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	3b01      	subs	r3, #1
 800153c:	4a42      	ldr	r2, [pc, #264]	; (8001648 <LCD_Scan_Dir+0x400>)
 800153e:	b2db      	uxtb	r3, r3
 8001540:	60d3      	str	r3, [r2, #12]
 8001542:	4b40      	ldr	r3, [pc, #256]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 8001544:	2280      	movs	r2, #128	; 0x80
 8001546:	615a      	str	r2, [r3, #20]
 8001548:	4b3e      	ldr	r3, [pc, #248]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 800154a:	2280      	movs	r2, #128	; 0x80
 800154c:	611a      	str	r2, [r3, #16]
 800154e:	4b3d      	ldr	r3, [pc, #244]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 8001550:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001554:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 8001556:	4b3a      	ldr	r3, [pc, #232]	; (8001640 <LCD_Scan_Dir+0x3f8>)
 8001558:	899b      	ldrh	r3, [r3, #12]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fad6 	bl	8000b0c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001560:	4b38      	ldr	r3, [pc, #224]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 8001562:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001566:	611a      	str	r2, [r3, #16]
 8001568:	4b36      	ldr	r3, [pc, #216]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 800156a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800156e:	615a      	str	r2, [r3, #20]
 8001570:	4b35      	ldr	r3, [pc, #212]	; (8001648 <LCD_Scan_Dir+0x400>)
 8001572:	2200      	movs	r2, #0
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	4b33      	ldr	r3, [pc, #204]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 8001578:	2280      	movs	r2, #128	; 0x80
 800157a:	615a      	str	r2, [r3, #20]
 800157c:	4b31      	ldr	r3, [pc, #196]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 800157e:	2280      	movs	r2, #128	; 0x80
 8001580:	611a      	str	r2, [r3, #16]
 8001582:	4b30      	ldr	r3, [pc, #192]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 8001584:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001588:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 800158a:	4b2d      	ldr	r3, [pc, #180]	; (8001640 <LCD_Scan_Dir+0x3f8>)
 800158c:	899b      	ldrh	r3, [r3, #12]
 800158e:	3301      	adds	r3, #1
 8001590:	b29b      	uxth	r3, r3
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff faba 	bl	8000b0c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001598:	4b2a      	ldr	r3, [pc, #168]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 800159a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800159e:	611a      	str	r2, [r3, #16]
 80015a0:	4b28      	ldr	r3, [pc, #160]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 80015a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015a6:	615a      	str	r2, [r3, #20]
 80015a8:	4b27      	ldr	r3, [pc, #156]	; (8001648 <LCD_Scan_Dir+0x400>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	4b25      	ldr	r3, [pc, #148]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 80015b0:	2280      	movs	r2, #128	; 0x80
 80015b2:	615a      	str	r2, [r3, #20]
 80015b4:	4b23      	ldr	r3, [pc, #140]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 80015b6:	2280      	movs	r2, #128	; 0x80
 80015b8:	611a      	str	r2, [r3, #16]
 80015ba:	4b22      	ldr	r3, [pc, #136]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 80015bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015c0:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 80015c2:	4b1f      	ldr	r3, [pc, #124]	; (8001640 <LCD_Scan_Dir+0x3f8>)
 80015c4:	899b      	ldrh	r3, [r3, #12]
 80015c6:	3302      	adds	r3, #2
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fa9e 	bl	8000b0c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 80015d0:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 80015d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015d6:	611a      	str	r2, [r3, #16]
 80015d8:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 80015da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015de:	615a      	str	r2, [r3, #20]
 80015e0:	4b17      	ldr	r3, [pc, #92]	; (8001640 <LCD_Scan_Dir+0x3f8>)
 80015e2:	885b      	ldrh	r3, [r3, #2]
 80015e4:	3b01      	subs	r3, #1
 80015e6:	121a      	asrs	r2, r3, #8
 80015e8:	4b17      	ldr	r3, [pc, #92]	; (8001648 <LCD_Scan_Dir+0x400>)
 80015ea:	60da      	str	r2, [r3, #12]
 80015ec:	4b15      	ldr	r3, [pc, #84]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 80015ee:	2280      	movs	r2, #128	; 0x80
 80015f0:	615a      	str	r2, [r3, #20]
 80015f2:	4b14      	ldr	r3, [pc, #80]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 80015f4:	2280      	movs	r2, #128	; 0x80
 80015f6:	611a      	str	r2, [r3, #16]
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 80015fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015fe:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <LCD_Scan_Dir+0x3f8>)
 8001602:	899b      	ldrh	r3, [r3, #12]
 8001604:	3303      	adds	r3, #3
 8001606:	b29b      	uxth	r3, r3
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fa7f 	bl	8000b0c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 800160e:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 8001610:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001614:	611a      	str	r2, [r3, #16]
 8001616:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 8001618:	f44f 7200 	mov.w	r2, #512	; 0x200
 800161c:	615a      	str	r2, [r3, #20]
 800161e:	4b08      	ldr	r3, [pc, #32]	; (8001640 <LCD_Scan_Dir+0x3f8>)
 8001620:	885b      	ldrh	r3, [r3, #2]
 8001622:	3b01      	subs	r3, #1
 8001624:	4a08      	ldr	r2, [pc, #32]	; (8001648 <LCD_Scan_Dir+0x400>)
 8001626:	b2db      	uxtb	r3, r3
 8001628:	60d3      	str	r3, [r2, #12]
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 800162c:	2280      	movs	r2, #128	; 0x80
 800162e:	615a      	str	r2, [r3, #20]
 8001630:	4b04      	ldr	r3, [pc, #16]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 8001632:	2280      	movs	r2, #128	; 0x80
 8001634:	611a      	str	r2, [r3, #16]
 8001636:	4b03      	ldr	r3, [pc, #12]	; (8001644 <LCD_Scan_Dir+0x3fc>)
 8001638:	f44f 7200 	mov.w	r2, #512	; 0x200
 800163c:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 800163e:	e10b      	b.n	8001858 <LCD_Scan_Dir+0x610>
 8001640:	20000030 	.word	0x20000030
 8001644:	40011000 	.word	0x40011000
 8001648:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 800164c:	4b84      	ldr	r3, [pc, #528]	; (8001860 <LCD_Scan_Dir+0x618>)
 800164e:	895b      	ldrh	r3, [r3, #10]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fa5b 	bl	8000b0c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001656:	4b83      	ldr	r3, [pc, #524]	; (8001864 <LCD_Scan_Dir+0x61c>)
 8001658:	f44f 7280 	mov.w	r2, #256	; 0x100
 800165c:	611a      	str	r2, [r3, #16]
 800165e:	4b81      	ldr	r3, [pc, #516]	; (8001864 <LCD_Scan_Dir+0x61c>)
 8001660:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001664:	615a      	str	r2, [r3, #20]
 8001666:	4b80      	ldr	r3, [pc, #512]	; (8001868 <LCD_Scan_Dir+0x620>)
 8001668:	2200      	movs	r2, #0
 800166a:	60da      	str	r2, [r3, #12]
 800166c:	4b7d      	ldr	r3, [pc, #500]	; (8001864 <LCD_Scan_Dir+0x61c>)
 800166e:	2280      	movs	r2, #128	; 0x80
 8001670:	615a      	str	r2, [r3, #20]
 8001672:	4b7c      	ldr	r3, [pc, #496]	; (8001864 <LCD_Scan_Dir+0x61c>)
 8001674:	2280      	movs	r2, #128	; 0x80
 8001676:	611a      	str	r2, [r3, #16]
 8001678:	4b7a      	ldr	r3, [pc, #488]	; (8001864 <LCD_Scan_Dir+0x61c>)
 800167a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800167e:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8001680:	4b78      	ldr	r3, [pc, #480]	; (8001864 <LCD_Scan_Dir+0x61c>)
 8001682:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001686:	611a      	str	r2, [r3, #16]
 8001688:	4b76      	ldr	r3, [pc, #472]	; (8001864 <LCD_Scan_Dir+0x61c>)
 800168a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800168e:	615a      	str	r2, [r3, #20]
 8001690:	4b75      	ldr	r3, [pc, #468]	; (8001868 <LCD_Scan_Dir+0x620>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	4b73      	ldr	r3, [pc, #460]	; (8001864 <LCD_Scan_Dir+0x61c>)
 8001698:	2280      	movs	r2, #128	; 0x80
 800169a:	615a      	str	r2, [r3, #20]
 800169c:	4b71      	ldr	r3, [pc, #452]	; (8001864 <LCD_Scan_Dir+0x61c>)
 800169e:	2280      	movs	r2, #128	; 0x80
 80016a0:	611a      	str	r2, [r3, #16]
 80016a2:	4b70      	ldr	r3, [pc, #448]	; (8001864 <LCD_Scan_Dir+0x61c>)
 80016a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016a8:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 80016aa:	4b6e      	ldr	r3, [pc, #440]	; (8001864 <LCD_Scan_Dir+0x61c>)
 80016ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016b0:	611a      	str	r2, [r3, #16]
 80016b2:	4b6c      	ldr	r3, [pc, #432]	; (8001864 <LCD_Scan_Dir+0x61c>)
 80016b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016b8:	615a      	str	r2, [r3, #20]
 80016ba:	4b69      	ldr	r3, [pc, #420]	; (8001860 <LCD_Scan_Dir+0x618>)
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	3b01      	subs	r3, #1
 80016c0:	121a      	asrs	r2, r3, #8
 80016c2:	4b69      	ldr	r3, [pc, #420]	; (8001868 <LCD_Scan_Dir+0x620>)
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	4b67      	ldr	r3, [pc, #412]	; (8001864 <LCD_Scan_Dir+0x61c>)
 80016c8:	2280      	movs	r2, #128	; 0x80
 80016ca:	615a      	str	r2, [r3, #20]
 80016cc:	4b65      	ldr	r3, [pc, #404]	; (8001864 <LCD_Scan_Dir+0x61c>)
 80016ce:	2280      	movs	r2, #128	; 0x80
 80016d0:	611a      	str	r2, [r3, #16]
 80016d2:	4b64      	ldr	r3, [pc, #400]	; (8001864 <LCD_Scan_Dir+0x61c>)
 80016d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016d8:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 80016da:	4b62      	ldr	r3, [pc, #392]	; (8001864 <LCD_Scan_Dir+0x61c>)
 80016dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016e0:	611a      	str	r2, [r3, #16]
 80016e2:	4b60      	ldr	r3, [pc, #384]	; (8001864 <LCD_Scan_Dir+0x61c>)
 80016e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016e8:	615a      	str	r2, [r3, #20]
 80016ea:	4b5d      	ldr	r3, [pc, #372]	; (8001860 <LCD_Scan_Dir+0x618>)
 80016ec:	881b      	ldrh	r3, [r3, #0]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	4a5d      	ldr	r2, [pc, #372]	; (8001868 <LCD_Scan_Dir+0x620>)
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	60d3      	str	r3, [r2, #12]
 80016f6:	4b5b      	ldr	r3, [pc, #364]	; (8001864 <LCD_Scan_Dir+0x61c>)
 80016f8:	2280      	movs	r2, #128	; 0x80
 80016fa:	615a      	str	r2, [r3, #20]
 80016fc:	4b59      	ldr	r3, [pc, #356]	; (8001864 <LCD_Scan_Dir+0x61c>)
 80016fe:	2280      	movs	r2, #128	; 0x80
 8001700:	611a      	str	r2, [r3, #16]
 8001702:	4b58      	ldr	r3, [pc, #352]	; (8001864 <LCD_Scan_Dir+0x61c>)
 8001704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001708:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 800170a:	4b55      	ldr	r3, [pc, #340]	; (8001860 <LCD_Scan_Dir+0x618>)
 800170c:	899b      	ldrh	r3, [r3, #12]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff f9fc 	bl	8000b0c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001714:	4b53      	ldr	r3, [pc, #332]	; (8001864 <LCD_Scan_Dir+0x61c>)
 8001716:	f44f 7280 	mov.w	r2, #256	; 0x100
 800171a:	611a      	str	r2, [r3, #16]
 800171c:	4b51      	ldr	r3, [pc, #324]	; (8001864 <LCD_Scan_Dir+0x61c>)
 800171e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001722:	615a      	str	r2, [r3, #20]
 8001724:	4b50      	ldr	r3, [pc, #320]	; (8001868 <LCD_Scan_Dir+0x620>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	4b4e      	ldr	r3, [pc, #312]	; (8001864 <LCD_Scan_Dir+0x61c>)
 800172c:	2280      	movs	r2, #128	; 0x80
 800172e:	615a      	str	r2, [r3, #20]
 8001730:	4b4c      	ldr	r3, [pc, #304]	; (8001864 <LCD_Scan_Dir+0x61c>)
 8001732:	2280      	movs	r2, #128	; 0x80
 8001734:	611a      	str	r2, [r3, #16]
 8001736:	4b4b      	ldr	r3, [pc, #300]	; (8001864 <LCD_Scan_Dir+0x61c>)
 8001738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800173c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 800173e:	4b49      	ldr	r3, [pc, #292]	; (8001864 <LCD_Scan_Dir+0x61c>)
 8001740:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001744:	611a      	str	r2, [r3, #16]
 8001746:	4b47      	ldr	r3, [pc, #284]	; (8001864 <LCD_Scan_Dir+0x61c>)
 8001748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800174c:	615a      	str	r2, [r3, #20]
 800174e:	4b46      	ldr	r3, [pc, #280]	; (8001868 <LCD_Scan_Dir+0x620>)
 8001750:	2200      	movs	r2, #0
 8001752:	60da      	str	r2, [r3, #12]
 8001754:	4b43      	ldr	r3, [pc, #268]	; (8001864 <LCD_Scan_Dir+0x61c>)
 8001756:	2280      	movs	r2, #128	; 0x80
 8001758:	615a      	str	r2, [r3, #20]
 800175a:	4b42      	ldr	r3, [pc, #264]	; (8001864 <LCD_Scan_Dir+0x61c>)
 800175c:	2280      	movs	r2, #128	; 0x80
 800175e:	611a      	str	r2, [r3, #16]
 8001760:	4b40      	ldr	r3, [pc, #256]	; (8001864 <LCD_Scan_Dir+0x61c>)
 8001762:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001766:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001768:	4b3e      	ldr	r3, [pc, #248]	; (8001864 <LCD_Scan_Dir+0x61c>)
 800176a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800176e:	611a      	str	r2, [r3, #16]
 8001770:	4b3c      	ldr	r3, [pc, #240]	; (8001864 <LCD_Scan_Dir+0x61c>)
 8001772:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001776:	615a      	str	r2, [r3, #20]
 8001778:	4b39      	ldr	r3, [pc, #228]	; (8001860 <LCD_Scan_Dir+0x618>)
 800177a:	885b      	ldrh	r3, [r3, #2]
 800177c:	3b01      	subs	r3, #1
 800177e:	121a      	asrs	r2, r3, #8
 8001780:	4b39      	ldr	r3, [pc, #228]	; (8001868 <LCD_Scan_Dir+0x620>)
 8001782:	60da      	str	r2, [r3, #12]
 8001784:	4b37      	ldr	r3, [pc, #220]	; (8001864 <LCD_Scan_Dir+0x61c>)
 8001786:	2280      	movs	r2, #128	; 0x80
 8001788:	615a      	str	r2, [r3, #20]
 800178a:	4b36      	ldr	r3, [pc, #216]	; (8001864 <LCD_Scan_Dir+0x61c>)
 800178c:	2280      	movs	r2, #128	; 0x80
 800178e:	611a      	str	r2, [r3, #16]
 8001790:	4b34      	ldr	r3, [pc, #208]	; (8001864 <LCD_Scan_Dir+0x61c>)
 8001792:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001796:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8001798:	4b32      	ldr	r3, [pc, #200]	; (8001864 <LCD_Scan_Dir+0x61c>)
 800179a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800179e:	611a      	str	r2, [r3, #16]
 80017a0:	4b30      	ldr	r3, [pc, #192]	; (8001864 <LCD_Scan_Dir+0x61c>)
 80017a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017a6:	615a      	str	r2, [r3, #20]
 80017a8:	4b2d      	ldr	r3, [pc, #180]	; (8001860 <LCD_Scan_Dir+0x618>)
 80017aa:	885b      	ldrh	r3, [r3, #2]
 80017ac:	3b01      	subs	r3, #1
 80017ae:	4a2e      	ldr	r2, [pc, #184]	; (8001868 <LCD_Scan_Dir+0x620>)
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	60d3      	str	r3, [r2, #12]
 80017b4:	4b2b      	ldr	r3, [pc, #172]	; (8001864 <LCD_Scan_Dir+0x61c>)
 80017b6:	2280      	movs	r2, #128	; 0x80
 80017b8:	615a      	str	r2, [r3, #20]
 80017ba:	4b2a      	ldr	r3, [pc, #168]	; (8001864 <LCD_Scan_Dir+0x61c>)
 80017bc:	2280      	movs	r2, #128	; 0x80
 80017be:	611a      	str	r2, [r3, #16]
 80017c0:	4b28      	ldr	r3, [pc, #160]	; (8001864 <LCD_Scan_Dir+0x61c>)
 80017c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017c6:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 80017c8:	e046      	b.n	8001858 <LCD_Scan_Dir+0x610>
		}
	} else {
		switch (dir) {
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	2b07      	cmp	r3, #7
 80017ce:	d836      	bhi.n	800183e <LCD_Scan_Dir+0x5f6>
 80017d0:	a201      	add	r2, pc, #4	; (adr r2, 80017d8 <LCD_Scan_Dir+0x590>)
 80017d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d6:	bf00      	nop
 80017d8:	080017f9 	.word	0x080017f9
 80017dc:	08001803 	.word	0x08001803
 80017e0:	0800180d 	.word	0x0800180d
 80017e4:	0800183f 	.word	0x0800183f
 80017e8:	08001817 	.word	0x08001817
 80017ec:	08001821 	.word	0x08001821
 80017f0:	0800182b 	.word	0x0800182b
 80017f4:	08001835 	.word	0x08001835
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 80017f8:	89fb      	ldrh	r3, [r7, #14]
 80017fa:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80017fe:	81fb      	strh	r3, [r7, #14]
			break;
 8001800:	e01d      	b.n	800183e <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 8001802:	89fb      	ldrh	r3, [r7, #14]
 8001804:	f043 0310 	orr.w	r3, r3, #16
 8001808:	81fb      	strh	r3, [r7, #14]
			break;
 800180a:	e018      	b.n	800183e <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 800180c:	89fb      	ldrh	r3, [r7, #14]
 800180e:	f043 0320 	orr.w	r3, r3, #32
 8001812:	81fb      	strh	r3, [r7, #14]
			break;
 8001814:	e013      	b.n	800183e <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 8001816:	89fb      	ldrh	r3, [r7, #14]
 8001818:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800181c:	81fb      	strh	r3, [r7, #14]
			break;
 800181e:	e00e      	b.n	800183e <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 8001820:	89fb      	ldrh	r3, [r7, #14]
 8001822:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001826:	81fb      	strh	r3, [r7, #14]
			break;
 8001828:	e009      	b.n	800183e <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 800182a:	89fb      	ldrh	r3, [r7, #14]
 800182c:	f043 0318 	orr.w	r3, r3, #24
 8001830:	81fb      	strh	r3, [r7, #14]
			break;
 8001832:	e004      	b.n	800183e <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 8001834:	89fb      	ldrh	r3, [r7, #14]
 8001836:	f043 0308 	orr.w	r3, r3, #8
 800183a:	81fb      	strh	r3, [r7, #14]
			break;
 800183c:	bf00      	nop
		}
		dirreg = 0X03;
 800183e:	2303      	movs	r3, #3
 8001840:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 8001842:	89fb      	ldrh	r3, [r7, #14]
 8001844:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001848:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 800184a:	89fa      	ldrh	r2, [r7, #14]
 800184c:	89bb      	ldrh	r3, [r7, #12]
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff f9e7 	bl	8000c24 <LCD_WriteReg>
	}
}
 8001856:	bf00      	nop
 8001858:	bf00      	nop
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000030 	.word	0x20000030
 8001864:	40011000 	.word	0x40011000
 8001868:	40010c00 	.word	0x40010c00

0800186c <LCD_Fast_DrawPoint>:
	LCD_WriteRAM_Prepare();
	LCD_WR_DATA(POINT_COLOR); //POINT_COLOR: Color of this point
}
//Draw a point with color(quicker)
//x,y: coordinate
void LCD_Fast_DrawPoint(uint16_t x, uint16_t y, uint16_t color) {
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	80fb      	strh	r3, [r7, #6]
 8001876:	460b      	mov	r3, r1
 8001878:	80bb      	strh	r3, [r7, #4]
 800187a:	4613      	mov	r3, r2
 800187c:	807b      	strh	r3, [r7, #2]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 800187e:	4b75      	ldr	r3, [pc, #468]	; (8001a54 <LCD_Fast_DrawPoint+0x1e8>)
 8001880:	889b      	ldrh	r3, [r3, #4]
 8001882:	f249 3241 	movw	r2, #37697	; 0x9341
 8001886:	4293      	cmp	r3, r2
 8001888:	d005      	beq.n	8001896 <LCD_Fast_DrawPoint+0x2a>
 800188a:	4b72      	ldr	r3, [pc, #456]	; (8001a54 <LCD_Fast_DrawPoint+0x1e8>)
 800188c:	889b      	ldrh	r3, [r3, #4]
 800188e:	f245 3210 	movw	r2, #21264	; 0x5310
 8001892:	4293      	cmp	r3, r2
 8001894:	d164      	bne.n	8001960 <LCD_Fast_DrawPoint+0xf4>
		LCD_WR_REG(lcddev.setxcmd);
 8001896:	4b6f      	ldr	r3, [pc, #444]	; (8001a54 <LCD_Fast_DrawPoint+0x1e8>)
 8001898:	895b      	ldrh	r3, [r3, #10]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff f936 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 80018a0:	4b6d      	ldr	r3, [pc, #436]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 80018a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018a6:	611a      	str	r2, [r3, #16]
 80018a8:	4b6b      	ldr	r3, [pc, #428]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 80018aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ae:	615a      	str	r2, [r3, #20]
 80018b0:	88fb      	ldrh	r3, [r7, #6]
 80018b2:	0a1b      	lsrs	r3, r3, #8
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	4b69      	ldr	r3, [pc, #420]	; (8001a5c <LCD_Fast_DrawPoint+0x1f0>)
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	4b67      	ldr	r3, [pc, #412]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 80018bc:	2280      	movs	r2, #128	; 0x80
 80018be:	615a      	str	r2, [r3, #20]
 80018c0:	4b65      	ldr	r3, [pc, #404]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 80018c2:	2280      	movs	r2, #128	; 0x80
 80018c4:	611a      	str	r2, [r3, #16]
 80018c6:	4b64      	ldr	r3, [pc, #400]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 80018c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018cc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 80018ce:	4b62      	ldr	r3, [pc, #392]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 80018d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018d4:	611a      	str	r2, [r3, #16]
 80018d6:	4b60      	ldr	r3, [pc, #384]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 80018d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018dc:	615a      	str	r2, [r3, #20]
 80018de:	88fb      	ldrh	r3, [r7, #6]
 80018e0:	4a5e      	ldr	r2, [pc, #376]	; (8001a5c <LCD_Fast_DrawPoint+0x1f0>)
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	60d3      	str	r3, [r2, #12]
 80018e6:	4b5c      	ldr	r3, [pc, #368]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 80018e8:	2280      	movs	r2, #128	; 0x80
 80018ea:	615a      	str	r2, [r3, #20]
 80018ec:	4b5a      	ldr	r3, [pc, #360]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 80018ee:	2280      	movs	r2, #128	; 0x80
 80018f0:	611a      	str	r2, [r3, #16]
 80018f2:	4b59      	ldr	r3, [pc, #356]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 80018f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018f8:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80018fa:	4b56      	ldr	r3, [pc, #344]	; (8001a54 <LCD_Fast_DrawPoint+0x1e8>)
 80018fc:	899b      	ldrh	r3, [r3, #12]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff f904 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001904:	4b54      	ldr	r3, [pc, #336]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 8001906:	f44f 7280 	mov.w	r2, #256	; 0x100
 800190a:	611a      	str	r2, [r3, #16]
 800190c:	4b52      	ldr	r3, [pc, #328]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 800190e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001912:	615a      	str	r2, [r3, #20]
 8001914:	88bb      	ldrh	r3, [r7, #4]
 8001916:	0a1b      	lsrs	r3, r3, #8
 8001918:	b29a      	uxth	r2, r3
 800191a:	4b50      	ldr	r3, [pc, #320]	; (8001a5c <LCD_Fast_DrawPoint+0x1f0>)
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	4b4e      	ldr	r3, [pc, #312]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 8001920:	2280      	movs	r2, #128	; 0x80
 8001922:	615a      	str	r2, [r3, #20]
 8001924:	4b4c      	ldr	r3, [pc, #304]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 8001926:	2280      	movs	r2, #128	; 0x80
 8001928:	611a      	str	r2, [r3, #16]
 800192a:	4b4b      	ldr	r3, [pc, #300]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 800192c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001930:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001932:	4b49      	ldr	r3, [pc, #292]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 8001934:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001938:	611a      	str	r2, [r3, #16]
 800193a:	4b47      	ldr	r3, [pc, #284]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 800193c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001940:	615a      	str	r2, [r3, #20]
 8001942:	88bb      	ldrh	r3, [r7, #4]
 8001944:	4a45      	ldr	r2, [pc, #276]	; (8001a5c <LCD_Fast_DrawPoint+0x1f0>)
 8001946:	b2db      	uxtb	r3, r3
 8001948:	60d3      	str	r3, [r2, #12]
 800194a:	4b43      	ldr	r3, [pc, #268]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 800194c:	2280      	movs	r2, #128	; 0x80
 800194e:	615a      	str	r2, [r3, #20]
 8001950:	4b41      	ldr	r3, [pc, #260]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 8001952:	2280      	movs	r2, #128	; 0x80
 8001954:	611a      	str	r2, [r3, #16]
 8001956:	4b40      	ldr	r3, [pc, #256]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 8001958:	f44f 7200 	mov.w	r2, #512	; 0x200
 800195c:	611a      	str	r2, [r3, #16]
 800195e:	e1e6      	b.n	8001d2e <LCD_Fast_DrawPoint+0x4c2>
	} else if (lcddev.id == 0X5510) {
 8001960:	4b3c      	ldr	r3, [pc, #240]	; (8001a54 <LCD_Fast_DrawPoint+0x1e8>)
 8001962:	889b      	ldrh	r3, [r3, #4]
 8001964:	f245 5210 	movw	r2, #21776	; 0x5510
 8001968:	4293      	cmp	r3, r2
 800196a:	d179      	bne.n	8001a60 <LCD_Fast_DrawPoint+0x1f4>
		LCD_WR_REG(lcddev.setxcmd);
 800196c:	4b39      	ldr	r3, [pc, #228]	; (8001a54 <LCD_Fast_DrawPoint+0x1e8>)
 800196e:	895b      	ldrh	r3, [r3, #10]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff f8cb 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001976:	4b38      	ldr	r3, [pc, #224]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 8001978:	f44f 7280 	mov.w	r2, #256	; 0x100
 800197c:	611a      	str	r2, [r3, #16]
 800197e:	4b36      	ldr	r3, [pc, #216]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 8001980:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001984:	615a      	str	r2, [r3, #20]
 8001986:	88fb      	ldrh	r3, [r7, #6]
 8001988:	0a1b      	lsrs	r3, r3, #8
 800198a:	b29a      	uxth	r2, r3
 800198c:	4b33      	ldr	r3, [pc, #204]	; (8001a5c <LCD_Fast_DrawPoint+0x1f0>)
 800198e:	60da      	str	r2, [r3, #12]
 8001990:	4b31      	ldr	r3, [pc, #196]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 8001992:	2280      	movs	r2, #128	; 0x80
 8001994:	615a      	str	r2, [r3, #20]
 8001996:	4b30      	ldr	r3, [pc, #192]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 8001998:	2280      	movs	r2, #128	; 0x80
 800199a:	611a      	str	r2, [r3, #16]
 800199c:	4b2e      	ldr	r3, [pc, #184]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 800199e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019a2:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 80019a4:	4b2b      	ldr	r3, [pc, #172]	; (8001a54 <LCD_Fast_DrawPoint+0x1e8>)
 80019a6:	895b      	ldrh	r3, [r3, #10]
 80019a8:	3301      	adds	r3, #1
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff f8ad 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATA(x & 0XFF);
 80019b2:	4b29      	ldr	r3, [pc, #164]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 80019b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019b8:	611a      	str	r2, [r3, #16]
 80019ba:	4b27      	ldr	r3, [pc, #156]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 80019bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019c0:	615a      	str	r2, [r3, #20]
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	4a25      	ldr	r2, [pc, #148]	; (8001a5c <LCD_Fast_DrawPoint+0x1f0>)
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	60d3      	str	r3, [r2, #12]
 80019ca:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 80019cc:	2280      	movs	r2, #128	; 0x80
 80019ce:	615a      	str	r2, [r3, #20]
 80019d0:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 80019d2:	2280      	movs	r2, #128	; 0x80
 80019d4:	611a      	str	r2, [r3, #16]
 80019d6:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 80019d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019dc:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80019de:	4b1d      	ldr	r3, [pc, #116]	; (8001a54 <LCD_Fast_DrawPoint+0x1e8>)
 80019e0:	899b      	ldrh	r3, [r3, #12]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff f892 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 80019e8:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 80019ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019ee:	611a      	str	r2, [r3, #16]
 80019f0:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 80019f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019f6:	615a      	str	r2, [r3, #20]
 80019f8:	88bb      	ldrh	r3, [r7, #4]
 80019fa:	0a1b      	lsrs	r3, r3, #8
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <LCD_Fast_DrawPoint+0x1f0>)
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 8001a04:	2280      	movs	r2, #128	; 0x80
 8001a06:	615a      	str	r2, [r3, #20]
 8001a08:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 8001a0a:	2280      	movs	r2, #128	; 0x80
 8001a0c:	611a      	str	r2, [r3, #16]
 8001a0e:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 8001a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a14:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8001a16:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <LCD_Fast_DrawPoint+0x1e8>)
 8001a18:	899b      	ldrh	r3, [r3, #12]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff f874 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATA(y & 0XFF);
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 8001a26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a2a:	611a      	str	r2, [r3, #16]
 8001a2c:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 8001a2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a32:	615a      	str	r2, [r3, #20]
 8001a34:	88bb      	ldrh	r3, [r7, #4]
 8001a36:	4a09      	ldr	r2, [pc, #36]	; (8001a5c <LCD_Fast_DrawPoint+0x1f0>)
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	60d3      	str	r3, [r2, #12]
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 8001a3e:	2280      	movs	r2, #128	; 0x80
 8001a40:	615a      	str	r2, [r3, #20]
 8001a42:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 8001a44:	2280      	movs	r2, #128	; 0x80
 8001a46:	611a      	str	r2, [r3, #16]
 8001a48:	4b03      	ldr	r3, [pc, #12]	; (8001a58 <LCD_Fast_DrawPoint+0x1ec>)
 8001a4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a4e:	611a      	str	r2, [r3, #16]
 8001a50:	e16d      	b.n	8001d2e <LCD_Fast_DrawPoint+0x4c2>
 8001a52:	bf00      	nop
 8001a54:	20000030 	.word	0x20000030
 8001a58:	40011000 	.word	0x40011000
 8001a5c:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8001a60:	4b68      	ldr	r3, [pc, #416]	; (8001c04 <LCD_Fast_DrawPoint+0x398>)
 8001a62:	889b      	ldrh	r3, [r3, #4]
 8001a64:	f641 1263 	movw	r2, #6499	; 0x1963
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	f040 80d1 	bne.w	8001c10 <LCD_Fast_DrawPoint+0x3a4>
		if (lcddev.dir == 0)
 8001a6e:	4b65      	ldr	r3, [pc, #404]	; (8001c04 <LCD_Fast_DrawPoint+0x398>)
 8001a70:	799b      	ldrb	r3, [r3, #6]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d106      	bne.n	8001a84 <LCD_Fast_DrawPoint+0x218>
			x = lcddev.width - 1 - x;
 8001a76:	4b63      	ldr	r3, [pc, #396]	; (8001c04 <LCD_Fast_DrawPoint+0x398>)
 8001a78:	881a      	ldrh	r2, [r3, #0]
 8001a7a:	88fb      	ldrh	r3, [r7, #6]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	3b01      	subs	r3, #1
 8001a82:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001a84:	4b5f      	ldr	r3, [pc, #380]	; (8001c04 <LCD_Fast_DrawPoint+0x398>)
 8001a86:	895b      	ldrh	r3, [r3, #10]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff f83f 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001a8e:	4b5e      	ldr	r3, [pc, #376]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001a90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a94:	611a      	str	r2, [r3, #16]
 8001a96:	4b5c      	ldr	r3, [pc, #368]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a9c:	615a      	str	r2, [r3, #20]
 8001a9e:	88fb      	ldrh	r3, [r7, #6]
 8001aa0:	0a1b      	lsrs	r3, r3, #8
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	4b59      	ldr	r3, [pc, #356]	; (8001c0c <LCD_Fast_DrawPoint+0x3a0>)
 8001aa6:	60da      	str	r2, [r3, #12]
 8001aa8:	4b57      	ldr	r3, [pc, #348]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001aaa:	2280      	movs	r2, #128	; 0x80
 8001aac:	615a      	str	r2, [r3, #20]
 8001aae:	4b56      	ldr	r3, [pc, #344]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001ab0:	2280      	movs	r2, #128	; 0x80
 8001ab2:	611a      	str	r2, [r3, #16]
 8001ab4:	4b54      	ldr	r3, [pc, #336]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aba:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001abc:	4b52      	ldr	r3, [pc, #328]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001abe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ac2:	611a      	str	r2, [r3, #16]
 8001ac4:	4b50      	ldr	r3, [pc, #320]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001ac6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aca:	615a      	str	r2, [r3, #20]
 8001acc:	88fb      	ldrh	r3, [r7, #6]
 8001ace:	4a4f      	ldr	r2, [pc, #316]	; (8001c0c <LCD_Fast_DrawPoint+0x3a0>)
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	60d3      	str	r3, [r2, #12]
 8001ad4:	4b4c      	ldr	r3, [pc, #304]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001ad6:	2280      	movs	r2, #128	; 0x80
 8001ad8:	615a      	str	r2, [r3, #20]
 8001ada:	4b4b      	ldr	r3, [pc, #300]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001adc:	2280      	movs	r2, #128	; 0x80
 8001ade:	611a      	str	r2, [r3, #16]
 8001ae0:	4b49      	ldr	r3, [pc, #292]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ae6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x >> 8);
 8001ae8:	4b47      	ldr	r3, [pc, #284]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001aea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aee:	611a      	str	r2, [r3, #16]
 8001af0:	4b45      	ldr	r3, [pc, #276]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af6:	615a      	str	r2, [r3, #20]
 8001af8:	88fb      	ldrh	r3, [r7, #6]
 8001afa:	0a1b      	lsrs	r3, r3, #8
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	4b43      	ldr	r3, [pc, #268]	; (8001c0c <LCD_Fast_DrawPoint+0x3a0>)
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	4b41      	ldr	r3, [pc, #260]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001b04:	2280      	movs	r2, #128	; 0x80
 8001b06:	615a      	str	r2, [r3, #20]
 8001b08:	4b3f      	ldr	r3, [pc, #252]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001b0a:	2280      	movs	r2, #128	; 0x80
 8001b0c:	611a      	str	r2, [r3, #16]
 8001b0e:	4b3e      	ldr	r3, [pc, #248]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b14:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001b16:	4b3c      	ldr	r3, [pc, #240]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001b18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b1c:	611a      	str	r2, [r3, #16]
 8001b1e:	4b3a      	ldr	r3, [pc, #232]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001b20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b24:	615a      	str	r2, [r3, #20]
 8001b26:	88fb      	ldrh	r3, [r7, #6]
 8001b28:	4a38      	ldr	r2, [pc, #224]	; (8001c0c <LCD_Fast_DrawPoint+0x3a0>)
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	60d3      	str	r3, [r2, #12]
 8001b2e:	4b36      	ldr	r3, [pc, #216]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001b30:	2280      	movs	r2, #128	; 0x80
 8001b32:	615a      	str	r2, [r3, #20]
 8001b34:	4b34      	ldr	r3, [pc, #208]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001b36:	2280      	movs	r2, #128	; 0x80
 8001b38:	611a      	str	r2, [r3, #16]
 8001b3a:	4b33      	ldr	r3, [pc, #204]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001b3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b40:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001b42:	4b30      	ldr	r3, [pc, #192]	; (8001c04 <LCD_Fast_DrawPoint+0x398>)
 8001b44:	899b      	ldrh	r3, [r3, #12]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe ffe0 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001b4c:	4b2e      	ldr	r3, [pc, #184]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001b4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b52:	611a      	str	r2, [r3, #16]
 8001b54:	4b2c      	ldr	r3, [pc, #176]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001b56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b5a:	615a      	str	r2, [r3, #20]
 8001b5c:	88bb      	ldrh	r3, [r7, #4]
 8001b5e:	0a1b      	lsrs	r3, r3, #8
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	4b2a      	ldr	r3, [pc, #168]	; (8001c0c <LCD_Fast_DrawPoint+0x3a0>)
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	4b28      	ldr	r3, [pc, #160]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001b68:	2280      	movs	r2, #128	; 0x80
 8001b6a:	615a      	str	r2, [r3, #20]
 8001b6c:	4b26      	ldr	r3, [pc, #152]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001b6e:	2280      	movs	r2, #128	; 0x80
 8001b70:	611a      	str	r2, [r3, #16]
 8001b72:	4b25      	ldr	r3, [pc, #148]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001b74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b78:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001b7a:	4b23      	ldr	r3, [pc, #140]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001b7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b80:	611a      	str	r2, [r3, #16]
 8001b82:	4b21      	ldr	r3, [pc, #132]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001b84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b88:	615a      	str	r2, [r3, #20]
 8001b8a:	88bb      	ldrh	r3, [r7, #4]
 8001b8c:	4a1f      	ldr	r2, [pc, #124]	; (8001c0c <LCD_Fast_DrawPoint+0x3a0>)
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	60d3      	str	r3, [r2, #12]
 8001b92:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001b94:	2280      	movs	r2, #128	; 0x80
 8001b96:	615a      	str	r2, [r3, #20]
 8001b98:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001b9a:	2280      	movs	r2, #128	; 0x80
 8001b9c:	611a      	str	r2, [r3, #16]
 8001b9e:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ba4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y >> 8);
 8001ba6:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001ba8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bac:	611a      	str	r2, [r3, #16]
 8001bae:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001bb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bb4:	615a      	str	r2, [r3, #20]
 8001bb6:	88bb      	ldrh	r3, [r7, #4]
 8001bb8:	0a1b      	lsrs	r3, r3, #8
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <LCD_Fast_DrawPoint+0x3a0>)
 8001bbe:	60da      	str	r2, [r3, #12]
 8001bc0:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001bc2:	2280      	movs	r2, #128	; 0x80
 8001bc4:	615a      	str	r2, [r3, #20]
 8001bc6:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001bc8:	2280      	movs	r2, #128	; 0x80
 8001bca:	611a      	str	r2, [r3, #16]
 8001bcc:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001bd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bda:	611a      	str	r2, [r3, #16]
 8001bdc:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001bde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001be2:	615a      	str	r2, [r3, #20]
 8001be4:	88bb      	ldrh	r3, [r7, #4]
 8001be6:	4a09      	ldr	r2, [pc, #36]	; (8001c0c <LCD_Fast_DrawPoint+0x3a0>)
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	60d3      	str	r3, [r2, #12]
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001bee:	2280      	movs	r2, #128	; 0x80
 8001bf0:	615a      	str	r2, [r3, #20]
 8001bf2:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001bf4:	2280      	movs	r2, #128	; 0x80
 8001bf6:	611a      	str	r2, [r3, #16]
 8001bf8:	4b03      	ldr	r3, [pc, #12]	; (8001c08 <LCD_Fast_DrawPoint+0x39c>)
 8001bfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bfe:	611a      	str	r2, [r3, #16]
 8001c00:	e095      	b.n	8001d2e <LCD_Fast_DrawPoint+0x4c2>
 8001c02:	bf00      	nop
 8001c04:	20000030 	.word	0x20000030
 8001c08:	40011000 	.word	0x40011000
 8001c0c:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X6804) {
 8001c10:	4b5e      	ldr	r3, [pc, #376]	; (8001d8c <LCD_Fast_DrawPoint+0x520>)
 8001c12:	889b      	ldrh	r3, [r3, #4]
 8001c14:	f646 0204 	movw	r2, #26628	; 0x6804
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d16f      	bne.n	8001cfc <LCD_Fast_DrawPoint+0x490>
		if (lcddev.dir == 1)
 8001c1c:	4b5b      	ldr	r3, [pc, #364]	; (8001d8c <LCD_Fast_DrawPoint+0x520>)
 8001c1e:	799b      	ldrb	r3, [r3, #6]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d106      	bne.n	8001c32 <LCD_Fast_DrawPoint+0x3c6>
			x = lcddev.width - 1 - x;	//横屏时处理
 8001c24:	4b59      	ldr	r3, [pc, #356]	; (8001d8c <LCD_Fast_DrawPoint+0x520>)
 8001c26:	881a      	ldrh	r2, [r3, #0]
 8001c28:	88fb      	ldrh	r3, [r7, #6]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001c32:	4b56      	ldr	r3, [pc, #344]	; (8001d8c <LCD_Fast_DrawPoint+0x520>)
 8001c34:	895b      	ldrh	r3, [r3, #10]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe ff68 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001c3c:	4b54      	ldr	r3, [pc, #336]	; (8001d90 <LCD_Fast_DrawPoint+0x524>)
 8001c3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c42:	611a      	str	r2, [r3, #16]
 8001c44:	4b52      	ldr	r3, [pc, #328]	; (8001d90 <LCD_Fast_DrawPoint+0x524>)
 8001c46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c4a:	615a      	str	r2, [r3, #20]
 8001c4c:	88fb      	ldrh	r3, [r7, #6]
 8001c4e:	0a1b      	lsrs	r3, r3, #8
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	4b50      	ldr	r3, [pc, #320]	; (8001d94 <LCD_Fast_DrawPoint+0x528>)
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	4b4e      	ldr	r3, [pc, #312]	; (8001d90 <LCD_Fast_DrawPoint+0x524>)
 8001c58:	2280      	movs	r2, #128	; 0x80
 8001c5a:	615a      	str	r2, [r3, #20]
 8001c5c:	4b4c      	ldr	r3, [pc, #304]	; (8001d90 <LCD_Fast_DrawPoint+0x524>)
 8001c5e:	2280      	movs	r2, #128	; 0x80
 8001c60:	611a      	str	r2, [r3, #16]
 8001c62:	4b4b      	ldr	r3, [pc, #300]	; (8001d90 <LCD_Fast_DrawPoint+0x524>)
 8001c64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c68:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001c6a:	4b49      	ldr	r3, [pc, #292]	; (8001d90 <LCD_Fast_DrawPoint+0x524>)
 8001c6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c70:	611a      	str	r2, [r3, #16]
 8001c72:	4b47      	ldr	r3, [pc, #284]	; (8001d90 <LCD_Fast_DrawPoint+0x524>)
 8001c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c78:	615a      	str	r2, [r3, #20]
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	4a45      	ldr	r2, [pc, #276]	; (8001d94 <LCD_Fast_DrawPoint+0x528>)
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	60d3      	str	r3, [r2, #12]
 8001c82:	4b43      	ldr	r3, [pc, #268]	; (8001d90 <LCD_Fast_DrawPoint+0x524>)
 8001c84:	2280      	movs	r2, #128	; 0x80
 8001c86:	615a      	str	r2, [r3, #20]
 8001c88:	4b41      	ldr	r3, [pc, #260]	; (8001d90 <LCD_Fast_DrawPoint+0x524>)
 8001c8a:	2280      	movs	r2, #128	; 0x80
 8001c8c:	611a      	str	r2, [r3, #16]
 8001c8e:	4b40      	ldr	r3, [pc, #256]	; (8001d90 <LCD_Fast_DrawPoint+0x524>)
 8001c90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c94:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001c96:	4b3d      	ldr	r3, [pc, #244]	; (8001d8c <LCD_Fast_DrawPoint+0x520>)
 8001c98:	899b      	ldrh	r3, [r3, #12]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe ff36 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001ca0:	4b3b      	ldr	r3, [pc, #236]	; (8001d90 <LCD_Fast_DrawPoint+0x524>)
 8001ca2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ca6:	611a      	str	r2, [r3, #16]
 8001ca8:	4b39      	ldr	r3, [pc, #228]	; (8001d90 <LCD_Fast_DrawPoint+0x524>)
 8001caa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cae:	615a      	str	r2, [r3, #20]
 8001cb0:	88bb      	ldrh	r3, [r7, #4]
 8001cb2:	0a1b      	lsrs	r3, r3, #8
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	4b37      	ldr	r3, [pc, #220]	; (8001d94 <LCD_Fast_DrawPoint+0x528>)
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	4b35      	ldr	r3, [pc, #212]	; (8001d90 <LCD_Fast_DrawPoint+0x524>)
 8001cbc:	2280      	movs	r2, #128	; 0x80
 8001cbe:	615a      	str	r2, [r3, #20]
 8001cc0:	4b33      	ldr	r3, [pc, #204]	; (8001d90 <LCD_Fast_DrawPoint+0x524>)
 8001cc2:	2280      	movs	r2, #128	; 0x80
 8001cc4:	611a      	str	r2, [r3, #16]
 8001cc6:	4b32      	ldr	r3, [pc, #200]	; (8001d90 <LCD_Fast_DrawPoint+0x524>)
 8001cc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ccc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001cce:	4b30      	ldr	r3, [pc, #192]	; (8001d90 <LCD_Fast_DrawPoint+0x524>)
 8001cd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cd4:	611a      	str	r2, [r3, #16]
 8001cd6:	4b2e      	ldr	r3, [pc, #184]	; (8001d90 <LCD_Fast_DrawPoint+0x524>)
 8001cd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cdc:	615a      	str	r2, [r3, #20]
 8001cde:	88bb      	ldrh	r3, [r7, #4]
 8001ce0:	4a2c      	ldr	r2, [pc, #176]	; (8001d94 <LCD_Fast_DrawPoint+0x528>)
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	60d3      	str	r3, [r2, #12]
 8001ce6:	4b2a      	ldr	r3, [pc, #168]	; (8001d90 <LCD_Fast_DrawPoint+0x524>)
 8001ce8:	2280      	movs	r2, #128	; 0x80
 8001cea:	615a      	str	r2, [r3, #20]
 8001cec:	4b28      	ldr	r3, [pc, #160]	; (8001d90 <LCD_Fast_DrawPoint+0x524>)
 8001cee:	2280      	movs	r2, #128	; 0x80
 8001cf0:	611a      	str	r2, [r3, #16]
 8001cf2:	4b27      	ldr	r3, [pc, #156]	; (8001d90 <LCD_Fast_DrawPoint+0x524>)
 8001cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cf8:	611a      	str	r2, [r3, #16]
 8001cfa:	e018      	b.n	8001d2e <LCD_Fast_DrawPoint+0x4c2>
	} else {
		if (lcddev.dir == 1)
 8001cfc:	4b23      	ldr	r3, [pc, #140]	; (8001d8c <LCD_Fast_DrawPoint+0x520>)
 8001cfe:	799b      	ldrb	r3, [r3, #6]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d106      	bne.n	8001d12 <LCD_Fast_DrawPoint+0x4a6>
			x = lcddev.width - 1 - x;	//横屏其实就是调转x,y坐标
 8001d04:	4b21      	ldr	r3, [pc, #132]	; (8001d8c <LCD_Fast_DrawPoint+0x520>)
 8001d06:	881a      	ldrh	r2, [r3, #0]
 8001d08:	88fb      	ldrh	r3, [r7, #6]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, x);
 8001d12:	4b1e      	ldr	r3, [pc, #120]	; (8001d8c <LCD_Fast_DrawPoint+0x520>)
 8001d14:	895b      	ldrh	r3, [r3, #10]
 8001d16:	88fa      	ldrh	r2, [r7, #6]
 8001d18:	4611      	mov	r1, r2
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe ff82 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, y);
 8001d20:	4b1a      	ldr	r3, [pc, #104]	; (8001d8c <LCD_Fast_DrawPoint+0x520>)
 8001d22:	899b      	ldrh	r3, [r3, #12]
 8001d24:	88ba      	ldrh	r2, [r7, #4]
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe ff7b 	bl	8000c24 <LCD_WriteReg>
	}
	LCD_RS_CLR;
 8001d2e:	4b18      	ldr	r3, [pc, #96]	; (8001d90 <LCD_Fast_DrawPoint+0x524>)
 8001d30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d34:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8001d36:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <LCD_Fast_DrawPoint+0x524>)
 8001d38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d3c:	615a      	str	r2, [r3, #20]
	DATAOUT(lcddev.wramcmd);	//写指令
 8001d3e:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <LCD_Fast_DrawPoint+0x520>)
 8001d40:	891a      	ldrh	r2, [r3, #8]
 8001d42:	4b14      	ldr	r3, [pc, #80]	; (8001d94 <LCD_Fast_DrawPoint+0x528>)
 8001d44:	60da      	str	r2, [r3, #12]
	LCD_WR_CLR;
 8001d46:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <LCD_Fast_DrawPoint+0x524>)
 8001d48:	2280      	movs	r2, #128	; 0x80
 8001d4a:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8001d4c:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <LCD_Fast_DrawPoint+0x524>)
 8001d4e:	2280      	movs	r2, #128	; 0x80
 8001d50:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8001d52:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <LCD_Fast_DrawPoint+0x524>)
 8001d54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d58:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(color);		//写数据
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <LCD_Fast_DrawPoint+0x524>)
 8001d5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d60:	611a      	str	r2, [r3, #16]
 8001d62:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <LCD_Fast_DrawPoint+0x524>)
 8001d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d68:	615a      	str	r2, [r3, #20]
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <LCD_Fast_DrawPoint+0x528>)
 8001d6c:	887b      	ldrh	r3, [r7, #2]
 8001d6e:	60d3      	str	r3, [r2, #12]
 8001d70:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <LCD_Fast_DrawPoint+0x524>)
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	615a      	str	r2, [r3, #20]
 8001d76:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <LCD_Fast_DrawPoint+0x524>)
 8001d78:	2280      	movs	r2, #128	; 0x80
 8001d7a:	611a      	str	r2, [r3, #16]
 8001d7c:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <LCD_Fast_DrawPoint+0x524>)
 8001d7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d82:	611a      	str	r2, [r3, #16]
}
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000030 	.word	0x20000030
 8001d90:	40011000 	.word	0x40011000
 8001d94:	40010c00 	.word	0x40010c00

08001d98 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8001da2:	20be      	movs	r0, #190	; 0xbe
 8001da4:	f7fe feb2 	bl	8000b0c <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8001da8:	4b4b      	ldr	r3, [pc, #300]	; (8001ed8 <LCD_SSD_BackLightSet+0x140>)
 8001daa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dae:	611a      	str	r2, [r3, #16]
 8001db0:	4b49      	ldr	r3, [pc, #292]	; (8001ed8 <LCD_SSD_BackLightSet+0x140>)
 8001db2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001db6:	615a      	str	r2, [r3, #20]
 8001db8:	4b48      	ldr	r3, [pc, #288]	; (8001edc <LCD_SSD_BackLightSet+0x144>)
 8001dba:	2205      	movs	r2, #5
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	4b46      	ldr	r3, [pc, #280]	; (8001ed8 <LCD_SSD_BackLightSet+0x140>)
 8001dc0:	2280      	movs	r2, #128	; 0x80
 8001dc2:	615a      	str	r2, [r3, #20]
 8001dc4:	4b44      	ldr	r3, [pc, #272]	; (8001ed8 <LCD_SSD_BackLightSet+0x140>)
 8001dc6:	2280      	movs	r2, #128	; 0x80
 8001dc8:	611a      	str	r2, [r3, #16]
 8001dca:	4b43      	ldr	r3, [pc, #268]	; (8001ed8 <LCD_SSD_BackLightSet+0x140>)
 8001dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dd0:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 8001dd2:	4b41      	ldr	r3, [pc, #260]	; (8001ed8 <LCD_SSD_BackLightSet+0x140>)
 8001dd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dd8:	611a      	str	r2, [r3, #16]
 8001dda:	4b3f      	ldr	r3, [pc, #252]	; (8001ed8 <LCD_SSD_BackLightSet+0x140>)
 8001ddc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001de0:	615a      	str	r2, [r3, #20]
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fc9b 	bl	8000720 <__aeabi_i2d>
 8001dea:	a339      	add	r3, pc, #228	; (adr r3, 8001ed0 <LCD_SSD_BackLightSet+0x138>)
 8001dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df0:	f7fe fa1a 	bl	8000228 <__aeabi_dmul>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4c38      	ldr	r4, [pc, #224]	; (8001edc <LCD_SSD_BackLightSet+0x144>)
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f7fe fcf9 	bl	80007f4 <__aeabi_d2uiz>
 8001e02:	4603      	mov	r3, r0
 8001e04:	60e3      	str	r3, [r4, #12]
 8001e06:	4b34      	ldr	r3, [pc, #208]	; (8001ed8 <LCD_SSD_BackLightSet+0x140>)
 8001e08:	2280      	movs	r2, #128	; 0x80
 8001e0a:	615a      	str	r2, [r3, #20]
 8001e0c:	4b32      	ldr	r3, [pc, #200]	; (8001ed8 <LCD_SSD_BackLightSet+0x140>)
 8001e0e:	2280      	movs	r2, #128	; 0x80
 8001e10:	611a      	str	r2, [r3, #16]
 8001e12:	4b31      	ldr	r3, [pc, #196]	; (8001ed8 <LCD_SSD_BackLightSet+0x140>)
 8001e14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e18:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 8001e1a:	4b2f      	ldr	r3, [pc, #188]	; (8001ed8 <LCD_SSD_BackLightSet+0x140>)
 8001e1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e20:	611a      	str	r2, [r3, #16]
 8001e22:	4b2d      	ldr	r3, [pc, #180]	; (8001ed8 <LCD_SSD_BackLightSet+0x140>)
 8001e24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e28:	615a      	str	r2, [r3, #20]
 8001e2a:	4b2c      	ldr	r3, [pc, #176]	; (8001edc <LCD_SSD_BackLightSet+0x144>)
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	60da      	str	r2, [r3, #12]
 8001e30:	4b29      	ldr	r3, [pc, #164]	; (8001ed8 <LCD_SSD_BackLightSet+0x140>)
 8001e32:	2280      	movs	r2, #128	; 0x80
 8001e34:	615a      	str	r2, [r3, #20]
 8001e36:	4b28      	ldr	r3, [pc, #160]	; (8001ed8 <LCD_SSD_BackLightSet+0x140>)
 8001e38:	2280      	movs	r2, #128	; 0x80
 8001e3a:	611a      	str	r2, [r3, #16]
 8001e3c:	4b26      	ldr	r3, [pc, #152]	; (8001ed8 <LCD_SSD_BackLightSet+0x140>)
 8001e3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e42:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 8001e44:	4b24      	ldr	r3, [pc, #144]	; (8001ed8 <LCD_SSD_BackLightSet+0x140>)
 8001e46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e4a:	611a      	str	r2, [r3, #16]
 8001e4c:	4b22      	ldr	r3, [pc, #136]	; (8001ed8 <LCD_SSD_BackLightSet+0x140>)
 8001e4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e52:	615a      	str	r2, [r3, #20]
 8001e54:	4b21      	ldr	r3, [pc, #132]	; (8001edc <LCD_SSD_BackLightSet+0x144>)
 8001e56:	22ff      	movs	r2, #255	; 0xff
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	4b1f      	ldr	r3, [pc, #124]	; (8001ed8 <LCD_SSD_BackLightSet+0x140>)
 8001e5c:	2280      	movs	r2, #128	; 0x80
 8001e5e:	615a      	str	r2, [r3, #20]
 8001e60:	4b1d      	ldr	r3, [pc, #116]	; (8001ed8 <LCD_SSD_BackLightSet+0x140>)
 8001e62:	2280      	movs	r2, #128	; 0x80
 8001e64:	611a      	str	r2, [r3, #16]
 8001e66:	4b1c      	ldr	r3, [pc, #112]	; (8001ed8 <LCD_SSD_BackLightSet+0x140>)
 8001e68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e6c:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 8001e6e:	4b1a      	ldr	r3, [pc, #104]	; (8001ed8 <LCD_SSD_BackLightSet+0x140>)
 8001e70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e74:	611a      	str	r2, [r3, #16]
 8001e76:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <LCD_SSD_BackLightSet+0x140>)
 8001e78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e7c:	615a      	str	r2, [r3, #20]
 8001e7e:	4b17      	ldr	r3, [pc, #92]	; (8001edc <LCD_SSD_BackLightSet+0x144>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	60da      	str	r2, [r3, #12]
 8001e84:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <LCD_SSD_BackLightSet+0x140>)
 8001e86:	2280      	movs	r2, #128	; 0x80
 8001e88:	615a      	str	r2, [r3, #20]
 8001e8a:	4b13      	ldr	r3, [pc, #76]	; (8001ed8 <LCD_SSD_BackLightSet+0x140>)
 8001e8c:	2280      	movs	r2, #128	; 0x80
 8001e8e:	611a      	str	r2, [r3, #16]
 8001e90:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <LCD_SSD_BackLightSet+0x140>)
 8001e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e96:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 8001e98:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <LCD_SSD_BackLightSet+0x140>)
 8001e9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e9e:	611a      	str	r2, [r3, #16]
 8001ea0:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <LCD_SSD_BackLightSet+0x140>)
 8001ea2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ea6:	615a      	str	r2, [r3, #20]
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <LCD_SSD_BackLightSet+0x144>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <LCD_SSD_BackLightSet+0x140>)
 8001eb0:	2280      	movs	r2, #128	; 0x80
 8001eb2:	615a      	str	r2, [r3, #20]
 8001eb4:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <LCD_SSD_BackLightSet+0x140>)
 8001eb6:	2280      	movs	r2, #128	; 0x80
 8001eb8:	611a      	str	r2, [r3, #16]
 8001eba:	4b07      	ldr	r3, [pc, #28]	; (8001ed8 <LCD_SSD_BackLightSet+0x140>)
 8001ebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ec0:	611a      	str	r2, [r3, #16]
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd90      	pop	{r4, r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	f3af 8000 	nop.w
 8001ed0:	66666666 	.word	0x66666666
 8001ed4:	40046666 	.word	0x40046666
 8001ed8:	40011000 	.word	0x40011000
 8001edc:	40010c00 	.word	0x40010c00

08001ee0 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d177      	bne.n	8001fe0 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 8001ef0:	4b80      	ldr	r3, [pc, #512]	; (80020f4 <LCD_Display_Dir+0x214>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 8001ef6:	4b7f      	ldr	r3, [pc, #508]	; (80020f4 <LCD_Display_Dir+0x214>)
 8001ef8:	22f0      	movs	r2, #240	; 0xf0
 8001efa:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001efc:	4b7d      	ldr	r3, [pc, #500]	; (80020f4 <LCD_Display_Dir+0x214>)
 8001efe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f02:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001f04:	4b7b      	ldr	r3, [pc, #492]	; (80020f4 <LCD_Display_Dir+0x214>)
 8001f06:	889b      	ldrh	r3, [r3, #4]
 8001f08:	f249 3241 	movw	r2, #37697	; 0x9341
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d00b      	beq.n	8001f28 <LCD_Display_Dir+0x48>
 8001f10:	4b78      	ldr	r3, [pc, #480]	; (80020f4 <LCD_Display_Dir+0x214>)
 8001f12:	889b      	ldrh	r3, [r3, #4]
 8001f14:	f646 0204 	movw	r2, #26628	; 0x6804
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d005      	beq.n	8001f28 <LCD_Display_Dir+0x48>
 8001f1c:	4b75      	ldr	r3, [pc, #468]	; (80020f4 <LCD_Display_Dir+0x214>)
 8001f1e:	889b      	ldrh	r3, [r3, #4]
 8001f20:	f245 3210 	movw	r2, #21264	; 0x5310
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d11e      	bne.n	8001f66 <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 8001f28:	4b72      	ldr	r3, [pc, #456]	; (80020f4 <LCD_Display_Dir+0x214>)
 8001f2a:	222c      	movs	r2, #44	; 0x2c
 8001f2c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001f2e:	4b71      	ldr	r3, [pc, #452]	; (80020f4 <LCD_Display_Dir+0x214>)
 8001f30:	222a      	movs	r2, #42	; 0x2a
 8001f32:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001f34:	4b6f      	ldr	r3, [pc, #444]	; (80020f4 <LCD_Display_Dir+0x214>)
 8001f36:	222b      	movs	r2, #43	; 0x2b
 8001f38:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001f3a:	4b6e      	ldr	r3, [pc, #440]	; (80020f4 <LCD_Display_Dir+0x214>)
 8001f3c:	889b      	ldrh	r3, [r3, #4]
 8001f3e:	f646 0204 	movw	r2, #26628	; 0x6804
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d006      	beq.n	8001f54 <LCD_Display_Dir+0x74>
 8001f46:	4b6b      	ldr	r3, [pc, #428]	; (80020f4 <LCD_Display_Dir+0x214>)
 8001f48:	889b      	ldrh	r3, [r3, #4]
 8001f4a:	f245 3210 	movw	r2, #21264	; 0x5310
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	f040 80c7 	bne.w	80020e2 <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 8001f54:	4b67      	ldr	r3, [pc, #412]	; (80020f4 <LCD_Display_Dir+0x214>)
 8001f56:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f5a:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 8001f5c:	4b65      	ldr	r3, [pc, #404]	; (80020f4 <LCD_Display_Dir+0x214>)
 8001f5e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001f62:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001f64:	e0bd      	b.n	80020e2 <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 8001f66:	4b63      	ldr	r3, [pc, #396]	; (80020f4 <LCD_Display_Dir+0x214>)
 8001f68:	889b      	ldrh	r3, [r3, #4]
 8001f6a:	f245 5210 	movw	r2, #21776	; 0x5510
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d114      	bne.n	8001f9c <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 8001f72:	4b60      	ldr	r3, [pc, #384]	; (80020f4 <LCD_Display_Dir+0x214>)
 8001f74:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001f78:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001f7a:	4b5e      	ldr	r3, [pc, #376]	; (80020f4 <LCD_Display_Dir+0x214>)
 8001f7c:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001f80:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001f82:	4b5c      	ldr	r3, [pc, #368]	; (80020f4 <LCD_Display_Dir+0x214>)
 8001f84:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001f88:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 8001f8a:	4b5a      	ldr	r3, [pc, #360]	; (80020f4 <LCD_Display_Dir+0x214>)
 8001f8c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001f90:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 8001f92:	4b58      	ldr	r3, [pc, #352]	; (80020f4 <LCD_Display_Dir+0x214>)
 8001f94:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001f98:	805a      	strh	r2, [r3, #2]
 8001f9a:	e0a3      	b.n	80020e4 <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 8001f9c:	4b55      	ldr	r3, [pc, #340]	; (80020f4 <LCD_Display_Dir+0x214>)
 8001f9e:	889b      	ldrh	r3, [r3, #4]
 8001fa0:	f641 1263 	movw	r2, #6499	; 0x1963
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d111      	bne.n	8001fcc <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8001fa8:	4b52      	ldr	r3, [pc, #328]	; (80020f4 <LCD_Display_Dir+0x214>)
 8001faa:	222c      	movs	r2, #44	; 0x2c
 8001fac:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 8001fae:	4b51      	ldr	r3, [pc, #324]	; (80020f4 <LCD_Display_Dir+0x214>)
 8001fb0:	222b      	movs	r2, #43	; 0x2b
 8001fb2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 8001fb4:	4b4f      	ldr	r3, [pc, #316]	; (80020f4 <LCD_Display_Dir+0x214>)
 8001fb6:	222a      	movs	r2, #42	; 0x2a
 8001fb8:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 8001fba:	4b4e      	ldr	r3, [pc, #312]	; (80020f4 <LCD_Display_Dir+0x214>)
 8001fbc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001fc0:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 8001fc2:	4b4c      	ldr	r3, [pc, #304]	; (80020f4 <LCD_Display_Dir+0x214>)
 8001fc4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001fc8:	805a      	strh	r2, [r3, #2]
 8001fca:	e08b      	b.n	80020e4 <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 8001fcc:	4b49      	ldr	r3, [pc, #292]	; (80020f4 <LCD_Display_Dir+0x214>)
 8001fce:	2222      	movs	r2, #34	; 0x22
 8001fd0:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 8001fd2:	4b48      	ldr	r3, [pc, #288]	; (80020f4 <LCD_Display_Dir+0x214>)
 8001fd4:	2220      	movs	r2, #32
 8001fd6:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8001fd8:	4b46      	ldr	r3, [pc, #280]	; (80020f4 <LCD_Display_Dir+0x214>)
 8001fda:	2221      	movs	r2, #33	; 0x21
 8001fdc:	819a      	strh	r2, [r3, #12]
 8001fde:	e081      	b.n	80020e4 <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 8001fe0:	4b44      	ldr	r3, [pc, #272]	; (80020f4 <LCD_Display_Dir+0x214>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 8001fe6:	4b43      	ldr	r3, [pc, #268]	; (80020f4 <LCD_Display_Dir+0x214>)
 8001fe8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001fec:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8001fee:	4b41      	ldr	r3, [pc, #260]	; (80020f4 <LCD_Display_Dir+0x214>)
 8001ff0:	22f0      	movs	r2, #240	; 0xf0
 8001ff2:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8001ff4:	4b3f      	ldr	r3, [pc, #252]	; (80020f4 <LCD_Display_Dir+0x214>)
 8001ff6:	889b      	ldrh	r3, [r3, #4]
 8001ff8:	f249 3241 	movw	r2, #37697	; 0x9341
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d005      	beq.n	800200c <LCD_Display_Dir+0x12c>
 8002000:	4b3c      	ldr	r3, [pc, #240]	; (80020f4 <LCD_Display_Dir+0x214>)
 8002002:	889b      	ldrh	r3, [r3, #4]
 8002004:	f245 3210 	movw	r2, #21264	; 0x5310
 8002008:	4293      	cmp	r3, r2
 800200a:	d109      	bne.n	8002020 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 800200c:	4b39      	ldr	r3, [pc, #228]	; (80020f4 <LCD_Display_Dir+0x214>)
 800200e:	222c      	movs	r2, #44	; 0x2c
 8002010:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8002012:	4b38      	ldr	r3, [pc, #224]	; (80020f4 <LCD_Display_Dir+0x214>)
 8002014:	222a      	movs	r2, #42	; 0x2a
 8002016:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8002018:	4b36      	ldr	r3, [pc, #216]	; (80020f4 <LCD_Display_Dir+0x214>)
 800201a:	222b      	movs	r2, #43	; 0x2b
 800201c:	819a      	strh	r2, [r3, #12]
 800201e:	e04b      	b.n	80020b8 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 8002020:	4b34      	ldr	r3, [pc, #208]	; (80020f4 <LCD_Display_Dir+0x214>)
 8002022:	889b      	ldrh	r3, [r3, #4]
 8002024:	f646 0204 	movw	r2, #26628	; 0x6804
 8002028:	4293      	cmp	r3, r2
 800202a:	d109      	bne.n	8002040 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 800202c:	4b31      	ldr	r3, [pc, #196]	; (80020f4 <LCD_Display_Dir+0x214>)
 800202e:	222c      	movs	r2, #44	; 0x2c
 8002030:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 8002032:	4b30      	ldr	r3, [pc, #192]	; (80020f4 <LCD_Display_Dir+0x214>)
 8002034:	222b      	movs	r2, #43	; 0x2b
 8002036:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 8002038:	4b2e      	ldr	r3, [pc, #184]	; (80020f4 <LCD_Display_Dir+0x214>)
 800203a:	222a      	movs	r2, #42	; 0x2a
 800203c:	819a      	strh	r2, [r3, #12]
 800203e:	e03b      	b.n	80020b8 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 8002040:	4b2c      	ldr	r3, [pc, #176]	; (80020f4 <LCD_Display_Dir+0x214>)
 8002042:	889b      	ldrh	r3, [r3, #4]
 8002044:	f245 5210 	movw	r2, #21776	; 0x5510
 8002048:	4293      	cmp	r3, r2
 800204a:	d114      	bne.n	8002076 <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 800204c:	4b29      	ldr	r3, [pc, #164]	; (80020f4 <LCD_Display_Dir+0x214>)
 800204e:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8002052:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8002054:	4b27      	ldr	r3, [pc, #156]	; (80020f4 <LCD_Display_Dir+0x214>)
 8002056:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 800205a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 800205c:	4b25      	ldr	r3, [pc, #148]	; (80020f4 <LCD_Display_Dir+0x214>)
 800205e:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8002062:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 8002064:	4b23      	ldr	r3, [pc, #140]	; (80020f4 <LCD_Display_Dir+0x214>)
 8002066:	f44f 7248 	mov.w	r2, #800	; 0x320
 800206a:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 800206c:	4b21      	ldr	r3, [pc, #132]	; (80020f4 <LCD_Display_Dir+0x214>)
 800206e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002072:	805a      	strh	r2, [r3, #2]
 8002074:	e020      	b.n	80020b8 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 8002076:	4b1f      	ldr	r3, [pc, #124]	; (80020f4 <LCD_Display_Dir+0x214>)
 8002078:	889b      	ldrh	r3, [r3, #4]
 800207a:	f641 1263 	movw	r2, #6499	; 0x1963
 800207e:	4293      	cmp	r3, r2
 8002080:	d111      	bne.n	80020a6 <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8002082:	4b1c      	ldr	r3, [pc, #112]	; (80020f4 <LCD_Display_Dir+0x214>)
 8002084:	222c      	movs	r2, #44	; 0x2c
 8002086:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 8002088:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <LCD_Display_Dir+0x214>)
 800208a:	222a      	movs	r2, #42	; 0x2a
 800208c:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 800208e:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <LCD_Display_Dir+0x214>)
 8002090:	222b      	movs	r2, #43	; 0x2b
 8002092:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 8002094:	4b17      	ldr	r3, [pc, #92]	; (80020f4 <LCD_Display_Dir+0x214>)
 8002096:	f44f 7248 	mov.w	r2, #800	; 0x320
 800209a:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 800209c:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <LCD_Display_Dir+0x214>)
 800209e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80020a2:	805a      	strh	r2, [r3, #2]
 80020a4:	e008      	b.n	80020b8 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 80020a6:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <LCD_Display_Dir+0x214>)
 80020a8:	2222      	movs	r2, #34	; 0x22
 80020aa:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 80020ac:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <LCD_Display_Dir+0x214>)
 80020ae:	2221      	movs	r2, #33	; 0x21
 80020b0:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 80020b2:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <LCD_Display_Dir+0x214>)
 80020b4:	2220      	movs	r2, #32
 80020b6:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 80020b8:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <LCD_Display_Dir+0x214>)
 80020ba:	889b      	ldrh	r3, [r3, #4]
 80020bc:	f646 0204 	movw	r2, #26628	; 0x6804
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d005      	beq.n	80020d0 <LCD_Display_Dir+0x1f0>
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <LCD_Display_Dir+0x214>)
 80020c6:	889b      	ldrh	r3, [r3, #4]
 80020c8:	f245 3210 	movw	r2, #21264	; 0x5310
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d109      	bne.n	80020e4 <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <LCD_Display_Dir+0x214>)
 80020d2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80020d6:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <LCD_Display_Dir+0x214>)
 80020da:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80020de:	805a      	strh	r2, [r3, #2]
 80020e0:	e000      	b.n	80020e4 <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 80020e2:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 80020e4:	2000      	movs	r0, #0
 80020e6:	f7ff f8af 	bl	8001248 <LCD_Scan_Dir>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000030 	.word	0x20000030

080020f8 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 80020fe:	4b90      	ldr	r3, [pc, #576]	; (8002340 <LCD_Init+0x248>)
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	4a8f      	ldr	r2, [pc, #572]	; (8002340 <LCD_Init+0x248>)
 8002104:	f043 0308 	orr.w	r3, r3, #8
 8002108:	6193      	str	r3, [r2, #24]
 800210a:	4b8d      	ldr	r3, [pc, #564]	; (8002340 <LCD_Init+0x248>)
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	f003 0308 	and.w	r3, r3, #8
 8002112:	607b      	str	r3, [r7, #4]
 8002114:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 8002116:	4b8a      	ldr	r3, [pc, #552]	; (8002340 <LCD_Init+0x248>)
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	4a89      	ldr	r2, [pc, #548]	; (8002340 <LCD_Init+0x248>)
 800211c:	f043 0310 	orr.w	r3, r3, #16
 8002120:	6193      	str	r3, [r2, #24]
 8002122:	4b87      	ldr	r3, [pc, #540]	; (8002340 <LCD_Init+0x248>)
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	f003 0310 	and.w	r3, r3, #16
 800212a:	603b      	str	r3, [r7, #0]
 800212c:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 800212e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002132:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 8002134:	2301      	movs	r3, #1
 8002136:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 8002138:	2301      	movs	r3, #1
 800213a:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 800213c:	2303      	movs	r3, #3
 800213e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 8002140:	f107 0308 	add.w	r3, r7, #8
 8002144:	4619      	mov	r1, r3
 8002146:	487f      	ldr	r0, [pc, #508]	; (8002344 <LCD_Init+0x24c>)
 8002148:	f005 f824 	bl	8007194 <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 800214c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002150:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 8002152:	f107 0308 	add.w	r3, r7, #8
 8002156:	4619      	mov	r1, r3
 8002158:	487b      	ldr	r0, [pc, #492]	; (8002348 <LCD_Init+0x250>)
 800215a:	f005 f81b 	bl	8007194 <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 800215e:	2032      	movs	r0, #50	; 0x32
 8002160:	f004 fda4 	bl	8006cac <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 8002164:	2101      	movs	r1, #1
 8002166:	2000      	movs	r0, #0
 8002168:	f7fe fd5c 	bl	8000c24 <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 800216c:	2032      	movs	r0, #50	; 0x32
 800216e:	f004 fd9d 	bl	8006cac <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 8002172:	2000      	movs	r0, #0
 8002174:	f7fe fd80 	bl	8000c78 <LCD_ReadReg>
 8002178:	4603      	mov	r3, r0
 800217a:	461a      	mov	r2, r3
 800217c:	4b73      	ldr	r3, [pc, #460]	; (800234c <LCD_Init+0x254>)
 800217e:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8002180:	4b72      	ldr	r3, [pc, #456]	; (800234c <LCD_Init+0x254>)
 8002182:	889b      	ldrh	r3, [r3, #4]
 8002184:	2bfe      	cmp	r3, #254	; 0xfe
 8002186:	d90b      	bls.n	80021a0 <LCD_Init+0xa8>
 8002188:	4b70      	ldr	r3, [pc, #448]	; (800234c <LCD_Init+0x254>)
 800218a:	889b      	ldrh	r3, [r3, #4]
 800218c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002190:	4293      	cmp	r3, r2
 8002192:	d005      	beq.n	80021a0 <LCD_Init+0xa8>
 8002194:	4b6d      	ldr	r3, [pc, #436]	; (800234c <LCD_Init+0x254>)
 8002196:	889b      	ldrh	r3, [r3, #4]
 8002198:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 800219c:	f040 80c8 	bne.w	8002330 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 80021a0:	20d3      	movs	r0, #211	; 0xd3
 80021a2:	f7fe fcb3 	bl	8000b0c <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 80021a6:	f7fe fcf9 	bl	8000b9c <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 80021aa:	f7fe fcf7 	bl	8000b9c <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 80021ae:	f7fe fcf5 	bl	8000b9c <LCD_RD_DATA>
 80021b2:	4603      	mov	r3, r0
 80021b4:	461a      	mov	r2, r3
 80021b6:	4b65      	ldr	r3, [pc, #404]	; (800234c <LCD_Init+0x254>)
 80021b8:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 80021ba:	4b64      	ldr	r3, [pc, #400]	; (800234c <LCD_Init+0x254>)
 80021bc:	889b      	ldrh	r3, [r3, #4]
 80021be:	021b      	lsls	r3, r3, #8
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	4b62      	ldr	r3, [pc, #392]	; (800234c <LCD_Init+0x254>)
 80021c4:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 80021c6:	f7fe fce9 	bl	8000b9c <LCD_RD_DATA>
 80021ca:	4603      	mov	r3, r0
 80021cc:	461a      	mov	r2, r3
 80021ce:	4b5f      	ldr	r3, [pc, #380]	; (800234c <LCD_Init+0x254>)
 80021d0:	889b      	ldrh	r3, [r3, #4]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	4b5d      	ldr	r3, [pc, #372]	; (800234c <LCD_Init+0x254>)
 80021d8:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 80021da:	4b5c      	ldr	r3, [pc, #368]	; (800234c <LCD_Init+0x254>)
 80021dc:	889b      	ldrh	r3, [r3, #4]
 80021de:	f249 3241 	movw	r2, #37697	; 0x9341
 80021e2:	4293      	cmp	r3, r2
 80021e4:	f000 80a4 	beq.w	8002330 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 80021e8:	20bf      	movs	r0, #191	; 0xbf
 80021ea:	f7fe fc8f 	bl	8000b0c <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 80021ee:	f7fe fcd5 	bl	8000b9c <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 80021f2:	f7fe fcd3 	bl	8000b9c <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 80021f6:	f7fe fcd1 	bl	8000b9c <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 80021fa:	f7fe fccf 	bl	8000b9c <LCD_RD_DATA>
 80021fe:	4603      	mov	r3, r0
 8002200:	461a      	mov	r2, r3
 8002202:	4b52      	ldr	r3, [pc, #328]	; (800234c <LCD_Init+0x254>)
 8002204:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 8002206:	4b51      	ldr	r3, [pc, #324]	; (800234c <LCD_Init+0x254>)
 8002208:	889b      	ldrh	r3, [r3, #4]
 800220a:	021b      	lsls	r3, r3, #8
 800220c:	b29a      	uxth	r2, r3
 800220e:	4b4f      	ldr	r3, [pc, #316]	; (800234c <LCD_Init+0x254>)
 8002210:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 8002212:	f7fe fcc3 	bl	8000b9c <LCD_RD_DATA>
 8002216:	4603      	mov	r3, r0
 8002218:	461a      	mov	r2, r3
 800221a:	4b4c      	ldr	r3, [pc, #304]	; (800234c <LCD_Init+0x254>)
 800221c:	889b      	ldrh	r3, [r3, #4]
 800221e:	4313      	orrs	r3, r2
 8002220:	b29a      	uxth	r2, r3
 8002222:	4b4a      	ldr	r3, [pc, #296]	; (800234c <LCD_Init+0x254>)
 8002224:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 8002226:	4b49      	ldr	r3, [pc, #292]	; (800234c <LCD_Init+0x254>)
 8002228:	889b      	ldrh	r3, [r3, #4]
 800222a:	f646 0204 	movw	r2, #26628	; 0x6804
 800222e:	4293      	cmp	r3, r2
 8002230:	d07e      	beq.n	8002330 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 8002232:	20d4      	movs	r0, #212	; 0xd4
 8002234:	f7fe fc6a 	bl	8000b0c <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 8002238:	f7fe fcb0 	bl	8000b9c <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 800223c:	f7fe fcae 	bl	8000b9c <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 8002240:	f7fe fcac 	bl	8000b9c <LCD_RD_DATA>
 8002244:	4603      	mov	r3, r0
 8002246:	461a      	mov	r2, r3
 8002248:	4b40      	ldr	r3, [pc, #256]	; (800234c <LCD_Init+0x254>)
 800224a:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 800224c:	4b3f      	ldr	r3, [pc, #252]	; (800234c <LCD_Init+0x254>)
 800224e:	889b      	ldrh	r3, [r3, #4]
 8002250:	021b      	lsls	r3, r3, #8
 8002252:	b29a      	uxth	r2, r3
 8002254:	4b3d      	ldr	r3, [pc, #244]	; (800234c <LCD_Init+0x254>)
 8002256:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 8002258:	f7fe fca0 	bl	8000b9c <LCD_RD_DATA>
 800225c:	4603      	mov	r3, r0
 800225e:	461a      	mov	r2, r3
 8002260:	4b3a      	ldr	r3, [pc, #232]	; (800234c <LCD_Init+0x254>)
 8002262:	889b      	ldrh	r3, [r3, #4]
 8002264:	4313      	orrs	r3, r2
 8002266:	b29a      	uxth	r2, r3
 8002268:	4b38      	ldr	r3, [pc, #224]	; (800234c <LCD_Init+0x254>)
 800226a:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 800226c:	4b37      	ldr	r3, [pc, #220]	; (800234c <LCD_Init+0x254>)
 800226e:	889b      	ldrh	r3, [r3, #4]
 8002270:	f245 3210 	movw	r2, #21264	; 0x5310
 8002274:	4293      	cmp	r3, r2
 8002276:	d05b      	beq.n	8002330 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 8002278:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 800227c:	f7fe fc46 	bl	8000b0c <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 8002280:	f7fe fc8c 	bl	8000b9c <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 8002284:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8002288:	f7fe fc40 	bl	8000b0c <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 800228c:	f7fe fc86 	bl	8000b9c <LCD_RD_DATA>
 8002290:	4603      	mov	r3, r0
 8002292:	461a      	mov	r2, r3
 8002294:	4b2d      	ldr	r3, [pc, #180]	; (800234c <LCD_Init+0x254>)
 8002296:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 8002298:	4b2c      	ldr	r3, [pc, #176]	; (800234c <LCD_Init+0x254>)
 800229a:	889b      	ldrh	r3, [r3, #4]
 800229c:	021b      	lsls	r3, r3, #8
 800229e:	b29a      	uxth	r2, r3
 80022a0:	4b2a      	ldr	r3, [pc, #168]	; (800234c <LCD_Init+0x254>)
 80022a2:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 80022a4:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 80022a8:	f7fe fc30 	bl	8000b0c <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 80022ac:	f7fe fc76 	bl	8000b9c <LCD_RD_DATA>
 80022b0:	4603      	mov	r3, r0
 80022b2:	461a      	mov	r2, r3
 80022b4:	4b25      	ldr	r3, [pc, #148]	; (800234c <LCD_Init+0x254>)
 80022b6:	889b      	ldrh	r3, [r3, #4]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	4b23      	ldr	r3, [pc, #140]	; (800234c <LCD_Init+0x254>)
 80022be:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 80022c0:	4b22      	ldr	r3, [pc, #136]	; (800234c <LCD_Init+0x254>)
 80022c2:	889b      	ldrh	r3, [r3, #4]
 80022c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022c8:	d103      	bne.n	80022d2 <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 80022ca:	4b20      	ldr	r3, [pc, #128]	; (800234c <LCD_Init+0x254>)
 80022cc:	f245 5210 	movw	r2, #21776	; 0x5510
 80022d0:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 80022d2:	4b1e      	ldr	r3, [pc, #120]	; (800234c <LCD_Init+0x254>)
 80022d4:	889b      	ldrh	r3, [r3, #4]
 80022d6:	f245 5210 	movw	r2, #21776	; 0x5510
 80022da:	4293      	cmp	r3, r2
 80022dc:	d028      	beq.n	8002330 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 80022de:	20a1      	movs	r0, #161	; 0xa1
 80022e0:	f7fe fc14 	bl	8000b0c <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 80022e4:	f7fe fc5a 	bl	8000b9c <LCD_RD_DATA>
 80022e8:	4603      	mov	r3, r0
 80022ea:	461a      	mov	r2, r3
 80022ec:	4b17      	ldr	r3, [pc, #92]	; (800234c <LCD_Init+0x254>)
 80022ee:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 80022f0:	f7fe fc54 	bl	8000b9c <LCD_RD_DATA>
 80022f4:	4603      	mov	r3, r0
 80022f6:	461a      	mov	r2, r3
 80022f8:	4b14      	ldr	r3, [pc, #80]	; (800234c <LCD_Init+0x254>)
 80022fa:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 80022fc:	4b13      	ldr	r3, [pc, #76]	; (800234c <LCD_Init+0x254>)
 80022fe:	889b      	ldrh	r3, [r3, #4]
 8002300:	021b      	lsls	r3, r3, #8
 8002302:	b29a      	uxth	r2, r3
 8002304:	4b11      	ldr	r3, [pc, #68]	; (800234c <LCD_Init+0x254>)
 8002306:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 8002308:	f7fe fc48 	bl	8000b9c <LCD_RD_DATA>
 800230c:	4603      	mov	r3, r0
 800230e:	461a      	mov	r2, r3
 8002310:	4b0e      	ldr	r3, [pc, #56]	; (800234c <LCD_Init+0x254>)
 8002312:	889b      	ldrh	r3, [r3, #4]
 8002314:	4313      	orrs	r3, r2
 8002316:	b29a      	uxth	r2, r3
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <LCD_Init+0x254>)
 800231a:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 800231c:	4b0b      	ldr	r3, [pc, #44]	; (800234c <LCD_Init+0x254>)
 800231e:	889b      	ldrh	r3, [r3, #4]
 8002320:	f245 7261 	movw	r2, #22369	; 0x5761
 8002324:	4293      	cmp	r3, r2
 8002326:	d103      	bne.n	8002330 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8002328:	4b08      	ldr	r3, [pc, #32]	; (800234c <LCD_Init+0x254>)
 800232a:	f641 1263 	movw	r2, #6499	; 0x1963
 800232e:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <LCD_Init+0x254>)
 8002332:	889b      	ldrh	r3, [r3, #4]
 8002334:	f249 3241 	movw	r2, #37697	; 0x9341
 8002338:	4293      	cmp	r3, r2
 800233a:	f040 811f 	bne.w	800257c <LCD_Init+0x484>
 800233e:	e007      	b.n	8002350 <LCD_Init+0x258>
 8002340:	40021000 	.word	0x40021000
 8002344:	40011000 	.word	0x40011000
 8002348:	40010c00 	.word	0x40010c00
 800234c:	20000030 	.word	0x20000030
			{
		LCD_WR_REG(0xCF);
 8002350:	20cf      	movs	r0, #207	; 0xcf
 8002352:	f7fe fbdb 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002356:	2000      	movs	r0, #0
 8002358:	f7fe fbfc 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 800235c:	20c1      	movs	r0, #193	; 0xc1
 800235e:	f7fe fbf9 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 8002362:	2030      	movs	r0, #48	; 0x30
 8002364:	f7fe fbf6 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 8002368:	20ed      	movs	r0, #237	; 0xed
 800236a:	f7fe fbcf 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 800236e:	2064      	movs	r0, #100	; 0x64
 8002370:	f7fe fbf0 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8002374:	2003      	movs	r0, #3
 8002376:	f7fe fbed 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 800237a:	2012      	movs	r0, #18
 800237c:	f7fe fbea 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 8002380:	2081      	movs	r0, #129	; 0x81
 8002382:	f7fe fbe7 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 8002386:	20e8      	movs	r0, #232	; 0xe8
 8002388:	f7fe fbc0 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 800238c:	2085      	movs	r0, #133	; 0x85
 800238e:	f7fe fbe1 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8002392:	2010      	movs	r0, #16
 8002394:	f7fe fbde 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002398:	207a      	movs	r0, #122	; 0x7a
 800239a:	f7fe fbdb 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 800239e:	20cb      	movs	r0, #203	; 0xcb
 80023a0:	f7fe fbb4 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 80023a4:	2039      	movs	r0, #57	; 0x39
 80023a6:	f7fe fbd5 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 80023aa:	202c      	movs	r0, #44	; 0x2c
 80023ac:	f7fe fbd2 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023b0:	2000      	movs	r0, #0
 80023b2:	f7fe fbcf 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 80023b6:	2034      	movs	r0, #52	; 0x34
 80023b8:	f7fe fbcc 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 80023bc:	2002      	movs	r0, #2
 80023be:	f7fe fbc9 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 80023c2:	20f7      	movs	r0, #247	; 0xf7
 80023c4:	f7fe fba2 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 80023c8:	2020      	movs	r0, #32
 80023ca:	f7fe fbc3 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 80023ce:	20ea      	movs	r0, #234	; 0xea
 80023d0:	f7fe fb9c 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80023d4:	2000      	movs	r0, #0
 80023d6:	f7fe fbbd 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023da:	2000      	movs	r0, #0
 80023dc:	f7fe fbba 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 80023e0:	20c0      	movs	r0, #192	; 0xc0
 80023e2:	f7fe fb93 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 80023e6:	201b      	movs	r0, #27
 80023e8:	f7fe fbb4 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 80023ec:	20c1      	movs	r0, #193	; 0xc1
 80023ee:	f7fe fb8d 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 80023f2:	2001      	movs	r0, #1
 80023f4:	f7fe fbae 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 80023f8:	20c5      	movs	r0, #197	; 0xc5
 80023fa:	f7fe fb87 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 80023fe:	2030      	movs	r0, #48	; 0x30
 8002400:	f7fe fba8 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 8002404:	2030      	movs	r0, #48	; 0x30
 8002406:	f7fe fba5 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 800240a:	20c7      	movs	r0, #199	; 0xc7
 800240c:	f7fe fb7e 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 8002410:	20b7      	movs	r0, #183	; 0xb7
 8002412:	f7fe fb9f 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 8002416:	2036      	movs	r0, #54	; 0x36
 8002418:	f7fe fb78 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 800241c:	2048      	movs	r0, #72	; 0x48
 800241e:	f7fe fb99 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 8002422:	203a      	movs	r0, #58	; 0x3a
 8002424:	f7fe fb72 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 8002428:	2055      	movs	r0, #85	; 0x55
 800242a:	f7fe fb93 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 800242e:	20b1      	movs	r0, #177	; 0xb1
 8002430:	f7fe fb6c 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002434:	2000      	movs	r0, #0
 8002436:	f7fe fb8d 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 800243a:	201a      	movs	r0, #26
 800243c:	f7fe fb8a 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 8002440:	20b6      	movs	r0, #182	; 0xb6
 8002442:	f7fe fb63 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8002446:	200a      	movs	r0, #10
 8002448:	f7fe fb84 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 800244c:	20a2      	movs	r0, #162	; 0xa2
 800244e:	f7fe fb81 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 8002452:	20f2      	movs	r0, #242	; 0xf2
 8002454:	f7fe fb5a 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002458:	2000      	movs	r0, #0
 800245a:	f7fe fb7b 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 800245e:	2026      	movs	r0, #38	; 0x26
 8002460:	f7fe fb54 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002464:	2001      	movs	r0, #1
 8002466:	f7fe fb75 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 800246a:	20e0      	movs	r0, #224	; 0xe0
 800246c:	f7fe fb4e 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 8002470:	200f      	movs	r0, #15
 8002472:	f7fe fb6f 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8002476:	202a      	movs	r0, #42	; 0x2a
 8002478:	f7fe fb6c 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 800247c:	2028      	movs	r0, #40	; 0x28
 800247e:	f7fe fb69 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 8002482:	2008      	movs	r0, #8
 8002484:	f7fe fb66 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 8002488:	200e      	movs	r0, #14
 800248a:	f7fe fb63 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 800248e:	2008      	movs	r0, #8
 8002490:	f7fe fb60 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8002494:	2054      	movs	r0, #84	; 0x54
 8002496:	f7fe fb5d 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 800249a:	20a9      	movs	r0, #169	; 0xa9
 800249c:	f7fe fb5a 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 80024a0:	2043      	movs	r0, #67	; 0x43
 80024a2:	f7fe fb57 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 80024a6:	200a      	movs	r0, #10
 80024a8:	f7fe fb54 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 80024ac:	200f      	movs	r0, #15
 80024ae:	f7fe fb51 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024b2:	2000      	movs	r0, #0
 80024b4:	f7fe fb4e 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024b8:	2000      	movs	r0, #0
 80024ba:	f7fe fb4b 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024be:	2000      	movs	r0, #0
 80024c0:	f7fe fb48 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024c4:	2000      	movs	r0, #0
 80024c6:	f7fe fb45 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 80024ca:	20e1      	movs	r0, #225	; 0xe1
 80024cc:	f7fe fb1e 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80024d0:	2000      	movs	r0, #0
 80024d2:	f7fe fb3f 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 80024d6:	2015      	movs	r0, #21
 80024d8:	f7fe fb3c 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 80024dc:	2017      	movs	r0, #23
 80024de:	f7fe fb39 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 80024e2:	2007      	movs	r0, #7
 80024e4:	f7fe fb36 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 80024e8:	2011      	movs	r0, #17
 80024ea:	f7fe fb33 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 80024ee:	2006      	movs	r0, #6
 80024f0:	f7fe fb30 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 80024f4:	202b      	movs	r0, #43	; 0x2b
 80024f6:	f7fe fb2d 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 80024fa:	2056      	movs	r0, #86	; 0x56
 80024fc:	f7fe fb2a 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002500:	203c      	movs	r0, #60	; 0x3c
 8002502:	f7fe fb27 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8002506:	2005      	movs	r0, #5
 8002508:	f7fe fb24 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 800250c:	2010      	movs	r0, #16
 800250e:	f7fe fb21 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8002512:	200f      	movs	r0, #15
 8002514:	f7fe fb1e 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002518:	203f      	movs	r0, #63	; 0x3f
 800251a:	f7fe fb1b 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 800251e:	203f      	movs	r0, #63	; 0x3f
 8002520:	f7fe fb18 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8002524:	200f      	movs	r0, #15
 8002526:	f7fe fb15 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 800252a:	202b      	movs	r0, #43	; 0x2b
 800252c:	f7fe faee 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002530:	2000      	movs	r0, #0
 8002532:	f7fe fb0f 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002536:	2000      	movs	r0, #0
 8002538:	f7fe fb0c 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 800253c:	2001      	movs	r0, #1
 800253e:	f7fe fb09 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 8002542:	203f      	movs	r0, #63	; 0x3f
 8002544:	f7fe fb06 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 8002548:	202a      	movs	r0, #42	; 0x2a
 800254a:	f7fe fadf 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800254e:	2000      	movs	r0, #0
 8002550:	f7fe fb00 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002554:	2000      	movs	r0, #0
 8002556:	f7fe fafd 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800255a:	2000      	movs	r0, #0
 800255c:	f7fe fafa 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 8002560:	20ef      	movs	r0, #239	; 0xef
 8002562:	f7fe faf7 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 8002566:	2011      	movs	r0, #17
 8002568:	f7fe fad0 	bl	8000b0c <LCD_WR_REG>
		HAL_Delay(120);
 800256c:	2078      	movs	r0, #120	; 0x78
 800256e:	f004 fb9d 	bl	8006cac <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 8002572:	2029      	movs	r0, #41	; 0x29
 8002574:	f7fe faca 	bl	8000b0c <LCD_WR_REG>
 8002578:	f003 bcd8 	b.w	8005f2c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 800257c:	4b58      	ldr	r3, [pc, #352]	; (80026e0 <LCD_Init+0x5e8>)
 800257e:	889b      	ldrh	r3, [r3, #4]
 8002580:	f646 0204 	movw	r2, #26628	; 0x6804
 8002584:	4293      	cmp	r3, r2
 8002586:	f040 80ad 	bne.w	80026e4 <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 800258a:	2011      	movs	r0, #17
 800258c:	f7fe fabe 	bl	8000b0c <LCD_WR_REG>
		HAL_Delay(20);
 8002590:	2014      	movs	r0, #20
 8002592:	f004 fb8b 	bl	8006cac <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 8002596:	20d0      	movs	r0, #208	; 0xd0
 8002598:	f7fe fab8 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 800259c:	2007      	movs	r0, #7
 800259e:	f7fe fad9 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 80025a2:	2042      	movs	r0, #66	; 0x42
 80025a4:	f7fe fad6 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 80025a8:	201d      	movs	r0, #29
 80025aa:	f7fe fad3 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 80025ae:	20d1      	movs	r0, #209	; 0xd1
 80025b0:	f7fe faac 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80025b4:	2000      	movs	r0, #0
 80025b6:	f7fe facd 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 80025ba:	201a      	movs	r0, #26
 80025bc:	f7fe faca 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 80025c0:	2009      	movs	r0, #9
 80025c2:	f7fe fac7 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 80025c6:	20d2      	movs	r0, #210	; 0xd2
 80025c8:	f7fe faa0 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 80025cc:	2001      	movs	r0, #1
 80025ce:	f7fe fac1 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 80025d2:	2022      	movs	r0, #34	; 0x22
 80025d4:	f7fe fabe 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 80025d8:	20c0      	movs	r0, #192	; 0xc0
 80025da:	f7fe fa97 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 80025de:	2010      	movs	r0, #16
 80025e0:	f7fe fab8 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 80025e4:	203b      	movs	r0, #59	; 0x3b
 80025e6:	f7fe fab5 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80025ea:	2000      	movs	r0, #0
 80025ec:	f7fe fab2 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 80025f0:	2002      	movs	r0, #2
 80025f2:	f7fe faaf 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 80025f6:	2011      	movs	r0, #17
 80025f8:	f7fe faac 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 80025fc:	20c5      	movs	r0, #197	; 0xc5
 80025fe:	f7fe fa85 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 8002602:	2003      	movs	r0, #3
 8002604:	f7fe faa6 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 8002608:	20c8      	movs	r0, #200	; 0xc8
 800260a:	f7fe fa7f 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 800260e:	2000      	movs	r0, #0
 8002610:	f7fe faa0 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8002614:	2025      	movs	r0, #37	; 0x25
 8002616:	f7fe fa9d 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 800261a:	2021      	movs	r0, #33	; 0x21
 800261c:	f7fe fa9a 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 8002620:	2005      	movs	r0, #5
 8002622:	f7fe fa97 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002626:	2000      	movs	r0, #0
 8002628:	f7fe fa94 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 800262c:	200a      	movs	r0, #10
 800262e:	f7fe fa91 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 8002632:	2065      	movs	r0, #101	; 0x65
 8002634:	f7fe fa8e 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8002638:	2025      	movs	r0, #37	; 0x25
 800263a:	f7fe fa8b 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 800263e:	2077      	movs	r0, #119	; 0x77
 8002640:	f7fe fa88 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 8002644:	2050      	movs	r0, #80	; 0x50
 8002646:	f7fe fa85 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 800264a:	200f      	movs	r0, #15
 800264c:	f7fe fa82 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002650:	2000      	movs	r0, #0
 8002652:	f7fe fa7f 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 8002656:	20f8      	movs	r0, #248	; 0xf8
 8002658:	f7fe fa58 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 800265c:	2001      	movs	r0, #1
 800265e:	f7fe fa79 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 8002662:	20fe      	movs	r0, #254	; 0xfe
 8002664:	f7fe fa52 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002668:	2000      	movs	r0, #0
 800266a:	f7fe fa73 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 800266e:	2002      	movs	r0, #2
 8002670:	f7fe fa70 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 8002674:	2020      	movs	r0, #32
 8002676:	f7fe fa49 	bl	8000b0c <LCD_WR_REG>

		LCD_WR_REG(0X36);
 800267a:	2036      	movs	r0, #54	; 0x36
 800267c:	f7fe fa46 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 8002680:	2008      	movs	r0, #8
 8002682:	f7fe fa67 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 8002686:	203a      	movs	r0, #58	; 0x3a
 8002688:	f7fe fa40 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 800268c:	2055      	movs	r0, #85	; 0x55
 800268e:	f7fe fa61 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 8002692:	202b      	movs	r0, #43	; 0x2b
 8002694:	f7fe fa3a 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002698:	2000      	movs	r0, #0
 800269a:	f7fe fa5b 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800269e:	2000      	movs	r0, #0
 80026a0:	f7fe fa58 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 80026a4:	2001      	movs	r0, #1
 80026a6:	f7fe fa55 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 80026aa:	203f      	movs	r0, #63	; 0x3f
 80026ac:	f7fe fa52 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 80026b0:	202a      	movs	r0, #42	; 0x2a
 80026b2:	f7fe fa2b 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80026b6:	2000      	movs	r0, #0
 80026b8:	f7fe fa4c 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80026bc:	2000      	movs	r0, #0
 80026be:	f7fe fa49 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 80026c2:	2001      	movs	r0, #1
 80026c4:	f7fe fa46 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 80026c8:	20df      	movs	r0, #223	; 0xdf
 80026ca:	f7fe fa43 	bl	8000b54 <LCD_WR_DATAX>
		HAL_Delay(120);
 80026ce:	2078      	movs	r0, #120	; 0x78
 80026d0:	f004 faec 	bl	8006cac <HAL_Delay>
		LCD_WR_REG(0X29);
 80026d4:	2029      	movs	r0, #41	; 0x29
 80026d6:	f7fe fa19 	bl	8000b0c <LCD_WR_REG>
 80026da:	f003 bc27 	b.w	8005f2c <LCD_Init+0x3e34>
 80026de:	bf00      	nop
 80026e0:	20000030 	.word	0x20000030
	} else if (lcddev.id == 0x5310) {
 80026e4:	4b03      	ldr	r3, [pc, #12]	; (80026f4 <LCD_Init+0x5fc>)
 80026e6:	889b      	ldrh	r3, [r3, #4]
 80026e8:	f245 3210 	movw	r2, #21264	; 0x5310
 80026ec:	4293      	cmp	r3, r2
 80026ee:	f040 877c 	bne.w	80035ea <LCD_Init+0x14f2>
 80026f2:	e001      	b.n	80026f8 <LCD_Init+0x600>
 80026f4:	20000030 	.word	0x20000030
		LCD_WR_REG(0xED);
 80026f8:	20ed      	movs	r0, #237	; 0xed
 80026fa:	f7fe fa07 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80026fe:	2001      	movs	r0, #1
 8002700:	f7fe fa28 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 8002704:	20fe      	movs	r0, #254	; 0xfe
 8002706:	f7fe fa25 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 800270a:	20ee      	movs	r0, #238	; 0xee
 800270c:	f7fe f9fe 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 8002710:	20de      	movs	r0, #222	; 0xde
 8002712:	f7fe fa1f 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002716:	2021      	movs	r0, #33	; 0x21
 8002718:	f7fe fa1c 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 800271c:	20f1      	movs	r0, #241	; 0xf1
 800271e:	f7fe f9f5 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002722:	2001      	movs	r0, #1
 8002724:	f7fe fa16 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 8002728:	20df      	movs	r0, #223	; 0xdf
 800272a:	f7fe f9ef 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 800272e:	2010      	movs	r0, #16
 8002730:	f7fe fa10 	bl	8000b54 <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 8002734:	20c4      	movs	r0, #196	; 0xc4
 8002736:	f7fe f9e9 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 800273a:	208f      	movs	r0, #143	; 0x8f
 800273c:	f7fe fa0a 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002740:	20c6      	movs	r0, #198	; 0xc6
 8002742:	f7fe f9e3 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002746:	2000      	movs	r0, #0
 8002748:	f7fe fa04 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 800274c:	20e2      	movs	r0, #226	; 0xe2
 800274e:	f7fe fa01 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8002752:	20e2      	movs	r0, #226	; 0xe2
 8002754:	f7fe f9fe 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8002758:	20e2      	movs	r0, #226	; 0xe2
 800275a:	f7fe f9fb 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 800275e:	20bf      	movs	r0, #191	; 0xbf
 8002760:	f7fe f9d4 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8002764:	20aa      	movs	r0, #170	; 0xaa
 8002766:	f7fe f9f5 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 800276a:	20b0      	movs	r0, #176	; 0xb0
 800276c:	f7fe f9ce 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 8002770:	200d      	movs	r0, #13
 8002772:	f7fe f9ef 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002776:	2000      	movs	r0, #0
 8002778:	f7fe f9ec 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 800277c:	200d      	movs	r0, #13
 800277e:	f7fe f9e9 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002782:	2000      	movs	r0, #0
 8002784:	f7fe f9e6 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002788:	2011      	movs	r0, #17
 800278a:	f7fe f9e3 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800278e:	2000      	movs	r0, #0
 8002790:	f7fe f9e0 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 8002794:	2019      	movs	r0, #25
 8002796:	f7fe f9dd 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800279a:	2000      	movs	r0, #0
 800279c:	f7fe f9da 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 80027a0:	2021      	movs	r0, #33	; 0x21
 80027a2:	f7fe f9d7 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027a6:	2000      	movs	r0, #0
 80027a8:	f7fe f9d4 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 80027ac:	202d      	movs	r0, #45	; 0x2d
 80027ae:	f7fe f9d1 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027b2:	2000      	movs	r0, #0
 80027b4:	f7fe f9ce 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 80027b8:	203d      	movs	r0, #61	; 0x3d
 80027ba:	f7fe f9cb 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027be:	2000      	movs	r0, #0
 80027c0:	f7fe f9c8 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 80027c4:	205d      	movs	r0, #93	; 0x5d
 80027c6:	f7fe f9c5 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027ca:	2000      	movs	r0, #0
 80027cc:	f7fe f9c2 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 80027d0:	205d      	movs	r0, #93	; 0x5d
 80027d2:	f7fe f9bf 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027d6:	2000      	movs	r0, #0
 80027d8:	f7fe f9bc 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 80027dc:	20b1      	movs	r0, #177	; 0xb1
 80027de:	f7fe f995 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 80027e2:	2080      	movs	r0, #128	; 0x80
 80027e4:	f7fe f9b6 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027e8:	2000      	movs	r0, #0
 80027ea:	f7fe f9b3 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 80027ee:	208b      	movs	r0, #139	; 0x8b
 80027f0:	f7fe f9b0 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027f4:	2000      	movs	r0, #0
 80027f6:	f7fe f9ad 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 80027fa:	2096      	movs	r0, #150	; 0x96
 80027fc:	f7fe f9aa 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002800:	2000      	movs	r0, #0
 8002802:	f7fe f9a7 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 8002806:	20b2      	movs	r0, #178	; 0xb2
 8002808:	f7fe f980 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800280c:	2000      	movs	r0, #0
 800280e:	f7fe f9a1 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002812:	2000      	movs	r0, #0
 8002814:	f7fe f99e 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002818:	2002      	movs	r0, #2
 800281a:	f7fe f99b 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800281e:	2000      	movs	r0, #0
 8002820:	f7fe f998 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8002824:	2003      	movs	r0, #3
 8002826:	f7fe f995 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800282a:	2000      	movs	r0, #0
 800282c:	f7fe f992 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 8002830:	20b3      	movs	r0, #179	; 0xb3
 8002832:	f7fe f96b 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002836:	2000      	movs	r0, #0
 8002838:	f7fe f98c 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800283c:	2000      	movs	r0, #0
 800283e:	f7fe f989 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002842:	2000      	movs	r0, #0
 8002844:	f7fe f986 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002848:	2000      	movs	r0, #0
 800284a:	f7fe f983 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800284e:	2000      	movs	r0, #0
 8002850:	f7fe f980 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002854:	2000      	movs	r0, #0
 8002856:	f7fe f97d 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800285a:	2000      	movs	r0, #0
 800285c:	f7fe f97a 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002860:	2000      	movs	r0, #0
 8002862:	f7fe f977 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002866:	2000      	movs	r0, #0
 8002868:	f7fe f974 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800286c:	2000      	movs	r0, #0
 800286e:	f7fe f971 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002872:	2000      	movs	r0, #0
 8002874:	f7fe f96e 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002878:	2000      	movs	r0, #0
 800287a:	f7fe f96b 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800287e:	2000      	movs	r0, #0
 8002880:	f7fe f968 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002884:	2000      	movs	r0, #0
 8002886:	f7fe f965 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800288a:	2000      	movs	r0, #0
 800288c:	f7fe f962 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002890:	2000      	movs	r0, #0
 8002892:	f7fe f95f 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002896:	2000      	movs	r0, #0
 8002898:	f7fe f95c 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800289c:	2000      	movs	r0, #0
 800289e:	f7fe f959 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028a2:	2000      	movs	r0, #0
 80028a4:	f7fe f956 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028a8:	2000      	movs	r0, #0
 80028aa:	f7fe f953 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ae:	2000      	movs	r0, #0
 80028b0:	f7fe f950 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028b4:	2000      	movs	r0, #0
 80028b6:	f7fe f94d 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ba:	2000      	movs	r0, #0
 80028bc:	f7fe f94a 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028c0:	2000      	movs	r0, #0
 80028c2:	f7fe f947 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 80028c6:	20b4      	movs	r0, #180	; 0xb4
 80028c8:	f7fe f920 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 80028cc:	208b      	movs	r0, #139	; 0x8b
 80028ce:	f7fe f941 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028d2:	2000      	movs	r0, #0
 80028d4:	f7fe f93e 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 80028d8:	2096      	movs	r0, #150	; 0x96
 80028da:	f7fe f93b 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028de:	2000      	movs	r0, #0
 80028e0:	f7fe f938 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 80028e4:	20a1      	movs	r0, #161	; 0xa1
 80028e6:	f7fe f935 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ea:	2000      	movs	r0, #0
 80028ec:	f7fe f932 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 80028f0:	20b5      	movs	r0, #181	; 0xb5
 80028f2:	f7fe f90b 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 80028f6:	2002      	movs	r0, #2
 80028f8:	f7fe f92c 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028fc:	2000      	movs	r0, #0
 80028fe:	f7fe f929 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8002902:	2003      	movs	r0, #3
 8002904:	f7fe f926 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002908:	2000      	movs	r0, #0
 800290a:	f7fe f923 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 800290e:	2004      	movs	r0, #4
 8002910:	f7fe f920 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002914:	2000      	movs	r0, #0
 8002916:	f7fe f91d 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 800291a:	20b6      	movs	r0, #182	; 0xb6
 800291c:	f7fe f8f6 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002920:	2000      	movs	r0, #0
 8002922:	f7fe f917 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002926:	2000      	movs	r0, #0
 8002928:	f7fe f914 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 800292c:	20b7      	movs	r0, #183	; 0xb7
 800292e:	f7fe f8ed 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002932:	2000      	movs	r0, #0
 8002934:	f7fe f90e 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002938:	2000      	movs	r0, #0
 800293a:	f7fe f90b 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 800293e:	203f      	movs	r0, #63	; 0x3f
 8002940:	f7fe f908 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002944:	2000      	movs	r0, #0
 8002946:	f7fe f905 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 800294a:	205e      	movs	r0, #94	; 0x5e
 800294c:	f7fe f902 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002950:	2000      	movs	r0, #0
 8002952:	f7fe f8ff 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002956:	2064      	movs	r0, #100	; 0x64
 8002958:	f7fe f8fc 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800295c:	2000      	movs	r0, #0
 800295e:	f7fe f8f9 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 8002962:	208c      	movs	r0, #140	; 0x8c
 8002964:	f7fe f8f6 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002968:	2000      	movs	r0, #0
 800296a:	f7fe f8f3 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 800296e:	20ac      	movs	r0, #172	; 0xac
 8002970:	f7fe f8f0 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002974:	2000      	movs	r0, #0
 8002976:	f7fe f8ed 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 800297a:	20dc      	movs	r0, #220	; 0xdc
 800297c:	f7fe f8ea 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002980:	2000      	movs	r0, #0
 8002982:	f7fe f8e7 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 8002986:	2070      	movs	r0, #112	; 0x70
 8002988:	f7fe f8e4 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800298c:	2000      	movs	r0, #0
 800298e:	f7fe f8e1 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 8002992:	2090      	movs	r0, #144	; 0x90
 8002994:	f7fe f8de 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002998:	2000      	movs	r0, #0
 800299a:	f7fe f8db 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 800299e:	20eb      	movs	r0, #235	; 0xeb
 80029a0:	f7fe f8d8 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029a4:	2000      	movs	r0, #0
 80029a6:	f7fe f8d5 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80029aa:	20dc      	movs	r0, #220	; 0xdc
 80029ac:	f7fe f8d2 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029b0:	2000      	movs	r0, #0
 80029b2:	f7fe f8cf 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 80029b6:	20b8      	movs	r0, #184	; 0xb8
 80029b8:	f7fe f8a8 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80029bc:	2000      	movs	r0, #0
 80029be:	f7fe f8c9 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029c2:	2000      	movs	r0, #0
 80029c4:	f7fe f8c6 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029c8:	2000      	movs	r0, #0
 80029ca:	f7fe f8c3 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ce:	2000      	movs	r0, #0
 80029d0:	f7fe f8c0 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029d4:	2000      	movs	r0, #0
 80029d6:	f7fe f8bd 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029da:	2000      	movs	r0, #0
 80029dc:	f7fe f8ba 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029e0:	2000      	movs	r0, #0
 80029e2:	f7fe f8b7 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029e6:	2000      	movs	r0, #0
 80029e8:	f7fe f8b4 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 80029ec:	20ba      	movs	r0, #186	; 0xba
 80029ee:	f7fe f88d 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 80029f2:	2024      	movs	r0, #36	; 0x24
 80029f4:	f7fe f8ae 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029f8:	2000      	movs	r0, #0
 80029fa:	f7fe f8ab 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029fe:	2000      	movs	r0, #0
 8002a00:	f7fe f8a8 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a04:	2000      	movs	r0, #0
 8002a06:	f7fe f8a5 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 8002a0a:	20c1      	movs	r0, #193	; 0xc1
 8002a0c:	f7fe f87e 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002a10:	2020      	movs	r0, #32
 8002a12:	f7fe f89f 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a16:	2000      	movs	r0, #0
 8002a18:	f7fe f89c 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8002a1c:	2054      	movs	r0, #84	; 0x54
 8002a1e:	f7fe f899 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a22:	2000      	movs	r0, #0
 8002a24:	f7fe f896 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 8002a28:	20ff      	movs	r0, #255	; 0xff
 8002a2a:	f7fe f893 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a2e:	2000      	movs	r0, #0
 8002a30:	f7fe f890 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 8002a34:	20c2      	movs	r0, #194	; 0xc2
 8002a36:	f7fe f869 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8002a3a:	200a      	movs	r0, #10
 8002a3c:	f7fe f88a 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a40:	2000      	movs	r0, #0
 8002a42:	f7fe f887 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8002a46:	2004      	movs	r0, #4
 8002a48:	f7fe f884 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	f7fe f881 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 8002a52:	20c3      	movs	r0, #195	; 0xc3
 8002a54:	f7fe f85a 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 8002a58:	203c      	movs	r0, #60	; 0x3c
 8002a5a:	f7fe f87b 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a5e:	2000      	movs	r0, #0
 8002a60:	f7fe f878 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 8002a64:	203a      	movs	r0, #58	; 0x3a
 8002a66:	f7fe f875 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	f7fe f872 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 8002a70:	2039      	movs	r0, #57	; 0x39
 8002a72:	f7fe f86f 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a76:	2000      	movs	r0, #0
 8002a78:	f7fe f86c 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 8002a7c:	2037      	movs	r0, #55	; 0x37
 8002a7e:	f7fe f869 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a82:	2000      	movs	r0, #0
 8002a84:	f7fe f866 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002a88:	203c      	movs	r0, #60	; 0x3c
 8002a8a:	f7fe f863 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a8e:	2000      	movs	r0, #0
 8002a90:	f7fe f860 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002a94:	2036      	movs	r0, #54	; 0x36
 8002a96:	f7fe f85d 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	f7fe f85a 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002aa0:	2032      	movs	r0, #50	; 0x32
 8002aa2:	f7fe f857 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f7fe f854 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8002aac:	202f      	movs	r0, #47	; 0x2f
 8002aae:	f7fe f851 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	f7fe f84e 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002ab8:	202c      	movs	r0, #44	; 0x2c
 8002aba:	f7fe f84b 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002abe:	2000      	movs	r0, #0
 8002ac0:	f7fe f848 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002ac4:	2029      	movs	r0, #41	; 0x29
 8002ac6:	f7fe f845 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aca:	2000      	movs	r0, #0
 8002acc:	f7fe f842 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002ad0:	2026      	movs	r0, #38	; 0x26
 8002ad2:	f7fe f83f 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	f7fe f83c 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002adc:	2024      	movs	r0, #36	; 0x24
 8002ade:	f7fe f839 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	f7fe f836 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002ae8:	2024      	movs	r0, #36	; 0x24
 8002aea:	f7fe f833 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aee:	2000      	movs	r0, #0
 8002af0:	f7fe f830 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002af4:	2023      	movs	r0, #35	; 0x23
 8002af6:	f7fe f82d 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002afa:	2000      	movs	r0, #0
 8002afc:	f7fe f82a 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002b00:	203c      	movs	r0, #60	; 0x3c
 8002b02:	f7fe f827 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b06:	2000      	movs	r0, #0
 8002b08:	f7fe f824 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002b0c:	2036      	movs	r0, #54	; 0x36
 8002b0e:	f7fe f821 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b12:	2000      	movs	r0, #0
 8002b14:	f7fe f81e 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002b18:	2032      	movs	r0, #50	; 0x32
 8002b1a:	f7fe f81b 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b1e:	2000      	movs	r0, #0
 8002b20:	f7fe f818 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8002b24:	202f      	movs	r0, #47	; 0x2f
 8002b26:	f7fe f815 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	f7fe f812 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002b30:	202c      	movs	r0, #44	; 0x2c
 8002b32:	f7fe f80f 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b36:	2000      	movs	r0, #0
 8002b38:	f7fe f80c 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002b3c:	2029      	movs	r0, #41	; 0x29
 8002b3e:	f7fe f809 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b42:	2000      	movs	r0, #0
 8002b44:	f7fe f806 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002b48:	2026      	movs	r0, #38	; 0x26
 8002b4a:	f7fe f803 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b4e:	2000      	movs	r0, #0
 8002b50:	f7fe f800 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002b54:	2024      	movs	r0, #36	; 0x24
 8002b56:	f7fd fffd 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	f7fd fffa 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002b60:	2024      	movs	r0, #36	; 0x24
 8002b62:	f7fd fff7 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b66:	2000      	movs	r0, #0
 8002b68:	f7fd fff4 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002b6c:	2023      	movs	r0, #35	; 0x23
 8002b6e:	f7fd fff1 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b72:	2000      	movs	r0, #0
 8002b74:	f7fd ffee 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 8002b78:	20c4      	movs	r0, #196	; 0xc4
 8002b7a:	f7fd ffc7 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 8002b7e:	2062      	movs	r0, #98	; 0x62
 8002b80:	f7fd ffe8 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b84:	2000      	movs	r0, #0
 8002b86:	f7fd ffe5 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8002b8a:	2005      	movs	r0, #5
 8002b8c:	f7fd ffe2 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b90:	2000      	movs	r0, #0
 8002b92:	f7fd ffdf 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002b96:	2084      	movs	r0, #132	; 0x84
 8002b98:	f7fd ffdc 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	f7fd ffd9 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 8002ba2:	20f0      	movs	r0, #240	; 0xf0
 8002ba4:	f7fd ffd6 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ba8:	2000      	movs	r0, #0
 8002baa:	f7fd ffd3 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002bae:	2018      	movs	r0, #24
 8002bb0:	f7fd ffd0 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	f7fd ffcd 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 8002bba:	20a4      	movs	r0, #164	; 0xa4
 8002bbc:	f7fd ffca 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	f7fd ffc7 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002bc6:	2018      	movs	r0, #24
 8002bc8:	f7fd ffc4 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bcc:	2000      	movs	r0, #0
 8002bce:	f7fd ffc1 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002bd2:	2050      	movs	r0, #80	; 0x50
 8002bd4:	f7fd ffbe 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f7fd ffbb 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 8002bde:	200c      	movs	r0, #12
 8002be0:	f7fd ffb8 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002be4:	2000      	movs	r0, #0
 8002be6:	f7fd ffb5 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002bea:	2017      	movs	r0, #23
 8002bec:	f7fd ffb2 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	f7fd ffaf 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 8002bf6:	2095      	movs	r0, #149	; 0x95
 8002bf8:	f7fd ffac 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bfc:	2000      	movs	r0, #0
 8002bfe:	f7fd ffa9 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002c02:	20f3      	movs	r0, #243	; 0xf3
 8002c04:	f7fd ffa6 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c08:	2000      	movs	r0, #0
 8002c0a:	f7fd ffa3 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 8002c0e:	20e6      	movs	r0, #230	; 0xe6
 8002c10:	f7fd ffa0 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c14:	2000      	movs	r0, #0
 8002c16:	f7fd ff9d 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 8002c1a:	20c5      	movs	r0, #197	; 0xc5
 8002c1c:	f7fd ff76 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8002c20:	2032      	movs	r0, #50	; 0x32
 8002c22:	f7fd ff97 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c26:	2000      	movs	r0, #0
 8002c28:	f7fd ff94 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002c2c:	2044      	movs	r0, #68	; 0x44
 8002c2e:	f7fd ff91 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c32:	2000      	movs	r0, #0
 8002c34:	f7fd ff8e 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 8002c38:	2065      	movs	r0, #101	; 0x65
 8002c3a:	f7fd ff8b 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c3e:	2000      	movs	r0, #0
 8002c40:	f7fd ff88 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002c44:	2076      	movs	r0, #118	; 0x76
 8002c46:	f7fd ff85 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	f7fd ff82 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002c50:	2088      	movs	r0, #136	; 0x88
 8002c52:	f7fd ff7f 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c56:	2000      	movs	r0, #0
 8002c58:	f7fd ff7c 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002c5c:	20c6      	movs	r0, #198	; 0xc6
 8002c5e:	f7fd ff55 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002c62:	2020      	movs	r0, #32
 8002c64:	f7fd ff76 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c68:	2000      	movs	r0, #0
 8002c6a:	f7fd ff73 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002c6e:	2017      	movs	r0, #23
 8002c70:	f7fd ff70 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c74:	2000      	movs	r0, #0
 8002c76:	f7fd ff6d 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002c7a:	2001      	movs	r0, #1
 8002c7c:	f7fd ff6a 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c80:	2000      	movs	r0, #0
 8002c82:	f7fd ff67 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 8002c86:	20c7      	movs	r0, #199	; 0xc7
 8002c88:	f7fd ff40 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	f7fd ff61 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c92:	2000      	movs	r0, #0
 8002c94:	f7fd ff5e 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c98:	2000      	movs	r0, #0
 8002c9a:	f7fd ff5b 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	f7fd ff58 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 8002ca4:	20c8      	movs	r0, #200	; 0xc8
 8002ca6:	f7fd ff31 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002caa:	2000      	movs	r0, #0
 8002cac:	f7fd ff52 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	f7fd ff4f 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	f7fd ff4c 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cbc:	2000      	movs	r0, #0
 8002cbe:	f7fd ff49 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 8002cc2:	20c9      	movs	r0, #201	; 0xc9
 8002cc4:	f7fd ff22 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002cc8:	2000      	movs	r0, #0
 8002cca:	f7fd ff43 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cce:	2000      	movs	r0, #0
 8002cd0:	f7fd ff40 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cd4:	2000      	movs	r0, #0
 8002cd6:	f7fd ff3d 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cda:	2000      	movs	r0, #0
 8002cdc:	f7fd ff3a 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	f7fd ff37 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	f7fd ff34 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cec:	2000      	movs	r0, #0
 8002cee:	f7fd ff31 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	f7fd ff2e 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	f7fd ff2b 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cfe:	2000      	movs	r0, #0
 8002d00:	f7fd ff28 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d04:	2000      	movs	r0, #0
 8002d06:	f7fd ff25 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	f7fd ff22 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d10:	2000      	movs	r0, #0
 8002d12:	f7fd ff1f 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d16:	2000      	movs	r0, #0
 8002d18:	f7fd ff1c 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	f7fd ff19 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d22:	2000      	movs	r0, #0
 8002d24:	f7fd ff16 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8002d28:	20e0      	movs	r0, #224	; 0xe0
 8002d2a:	f7fd feef 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002d2e:	2016      	movs	r0, #22
 8002d30:	f7fd ff10 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d34:	2000      	movs	r0, #0
 8002d36:	f7fd ff0d 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002d3a:	201c      	movs	r0, #28
 8002d3c:	f7fd ff0a 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d40:	2000      	movs	r0, #0
 8002d42:	f7fd ff07 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002d46:	2021      	movs	r0, #33	; 0x21
 8002d48:	f7fd ff04 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	f7fd ff01 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002d52:	2036      	movs	r0, #54	; 0x36
 8002d54:	f7fd fefe 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d58:	2000      	movs	r0, #0
 8002d5a:	f7fd fefb 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 8002d5e:	2046      	movs	r0, #70	; 0x46
 8002d60:	f7fd fef8 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d64:	2000      	movs	r0, #0
 8002d66:	f7fd fef5 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002d6a:	2052      	movs	r0, #82	; 0x52
 8002d6c:	f7fd fef2 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d70:	2000      	movs	r0, #0
 8002d72:	f7fd feef 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002d76:	2064      	movs	r0, #100	; 0x64
 8002d78:	f7fd feec 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	f7fd fee9 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002d82:	207a      	movs	r0, #122	; 0x7a
 8002d84:	f7fd fee6 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d88:	2000      	movs	r0, #0
 8002d8a:	f7fd fee3 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002d8e:	208b      	movs	r0, #139	; 0x8b
 8002d90:	f7fd fee0 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d94:	2000      	movs	r0, #0
 8002d96:	f7fd fedd 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002d9a:	2099      	movs	r0, #153	; 0x99
 8002d9c:	f7fd feda 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002da0:	2000      	movs	r0, #0
 8002da2:	f7fd fed7 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002da6:	20a8      	movs	r0, #168	; 0xa8
 8002da8:	f7fd fed4 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dac:	2000      	movs	r0, #0
 8002dae:	f7fd fed1 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002db2:	20b9      	movs	r0, #185	; 0xb9
 8002db4:	f7fd fece 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002db8:	2000      	movs	r0, #0
 8002dba:	f7fd fecb 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002dbe:	20c4      	movs	r0, #196	; 0xc4
 8002dc0:	f7fd fec8 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	f7fd fec5 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002dca:	20ca      	movs	r0, #202	; 0xca
 8002dcc:	f7fd fec2 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	f7fd febf 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002dd6:	20d2      	movs	r0, #210	; 0xd2
 8002dd8:	f7fd febc 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ddc:	2000      	movs	r0, #0
 8002dde:	f7fd feb9 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 8002de2:	20d9      	movs	r0, #217	; 0xd9
 8002de4:	f7fd feb6 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002de8:	2000      	movs	r0, #0
 8002dea:	f7fd feb3 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002dee:	20e0      	movs	r0, #224	; 0xe0
 8002df0:	f7fd feb0 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002df4:	2000      	movs	r0, #0
 8002df6:	f7fd fead 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002dfa:	20f3      	movs	r0, #243	; 0xf3
 8002dfc:	f7fd feaa 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e00:	2000      	movs	r0, #0
 8002e02:	f7fd fea7 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 8002e06:	20e1      	movs	r0, #225	; 0xe1
 8002e08:	f7fd fe80 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002e0c:	2016      	movs	r0, #22
 8002e0e:	f7fd fea1 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e12:	2000      	movs	r0, #0
 8002e14:	f7fd fe9e 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002e18:	201c      	movs	r0, #28
 8002e1a:	f7fd fe9b 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e1e:	2000      	movs	r0, #0
 8002e20:	f7fd fe98 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 8002e24:	2022      	movs	r0, #34	; 0x22
 8002e26:	f7fd fe95 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	f7fd fe92 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002e30:	2036      	movs	r0, #54	; 0x36
 8002e32:	f7fd fe8f 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e36:	2000      	movs	r0, #0
 8002e38:	f7fd fe8c 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002e3c:	2045      	movs	r0, #69	; 0x45
 8002e3e:	f7fd fe89 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e42:	2000      	movs	r0, #0
 8002e44:	f7fd fe86 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002e48:	2052      	movs	r0, #82	; 0x52
 8002e4a:	f7fd fe83 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e4e:	2000      	movs	r0, #0
 8002e50:	f7fd fe80 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002e54:	2064      	movs	r0, #100	; 0x64
 8002e56:	f7fd fe7d 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	f7fd fe7a 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002e60:	207a      	movs	r0, #122	; 0x7a
 8002e62:	f7fd fe77 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e66:	2000      	movs	r0, #0
 8002e68:	f7fd fe74 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002e6c:	208b      	movs	r0, #139	; 0x8b
 8002e6e:	f7fd fe71 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e72:	2000      	movs	r0, #0
 8002e74:	f7fd fe6e 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002e78:	2099      	movs	r0, #153	; 0x99
 8002e7a:	f7fd fe6b 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e7e:	2000      	movs	r0, #0
 8002e80:	f7fd fe68 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002e84:	20a8      	movs	r0, #168	; 0xa8
 8002e86:	f7fd fe65 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	f7fd fe62 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002e90:	20b9      	movs	r0, #185	; 0xb9
 8002e92:	f7fd fe5f 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e96:	2000      	movs	r0, #0
 8002e98:	f7fd fe5c 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002e9c:	20c4      	movs	r0, #196	; 0xc4
 8002e9e:	f7fd fe59 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	f7fd fe56 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002ea8:	20ca      	movs	r0, #202	; 0xca
 8002eaa:	f7fd fe53 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eae:	2000      	movs	r0, #0
 8002eb0:	f7fd fe50 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002eb4:	20d2      	movs	r0, #210	; 0xd2
 8002eb6:	f7fd fe4d 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eba:	2000      	movs	r0, #0
 8002ebc:	f7fd fe4a 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 8002ec0:	20d8      	movs	r0, #216	; 0xd8
 8002ec2:	f7fd fe47 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ec6:	2000      	movs	r0, #0
 8002ec8:	f7fd fe44 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002ecc:	20e0      	movs	r0, #224	; 0xe0
 8002ece:	f7fd fe41 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	f7fd fe3e 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002ed8:	20f3      	movs	r0, #243	; 0xf3
 8002eda:	f7fd fe3b 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ede:	2000      	movs	r0, #0
 8002ee0:	f7fd fe38 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 8002ee4:	20e2      	movs	r0, #226	; 0xe2
 8002ee6:	f7fd fe11 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002eea:	2005      	movs	r0, #5
 8002eec:	f7fd fe32 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	f7fd fe2f 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 8002ef6:	200b      	movs	r0, #11
 8002ef8:	f7fd fe2c 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002efc:	2000      	movs	r0, #0
 8002efe:	f7fd fe29 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 8002f02:	201b      	movs	r0, #27
 8002f04:	f7fd fe26 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f08:	2000      	movs	r0, #0
 8002f0a:	f7fd fe23 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002f0e:	2034      	movs	r0, #52	; 0x34
 8002f10:	f7fd fe20 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f14:	2000      	movs	r0, #0
 8002f16:	f7fd fe1d 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002f1a:	2044      	movs	r0, #68	; 0x44
 8002f1c:	f7fd fe1a 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f20:	2000      	movs	r0, #0
 8002f22:	f7fd fe17 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 8002f26:	204f      	movs	r0, #79	; 0x4f
 8002f28:	f7fd fe14 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	f7fd fe11 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 8002f32:	2061      	movs	r0, #97	; 0x61
 8002f34:	f7fd fe0e 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f38:	2000      	movs	r0, #0
 8002f3a:	f7fd fe0b 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 8002f3e:	2079      	movs	r0, #121	; 0x79
 8002f40:	f7fd fe08 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f44:	2000      	movs	r0, #0
 8002f46:	f7fd fe05 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002f4a:	2088      	movs	r0, #136	; 0x88
 8002f4c:	f7fd fe02 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f50:	2000      	movs	r0, #0
 8002f52:	f7fd fdff 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002f56:	2097      	movs	r0, #151	; 0x97
 8002f58:	f7fd fdfc 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	f7fd fdf9 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002f62:	20a6      	movs	r0, #166	; 0xa6
 8002f64:	f7fd fdf6 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f68:	2000      	movs	r0, #0
 8002f6a:	f7fd fdf3 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002f6e:	20b7      	movs	r0, #183	; 0xb7
 8002f70:	f7fd fdf0 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f74:	2000      	movs	r0, #0
 8002f76:	f7fd fded 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002f7a:	20c2      	movs	r0, #194	; 0xc2
 8002f7c:	f7fd fdea 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f80:	2000      	movs	r0, #0
 8002f82:	f7fd fde7 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002f86:	20c7      	movs	r0, #199	; 0xc7
 8002f88:	f7fd fde4 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f8c:	2000      	movs	r0, #0
 8002f8e:	f7fd fde1 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8002f92:	20d1      	movs	r0, #209	; 0xd1
 8002f94:	f7fd fdde 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f98:	2000      	movs	r0, #0
 8002f9a:	f7fd fddb 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 8002f9e:	20d6      	movs	r0, #214	; 0xd6
 8002fa0:	f7fd fdd8 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	f7fd fdd5 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002faa:	20dd      	movs	r0, #221	; 0xdd
 8002fac:	f7fd fdd2 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fb0:	2000      	movs	r0, #0
 8002fb2:	f7fd fdcf 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002fb6:	20f3      	movs	r0, #243	; 0xf3
 8002fb8:	f7fd fdcc 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	f7fd fdc9 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 8002fc2:	20e3      	movs	r0, #227	; 0xe3
 8002fc4:	f7fd fda2 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002fc8:	2005      	movs	r0, #5
 8002fca:	f7fd fdc3 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fce:	2000      	movs	r0, #0
 8002fd0:	f7fd fdc0 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 8002fd4:	200a      	movs	r0, #10
 8002fd6:	f7fd fdbd 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fda:	2000      	movs	r0, #0
 8002fdc:	f7fd fdba 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002fe0:	201c      	movs	r0, #28
 8002fe2:	f7fd fdb7 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	f7fd fdb4 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8002fec:	2033      	movs	r0, #51	; 0x33
 8002fee:	f7fd fdb1 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	f7fd fdae 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002ff8:	2044      	movs	r0, #68	; 0x44
 8002ffa:	f7fd fdab 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ffe:	2000      	movs	r0, #0
 8003000:	f7fd fda8 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8003004:	2050      	movs	r0, #80	; 0x50
 8003006:	f7fd fda5 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800300a:	2000      	movs	r0, #0
 800300c:	f7fd fda2 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 8003010:	2062      	movs	r0, #98	; 0x62
 8003012:	f7fd fd9f 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003016:	2000      	movs	r0, #0
 8003018:	f7fd fd9c 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 800301c:	2078      	movs	r0, #120	; 0x78
 800301e:	f7fd fd99 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003022:	2000      	movs	r0, #0
 8003024:	f7fd fd96 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003028:	2088      	movs	r0, #136	; 0x88
 800302a:	f7fd fd93 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800302e:	2000      	movs	r0, #0
 8003030:	f7fd fd90 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8003034:	2097      	movs	r0, #151	; 0x97
 8003036:	f7fd fd8d 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800303a:	2000      	movs	r0, #0
 800303c:	f7fd fd8a 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8003040:	20a6      	movs	r0, #166	; 0xa6
 8003042:	f7fd fd87 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003046:	2000      	movs	r0, #0
 8003048:	f7fd fd84 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 800304c:	20b7      	movs	r0, #183	; 0xb7
 800304e:	f7fd fd81 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003052:	2000      	movs	r0, #0
 8003054:	f7fd fd7e 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8003058:	20c2      	movs	r0, #194	; 0xc2
 800305a:	f7fd fd7b 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800305e:	2000      	movs	r0, #0
 8003060:	f7fd fd78 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8003064:	20c7      	movs	r0, #199	; 0xc7
 8003066:	f7fd fd75 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800306a:	2000      	movs	r0, #0
 800306c:	f7fd fd72 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8003070:	20d1      	movs	r0, #209	; 0xd1
 8003072:	f7fd fd6f 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003076:	2000      	movs	r0, #0
 8003078:	f7fd fd6c 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 800307c:	20d5      	movs	r0, #213	; 0xd5
 800307e:	f7fd fd69 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003082:	2000      	movs	r0, #0
 8003084:	f7fd fd66 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8003088:	20dd      	movs	r0, #221	; 0xdd
 800308a:	f7fd fd63 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800308e:	2000      	movs	r0, #0
 8003090:	f7fd fd60 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8003094:	20f3      	movs	r0, #243	; 0xf3
 8003096:	f7fd fd5d 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800309a:	2000      	movs	r0, #0
 800309c:	f7fd fd5a 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 80030a0:	20e4      	movs	r0, #228	; 0xe4
 80030a2:	f7fd fd33 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80030a6:	2001      	movs	r0, #1
 80030a8:	f7fd fd54 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ac:	2000      	movs	r0, #0
 80030ae:	f7fd fd51 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 80030b2:	2001      	movs	r0, #1
 80030b4:	f7fd fd4e 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030b8:	2000      	movs	r0, #0
 80030ba:	f7fd fd4b 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 80030be:	2002      	movs	r0, #2
 80030c0:	f7fd fd48 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030c4:	2000      	movs	r0, #0
 80030c6:	f7fd fd45 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 80030ca:	202a      	movs	r0, #42	; 0x2a
 80030cc:	f7fd fd42 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030d0:	2000      	movs	r0, #0
 80030d2:	f7fd fd3f 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80030d6:	203c      	movs	r0, #60	; 0x3c
 80030d8:	f7fd fd3c 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030dc:	2000      	movs	r0, #0
 80030de:	f7fd fd39 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 80030e2:	204b      	movs	r0, #75	; 0x4b
 80030e4:	f7fd fd36 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030e8:	2000      	movs	r0, #0
 80030ea:	f7fd fd33 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 80030ee:	205d      	movs	r0, #93	; 0x5d
 80030f0:	f7fd fd30 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030f4:	2000      	movs	r0, #0
 80030f6:	f7fd fd2d 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 80030fa:	2074      	movs	r0, #116	; 0x74
 80030fc:	f7fd fd2a 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003100:	2000      	movs	r0, #0
 8003102:	f7fd fd27 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8003106:	2084      	movs	r0, #132	; 0x84
 8003108:	f7fd fd24 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800310c:	2000      	movs	r0, #0
 800310e:	f7fd fd21 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8003112:	2093      	movs	r0, #147	; 0x93
 8003114:	f7fd fd1e 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003118:	2000      	movs	r0, #0
 800311a:	f7fd fd1b 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 800311e:	20a2      	movs	r0, #162	; 0xa2
 8003120:	f7fd fd18 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003124:	2000      	movs	r0, #0
 8003126:	f7fd fd15 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 800312a:	20b3      	movs	r0, #179	; 0xb3
 800312c:	f7fd fd12 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003130:	2000      	movs	r0, #0
 8003132:	f7fd fd0f 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8003136:	20be      	movs	r0, #190	; 0xbe
 8003138:	f7fd fd0c 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800313c:	2000      	movs	r0, #0
 800313e:	f7fd fd09 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8003142:	20c4      	movs	r0, #196	; 0xc4
 8003144:	f7fd fd06 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003148:	2000      	movs	r0, #0
 800314a:	f7fd fd03 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 800314e:	20cd      	movs	r0, #205	; 0xcd
 8003150:	f7fd fd00 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003154:	2000      	movs	r0, #0
 8003156:	f7fd fcfd 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 800315a:	20d3      	movs	r0, #211	; 0xd3
 800315c:	f7fd fcfa 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003160:	2000      	movs	r0, #0
 8003162:	f7fd fcf7 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8003166:	20dd      	movs	r0, #221	; 0xdd
 8003168:	f7fd fcf4 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800316c:	2000      	movs	r0, #0
 800316e:	f7fd fcf1 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8003172:	20f3      	movs	r0, #243	; 0xf3
 8003174:	f7fd fcee 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003178:	2000      	movs	r0, #0
 800317a:	f7fd fceb 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 800317e:	20e5      	movs	r0, #229	; 0xe5
 8003180:	f7fd fcc4 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003184:	2000      	movs	r0, #0
 8003186:	f7fd fce5 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800318a:	2000      	movs	r0, #0
 800318c:	f7fd fce2 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003190:	2000      	movs	r0, #0
 8003192:	f7fd fcdf 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003196:	2000      	movs	r0, #0
 8003198:	f7fd fcdc 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 800319c:	2002      	movs	r0, #2
 800319e:	f7fd fcd9 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031a2:	2000      	movs	r0, #0
 80031a4:	f7fd fcd6 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80031a8:	2029      	movs	r0, #41	; 0x29
 80031aa:	f7fd fcd3 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031ae:	2000      	movs	r0, #0
 80031b0:	f7fd fcd0 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80031b4:	203c      	movs	r0, #60	; 0x3c
 80031b6:	f7fd fccd 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031ba:	2000      	movs	r0, #0
 80031bc:	f7fd fcca 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 80031c0:	204b      	movs	r0, #75	; 0x4b
 80031c2:	f7fd fcc7 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031c6:	2000      	movs	r0, #0
 80031c8:	f7fd fcc4 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 80031cc:	205d      	movs	r0, #93	; 0x5d
 80031ce:	f7fd fcc1 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031d2:	2000      	movs	r0, #0
 80031d4:	f7fd fcbe 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 80031d8:	2074      	movs	r0, #116	; 0x74
 80031da:	f7fd fcbb 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031de:	2000      	movs	r0, #0
 80031e0:	f7fd fcb8 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 80031e4:	2084      	movs	r0, #132	; 0x84
 80031e6:	f7fd fcb5 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031ea:	2000      	movs	r0, #0
 80031ec:	f7fd fcb2 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 80031f0:	2093      	movs	r0, #147	; 0x93
 80031f2:	f7fd fcaf 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031f6:	2000      	movs	r0, #0
 80031f8:	f7fd fcac 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 80031fc:	20a2      	movs	r0, #162	; 0xa2
 80031fe:	f7fd fca9 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003202:	2000      	movs	r0, #0
 8003204:	f7fd fca6 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8003208:	20b3      	movs	r0, #179	; 0xb3
 800320a:	f7fd fca3 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800320e:	2000      	movs	r0, #0
 8003210:	f7fd fca0 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8003214:	20be      	movs	r0, #190	; 0xbe
 8003216:	f7fd fc9d 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800321a:	2000      	movs	r0, #0
 800321c:	f7fd fc9a 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8003220:	20c4      	movs	r0, #196	; 0xc4
 8003222:	f7fd fc97 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003226:	2000      	movs	r0, #0
 8003228:	f7fd fc94 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 800322c:	20cd      	movs	r0, #205	; 0xcd
 800322e:	f7fd fc91 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003232:	2000      	movs	r0, #0
 8003234:	f7fd fc8e 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8003238:	20d3      	movs	r0, #211	; 0xd3
 800323a:	f7fd fc8b 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800323e:	2000      	movs	r0, #0
 8003240:	f7fd fc88 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8003244:	20dc      	movs	r0, #220	; 0xdc
 8003246:	f7fd fc85 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800324a:	2000      	movs	r0, #0
 800324c:	f7fd fc82 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8003250:	20f3      	movs	r0, #243	; 0xf3
 8003252:	f7fd fc7f 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003256:	2000      	movs	r0, #0
 8003258:	f7fd fc7c 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 800325c:	20e6      	movs	r0, #230	; 0xe6
 800325e:	f7fd fc55 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 8003262:	2011      	movs	r0, #17
 8003264:	f7fd fc76 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003268:	2000      	movs	r0, #0
 800326a:	f7fd fc73 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 800326e:	2034      	movs	r0, #52	; 0x34
 8003270:	f7fd fc70 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003274:	2000      	movs	r0, #0
 8003276:	f7fd fc6d 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 800327a:	2056      	movs	r0, #86	; 0x56
 800327c:	f7fd fc6a 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003280:	2000      	movs	r0, #0
 8003282:	f7fd fc67 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8003286:	2076      	movs	r0, #118	; 0x76
 8003288:	f7fd fc64 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800328c:	2000      	movs	r0, #0
 800328e:	f7fd fc61 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003292:	2077      	movs	r0, #119	; 0x77
 8003294:	f7fd fc5e 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003298:	2000      	movs	r0, #0
 800329a:	f7fd fc5b 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800329e:	2066      	movs	r0, #102	; 0x66
 80032a0:	f7fd fc58 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032a4:	2000      	movs	r0, #0
 80032a6:	f7fd fc55 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80032aa:	2088      	movs	r0, #136	; 0x88
 80032ac:	f7fd fc52 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032b0:	2000      	movs	r0, #0
 80032b2:	f7fd fc4f 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80032b6:	2099      	movs	r0, #153	; 0x99
 80032b8:	f7fd fc4c 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032bc:	2000      	movs	r0, #0
 80032be:	f7fd fc49 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80032c2:	20bb      	movs	r0, #187	; 0xbb
 80032c4:	f7fd fc46 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032c8:	2000      	movs	r0, #0
 80032ca:	f7fd fc43 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80032ce:	2099      	movs	r0, #153	; 0x99
 80032d0:	f7fd fc40 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032d4:	2000      	movs	r0, #0
 80032d6:	f7fd fc3d 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80032da:	2066      	movs	r0, #102	; 0x66
 80032dc:	f7fd fc3a 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032e0:	2000      	movs	r0, #0
 80032e2:	f7fd fc37 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80032e6:	2055      	movs	r0, #85	; 0x55
 80032e8:	f7fd fc34 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032ec:	2000      	movs	r0, #0
 80032ee:	f7fd fc31 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80032f2:	2055      	movs	r0, #85	; 0x55
 80032f4:	f7fd fc2e 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032f8:	2000      	movs	r0, #0
 80032fa:	f7fd fc2b 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 80032fe:	2045      	movs	r0, #69	; 0x45
 8003300:	f7fd fc28 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003304:	2000      	movs	r0, #0
 8003306:	f7fd fc25 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 800330a:	2043      	movs	r0, #67	; 0x43
 800330c:	f7fd fc22 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003310:	2000      	movs	r0, #0
 8003312:	f7fd fc1f 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003316:	2044      	movs	r0, #68	; 0x44
 8003318:	f7fd fc1c 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800331c:	2000      	movs	r0, #0
 800331e:	f7fd fc19 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 8003322:	20e7      	movs	r0, #231	; 0xe7
 8003324:	f7fd fbf2 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8003328:	2032      	movs	r0, #50	; 0x32
 800332a:	f7fd fc13 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800332e:	2000      	movs	r0, #0
 8003330:	f7fd fc10 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003334:	2055      	movs	r0, #85	; 0x55
 8003336:	f7fd fc0d 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800333a:	2000      	movs	r0, #0
 800333c:	f7fd fc0a 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8003340:	2076      	movs	r0, #118	; 0x76
 8003342:	f7fd fc07 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003346:	2000      	movs	r0, #0
 8003348:	f7fd fc04 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800334c:	2066      	movs	r0, #102	; 0x66
 800334e:	f7fd fc01 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003352:	2000      	movs	r0, #0
 8003354:	f7fd fbfe 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8003358:	2067      	movs	r0, #103	; 0x67
 800335a:	f7fd fbfb 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800335e:	2000      	movs	r0, #0
 8003360:	f7fd fbf8 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8003364:	2067      	movs	r0, #103	; 0x67
 8003366:	f7fd fbf5 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800336a:	2000      	movs	r0, #0
 800336c:	f7fd fbf2 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8003370:	2087      	movs	r0, #135	; 0x87
 8003372:	f7fd fbef 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003376:	2000      	movs	r0, #0
 8003378:	f7fd fbec 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800337c:	2099      	movs	r0, #153	; 0x99
 800337e:	f7fd fbe9 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003382:	2000      	movs	r0, #0
 8003384:	f7fd fbe6 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8003388:	20bb      	movs	r0, #187	; 0xbb
 800338a:	f7fd fbe3 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800338e:	2000      	movs	r0, #0
 8003390:	f7fd fbe0 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003394:	2099      	movs	r0, #153	; 0x99
 8003396:	f7fd fbdd 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800339a:	2000      	movs	r0, #0
 800339c:	f7fd fbda 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 80033a0:	2077      	movs	r0, #119	; 0x77
 80033a2:	f7fd fbd7 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033a6:	2000      	movs	r0, #0
 80033a8:	f7fd fbd4 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80033ac:	2044      	movs	r0, #68	; 0x44
 80033ae:	f7fd fbd1 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033b2:	2000      	movs	r0, #0
 80033b4:	f7fd fbce 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 80033b8:	2056      	movs	r0, #86	; 0x56
 80033ba:	f7fd fbcb 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033be:	2000      	movs	r0, #0
 80033c0:	f7fd fbc8 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 80033c4:	2023      	movs	r0, #35	; 0x23
 80033c6:	f7fd fbc5 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033ca:	2000      	movs	r0, #0
 80033cc:	f7fd fbc2 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 80033d0:	2033      	movs	r0, #51	; 0x33
 80033d2:	f7fd fbbf 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033d6:	2000      	movs	r0, #0
 80033d8:	f7fd fbbc 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 80033dc:	2045      	movs	r0, #69	; 0x45
 80033de:	f7fd fbb9 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033e2:	2000      	movs	r0, #0
 80033e4:	f7fd fbb6 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 80033e8:	20e8      	movs	r0, #232	; 0xe8
 80033ea:	f7fd fb8f 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80033ee:	2000      	movs	r0, #0
 80033f0:	f7fd fbb0 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033f4:	2000      	movs	r0, #0
 80033f6:	f7fd fbad 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80033fa:	2099      	movs	r0, #153	; 0x99
 80033fc:	f7fd fbaa 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003400:	2000      	movs	r0, #0
 8003402:	f7fd fba7 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8003406:	2087      	movs	r0, #135	; 0x87
 8003408:	f7fd fba4 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800340c:	2000      	movs	r0, #0
 800340e:	f7fd fba1 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003412:	2088      	movs	r0, #136	; 0x88
 8003414:	f7fd fb9e 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003418:	2000      	movs	r0, #0
 800341a:	f7fd fb9b 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 800341e:	2077      	movs	r0, #119	; 0x77
 8003420:	f7fd fb98 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003424:	2000      	movs	r0, #0
 8003426:	f7fd fb95 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800342a:	2066      	movs	r0, #102	; 0x66
 800342c:	f7fd fb92 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003430:	2000      	movs	r0, #0
 8003432:	f7fd fb8f 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003436:	2088      	movs	r0, #136	; 0x88
 8003438:	f7fd fb8c 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800343c:	2000      	movs	r0, #0
 800343e:	f7fd fb89 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 8003442:	20aa      	movs	r0, #170	; 0xaa
 8003444:	f7fd fb86 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003448:	2000      	movs	r0, #0
 800344a:	f7fd fb83 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 800344e:	20bb      	movs	r0, #187	; 0xbb
 8003450:	f7fd fb80 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003454:	2000      	movs	r0, #0
 8003456:	f7fd fb7d 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800345a:	2099      	movs	r0, #153	; 0x99
 800345c:	f7fd fb7a 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003460:	2000      	movs	r0, #0
 8003462:	f7fd fb77 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003466:	2066      	movs	r0, #102	; 0x66
 8003468:	f7fd fb74 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800346c:	2000      	movs	r0, #0
 800346e:	f7fd fb71 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003472:	2055      	movs	r0, #85	; 0x55
 8003474:	f7fd fb6e 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003478:	2000      	movs	r0, #0
 800347a:	f7fd fb6b 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800347e:	2055      	movs	r0, #85	; 0x55
 8003480:	f7fd fb68 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003484:	2000      	movs	r0, #0
 8003486:	f7fd fb65 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800348a:	2044      	movs	r0, #68	; 0x44
 800348c:	f7fd fb62 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003490:	2000      	movs	r0, #0
 8003492:	f7fd fb5f 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003496:	2044      	movs	r0, #68	; 0x44
 8003498:	f7fd fb5c 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800349c:	2000      	movs	r0, #0
 800349e:	f7fd fb59 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80034a2:	2055      	movs	r0, #85	; 0x55
 80034a4:	f7fd fb56 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034a8:	2000      	movs	r0, #0
 80034aa:	f7fd fb53 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 80034ae:	20e9      	movs	r0, #233	; 0xe9
 80034b0:	f7fd fb2c 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 80034b4:	20aa      	movs	r0, #170	; 0xaa
 80034b6:	f7fd fb4d 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034ba:	2000      	movs	r0, #0
 80034bc:	f7fd fb4a 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034c0:	2000      	movs	r0, #0
 80034c2:	f7fd fb47 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034c6:	2000      	movs	r0, #0
 80034c8:	f7fd fb44 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 80034cc:	2000      	movs	r0, #0
 80034ce:	f7fd fb1d 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 80034d2:	20aa      	movs	r0, #170	; 0xaa
 80034d4:	f7fd fb3e 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 80034d8:	20cf      	movs	r0, #207	; 0xcf
 80034da:	f7fd fb17 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80034de:	2000      	movs	r0, #0
 80034e0:	f7fd fb38 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034e4:	2000      	movs	r0, #0
 80034e6:	f7fd fb35 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034ea:	2000      	movs	r0, #0
 80034ec:	f7fd fb32 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034f0:	2000      	movs	r0, #0
 80034f2:	f7fd fb2f 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034f6:	2000      	movs	r0, #0
 80034f8:	f7fd fb2c 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034fc:	2000      	movs	r0, #0
 80034fe:	f7fd fb29 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003502:	2000      	movs	r0, #0
 8003504:	f7fd fb26 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003508:	2000      	movs	r0, #0
 800350a:	f7fd fb23 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800350e:	2000      	movs	r0, #0
 8003510:	f7fd fb20 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003514:	2000      	movs	r0, #0
 8003516:	f7fd fb1d 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800351a:	2000      	movs	r0, #0
 800351c:	f7fd fb1a 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003520:	2000      	movs	r0, #0
 8003522:	f7fd fb17 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003526:	2000      	movs	r0, #0
 8003528:	f7fd fb14 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800352c:	2000      	movs	r0, #0
 800352e:	f7fd fb11 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003532:	2000      	movs	r0, #0
 8003534:	f7fd fb0e 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003538:	2000      	movs	r0, #0
 800353a:	f7fd fb0b 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800353e:	2000      	movs	r0, #0
 8003540:	f7fd fb08 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 8003544:	20f0      	movs	r0, #240	; 0xf0
 8003546:	f7fd fae1 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800354a:	2000      	movs	r0, #0
 800354c:	f7fd fb02 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8003550:	2050      	movs	r0, #80	; 0x50
 8003552:	f7fd faff 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003556:	2000      	movs	r0, #0
 8003558:	f7fd fafc 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800355c:	2000      	movs	r0, #0
 800355e:	f7fd faf9 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003562:	2000      	movs	r0, #0
 8003564:	f7fd faf6 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 8003568:	20f3      	movs	r0, #243	; 0xf3
 800356a:	f7fd facf 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800356e:	2000      	movs	r0, #0
 8003570:	f7fd faf0 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 8003574:	20f9      	movs	r0, #249	; 0xf9
 8003576:	f7fd fac9 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 800357a:	2006      	movs	r0, #6
 800357c:	f7fd faea 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8003580:	2010      	movs	r0, #16
 8003582:	f7fd fae7 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8003586:	2029      	movs	r0, #41	; 0x29
 8003588:	f7fd fae4 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800358c:	2000      	movs	r0, #0
 800358e:	f7fd fae1 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 8003592:	203a      	movs	r0, #58	; 0x3a
 8003594:	f7fd faba 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 8003598:	2055      	movs	r0, #85	; 0x55
 800359a:	f7fd fadb 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 800359e:	2011      	movs	r0, #17
 80035a0:	f7fd fab4 	bl	8000b0c <LCD_WR_REG>
		HAL_Delay(100);
 80035a4:	2064      	movs	r0, #100	; 0x64
 80035a6:	f003 fb81 	bl	8006cac <HAL_Delay>
		LCD_WR_REG(0x29);
 80035aa:	2029      	movs	r0, #41	; 0x29
 80035ac:	f7fd faae 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_REG(0x35);
 80035b0:	2035      	movs	r0, #53	; 0x35
 80035b2:	f7fd faab 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80035b6:	2000      	movs	r0, #0
 80035b8:	f7fd facc 	bl	8000b54 <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 80035bc:	2051      	movs	r0, #81	; 0x51
 80035be:	f7fd faa5 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 80035c2:	20ff      	movs	r0, #255	; 0xff
 80035c4:	f7fd fac6 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 80035c8:	2053      	movs	r0, #83	; 0x53
 80035ca:	f7fd fa9f 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 80035ce:	202c      	movs	r0, #44	; 0x2c
 80035d0:	f7fd fac0 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 80035d4:	2055      	movs	r0, #85	; 0x55
 80035d6:	f7fd fa99 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 80035da:	2082      	movs	r0, #130	; 0x82
 80035dc:	f7fd faba 	bl	8000b54 <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 80035e0:	202c      	movs	r0, #44	; 0x2c
 80035e2:	f7fd fa93 	bl	8000b0c <LCD_WR_REG>
 80035e6:	f002 bca1 	b.w	8005f2c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 80035ea:	4b04      	ldr	r3, [pc, #16]	; (80035fc <LCD_Init+0x1504>)
 80035ec:	889b      	ldrh	r3, [r3, #4]
 80035ee:	f245 5210 	movw	r2, #21776	; 0x5510
 80035f2:	4293      	cmp	r3, r2
 80035f4:	f040 8782 	bne.w	80044fc <LCD_Init+0x2404>
 80035f8:	e002      	b.n	8003600 <LCD_Init+0x1508>
 80035fa:	bf00      	nop
 80035fc:	20000030 	.word	0x20000030
		LCD_WriteReg(0xF000, 0x55);
 8003600:	2155      	movs	r1, #85	; 0x55
 8003602:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003606:	f7fd fb0d 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 800360a:	21aa      	movs	r1, #170	; 0xaa
 800360c:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003610:	f7fd fb08 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8003614:	2152      	movs	r1, #82	; 0x52
 8003616:	f24f 0002 	movw	r0, #61442	; 0xf002
 800361a:	f7fd fb03 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 800361e:	2108      	movs	r1, #8
 8003620:	f24f 0003 	movw	r0, #61443	; 0xf003
 8003624:	f7fd fafe 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 8003628:	2101      	movs	r1, #1
 800362a:	f24f 0004 	movw	r0, #61444	; 0xf004
 800362e:	f7fd faf9 	bl	8000c24 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 8003632:	210d      	movs	r1, #13
 8003634:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8003638:	f7fd faf4 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 800363c:	210d      	movs	r1, #13
 800363e:	f24b 0001 	movw	r0, #45057	; 0xb001
 8003642:	f7fd faef 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 8003646:	210d      	movs	r1, #13
 8003648:	f24b 0002 	movw	r0, #45058	; 0xb002
 800364c:	f7fd faea 	bl	8000c24 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 8003650:	2134      	movs	r1, #52	; 0x34
 8003652:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8003656:	f7fd fae5 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 800365a:	2134      	movs	r1, #52	; 0x34
 800365c:	f24b 6001 	movw	r0, #46593	; 0xb601
 8003660:	f7fd fae0 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 8003664:	2134      	movs	r1, #52	; 0x34
 8003666:	f24b 6002 	movw	r0, #46594	; 0xb602
 800366a:	f7fd fadb 	bl	8000c24 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 800366e:	210d      	movs	r1, #13
 8003670:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8003674:	f7fd fad6 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 8003678:	210d      	movs	r1, #13
 800367a:	f24b 1001 	movw	r0, #45313	; 0xb101
 800367e:	f7fd fad1 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 8003682:	210d      	movs	r1, #13
 8003684:	f24b 1002 	movw	r0, #45314	; 0xb102
 8003688:	f7fd facc 	bl	8000c24 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 800368c:	2134      	movs	r1, #52	; 0x34
 800368e:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8003692:	f7fd fac7 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 8003696:	2134      	movs	r1, #52	; 0x34
 8003698:	f24b 7001 	movw	r0, #46849	; 0xb701
 800369c:	f7fd fac2 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 80036a0:	2134      	movs	r1, #52	; 0x34
 80036a2:	f24b 7002 	movw	r0, #46850	; 0xb702
 80036a6:	f7fd fabd 	bl	8000c24 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 80036aa:	2100      	movs	r1, #0
 80036ac:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 80036b0:	f7fd fab8 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 80036b4:	2100      	movs	r1, #0
 80036b6:	f24b 2001 	movw	r0, #45569	; 0xb201
 80036ba:	f7fd fab3 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 80036be:	2100      	movs	r1, #0
 80036c0:	f24b 2002 	movw	r0, #45570	; 0xb202
 80036c4:	f7fd faae 	bl	8000c24 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 80036c8:	2124      	movs	r1, #36	; 0x24
 80036ca:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80036ce:	f7fd faa9 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 80036d2:	2124      	movs	r1, #36	; 0x24
 80036d4:	f64b 0001 	movw	r0, #47105	; 0xb801
 80036d8:	f7fd faa4 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 80036dc:	2124      	movs	r1, #36	; 0x24
 80036de:	f64b 0002 	movw	r0, #47106	; 0xb802
 80036e2:	f7fd fa9f 	bl	8000c24 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 80036e6:	2101      	movs	r1, #1
 80036e8:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 80036ec:	f7fd fa9a 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 80036f0:	210f      	movs	r1, #15
 80036f2:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 80036f6:	f7fd fa95 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 80036fa:	210f      	movs	r1, #15
 80036fc:	f24b 3001 	movw	r0, #45825	; 0xb301
 8003700:	f7fd fa90 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 8003704:	210f      	movs	r1, #15
 8003706:	f24b 3002 	movw	r0, #45826	; 0xb302
 800370a:	f7fd fa8b 	bl	8000c24 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 800370e:	2134      	movs	r1, #52	; 0x34
 8003710:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8003714:	f7fd fa86 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 8003718:	2134      	movs	r1, #52	; 0x34
 800371a:	f64b 1001 	movw	r0, #47361	; 0xb901
 800371e:	f7fd fa81 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 8003722:	2134      	movs	r1, #52	; 0x34
 8003724:	f64b 1002 	movw	r0, #47362	; 0xb902
 8003728:	f7fd fa7c 	bl	8000c24 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 800372c:	2108      	movs	r1, #8
 800372e:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8003732:	f7fd fa77 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 8003736:	2108      	movs	r1, #8
 8003738:	f24b 5001 	movw	r0, #46337	; 0xb501
 800373c:	f7fd fa72 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 8003740:	2108      	movs	r1, #8
 8003742:	f24b 5002 	movw	r0, #46338	; 0xb502
 8003746:	f7fd fa6d 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 800374a:	2103      	movs	r1, #3
 800374c:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8003750:	f7fd fa68 	bl	8000c24 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 8003754:	2124      	movs	r1, #36	; 0x24
 8003756:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 800375a:	f7fd fa63 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 800375e:	2124      	movs	r1, #36	; 0x24
 8003760:	f64b 2001 	movw	r0, #47617	; 0xba01
 8003764:	f7fd fa5e 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 8003768:	2124      	movs	r1, #36	; 0x24
 800376a:	f64b 2002 	movw	r0, #47618	; 0xba02
 800376e:	f7fd fa59 	bl	8000c24 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 8003772:	2100      	movs	r1, #0
 8003774:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003778:	f7fd fa54 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 800377c:	2178      	movs	r1, #120	; 0x78
 800377e:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8003782:	f7fd fa4f 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8003786:	2100      	movs	r1, #0
 8003788:	f64b 4002 	movw	r0, #48130	; 0xbc02
 800378c:	f7fd fa4a 	bl	8000c24 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 8003790:	2100      	movs	r1, #0
 8003792:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8003796:	f7fd fa45 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 800379a:	2178      	movs	r1, #120	; 0x78
 800379c:	f64b 5001 	movw	r0, #48385	; 0xbd01
 80037a0:	f7fd fa40 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 80037a4:	2100      	movs	r1, #0
 80037a6:	f64b 5002 	movw	r0, #48386	; 0xbd02
 80037aa:	f7fd fa3b 	bl	8000c24 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 80037ae:	2100      	movs	r1, #0
 80037b0:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 80037b4:	f7fd fa36 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 80037b8:	2164      	movs	r1, #100	; 0x64
 80037ba:	f64b 6001 	movw	r0, #48641	; 0xbe01
 80037be:	f7fd fa31 	bl	8000c24 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 80037c2:	2100      	movs	r1, #0
 80037c4:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 80037c8:	f7fd fa2c 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 80037cc:	2133      	movs	r1, #51	; 0x33
 80037ce:	f24d 1001 	movw	r0, #53505	; 0xd101
 80037d2:	f7fd fa27 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 80037d6:	2100      	movs	r1, #0
 80037d8:	f24d 1002 	movw	r0, #53506	; 0xd102
 80037dc:	f7fd fa22 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 80037e0:	2134      	movs	r1, #52	; 0x34
 80037e2:	f24d 1003 	movw	r0, #53507	; 0xd103
 80037e6:	f7fd fa1d 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 80037ea:	2100      	movs	r1, #0
 80037ec:	f24d 1004 	movw	r0, #53508	; 0xd104
 80037f0:	f7fd fa18 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 80037f4:	213a      	movs	r1, #58	; 0x3a
 80037f6:	f24d 1005 	movw	r0, #53509	; 0xd105
 80037fa:	f7fd fa13 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 80037fe:	2100      	movs	r1, #0
 8003800:	f24d 1006 	movw	r0, #53510	; 0xd106
 8003804:	f7fd fa0e 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 8003808:	214a      	movs	r1, #74	; 0x4a
 800380a:	f24d 1007 	movw	r0, #53511	; 0xd107
 800380e:	f7fd fa09 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 8003812:	2100      	movs	r1, #0
 8003814:	f24d 1008 	movw	r0, #53512	; 0xd108
 8003818:	f7fd fa04 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 800381c:	215c      	movs	r1, #92	; 0x5c
 800381e:	f24d 1009 	movw	r0, #53513	; 0xd109
 8003822:	f7fd f9ff 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 8003826:	2100      	movs	r1, #0
 8003828:	f24d 100a 	movw	r0, #53514	; 0xd10a
 800382c:	f7fd f9fa 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 8003830:	2181      	movs	r1, #129	; 0x81
 8003832:	f24d 100b 	movw	r0, #53515	; 0xd10b
 8003836:	f7fd f9f5 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 800383a:	2100      	movs	r1, #0
 800383c:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8003840:	f7fd f9f0 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 8003844:	21a6      	movs	r1, #166	; 0xa6
 8003846:	f24d 100d 	movw	r0, #53517	; 0xd10d
 800384a:	f7fd f9eb 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 800384e:	2100      	movs	r1, #0
 8003850:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8003854:	f7fd f9e6 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 8003858:	21e5      	movs	r1, #229	; 0xe5
 800385a:	f24d 100f 	movw	r0, #53519	; 0xd10f
 800385e:	f7fd f9e1 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 8003862:	2101      	movs	r1, #1
 8003864:	f24d 1010 	movw	r0, #53520	; 0xd110
 8003868:	f7fd f9dc 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 800386c:	2113      	movs	r1, #19
 800386e:	f24d 1011 	movw	r0, #53521	; 0xd111
 8003872:	f7fd f9d7 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 8003876:	2101      	movs	r1, #1
 8003878:	f24d 1012 	movw	r0, #53522	; 0xd112
 800387c:	f7fd f9d2 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 8003880:	2154      	movs	r1, #84	; 0x54
 8003882:	f24d 1013 	movw	r0, #53523	; 0xd113
 8003886:	f7fd f9cd 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 800388a:	2101      	movs	r1, #1
 800388c:	f24d 1014 	movw	r0, #53524	; 0xd114
 8003890:	f7fd f9c8 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 8003894:	2182      	movs	r1, #130	; 0x82
 8003896:	f24d 1015 	movw	r0, #53525	; 0xd115
 800389a:	f7fd f9c3 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 800389e:	2101      	movs	r1, #1
 80038a0:	f24d 1016 	movw	r0, #53526	; 0xd116
 80038a4:	f7fd f9be 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 80038a8:	21ca      	movs	r1, #202	; 0xca
 80038aa:	f24d 1017 	movw	r0, #53527	; 0xd117
 80038ae:	f7fd f9b9 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 80038b2:	2102      	movs	r1, #2
 80038b4:	f24d 1018 	movw	r0, #53528	; 0xd118
 80038b8:	f7fd f9b4 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 80038bc:	2100      	movs	r1, #0
 80038be:	f24d 1019 	movw	r0, #53529	; 0xd119
 80038c2:	f7fd f9af 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 80038c6:	2102      	movs	r1, #2
 80038c8:	f24d 101a 	movw	r0, #53530	; 0xd11a
 80038cc:	f7fd f9aa 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 80038d0:	2101      	movs	r1, #1
 80038d2:	f24d 101b 	movw	r0, #53531	; 0xd11b
 80038d6:	f7fd f9a5 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 80038da:	2102      	movs	r1, #2
 80038dc:	f24d 101c 	movw	r0, #53532	; 0xd11c
 80038e0:	f7fd f9a0 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 80038e4:	2134      	movs	r1, #52	; 0x34
 80038e6:	f24d 101d 	movw	r0, #53533	; 0xd11d
 80038ea:	f7fd f99b 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 80038ee:	2102      	movs	r1, #2
 80038f0:	f24d 101e 	movw	r0, #53534	; 0xd11e
 80038f4:	f7fd f996 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 80038f8:	2167      	movs	r1, #103	; 0x67
 80038fa:	f24d 101f 	movw	r0, #53535	; 0xd11f
 80038fe:	f7fd f991 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 8003902:	2102      	movs	r1, #2
 8003904:	f24d 1020 	movw	r0, #53536	; 0xd120
 8003908:	f7fd f98c 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 800390c:	2184      	movs	r1, #132	; 0x84
 800390e:	f24d 1021 	movw	r0, #53537	; 0xd121
 8003912:	f7fd f987 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 8003916:	2102      	movs	r1, #2
 8003918:	f24d 1022 	movw	r0, #53538	; 0xd122
 800391c:	f7fd f982 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 8003920:	21a4      	movs	r1, #164	; 0xa4
 8003922:	f24d 1023 	movw	r0, #53539	; 0xd123
 8003926:	f7fd f97d 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 800392a:	2102      	movs	r1, #2
 800392c:	f24d 1024 	movw	r0, #53540	; 0xd124
 8003930:	f7fd f978 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 8003934:	21b7      	movs	r1, #183	; 0xb7
 8003936:	f24d 1025 	movw	r0, #53541	; 0xd125
 800393a:	f7fd f973 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 800393e:	2102      	movs	r1, #2
 8003940:	f24d 1026 	movw	r0, #53542	; 0xd126
 8003944:	f7fd f96e 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 8003948:	21cf      	movs	r1, #207	; 0xcf
 800394a:	f24d 1027 	movw	r0, #53543	; 0xd127
 800394e:	f7fd f969 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 8003952:	2102      	movs	r1, #2
 8003954:	f24d 1028 	movw	r0, #53544	; 0xd128
 8003958:	f7fd f964 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 800395c:	21de      	movs	r1, #222	; 0xde
 800395e:	f24d 1029 	movw	r0, #53545	; 0xd129
 8003962:	f7fd f95f 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 8003966:	2102      	movs	r1, #2
 8003968:	f24d 102a 	movw	r0, #53546	; 0xd12a
 800396c:	f7fd f95a 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 8003970:	21f2      	movs	r1, #242	; 0xf2
 8003972:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8003976:	f7fd f955 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 800397a:	2102      	movs	r1, #2
 800397c:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8003980:	f7fd f950 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 8003984:	21fe      	movs	r1, #254	; 0xfe
 8003986:	f24d 102d 	movw	r0, #53549	; 0xd12d
 800398a:	f7fd f94b 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 800398e:	2103      	movs	r1, #3
 8003990:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8003994:	f7fd f946 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 8003998:	2110      	movs	r1, #16
 800399a:	f24d 102f 	movw	r0, #53551	; 0xd12f
 800399e:	f7fd f941 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 80039a2:	2103      	movs	r1, #3
 80039a4:	f24d 1030 	movw	r0, #53552	; 0xd130
 80039a8:	f7fd f93c 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 80039ac:	2133      	movs	r1, #51	; 0x33
 80039ae:	f24d 1031 	movw	r0, #53553	; 0xd131
 80039b2:	f7fd f937 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 80039b6:	2103      	movs	r1, #3
 80039b8:	f24d 1032 	movw	r0, #53554	; 0xd132
 80039bc:	f7fd f932 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 80039c0:	216d      	movs	r1, #109	; 0x6d
 80039c2:	f24d 1033 	movw	r0, #53555	; 0xd133
 80039c6:	f7fd f92d 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 80039ca:	2100      	movs	r1, #0
 80039cc:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 80039d0:	f7fd f928 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 80039d4:	2133      	movs	r1, #51	; 0x33
 80039d6:	f24d 2001 	movw	r0, #53761	; 0xd201
 80039da:	f7fd f923 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 80039de:	2100      	movs	r1, #0
 80039e0:	f24d 2002 	movw	r0, #53762	; 0xd202
 80039e4:	f7fd f91e 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 80039e8:	2134      	movs	r1, #52	; 0x34
 80039ea:	f24d 2003 	movw	r0, #53763	; 0xd203
 80039ee:	f7fd f919 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 80039f2:	2100      	movs	r1, #0
 80039f4:	f24d 2004 	movw	r0, #53764	; 0xd204
 80039f8:	f7fd f914 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 80039fc:	213a      	movs	r1, #58	; 0x3a
 80039fe:	f24d 2005 	movw	r0, #53765	; 0xd205
 8003a02:	f7fd f90f 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 8003a06:	2100      	movs	r1, #0
 8003a08:	f24d 2006 	movw	r0, #53766	; 0xd206
 8003a0c:	f7fd f90a 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 8003a10:	214a      	movs	r1, #74	; 0x4a
 8003a12:	f24d 2007 	movw	r0, #53767	; 0xd207
 8003a16:	f7fd f905 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	f24d 2008 	movw	r0, #53768	; 0xd208
 8003a20:	f7fd f900 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 8003a24:	215c      	movs	r1, #92	; 0x5c
 8003a26:	f24d 2009 	movw	r0, #53769	; 0xd209
 8003a2a:	f7fd f8fb 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 8003a2e:	2100      	movs	r1, #0
 8003a30:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8003a34:	f7fd f8f6 	bl	8000c24 <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 8003a38:	2181      	movs	r1, #129	; 0x81
 8003a3a:	f24d 200b 	movw	r0, #53771	; 0xd20b
 8003a3e:	f7fd f8f1 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 8003a42:	2100      	movs	r1, #0
 8003a44:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8003a48:	f7fd f8ec 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 8003a4c:	21a6      	movs	r1, #166	; 0xa6
 8003a4e:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8003a52:	f7fd f8e7 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 8003a56:	2100      	movs	r1, #0
 8003a58:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8003a5c:	f7fd f8e2 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 8003a60:	21e5      	movs	r1, #229	; 0xe5
 8003a62:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8003a66:	f7fd f8dd 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	f24d 2010 	movw	r0, #53776	; 0xd210
 8003a70:	f7fd f8d8 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 8003a74:	2113      	movs	r1, #19
 8003a76:	f24d 2011 	movw	r0, #53777	; 0xd211
 8003a7a:	f7fd f8d3 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 8003a7e:	2101      	movs	r1, #1
 8003a80:	f24d 2012 	movw	r0, #53778	; 0xd212
 8003a84:	f7fd f8ce 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 8003a88:	2154      	movs	r1, #84	; 0x54
 8003a8a:	f24d 2013 	movw	r0, #53779	; 0xd213
 8003a8e:	f7fd f8c9 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 8003a92:	2101      	movs	r1, #1
 8003a94:	f24d 2014 	movw	r0, #53780	; 0xd214
 8003a98:	f7fd f8c4 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 8003a9c:	2182      	movs	r1, #130	; 0x82
 8003a9e:	f24d 2015 	movw	r0, #53781	; 0xd215
 8003aa2:	f7fd f8bf 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	f24d 2016 	movw	r0, #53782	; 0xd216
 8003aac:	f7fd f8ba 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 8003ab0:	21ca      	movs	r1, #202	; 0xca
 8003ab2:	f24d 2017 	movw	r0, #53783	; 0xd217
 8003ab6:	f7fd f8b5 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 8003aba:	2102      	movs	r1, #2
 8003abc:	f24d 2018 	movw	r0, #53784	; 0xd218
 8003ac0:	f7fd f8b0 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	f24d 2019 	movw	r0, #53785	; 0xd219
 8003aca:	f7fd f8ab 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 8003ace:	2102      	movs	r1, #2
 8003ad0:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8003ad4:	f7fd f8a6 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 8003ad8:	2101      	movs	r1, #1
 8003ada:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8003ade:	f7fd f8a1 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 8003ae2:	2102      	movs	r1, #2
 8003ae4:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8003ae8:	f7fd f89c 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 8003aec:	2134      	movs	r1, #52	; 0x34
 8003aee:	f24d 201d 	movw	r0, #53789	; 0xd21d
 8003af2:	f7fd f897 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 8003af6:	2102      	movs	r1, #2
 8003af8:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8003afc:	f7fd f892 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 8003b00:	2167      	movs	r1, #103	; 0x67
 8003b02:	f24d 201f 	movw	r0, #53791	; 0xd21f
 8003b06:	f7fd f88d 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 8003b0a:	2102      	movs	r1, #2
 8003b0c:	f24d 2020 	movw	r0, #53792	; 0xd220
 8003b10:	f7fd f888 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 8003b14:	2184      	movs	r1, #132	; 0x84
 8003b16:	f24d 2021 	movw	r0, #53793	; 0xd221
 8003b1a:	f7fd f883 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 8003b1e:	2102      	movs	r1, #2
 8003b20:	f24d 2022 	movw	r0, #53794	; 0xd222
 8003b24:	f7fd f87e 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 8003b28:	21a4      	movs	r1, #164	; 0xa4
 8003b2a:	f24d 2023 	movw	r0, #53795	; 0xd223
 8003b2e:	f7fd f879 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 8003b32:	2102      	movs	r1, #2
 8003b34:	f24d 2024 	movw	r0, #53796	; 0xd224
 8003b38:	f7fd f874 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 8003b3c:	21b7      	movs	r1, #183	; 0xb7
 8003b3e:	f24d 2025 	movw	r0, #53797	; 0xd225
 8003b42:	f7fd f86f 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 8003b46:	2102      	movs	r1, #2
 8003b48:	f24d 2026 	movw	r0, #53798	; 0xd226
 8003b4c:	f7fd f86a 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 8003b50:	21cf      	movs	r1, #207	; 0xcf
 8003b52:	f24d 2027 	movw	r0, #53799	; 0xd227
 8003b56:	f7fd f865 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 8003b5a:	2102      	movs	r1, #2
 8003b5c:	f24d 2028 	movw	r0, #53800	; 0xd228
 8003b60:	f7fd f860 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 8003b64:	21de      	movs	r1, #222	; 0xde
 8003b66:	f24d 2029 	movw	r0, #53801	; 0xd229
 8003b6a:	f7fd f85b 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 8003b6e:	2102      	movs	r1, #2
 8003b70:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8003b74:	f7fd f856 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 8003b78:	21f2      	movs	r1, #242	; 0xf2
 8003b7a:	f24d 202b 	movw	r0, #53803	; 0xd22b
 8003b7e:	f7fd f851 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 8003b82:	2102      	movs	r1, #2
 8003b84:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8003b88:	f7fd f84c 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 8003b8c:	21fe      	movs	r1, #254	; 0xfe
 8003b8e:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8003b92:	f7fd f847 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 8003b96:	2103      	movs	r1, #3
 8003b98:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8003b9c:	f7fd f842 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 8003ba0:	2110      	movs	r1, #16
 8003ba2:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8003ba6:	f7fd f83d 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 8003baa:	2103      	movs	r1, #3
 8003bac:	f24d 2030 	movw	r0, #53808	; 0xd230
 8003bb0:	f7fd f838 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 8003bb4:	2133      	movs	r1, #51	; 0x33
 8003bb6:	f24d 2031 	movw	r0, #53809	; 0xd231
 8003bba:	f7fd f833 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 8003bbe:	2103      	movs	r1, #3
 8003bc0:	f24d 2032 	movw	r0, #53810	; 0xd232
 8003bc4:	f7fd f82e 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 8003bc8:	216d      	movs	r1, #109	; 0x6d
 8003bca:	f24d 2033 	movw	r0, #53811	; 0xd233
 8003bce:	f7fd f829 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8003bd8:	f7fd f824 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 8003bdc:	2133      	movs	r1, #51	; 0x33
 8003bde:	f24d 3001 	movw	r0, #54017	; 0xd301
 8003be2:	f7fd f81f 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 8003be6:	2100      	movs	r1, #0
 8003be8:	f24d 3002 	movw	r0, #54018	; 0xd302
 8003bec:	f7fd f81a 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 8003bf0:	2134      	movs	r1, #52	; 0x34
 8003bf2:	f24d 3003 	movw	r0, #54019	; 0xd303
 8003bf6:	f7fd f815 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	f24d 3004 	movw	r0, #54020	; 0xd304
 8003c00:	f7fd f810 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 8003c04:	213a      	movs	r1, #58	; 0x3a
 8003c06:	f24d 3005 	movw	r0, #54021	; 0xd305
 8003c0a:	f7fd f80b 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 8003c0e:	2100      	movs	r1, #0
 8003c10:	f24d 3006 	movw	r0, #54022	; 0xd306
 8003c14:	f7fd f806 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 8003c18:	214a      	movs	r1, #74	; 0x4a
 8003c1a:	f24d 3007 	movw	r0, #54023	; 0xd307
 8003c1e:	f7fd f801 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 8003c22:	2100      	movs	r1, #0
 8003c24:	f24d 3008 	movw	r0, #54024	; 0xd308
 8003c28:	f7fc fffc 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 8003c2c:	215c      	movs	r1, #92	; 0x5c
 8003c2e:	f24d 3009 	movw	r0, #54025	; 0xd309
 8003c32:	f7fc fff7 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 8003c36:	2100      	movs	r1, #0
 8003c38:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8003c3c:	f7fc fff2 	bl	8000c24 <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 8003c40:	2181      	movs	r1, #129	; 0x81
 8003c42:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8003c46:	f7fc ffed 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8003c50:	f7fc ffe8 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 8003c54:	21a6      	movs	r1, #166	; 0xa6
 8003c56:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8003c5a:	f7fc ffe3 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 8003c5e:	2100      	movs	r1, #0
 8003c60:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8003c64:	f7fc ffde 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 8003c68:	21e5      	movs	r1, #229	; 0xe5
 8003c6a:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8003c6e:	f7fc ffd9 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 8003c72:	2101      	movs	r1, #1
 8003c74:	f24d 3010 	movw	r0, #54032	; 0xd310
 8003c78:	f7fc ffd4 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 8003c7c:	2113      	movs	r1, #19
 8003c7e:	f24d 3011 	movw	r0, #54033	; 0xd311
 8003c82:	f7fc ffcf 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 8003c86:	2101      	movs	r1, #1
 8003c88:	f24d 3012 	movw	r0, #54034	; 0xd312
 8003c8c:	f7fc ffca 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 8003c90:	2154      	movs	r1, #84	; 0x54
 8003c92:	f24d 3013 	movw	r0, #54035	; 0xd313
 8003c96:	f7fc ffc5 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	f24d 3014 	movw	r0, #54036	; 0xd314
 8003ca0:	f7fc ffc0 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 8003ca4:	2182      	movs	r1, #130	; 0x82
 8003ca6:	f24d 3015 	movw	r0, #54037	; 0xd315
 8003caa:	f7fc ffbb 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 8003cae:	2101      	movs	r1, #1
 8003cb0:	f24d 3016 	movw	r0, #54038	; 0xd316
 8003cb4:	f7fc ffb6 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 8003cb8:	21ca      	movs	r1, #202	; 0xca
 8003cba:	f24d 3017 	movw	r0, #54039	; 0xd317
 8003cbe:	f7fc ffb1 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 8003cc2:	2102      	movs	r1, #2
 8003cc4:	f24d 3018 	movw	r0, #54040	; 0xd318
 8003cc8:	f7fc ffac 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 8003ccc:	2100      	movs	r1, #0
 8003cce:	f24d 3019 	movw	r0, #54041	; 0xd319
 8003cd2:	f7fc ffa7 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 8003cd6:	2102      	movs	r1, #2
 8003cd8:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8003cdc:	f7fc ffa2 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8003ce6:	f7fc ff9d 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 8003cea:	2102      	movs	r1, #2
 8003cec:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8003cf0:	f7fc ff98 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 8003cf4:	2134      	movs	r1, #52	; 0x34
 8003cf6:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8003cfa:	f7fc ff93 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 8003cfe:	2102      	movs	r1, #2
 8003d00:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8003d04:	f7fc ff8e 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 8003d08:	2167      	movs	r1, #103	; 0x67
 8003d0a:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8003d0e:	f7fc ff89 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 8003d12:	2102      	movs	r1, #2
 8003d14:	f24d 3020 	movw	r0, #54048	; 0xd320
 8003d18:	f7fc ff84 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 8003d1c:	2184      	movs	r1, #132	; 0x84
 8003d1e:	f24d 3021 	movw	r0, #54049	; 0xd321
 8003d22:	f7fc ff7f 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 8003d26:	2102      	movs	r1, #2
 8003d28:	f24d 3022 	movw	r0, #54050	; 0xd322
 8003d2c:	f7fc ff7a 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 8003d30:	21a4      	movs	r1, #164	; 0xa4
 8003d32:	f24d 3023 	movw	r0, #54051	; 0xd323
 8003d36:	f7fc ff75 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 8003d3a:	2102      	movs	r1, #2
 8003d3c:	f24d 3024 	movw	r0, #54052	; 0xd324
 8003d40:	f7fc ff70 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 8003d44:	21b7      	movs	r1, #183	; 0xb7
 8003d46:	f24d 3025 	movw	r0, #54053	; 0xd325
 8003d4a:	f7fc ff6b 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 8003d4e:	2102      	movs	r1, #2
 8003d50:	f24d 3026 	movw	r0, #54054	; 0xd326
 8003d54:	f7fc ff66 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8003d58:	21cf      	movs	r1, #207	; 0xcf
 8003d5a:	f24d 3027 	movw	r0, #54055	; 0xd327
 8003d5e:	f7fc ff61 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 8003d62:	2102      	movs	r1, #2
 8003d64:	f24d 3028 	movw	r0, #54056	; 0xd328
 8003d68:	f7fc ff5c 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 8003d6c:	21de      	movs	r1, #222	; 0xde
 8003d6e:	f24d 3029 	movw	r0, #54057	; 0xd329
 8003d72:	f7fc ff57 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 8003d76:	2102      	movs	r1, #2
 8003d78:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8003d7c:	f7fc ff52 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 8003d80:	21f2      	movs	r1, #242	; 0xf2
 8003d82:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8003d86:	f7fc ff4d 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 8003d8a:	2102      	movs	r1, #2
 8003d8c:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8003d90:	f7fc ff48 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 8003d94:	21fe      	movs	r1, #254	; 0xfe
 8003d96:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8003d9a:	f7fc ff43 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 8003d9e:	2103      	movs	r1, #3
 8003da0:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8003da4:	f7fc ff3e 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 8003da8:	2110      	movs	r1, #16
 8003daa:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8003dae:	f7fc ff39 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 8003db2:	2103      	movs	r1, #3
 8003db4:	f24d 3030 	movw	r0, #54064	; 0xd330
 8003db8:	f7fc ff34 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 8003dbc:	2133      	movs	r1, #51	; 0x33
 8003dbe:	f24d 3031 	movw	r0, #54065	; 0xd331
 8003dc2:	f7fc ff2f 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 8003dc6:	2103      	movs	r1, #3
 8003dc8:	f24d 3032 	movw	r0, #54066	; 0xd332
 8003dcc:	f7fc ff2a 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 8003dd0:	216d      	movs	r1, #109	; 0x6d
 8003dd2:	f24d 3033 	movw	r0, #54067	; 0xd333
 8003dd6:	f7fc ff25 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 8003dda:	2100      	movs	r1, #0
 8003ddc:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8003de0:	f7fc ff20 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 8003de4:	2133      	movs	r1, #51	; 0x33
 8003de6:	f24d 4001 	movw	r0, #54273	; 0xd401
 8003dea:	f7fc ff1b 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 8003dee:	2100      	movs	r1, #0
 8003df0:	f24d 4002 	movw	r0, #54274	; 0xd402
 8003df4:	f7fc ff16 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 8003df8:	2134      	movs	r1, #52	; 0x34
 8003dfa:	f24d 4003 	movw	r0, #54275	; 0xd403
 8003dfe:	f7fc ff11 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 8003e02:	2100      	movs	r1, #0
 8003e04:	f24d 4004 	movw	r0, #54276	; 0xd404
 8003e08:	f7fc ff0c 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 8003e0c:	213a      	movs	r1, #58	; 0x3a
 8003e0e:	f24d 4005 	movw	r0, #54277	; 0xd405
 8003e12:	f7fc ff07 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 8003e16:	2100      	movs	r1, #0
 8003e18:	f24d 4006 	movw	r0, #54278	; 0xd406
 8003e1c:	f7fc ff02 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 8003e20:	214a      	movs	r1, #74	; 0x4a
 8003e22:	f24d 4007 	movw	r0, #54279	; 0xd407
 8003e26:	f7fc fefd 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	f24d 4008 	movw	r0, #54280	; 0xd408
 8003e30:	f7fc fef8 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 8003e34:	215c      	movs	r1, #92	; 0x5c
 8003e36:	f24d 4009 	movw	r0, #54281	; 0xd409
 8003e3a:	f7fc fef3 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 8003e3e:	2100      	movs	r1, #0
 8003e40:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8003e44:	f7fc feee 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8003e48:	2181      	movs	r1, #129	; 0x81
 8003e4a:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8003e4e:	f7fc fee9 	bl	8000c24 <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 8003e52:	2100      	movs	r1, #0
 8003e54:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8003e58:	f7fc fee4 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 8003e5c:	21a6      	movs	r1, #166	; 0xa6
 8003e5e:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8003e62:	f7fc fedf 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 8003e66:	2100      	movs	r1, #0
 8003e68:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8003e6c:	f7fc feda 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 8003e70:	21e5      	movs	r1, #229	; 0xe5
 8003e72:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8003e76:	f7fc fed5 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	f24d 4010 	movw	r0, #54288	; 0xd410
 8003e80:	f7fc fed0 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 8003e84:	2113      	movs	r1, #19
 8003e86:	f24d 4011 	movw	r0, #54289	; 0xd411
 8003e8a:	f7fc fecb 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 8003e8e:	2101      	movs	r1, #1
 8003e90:	f24d 4012 	movw	r0, #54290	; 0xd412
 8003e94:	f7fc fec6 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 8003e98:	2154      	movs	r1, #84	; 0x54
 8003e9a:	f24d 4013 	movw	r0, #54291	; 0xd413
 8003e9e:	f7fc fec1 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	f24d 4014 	movw	r0, #54292	; 0xd414
 8003ea8:	f7fc febc 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 8003eac:	2182      	movs	r1, #130	; 0x82
 8003eae:	f24d 4015 	movw	r0, #54293	; 0xd415
 8003eb2:	f7fc feb7 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	f24d 4016 	movw	r0, #54294	; 0xd416
 8003ebc:	f7fc feb2 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 8003ec0:	21ca      	movs	r1, #202	; 0xca
 8003ec2:	f24d 4017 	movw	r0, #54295	; 0xd417
 8003ec6:	f7fc fead 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 8003eca:	2102      	movs	r1, #2
 8003ecc:	f24d 4018 	movw	r0, #54296	; 0xd418
 8003ed0:	f7fc fea8 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	f24d 4019 	movw	r0, #54297	; 0xd419
 8003eda:	f7fc fea3 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 8003ede:	2102      	movs	r1, #2
 8003ee0:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8003ee4:	f7fc fe9e 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 8003ee8:	2101      	movs	r1, #1
 8003eea:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8003eee:	f7fc fe99 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 8003ef2:	2102      	movs	r1, #2
 8003ef4:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8003ef8:	f7fc fe94 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 8003efc:	2134      	movs	r1, #52	; 0x34
 8003efe:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8003f02:	f7fc fe8f 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 8003f06:	2102      	movs	r1, #2
 8003f08:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8003f0c:	f7fc fe8a 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 8003f10:	2167      	movs	r1, #103	; 0x67
 8003f12:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8003f16:	f7fc fe85 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 8003f1a:	2102      	movs	r1, #2
 8003f1c:	f24d 4020 	movw	r0, #54304	; 0xd420
 8003f20:	f7fc fe80 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 8003f24:	2184      	movs	r1, #132	; 0x84
 8003f26:	f24d 4021 	movw	r0, #54305	; 0xd421
 8003f2a:	f7fc fe7b 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 8003f2e:	2102      	movs	r1, #2
 8003f30:	f24d 4022 	movw	r0, #54306	; 0xd422
 8003f34:	f7fc fe76 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 8003f38:	21a4      	movs	r1, #164	; 0xa4
 8003f3a:	f24d 4023 	movw	r0, #54307	; 0xd423
 8003f3e:	f7fc fe71 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 8003f42:	2102      	movs	r1, #2
 8003f44:	f24d 4024 	movw	r0, #54308	; 0xd424
 8003f48:	f7fc fe6c 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 8003f4c:	21b7      	movs	r1, #183	; 0xb7
 8003f4e:	f24d 4025 	movw	r0, #54309	; 0xd425
 8003f52:	f7fc fe67 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 8003f56:	2102      	movs	r1, #2
 8003f58:	f24d 4026 	movw	r0, #54310	; 0xd426
 8003f5c:	f7fc fe62 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 8003f60:	21cf      	movs	r1, #207	; 0xcf
 8003f62:	f24d 4027 	movw	r0, #54311	; 0xd427
 8003f66:	f7fc fe5d 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 8003f6a:	2102      	movs	r1, #2
 8003f6c:	f24d 4028 	movw	r0, #54312	; 0xd428
 8003f70:	f7fc fe58 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 8003f74:	21de      	movs	r1, #222	; 0xde
 8003f76:	f24d 4029 	movw	r0, #54313	; 0xd429
 8003f7a:	f7fc fe53 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 8003f7e:	2102      	movs	r1, #2
 8003f80:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8003f84:	f7fc fe4e 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 8003f88:	21f2      	movs	r1, #242	; 0xf2
 8003f8a:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8003f8e:	f7fc fe49 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 8003f92:	2102      	movs	r1, #2
 8003f94:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8003f98:	f7fc fe44 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 8003f9c:	21fe      	movs	r1, #254	; 0xfe
 8003f9e:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8003fa2:	f7fc fe3f 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 8003fa6:	2103      	movs	r1, #3
 8003fa8:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8003fac:	f7fc fe3a 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 8003fb0:	2110      	movs	r1, #16
 8003fb2:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8003fb6:	f7fc fe35 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 8003fba:	2103      	movs	r1, #3
 8003fbc:	f24d 4030 	movw	r0, #54320	; 0xd430
 8003fc0:	f7fc fe30 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 8003fc4:	2133      	movs	r1, #51	; 0x33
 8003fc6:	f24d 4031 	movw	r0, #54321	; 0xd431
 8003fca:	f7fc fe2b 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 8003fce:	2103      	movs	r1, #3
 8003fd0:	f24d 4032 	movw	r0, #54322	; 0xd432
 8003fd4:	f7fc fe26 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8003fd8:	216d      	movs	r1, #109	; 0x6d
 8003fda:	f24d 4033 	movw	r0, #54323	; 0xd433
 8003fde:	f7fc fe21 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8003fe8:	f7fc fe1c 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 8003fec:	2133      	movs	r1, #51	; 0x33
 8003fee:	f24d 5001 	movw	r0, #54529	; 0xd501
 8003ff2:	f7fc fe17 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	f24d 5002 	movw	r0, #54530	; 0xd502
 8003ffc:	f7fc fe12 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 8004000:	2134      	movs	r1, #52	; 0x34
 8004002:	f24d 5003 	movw	r0, #54531	; 0xd503
 8004006:	f7fc fe0d 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 800400a:	2100      	movs	r1, #0
 800400c:	f24d 5004 	movw	r0, #54532	; 0xd504
 8004010:	f7fc fe08 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 8004014:	213a      	movs	r1, #58	; 0x3a
 8004016:	f24d 5005 	movw	r0, #54533	; 0xd505
 800401a:	f7fc fe03 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 800401e:	2100      	movs	r1, #0
 8004020:	f24d 5006 	movw	r0, #54534	; 0xd506
 8004024:	f7fc fdfe 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 8004028:	214a      	movs	r1, #74	; 0x4a
 800402a:	f24d 5007 	movw	r0, #54535	; 0xd507
 800402e:	f7fc fdf9 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 8004032:	2100      	movs	r1, #0
 8004034:	f24d 5008 	movw	r0, #54536	; 0xd508
 8004038:	f7fc fdf4 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 800403c:	215c      	movs	r1, #92	; 0x5c
 800403e:	f24d 5009 	movw	r0, #54537	; 0xd509
 8004042:	f7fc fdef 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 8004046:	2100      	movs	r1, #0
 8004048:	f24d 500a 	movw	r0, #54538	; 0xd50a
 800404c:	f7fc fdea 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 8004050:	2181      	movs	r1, #129	; 0x81
 8004052:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8004056:	f7fc fde5 	bl	8000c24 <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 800405a:	2100      	movs	r1, #0
 800405c:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8004060:	f7fc fde0 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 8004064:	21a6      	movs	r1, #166	; 0xa6
 8004066:	f24d 500d 	movw	r0, #54541	; 0xd50d
 800406a:	f7fc fddb 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 800406e:	2100      	movs	r1, #0
 8004070:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8004074:	f7fc fdd6 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 8004078:	21e5      	movs	r1, #229	; 0xe5
 800407a:	f24d 500f 	movw	r0, #54543	; 0xd50f
 800407e:	f7fc fdd1 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 8004082:	2101      	movs	r1, #1
 8004084:	f24d 5010 	movw	r0, #54544	; 0xd510
 8004088:	f7fc fdcc 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 800408c:	2113      	movs	r1, #19
 800408e:	f24d 5011 	movw	r0, #54545	; 0xd511
 8004092:	f7fc fdc7 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 8004096:	2101      	movs	r1, #1
 8004098:	f24d 5012 	movw	r0, #54546	; 0xd512
 800409c:	f7fc fdc2 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 80040a0:	2154      	movs	r1, #84	; 0x54
 80040a2:	f24d 5013 	movw	r0, #54547	; 0xd513
 80040a6:	f7fc fdbd 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 80040aa:	2101      	movs	r1, #1
 80040ac:	f24d 5014 	movw	r0, #54548	; 0xd514
 80040b0:	f7fc fdb8 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 80040b4:	2182      	movs	r1, #130	; 0x82
 80040b6:	f24d 5015 	movw	r0, #54549	; 0xd515
 80040ba:	f7fc fdb3 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 80040be:	2101      	movs	r1, #1
 80040c0:	f24d 5016 	movw	r0, #54550	; 0xd516
 80040c4:	f7fc fdae 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 80040c8:	21ca      	movs	r1, #202	; 0xca
 80040ca:	f24d 5017 	movw	r0, #54551	; 0xd517
 80040ce:	f7fc fda9 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 80040d2:	2102      	movs	r1, #2
 80040d4:	f24d 5018 	movw	r0, #54552	; 0xd518
 80040d8:	f7fc fda4 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 80040dc:	2100      	movs	r1, #0
 80040de:	f24d 5019 	movw	r0, #54553	; 0xd519
 80040e2:	f7fc fd9f 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 80040e6:	2102      	movs	r1, #2
 80040e8:	f24d 501a 	movw	r0, #54554	; 0xd51a
 80040ec:	f7fc fd9a 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 80040f0:	2101      	movs	r1, #1
 80040f2:	f24d 501b 	movw	r0, #54555	; 0xd51b
 80040f6:	f7fc fd95 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 80040fa:	2102      	movs	r1, #2
 80040fc:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8004100:	f7fc fd90 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 8004104:	2134      	movs	r1, #52	; 0x34
 8004106:	f24d 501d 	movw	r0, #54557	; 0xd51d
 800410a:	f7fc fd8b 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 800410e:	2102      	movs	r1, #2
 8004110:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8004114:	f7fc fd86 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 8004118:	2167      	movs	r1, #103	; 0x67
 800411a:	f24d 501f 	movw	r0, #54559	; 0xd51f
 800411e:	f7fc fd81 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 8004122:	2102      	movs	r1, #2
 8004124:	f24d 5020 	movw	r0, #54560	; 0xd520
 8004128:	f7fc fd7c 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 800412c:	2184      	movs	r1, #132	; 0x84
 800412e:	f24d 5021 	movw	r0, #54561	; 0xd521
 8004132:	f7fc fd77 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 8004136:	2102      	movs	r1, #2
 8004138:	f24d 5022 	movw	r0, #54562	; 0xd522
 800413c:	f7fc fd72 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 8004140:	21a4      	movs	r1, #164	; 0xa4
 8004142:	f24d 5023 	movw	r0, #54563	; 0xd523
 8004146:	f7fc fd6d 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 800414a:	2102      	movs	r1, #2
 800414c:	f24d 5024 	movw	r0, #54564	; 0xd524
 8004150:	f7fc fd68 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 8004154:	21b7      	movs	r1, #183	; 0xb7
 8004156:	f24d 5025 	movw	r0, #54565	; 0xd525
 800415a:	f7fc fd63 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 800415e:	2102      	movs	r1, #2
 8004160:	f24d 5026 	movw	r0, #54566	; 0xd526
 8004164:	f7fc fd5e 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 8004168:	21cf      	movs	r1, #207	; 0xcf
 800416a:	f24d 5027 	movw	r0, #54567	; 0xd527
 800416e:	f7fc fd59 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 8004172:	2102      	movs	r1, #2
 8004174:	f24d 5028 	movw	r0, #54568	; 0xd528
 8004178:	f7fc fd54 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 800417c:	21de      	movs	r1, #222	; 0xde
 800417e:	f24d 5029 	movw	r0, #54569	; 0xd529
 8004182:	f7fc fd4f 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 8004186:	2102      	movs	r1, #2
 8004188:	f24d 502a 	movw	r0, #54570	; 0xd52a
 800418c:	f7fc fd4a 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 8004190:	21f2      	movs	r1, #242	; 0xf2
 8004192:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8004196:	f7fc fd45 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 800419a:	2102      	movs	r1, #2
 800419c:	f24d 502c 	movw	r0, #54572	; 0xd52c
 80041a0:	f7fc fd40 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 80041a4:	21fe      	movs	r1, #254	; 0xfe
 80041a6:	f24d 502d 	movw	r0, #54573	; 0xd52d
 80041aa:	f7fc fd3b 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 80041ae:	2103      	movs	r1, #3
 80041b0:	f24d 502e 	movw	r0, #54574	; 0xd52e
 80041b4:	f7fc fd36 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 80041b8:	2110      	movs	r1, #16
 80041ba:	f24d 502f 	movw	r0, #54575	; 0xd52f
 80041be:	f7fc fd31 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 80041c2:	2103      	movs	r1, #3
 80041c4:	f24d 5030 	movw	r0, #54576	; 0xd530
 80041c8:	f7fc fd2c 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 80041cc:	2133      	movs	r1, #51	; 0x33
 80041ce:	f24d 5031 	movw	r0, #54577	; 0xd531
 80041d2:	f7fc fd27 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 80041d6:	2103      	movs	r1, #3
 80041d8:	f24d 5032 	movw	r0, #54578	; 0xd532
 80041dc:	f7fc fd22 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 80041e0:	216d      	movs	r1, #109	; 0x6d
 80041e2:	f24d 5033 	movw	r0, #54579	; 0xd533
 80041e6:	f7fc fd1d 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 80041ea:	2100      	movs	r1, #0
 80041ec:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 80041f0:	f7fc fd18 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 80041f4:	2133      	movs	r1, #51	; 0x33
 80041f6:	f24d 6001 	movw	r0, #54785	; 0xd601
 80041fa:	f7fc fd13 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 80041fe:	2100      	movs	r1, #0
 8004200:	f24d 6002 	movw	r0, #54786	; 0xd602
 8004204:	f7fc fd0e 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 8004208:	2134      	movs	r1, #52	; 0x34
 800420a:	f24d 6003 	movw	r0, #54787	; 0xd603
 800420e:	f7fc fd09 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 8004212:	2100      	movs	r1, #0
 8004214:	f24d 6004 	movw	r0, #54788	; 0xd604
 8004218:	f7fc fd04 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 800421c:	213a      	movs	r1, #58	; 0x3a
 800421e:	f24d 6005 	movw	r0, #54789	; 0xd605
 8004222:	f7fc fcff 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 8004226:	2100      	movs	r1, #0
 8004228:	f24d 6006 	movw	r0, #54790	; 0xd606
 800422c:	f7fc fcfa 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 8004230:	214a      	movs	r1, #74	; 0x4a
 8004232:	f24d 6007 	movw	r0, #54791	; 0xd607
 8004236:	f7fc fcf5 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 800423a:	2100      	movs	r1, #0
 800423c:	f24d 6008 	movw	r0, #54792	; 0xd608
 8004240:	f7fc fcf0 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 8004244:	215c      	movs	r1, #92	; 0x5c
 8004246:	f24d 6009 	movw	r0, #54793	; 0xd609
 800424a:	f7fc fceb 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 800424e:	2100      	movs	r1, #0
 8004250:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8004254:	f7fc fce6 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 8004258:	2181      	movs	r1, #129	; 0x81
 800425a:	f24d 600b 	movw	r0, #54795	; 0xd60b
 800425e:	f7fc fce1 	bl	8000c24 <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 8004262:	2100      	movs	r1, #0
 8004264:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8004268:	f7fc fcdc 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 800426c:	21a6      	movs	r1, #166	; 0xa6
 800426e:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8004272:	f7fc fcd7 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 8004276:	2100      	movs	r1, #0
 8004278:	f24d 600e 	movw	r0, #54798	; 0xd60e
 800427c:	f7fc fcd2 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 8004280:	21e5      	movs	r1, #229	; 0xe5
 8004282:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8004286:	f7fc fccd 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 800428a:	2101      	movs	r1, #1
 800428c:	f24d 6010 	movw	r0, #54800	; 0xd610
 8004290:	f7fc fcc8 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 8004294:	2113      	movs	r1, #19
 8004296:	f24d 6011 	movw	r0, #54801	; 0xd611
 800429a:	f7fc fcc3 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 800429e:	2101      	movs	r1, #1
 80042a0:	f24d 6012 	movw	r0, #54802	; 0xd612
 80042a4:	f7fc fcbe 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 80042a8:	2154      	movs	r1, #84	; 0x54
 80042aa:	f24d 6013 	movw	r0, #54803	; 0xd613
 80042ae:	f7fc fcb9 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 80042b2:	2101      	movs	r1, #1
 80042b4:	f24d 6014 	movw	r0, #54804	; 0xd614
 80042b8:	f7fc fcb4 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 80042bc:	2182      	movs	r1, #130	; 0x82
 80042be:	f24d 6015 	movw	r0, #54805	; 0xd615
 80042c2:	f7fc fcaf 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 80042c6:	2101      	movs	r1, #1
 80042c8:	f24d 6016 	movw	r0, #54806	; 0xd616
 80042cc:	f7fc fcaa 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 80042d0:	21ca      	movs	r1, #202	; 0xca
 80042d2:	f24d 6017 	movw	r0, #54807	; 0xd617
 80042d6:	f7fc fca5 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 80042da:	2102      	movs	r1, #2
 80042dc:	f24d 6018 	movw	r0, #54808	; 0xd618
 80042e0:	f7fc fca0 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 80042e4:	2100      	movs	r1, #0
 80042e6:	f24d 6019 	movw	r0, #54809	; 0xd619
 80042ea:	f7fc fc9b 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 80042ee:	2102      	movs	r1, #2
 80042f0:	f24d 601a 	movw	r0, #54810	; 0xd61a
 80042f4:	f7fc fc96 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 80042f8:	2101      	movs	r1, #1
 80042fa:	f24d 601b 	movw	r0, #54811	; 0xd61b
 80042fe:	f7fc fc91 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 8004302:	2102      	movs	r1, #2
 8004304:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8004308:	f7fc fc8c 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 800430c:	2134      	movs	r1, #52	; 0x34
 800430e:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8004312:	f7fc fc87 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 8004316:	2102      	movs	r1, #2
 8004318:	f24d 601e 	movw	r0, #54814	; 0xd61e
 800431c:	f7fc fc82 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 8004320:	2167      	movs	r1, #103	; 0x67
 8004322:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8004326:	f7fc fc7d 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 800432a:	2102      	movs	r1, #2
 800432c:	f24d 6020 	movw	r0, #54816	; 0xd620
 8004330:	f7fc fc78 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 8004334:	2184      	movs	r1, #132	; 0x84
 8004336:	f24d 6021 	movw	r0, #54817	; 0xd621
 800433a:	f7fc fc73 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 800433e:	2102      	movs	r1, #2
 8004340:	f24d 6022 	movw	r0, #54818	; 0xd622
 8004344:	f7fc fc6e 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 8004348:	21a4      	movs	r1, #164	; 0xa4
 800434a:	f24d 6023 	movw	r0, #54819	; 0xd623
 800434e:	f7fc fc69 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 8004352:	2102      	movs	r1, #2
 8004354:	f24d 6024 	movw	r0, #54820	; 0xd624
 8004358:	f7fc fc64 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 800435c:	21b7      	movs	r1, #183	; 0xb7
 800435e:	f24d 6025 	movw	r0, #54821	; 0xd625
 8004362:	f7fc fc5f 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 8004366:	2102      	movs	r1, #2
 8004368:	f24d 6026 	movw	r0, #54822	; 0xd626
 800436c:	f7fc fc5a 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 8004370:	21cf      	movs	r1, #207	; 0xcf
 8004372:	f24d 6027 	movw	r0, #54823	; 0xd627
 8004376:	f7fc fc55 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 800437a:	2102      	movs	r1, #2
 800437c:	f24d 6028 	movw	r0, #54824	; 0xd628
 8004380:	f7fc fc50 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 8004384:	21de      	movs	r1, #222	; 0xde
 8004386:	f24d 6029 	movw	r0, #54825	; 0xd629
 800438a:	f7fc fc4b 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 800438e:	2102      	movs	r1, #2
 8004390:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8004394:	f7fc fc46 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 8004398:	21f2      	movs	r1, #242	; 0xf2
 800439a:	f24d 602b 	movw	r0, #54827	; 0xd62b
 800439e:	f7fc fc41 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 80043a2:	2102      	movs	r1, #2
 80043a4:	f24d 602c 	movw	r0, #54828	; 0xd62c
 80043a8:	f7fc fc3c 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 80043ac:	21fe      	movs	r1, #254	; 0xfe
 80043ae:	f24d 602d 	movw	r0, #54829	; 0xd62d
 80043b2:	f7fc fc37 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 80043b6:	2103      	movs	r1, #3
 80043b8:	f24d 602e 	movw	r0, #54830	; 0xd62e
 80043bc:	f7fc fc32 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 80043c0:	2110      	movs	r1, #16
 80043c2:	f24d 602f 	movw	r0, #54831	; 0xd62f
 80043c6:	f7fc fc2d 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 80043ca:	2103      	movs	r1, #3
 80043cc:	f24d 6030 	movw	r0, #54832	; 0xd630
 80043d0:	f7fc fc28 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 80043d4:	2133      	movs	r1, #51	; 0x33
 80043d6:	f24d 6031 	movw	r0, #54833	; 0xd631
 80043da:	f7fc fc23 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 80043de:	2103      	movs	r1, #3
 80043e0:	f24d 6032 	movw	r0, #54834	; 0xd632
 80043e4:	f7fc fc1e 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 80043e8:	216d      	movs	r1, #109	; 0x6d
 80043ea:	f24d 6033 	movw	r0, #54835	; 0xd633
 80043ee:	f7fc fc19 	bl	8000c24 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 80043f2:	2155      	movs	r1, #85	; 0x55
 80043f4:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80043f8:	f7fc fc14 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 80043fc:	21aa      	movs	r1, #170	; 0xaa
 80043fe:	f24f 0001 	movw	r0, #61441	; 0xf001
 8004402:	f7fc fc0f 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8004406:	2152      	movs	r1, #82	; 0x52
 8004408:	f24f 0002 	movw	r0, #61442	; 0xf002
 800440c:	f7fc fc0a 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8004410:	2108      	movs	r1, #8
 8004412:	f24f 0003 	movw	r0, #61443	; 0xf003
 8004416:	f7fc fc05 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 800441a:	2100      	movs	r1, #0
 800441c:	f24f 0004 	movw	r0, #61444	; 0xf004
 8004420:	f7fc fc00 	bl	8000c24 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 8004424:	21cc      	movs	r1, #204	; 0xcc
 8004426:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 800442a:	f7fc fbfb 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 800442e:	2100      	movs	r1, #0
 8004430:	f24b 1001 	movw	r0, #45313	; 0xb101
 8004434:	f7fc fbf6 	bl	8000c24 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 8004438:	2105      	movs	r1, #5
 800443a:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 800443e:	f7fc fbf1 	bl	8000c24 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 8004442:	2170      	movs	r1, #112	; 0x70
 8004444:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8004448:	f7fc fbec 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 800444c:	2170      	movs	r1, #112	; 0x70
 800444e:	f24b 7001 	movw	r0, #46849	; 0xb701
 8004452:	f7fc fbe7 	bl	8000c24 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 8004456:	2101      	movs	r1, #1
 8004458:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 800445c:	f7fc fbe2 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 8004460:	2103      	movs	r1, #3
 8004462:	f64b 0001 	movw	r0, #47105	; 0xb801
 8004466:	f7fc fbdd 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 800446a:	2103      	movs	r1, #3
 800446c:	f64b 0002 	movw	r0, #47106	; 0xb802
 8004470:	f7fc fbd8 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 8004474:	2103      	movs	r1, #3
 8004476:	f64b 0003 	movw	r0, #47107	; 0xb803
 800447a:	f7fc fbd3 	bl	8000c24 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 800447e:	2102      	movs	r1, #2
 8004480:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8004484:	f7fc fbce 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 8004488:	2100      	movs	r1, #0
 800448a:	f64b 4001 	movw	r0, #48129	; 0xbc01
 800448e:	f7fc fbc9 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8004492:	2100      	movs	r1, #0
 8004494:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8004498:	f7fc fbc4 	bl	8000c24 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 800449c:	21d0      	movs	r1, #208	; 0xd0
 800449e:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 80044a2:	f7fc fbbf 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 80044a6:	2102      	movs	r1, #2
 80044a8:	f64c 1001 	movw	r0, #51457	; 0xc901
 80044ac:	f7fc fbba 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 80044b0:	2150      	movs	r1, #80	; 0x50
 80044b2:	f64c 1002 	movw	r0, #51458	; 0xc902
 80044b6:	f7fc fbb5 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 80044ba:	2150      	movs	r1, #80	; 0x50
 80044bc:	f64c 1003 	movw	r0, #51459	; 0xc903
 80044c0:	f7fc fbb0 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 80044c4:	2150      	movs	r1, #80	; 0x50
 80044c6:	f64c 1004 	movw	r0, #51460	; 0xc904
 80044ca:	f7fc fbab 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 80044ce:	2100      	movs	r1, #0
 80044d0:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 80044d4:	f7fc fba6 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 80044d8:	2155      	movs	r1, #85	; 0x55
 80044da:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 80044de:	f7fc fba1 	bl	8000c24 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 80044e2:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 80044e6:	f7fc fb11 	bl	8000b0c <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 80044ea:	2001      	movs	r0, #1
 80044ec:	f002 fbde 	bl	8006cac <HAL_Delay>
		LCD_WR_REG(0x2900);
 80044f0:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 80044f4:	f7fc fb0a 	bl	8000b0c <LCD_WR_REG>
 80044f8:	f001 bd18 	b.w	8005f2c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 80044fc:	4bec      	ldr	r3, [pc, #944]	; (80048b0 <LCD_Init+0x27b8>)
 80044fe:	889b      	ldrh	r3, [r3, #4]
 8004500:	f249 3225 	movw	r2, #37669	; 0x9325
 8004504:	4293      	cmp	r3, r2
 8004506:	f040 80d7 	bne.w	80046b8 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 800450a:	f647 01f0 	movw	r1, #30960	; 0x78f0
 800450e:	20e5      	movs	r0, #229	; 0xe5
 8004510:	f7fc fb88 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 8004514:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004518:	2001      	movs	r0, #1
 800451a:	f7fc fb83 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 800451e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004522:	2002      	movs	r0, #2
 8004524:	f7fc fb7e 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8004528:	f241 0130 	movw	r1, #4144	; 0x1030
 800452c:	2003      	movs	r0, #3
 800452e:	f7fc fb79 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004532:	2100      	movs	r1, #0
 8004534:	2004      	movs	r0, #4
 8004536:	f7fc fb75 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 800453a:	f240 2102 	movw	r1, #514	; 0x202
 800453e:	2008      	movs	r0, #8
 8004540:	f7fc fb70 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 8004544:	2100      	movs	r1, #0
 8004546:	2009      	movs	r0, #9
 8004548:	f7fc fb6c 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 800454c:	2100      	movs	r1, #0
 800454e:	200a      	movs	r0, #10
 8004550:	f7fc fb68 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004554:	2100      	movs	r1, #0
 8004556:	200c      	movs	r0, #12
 8004558:	f7fc fb64 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 800455c:	2100      	movs	r1, #0
 800455e:	200d      	movs	r0, #13
 8004560:	f7fc fb60 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004564:	2100      	movs	r1, #0
 8004566:	200f      	movs	r0, #15
 8004568:	f7fc fb5c 	bl	8000c24 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 800456c:	2100      	movs	r1, #0
 800456e:	2010      	movs	r0, #16
 8004570:	f7fc fb58 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8004574:	2107      	movs	r1, #7
 8004576:	2011      	movs	r0, #17
 8004578:	f7fc fb54 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 800457c:	2100      	movs	r1, #0
 800457e:	2012      	movs	r0, #18
 8004580:	f7fc fb50 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004584:	2100      	movs	r1, #0
 8004586:	2013      	movs	r0, #19
 8004588:	f7fc fb4c 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 800458c:	2100      	movs	r1, #0
 800458e:	2007      	movs	r0, #7
 8004590:	f7fc fb48 	bl	8000c24 <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 8004594:	f241 6190 	movw	r1, #5776	; 0x1690
 8004598:	2010      	movs	r0, #16
 800459a:	f7fc fb43 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 800459e:	f240 2127 	movw	r1, #551	; 0x227
 80045a2:	2011      	movs	r0, #17
 80045a4:	f7fc fb3e 	bl	8000c24 <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 80045a8:	219d      	movs	r1, #157	; 0x9d
 80045aa:	2012      	movs	r0, #18
 80045ac:	f7fc fb3a 	bl	8000c24 <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 80045b0:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 80045b4:	2013      	movs	r0, #19
 80045b6:	f7fc fb35 	bl	8000c24 <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 80045ba:	2125      	movs	r1, #37	; 0x25
 80045bc:	2029      	movs	r0, #41	; 0x29
 80045be:	f7fc fb31 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 80045c2:	210d      	movs	r1, #13
 80045c4:	202b      	movs	r0, #43	; 0x2b
 80045c6:	f7fc fb2d 	bl	8000c24 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 80045ca:	2107      	movs	r1, #7
 80045cc:	2030      	movs	r0, #48	; 0x30
 80045ce:	f7fc fb29 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 80045d2:	f240 3103 	movw	r1, #771	; 0x303
 80045d6:	2031      	movs	r0, #49	; 0x31
 80045d8:	f7fc fb24 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 80045dc:	2103      	movs	r1, #3
 80045de:	2032      	movs	r0, #50	; 0x32
 80045e0:	f7fc fb20 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 80045e4:	f240 2106 	movw	r1, #518	; 0x206
 80045e8:	2035      	movs	r0, #53	; 0x35
 80045ea:	f7fc fb1b 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 80045ee:	2108      	movs	r1, #8
 80045f0:	2036      	movs	r0, #54	; 0x36
 80045f2:	f7fc fb17 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 80045f6:	f240 4106 	movw	r1, #1030	; 0x406
 80045fa:	2037      	movs	r0, #55	; 0x37
 80045fc:	f7fc fb12 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 8004600:	f44f 7141 	mov.w	r1, #772	; 0x304
 8004604:	2038      	movs	r0, #56	; 0x38
 8004606:	f7fc fb0d 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 800460a:	2107      	movs	r1, #7
 800460c:	2039      	movs	r0, #57	; 0x39
 800460e:	f7fc fb09 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 8004612:	f240 6102 	movw	r1, #1538	; 0x602
 8004616:	203c      	movs	r0, #60	; 0x3c
 8004618:	f7fc fb04 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 800461c:	2108      	movs	r1, #8
 800461e:	203d      	movs	r0, #61	; 0x3d
 8004620:	f7fc fb00 	bl	8000c24 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 8004624:	2100      	movs	r1, #0
 8004626:	2050      	movs	r0, #80	; 0x50
 8004628:	f7fc fafc 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 800462c:	21ef      	movs	r1, #239	; 0xef
 800462e:	2051      	movs	r0, #81	; 0x51
 8004630:	f7fc faf8 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004634:	2100      	movs	r1, #0
 8004636:	2052      	movs	r0, #82	; 0x52
 8004638:	f7fc faf4 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 800463c:	f240 113f 	movw	r1, #319	; 0x13f
 8004640:	2053      	movs	r0, #83	; 0x53
 8004642:	f7fc faef 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 8004646:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 800464a:	2060      	movs	r0, #96	; 0x60
 800464c:	f7fc faea 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004650:	2101      	movs	r1, #1
 8004652:	2061      	movs	r0, #97	; 0x61
 8004654:	f7fc fae6 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004658:	2100      	movs	r1, #0
 800465a:	206a      	movs	r0, #106	; 0x6a
 800465c:	f7fc fae2 	bl	8000c24 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 8004660:	2100      	movs	r1, #0
 8004662:	2080      	movs	r0, #128	; 0x80
 8004664:	f7fc fade 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004668:	2100      	movs	r1, #0
 800466a:	2081      	movs	r0, #129	; 0x81
 800466c:	f7fc fada 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004670:	2100      	movs	r1, #0
 8004672:	2082      	movs	r0, #130	; 0x82
 8004674:	f7fc fad6 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004678:	2100      	movs	r1, #0
 800467a:	2083      	movs	r0, #131	; 0x83
 800467c:	f7fc fad2 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004680:	2100      	movs	r1, #0
 8004682:	2084      	movs	r0, #132	; 0x84
 8004684:	f7fc face 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004688:	2100      	movs	r1, #0
 800468a:	2085      	movs	r0, #133	; 0x85
 800468c:	f7fc faca 	bl	8000c24 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 8004690:	2110      	movs	r1, #16
 8004692:	2090      	movs	r0, #144	; 0x90
 8004694:	f7fc fac6 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004698:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800469c:	2092      	movs	r0, #146	; 0x92
 800469e:	f7fc fac1 	bl	8000c24 <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 80046a2:	f240 1133 	movw	r1, #307	; 0x133
 80046a6:	2007      	movs	r0, #7
 80046a8:	f7fc fabc 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 80046ac:	2122      	movs	r1, #34	; 0x22
 80046ae:	2000      	movs	r0, #0
 80046b0:	f7fc fab8 	bl	8000c24 <LCD_WriteReg>
 80046b4:	f001 bc3a 	b.w	8005f2c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 80046b8:	4b7d      	ldr	r3, [pc, #500]	; (80048b0 <LCD_Init+0x27b8>)
 80046ba:	889b      	ldrh	r3, [r3, #4]
 80046bc:	f249 3228 	movw	r2, #37672	; 0x9328
 80046c0:	4293      	cmp	r3, r2
 80046c2:	f040 80f7 	bne.w	80048b4 <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 80046c6:	f241 018f 	movw	r1, #4239	; 0x108f
 80046ca:	20ec      	movs	r0, #236	; 0xec
 80046cc:	f7fc faaa 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 80046d0:	f241 2134 	movw	r1, #4660	; 0x1234
 80046d4:	20ef      	movs	r0, #239	; 0xef
 80046d6:	f7fc faa5 	bl	8000c24 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 80046da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80046de:	2001      	movs	r0, #1
 80046e0:	f7fc faa0 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 80046e4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80046e8:	2002      	movs	r0, #2
 80046ea:	f7fc fa9b 	bl	8000c24 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 80046ee:	f241 0130 	movw	r1, #4144	; 0x1030
 80046f2:	2003      	movs	r0, #3
 80046f4:	f7fc fa96 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 80046f8:	2100      	movs	r1, #0
 80046fa:	2004      	movs	r0, #4
 80046fc:	f7fc fa92 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004700:	f240 2102 	movw	r1, #514	; 0x202
 8004704:	2008      	movs	r0, #8
 8004706:	f7fc fa8d 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 800470a:	2100      	movs	r1, #0
 800470c:	2009      	movs	r0, #9
 800470e:	f7fc fa89 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 8004712:	2100      	movs	r1, #0
 8004714:	200a      	movs	r0, #10
 8004716:	f7fc fa85 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 800471a:	2101      	movs	r1, #1
 800471c:	200c      	movs	r0, #12
 800471e:	f7fc fa81 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 8004722:	2100      	movs	r1, #0
 8004724:	200d      	movs	r0, #13
 8004726:	f7fc fa7d 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 800472a:	2100      	movs	r1, #0
 800472c:	200f      	movs	r0, #15
 800472e:	f7fc fa79 	bl	8000c24 <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 8004732:	2100      	movs	r1, #0
 8004734:	2010      	movs	r0, #16
 8004736:	f7fc fa75 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 800473a:	2107      	movs	r1, #7
 800473c:	2011      	movs	r0, #17
 800473e:	f7fc fa71 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8004742:	2100      	movs	r1, #0
 8004744:	2012      	movs	r0, #18
 8004746:	f7fc fa6d 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 800474a:	2100      	movs	r1, #0
 800474c:	2013      	movs	r0, #19
 800474e:	f7fc fa69 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 8004752:	2101      	movs	r1, #1
 8004754:	2007      	movs	r0, #7
 8004756:	f7fc fa65 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(50);
 800475a:	2032      	movs	r0, #50	; 0x32
 800475c:	f002 faa6 	bl	8006cac <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 8004760:	f241 4190 	movw	r1, #5264	; 0x1490
 8004764:	2010      	movs	r0, #16
 8004766:	f7fc fa5d 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 800476a:	f240 2127 	movw	r1, #551	; 0x227
 800476e:	2011      	movs	r0, #17
 8004770:	f7fc fa58 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(50);
 8004774:	2032      	movs	r0, #50	; 0x32
 8004776:	f002 fa99 	bl	8006cac <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 800477a:	218a      	movs	r1, #138	; 0x8a
 800477c:	2012      	movs	r0, #18
 800477e:	f7fc fa51 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(50);
 8004782:	2032      	movs	r0, #50	; 0x32
 8004784:	f002 fa92 	bl	8006cac <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 8004788:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 800478c:	2013      	movs	r0, #19
 800478e:	f7fc fa49 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 8004792:	2106      	movs	r1, #6
 8004794:	2029      	movs	r0, #41	; 0x29
 8004796:	f7fc fa45 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 800479a:	210d      	movs	r1, #13
 800479c:	202b      	movs	r0, #43	; 0x2b
 800479e:	f7fc fa41 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(50);
 80047a2:	2032      	movs	r0, #50	; 0x32
 80047a4:	f002 fa82 	bl	8006cac <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 80047a8:	2100      	movs	r1, #0
 80047aa:	2020      	movs	r0, #32
 80047ac:	f7fc fa3a 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 80047b0:	2100      	movs	r1, #0
 80047b2:	2021      	movs	r0, #33	; 0x21
 80047b4:	f7fc fa36 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(50);
 80047b8:	2032      	movs	r0, #50	; 0x32
 80047ba:	f002 fa77 	bl	8006cac <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 80047be:	2100      	movs	r1, #0
 80047c0:	2030      	movs	r0, #48	; 0x30
 80047c2:	f7fc fa2f 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 80047c6:	f240 6104 	movw	r1, #1540	; 0x604
 80047ca:	2031      	movs	r0, #49	; 0x31
 80047cc:	f7fc fa2a 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 80047d0:	f240 3105 	movw	r1, #773	; 0x305
 80047d4:	2032      	movs	r0, #50	; 0x32
 80047d6:	f7fc fa25 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 80047da:	2100      	movs	r1, #0
 80047dc:	2035      	movs	r0, #53	; 0x35
 80047de:	f7fc fa21 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 80047e2:	f640 4109 	movw	r1, #3081	; 0xc09
 80047e6:	2036      	movs	r0, #54	; 0x36
 80047e8:	f7fc fa1c 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 80047ec:	f44f 7101 	mov.w	r1, #516	; 0x204
 80047f0:	2037      	movs	r0, #55	; 0x37
 80047f2:	f7fc fa17 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 80047f6:	f240 3101 	movw	r1, #769	; 0x301
 80047fa:	2038      	movs	r0, #56	; 0x38
 80047fc:	f7fc fa12 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004800:	f240 7107 	movw	r1, #1799	; 0x707
 8004804:	2039      	movs	r0, #57	; 0x39
 8004806:	f7fc fa0d 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 800480a:	2100      	movs	r1, #0
 800480c:	203c      	movs	r0, #60	; 0x3c
 800480e:	f7fc fa09 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 8004812:	f640 210a 	movw	r1, #2570	; 0xa0a
 8004816:	203d      	movs	r0, #61	; 0x3d
 8004818:	f7fc fa04 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(50);
 800481c:	2032      	movs	r0, #50	; 0x32
 800481e:	f002 fa45 	bl	8006cac <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 8004822:	2100      	movs	r1, #0
 8004824:	2050      	movs	r0, #80	; 0x50
 8004826:	f7fc f9fd 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 800482a:	21ef      	movs	r1, #239	; 0xef
 800482c:	2051      	movs	r0, #81	; 0x51
 800482e:	f7fc f9f9 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 8004832:	2100      	movs	r1, #0
 8004834:	2052      	movs	r0, #82	; 0x52
 8004836:	f7fc f9f5 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 800483a:	f240 113f 	movw	r1, #319	; 0x13f
 800483e:	2053      	movs	r0, #83	; 0x53
 8004840:	f7fc f9f0 	bl	8000c24 <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 8004844:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8004848:	2060      	movs	r0, #96	; 0x60
 800484a:	f7fc f9eb 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 800484e:	2101      	movs	r1, #1
 8004850:	2061      	movs	r0, #97	; 0x61
 8004852:	f7fc f9e7 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8004856:	2100      	movs	r1, #0
 8004858:	206a      	movs	r0, #106	; 0x6a
 800485a:	f7fc f9e3 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 800485e:	2100      	movs	r1, #0
 8004860:	2080      	movs	r0, #128	; 0x80
 8004862:	f7fc f9df 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004866:	2100      	movs	r1, #0
 8004868:	2081      	movs	r0, #129	; 0x81
 800486a:	f7fc f9db 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 800486e:	2100      	movs	r1, #0
 8004870:	2082      	movs	r0, #130	; 0x82
 8004872:	f7fc f9d7 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004876:	2100      	movs	r1, #0
 8004878:	2083      	movs	r0, #131	; 0x83
 800487a:	f7fc f9d3 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 800487e:	2100      	movs	r1, #0
 8004880:	2084      	movs	r0, #132	; 0x84
 8004882:	f7fc f9cf 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004886:	2100      	movs	r1, #0
 8004888:	2085      	movs	r0, #133	; 0x85
 800488a:	f7fc f9cb 	bl	8000c24 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 800488e:	2110      	movs	r1, #16
 8004890:	2090      	movs	r0, #144	; 0x90
 8004892:	f7fc f9c7 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004896:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800489a:	2092      	movs	r0, #146	; 0x92
 800489c:	f7fc f9c2 	bl	8000c24 <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 80048a0:	f240 1133 	movw	r1, #307	; 0x133
 80048a4:	2007      	movs	r0, #7
 80048a6:	f7fc f9bd 	bl	8000c24 <LCD_WriteReg>
 80048aa:	f001 bb3f 	b.w	8005f2c <LCD_Init+0x3e34>
 80048ae:	bf00      	nop
 80048b0:	20000030 	.word	0x20000030
	} else if (lcddev.id == 0x9320) //测试OK.
 80048b4:	4bce      	ldr	r3, [pc, #824]	; (8004bf0 <LCD_Init+0x2af8>)
 80048b6:	889b      	ldrh	r3, [r3, #4]
 80048b8:	f249 3220 	movw	r2, #37664	; 0x9320
 80048bc:	4293      	cmp	r3, r2
 80048be:	f040 80ad 	bne.w	8004a1c <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 80048c2:	2100      	movs	r1, #0
 80048c4:	2000      	movs	r0, #0
 80048c6:	f7fc f9ad 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 80048ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80048ce:	2001      	movs	r0, #1
 80048d0:	f7fc f9a8 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 80048d4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80048d8:	2002      	movs	r0, #2
 80048da:	f7fc f9a3 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 80048de:	f241 0130 	movw	r1, #4144	; 0x1030
 80048e2:	2003      	movs	r0, #3
 80048e4:	f7fc f99e 	bl	8000c24 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 80048e8:	2100      	movs	r1, #0
 80048ea:	2004      	movs	r0, #4
 80048ec:	f7fc f99a 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 80048f0:	f240 2102 	movw	r1, #514	; 0x202
 80048f4:	2008      	movs	r0, #8
 80048f6:	f7fc f995 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 80048fa:	2100      	movs	r1, #0
 80048fc:	2009      	movs	r0, #9
 80048fe:	f7fc f991 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 8004902:	2100      	movs	r1, #0
 8004904:	200a      	movs	r0, #10
 8004906:	f7fc f98d 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 800490a:	2101      	movs	r1, #1
 800490c:	200c      	movs	r0, #12
 800490e:	f7fc f989 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 8004912:	2100      	movs	r1, #0
 8004914:	200d      	movs	r0, #13
 8004916:	f7fc f985 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 800491a:	2100      	movs	r1, #0
 800491c:	200f      	movs	r0, #15
 800491e:	f7fc f981 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(50);
 8004922:	2032      	movs	r0, #50	; 0x32
 8004924:	f002 f9c2 	bl	8006cac <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 8004928:	f240 1101 	movw	r1, #257	; 0x101
 800492c:	2007      	movs	r0, #7
 800492e:	f7fc f979 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(50);
 8004932:	2032      	movs	r0, #50	; 0x32
 8004934:	f002 f9ba 	bl	8006cac <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 8004938:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 800493c:	2010      	movs	r0, #16
 800493e:	f7fc f971 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 8004942:	2107      	movs	r1, #7
 8004944:	2011      	movs	r0, #17
 8004946:	f7fc f96d 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 800494a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800494e:	2012      	movs	r0, #18
 8004950:	f7fc f968 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 8004954:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8004958:	2013      	movs	r0, #19
 800495a:	f7fc f963 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 800495e:	2100      	movs	r1, #0
 8004960:	2029      	movs	r0, #41	; 0x29
 8004962:	f7fc f95f 	bl	8000c24 <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 8004966:	f244 0110 	movw	r1, #16400	; 0x4010
 800496a:	202b      	movs	r0, #43	; 0x2b
 800496c:	f7fc f95a 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 8004970:	2100      	movs	r1, #0
 8004972:	2050      	movs	r0, #80	; 0x50
 8004974:	f7fc f956 	bl	8000c24 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 8004978:	21ef      	movs	r1, #239	; 0xef
 800497a:	2051      	movs	r0, #81	; 0x51
 800497c:	f7fc f952 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 8004980:	2100      	movs	r1, #0
 8004982:	2052      	movs	r0, #82	; 0x52
 8004984:	f7fc f94e 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 8004988:	f240 113f 	movw	r1, #319	; 0x13f
 800498c:	2053      	movs	r0, #83	; 0x53
 800498e:	f7fc f949 	bl	8000c24 <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 8004992:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004996:	2060      	movs	r0, #96	; 0x60
 8004998:	f7fc f944 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 800499c:	2101      	movs	r1, #1
 800499e:	2061      	movs	r0, #97	; 0x61
 80049a0:	f7fc f940 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 80049a4:	2100      	movs	r1, #0
 80049a6:	206a      	movs	r0, #106	; 0x6a
 80049a8:	f7fc f93c 	bl	8000c24 <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 80049ac:	2100      	movs	r1, #0
 80049ae:	2080      	movs	r0, #128	; 0x80
 80049b0:	f7fc f938 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 80049b4:	2100      	movs	r1, #0
 80049b6:	2081      	movs	r0, #129	; 0x81
 80049b8:	f7fc f934 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 80049bc:	2100      	movs	r1, #0
 80049be:	2082      	movs	r0, #130	; 0x82
 80049c0:	f7fc f930 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 80049c4:	2100      	movs	r1, #0
 80049c6:	2083      	movs	r0, #131	; 0x83
 80049c8:	f7fc f92c 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 80049cc:	2100      	movs	r1, #0
 80049ce:	2084      	movs	r0, #132	; 0x84
 80049d0:	f7fc f928 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 80049d4:	2100      	movs	r1, #0
 80049d6:	2085      	movs	r0, #133	; 0x85
 80049d8:	f7fc f924 	bl	8000c24 <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 80049dc:	2110      	movs	r1, #16
 80049de:	2090      	movs	r0, #144	; 0x90
 80049e0:	f7fc f920 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 80049e4:	2100      	movs	r1, #0
 80049e6:	2092      	movs	r0, #146	; 0x92
 80049e8:	f7fc f91c 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 80049ec:	2101      	movs	r1, #1
 80049ee:	2093      	movs	r0, #147	; 0x93
 80049f0:	f7fc f918 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 80049f4:	f44f 7188 	mov.w	r1, #272	; 0x110
 80049f8:	2095      	movs	r0, #149	; 0x95
 80049fa:	f7fc f913 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 80049fe:	2100      	movs	r1, #0
 8004a00:	2097      	movs	r0, #151	; 0x97
 8004a02:	f7fc f90f 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 8004a06:	2100      	movs	r1, #0
 8004a08:	2098      	movs	r0, #152	; 0x98
 8004a0a:	f7fc f90b 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 8004a0e:	f240 1173 	movw	r1, #371	; 0x173
 8004a12:	2007      	movs	r0, #7
 8004a14:	f7fc f906 	bl	8000c24 <LCD_WriteReg>
 8004a18:	f001 ba88 	b.w	8005f2c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 8004a1c:	4b74      	ldr	r3, [pc, #464]	; (8004bf0 <LCD_Init+0x2af8>)
 8004a1e:	889b      	ldrh	r3, [r3, #4]
 8004a20:	f249 3231 	movw	r2, #37681	; 0x9331
 8004a24:	4293      	cmp	r3, r2
 8004a26:	f040 80e5 	bne.w	8004bf4 <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 8004a2a:	f241 0114 	movw	r1, #4116	; 0x1014
 8004a2e:	20e7      	movs	r0, #231	; 0xe7
 8004a30:	f7fc f8f8 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 8004a34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a38:	2001      	movs	r0, #1
 8004a3a:	f7fc f8f3 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 8004a3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a42:	2002      	movs	r0, #2
 8004a44:	f7fc f8ee 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 8004a48:	f241 0138 	movw	r1, #4152	; 0x1038
 8004a4c:	2003      	movs	r0, #3
 8004a4e:	f7fc f8e9 	bl	8000c24 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 8004a52:	f240 2102 	movw	r1, #514	; 0x202
 8004a56:	2008      	movs	r0, #8
 8004a58:	f7fc f8e4 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	2009      	movs	r0, #9
 8004a60:	f7fc f8e0 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8004a64:	2100      	movs	r1, #0
 8004a66:	200a      	movs	r0, #10
 8004a68:	f7fc f8dc 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	200c      	movs	r0, #12
 8004a70:	f7fc f8d8 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 8004a74:	2100      	movs	r1, #0
 8004a76:	200d      	movs	r0, #13
 8004a78:	f7fc f8d4 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	200f      	movs	r0, #15
 8004a80:	f7fc f8d0 	bl	8000c24 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004a84:	2100      	movs	r1, #0
 8004a86:	2010      	movs	r0, #16
 8004a88:	f7fc f8cc 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 8004a8c:	2107      	movs	r1, #7
 8004a8e:	2011      	movs	r0, #17
 8004a90:	f7fc f8c8 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8004a94:	2100      	movs	r1, #0
 8004a96:	2012      	movs	r0, #18
 8004a98:	f7fc f8c4 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	2013      	movs	r0, #19
 8004aa0:	f7fc f8c0 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8004aa4:	20c8      	movs	r0, #200	; 0xc8
 8004aa6:	f002 f901 	bl	8006cac <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004aaa:	f241 6190 	movw	r1, #5776	; 0x1690
 8004aae:	2010      	movs	r0, #16
 8004ab0:	f7fc f8b8 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8004ab4:	f240 2127 	movw	r1, #551	; 0x227
 8004ab8:	2011      	movs	r0, #17
 8004aba:	f7fc f8b3 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004abe:	2032      	movs	r0, #50	; 0x32
 8004ac0:	f002 f8f4 	bl	8006cac <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 8004ac4:	210c      	movs	r1, #12
 8004ac6:	2012      	movs	r0, #18
 8004ac8:	f7fc f8ac 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004acc:	2032      	movs	r0, #50	; 0x32
 8004ace:	f002 f8ed 	bl	8006cac <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 8004ad2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ad6:	2013      	movs	r0, #19
 8004ad8:	f7fc f8a4 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 8004adc:	2111      	movs	r1, #17
 8004ade:	2029      	movs	r0, #41	; 0x29
 8004ae0:	f7fc f8a0 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 8004ae4:	210b      	movs	r1, #11
 8004ae6:	202b      	movs	r0, #43	; 0x2b
 8004ae8:	f7fc f89c 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004aec:	2032      	movs	r0, #50	; 0x32
 8004aee:	f002 f8dd 	bl	8006cac <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 8004af2:	2100      	movs	r1, #0
 8004af4:	2020      	movs	r0, #32
 8004af6:	f7fc f895 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 8004afa:	f240 113f 	movw	r1, #319	; 0x13f
 8004afe:	2021      	movs	r0, #33	; 0x21
 8004b00:	f7fc f890 	bl	8000c24 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 8004b04:	2100      	movs	r1, #0
 8004b06:	2030      	movs	r0, #48	; 0x30
 8004b08:	f7fc f88c 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 8004b0c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004b10:	2031      	movs	r0, #49	; 0x31
 8004b12:	f7fc f887 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 8004b16:	2100      	movs	r1, #0
 8004b18:	2032      	movs	r0, #50	; 0x32
 8004b1a:	f7fc f883 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8004b1e:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004b22:	2035      	movs	r0, #53	; 0x35
 8004b24:	f7fc f87e 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8004b28:	f241 610a 	movw	r1, #5642	; 0x160a
 8004b2c:	2036      	movs	r0, #54	; 0x36
 8004b2e:	f7fc f879 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 8004b32:	f240 7107 	movw	r1, #1799	; 0x707
 8004b36:	2037      	movs	r0, #55	; 0x37
 8004b38:	f7fc f874 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 8004b3c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004b40:	2038      	movs	r0, #56	; 0x38
 8004b42:	f7fc f86f 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004b46:	f240 7107 	movw	r1, #1799	; 0x707
 8004b4a:	2039      	movs	r0, #57	; 0x39
 8004b4c:	f7fc f86a 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8004b50:	f240 4102 	movw	r1, #1026	; 0x402
 8004b54:	203c      	movs	r0, #60	; 0x3c
 8004b56:	f7fc f865 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 8004b5a:	f640 410f 	movw	r1, #3087	; 0xc0f
 8004b5e:	203d      	movs	r0, #61	; 0x3d
 8004b60:	f7fc f860 	bl	8000c24 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8004b64:	2100      	movs	r1, #0
 8004b66:	2050      	movs	r0, #80	; 0x50
 8004b68:	f7fc f85c 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 8004b6c:	21ef      	movs	r1, #239	; 0xef
 8004b6e:	2051      	movs	r0, #81	; 0x51
 8004b70:	f7fc f858 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8004b74:	2100      	movs	r1, #0
 8004b76:	2052      	movs	r0, #82	; 0x52
 8004b78:	f7fc f854 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 8004b7c:	f240 113f 	movw	r1, #319	; 0x13f
 8004b80:	2053      	movs	r0, #83	; 0x53
 8004b82:	f7fc f84f 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8004b86:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004b8a:	2060      	movs	r0, #96	; 0x60
 8004b8c:	f7fc f84a 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 8004b90:	2101      	movs	r1, #1
 8004b92:	2061      	movs	r0, #97	; 0x61
 8004b94:	f7fc f846 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8004b98:	2100      	movs	r1, #0
 8004b9a:	206a      	movs	r0, #106	; 0x6a
 8004b9c:	f7fc f842 	bl	8000c24 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	2080      	movs	r0, #128	; 0x80
 8004ba4:	f7fc f83e 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004ba8:	2100      	movs	r1, #0
 8004baa:	2081      	movs	r0, #129	; 0x81
 8004bac:	f7fc f83a 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	2082      	movs	r0, #130	; 0x82
 8004bb4:	f7fc f836 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004bb8:	2100      	movs	r1, #0
 8004bba:	2083      	movs	r0, #131	; 0x83
 8004bbc:	f7fc f832 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	2084      	movs	r0, #132	; 0x84
 8004bc4:	f7fc f82e 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004bc8:	2100      	movs	r1, #0
 8004bca:	2085      	movs	r0, #133	; 0x85
 8004bcc:	f7fc f82a 	bl	8000c24 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8004bd0:	2110      	movs	r1, #16
 8004bd2:	2090      	movs	r0, #144	; 0x90
 8004bd4:	f7fc f826 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004bd8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004bdc:	2092      	movs	r0, #146	; 0x92
 8004bde:	f7fc f821 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 8004be2:	f240 1133 	movw	r1, #307	; 0x133
 8004be6:	2007      	movs	r0, #7
 8004be8:	f7fc f81c 	bl	8000c24 <LCD_WriteReg>
 8004bec:	f001 b99e 	b.w	8005f2c <LCD_Init+0x3e34>
 8004bf0:	20000030 	.word	0x20000030
	} else if (lcddev.id == 0x5408) {
 8004bf4:	4be2      	ldr	r3, [pc, #904]	; (8004f80 <LCD_Init+0x2e88>)
 8004bf6:	889b      	ldrh	r3, [r3, #4]
 8004bf8:	f245 4208 	movw	r2, #21512	; 0x5408
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	f040 80a3 	bne.w	8004d48 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 8004c02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c06:	2001      	movs	r0, #1
 8004c08:	f7fc f80c 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 8004c0c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004c10:	2002      	movs	r0, #2
 8004c12:	f7fc f807 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 8004c16:	f241 0130 	movw	r1, #4144	; 0x1030
 8004c1a:	2003      	movs	r0, #3
 8004c1c:	f7fc f802 	bl	8000c24 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 8004c20:	2100      	movs	r1, #0
 8004c22:	2004      	movs	r0, #4
 8004c24:	f7fb fffe 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 8004c28:	f240 2107 	movw	r1, #519	; 0x207
 8004c2c:	2008      	movs	r0, #8
 8004c2e:	f7fb fff9 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 8004c32:	2100      	movs	r1, #0
 8004c34:	2009      	movs	r0, #9
 8004c36:	f7fb fff5 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	200a      	movs	r0, #10
 8004c3e:	f7fb fff1 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 8004c42:	2100      	movs	r1, #0
 8004c44:	200c      	movs	r0, #12
 8004c46:	f7fb ffed 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	200d      	movs	r0, #13
 8004c4e:	f7fb ffe9 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 8004c52:	2100      	movs	r1, #0
 8004c54:	200f      	movs	r0, #15
 8004c56:	f7fb ffe5 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(20);
 8004c5a:	2014      	movs	r0, #20
 8004c5c:	f002 f826 	bl	8006cac <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 8004c60:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8004c64:	2010      	movs	r0, #16
 8004c66:	f7fb ffdd 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	2011      	movs	r0, #17
 8004c6e:	f7fb ffd9 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 8004c72:	2101      	movs	r1, #1
 8004c74:	2017      	movs	r0, #23
 8004c76:	f7fb ffd5 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 8004c7a:	f44f 719c 	mov.w	r1, #312	; 0x138
 8004c7e:	2012      	movs	r0, #18
 8004c80:	f7fb ffd0 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 8004c84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004c88:	2013      	movs	r0, #19
 8004c8a:	f7fb ffcb 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 8004c8e:	2109      	movs	r1, #9
 8004c90:	2029      	movs	r0, #41	; 0x29
 8004c92:	f7fb ffc7 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 8004c96:	2109      	movs	r1, #9
 8004c98:	202a      	movs	r0, #42	; 0x2a
 8004c9a:	f7fb ffc3 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	20a4      	movs	r0, #164	; 0xa4
 8004ca2:	f7fb ffbf 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	2050      	movs	r0, #80	; 0x50
 8004caa:	f7fb ffbb 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 8004cae:	21ef      	movs	r1, #239	; 0xef
 8004cb0:	2051      	movs	r0, #81	; 0x51
 8004cb2:	f7fb ffb7 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	2052      	movs	r0, #82	; 0x52
 8004cba:	f7fb ffb3 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 8004cbe:	f240 113f 	movw	r1, #319	; 0x13f
 8004cc2:	2053      	movs	r0, #83	; 0x53
 8004cc4:	f7fb ffae 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 8004cc8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004ccc:	2060      	movs	r0, #96	; 0x60
 8004cce:	f7fb ffa9 	bl	8000c24 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	2061      	movs	r0, #97	; 0x61
 8004cd6:	f7fb ffa5 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 8004cda:	2100      	movs	r1, #0
 8004cdc:	206a      	movs	r0, #106	; 0x6a
 8004cde:	f7fb ffa1 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	2080      	movs	r0, #128	; 0x80
 8004ce6:	f7fb ff9d 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 8004cea:	2100      	movs	r1, #0
 8004cec:	2081      	movs	r0, #129	; 0x81
 8004cee:	f7fb ff99 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	2082      	movs	r0, #130	; 0x82
 8004cf6:	f7fb ff95 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	2083      	movs	r0, #131	; 0x83
 8004cfe:	f7fb ff91 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 8004d02:	2100      	movs	r1, #0
 8004d04:	2084      	movs	r0, #132	; 0x84
 8004d06:	f7fb ff8d 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	2085      	movs	r0, #133	; 0x85
 8004d0e:	f7fb ff89 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 8004d12:	2113      	movs	r1, #19
 8004d14:	2090      	movs	r0, #144	; 0x90
 8004d16:	f7fb ff85 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	2092      	movs	r0, #146	; 0x92
 8004d1e:	f7fb ff81 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 8004d22:	2103      	movs	r1, #3
 8004d24:	2093      	movs	r0, #147	; 0x93
 8004d26:	f7fb ff7d 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 8004d2a:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004d2e:	2095      	movs	r0, #149	; 0x95
 8004d30:	f7fb ff78 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 8004d34:	f240 1173 	movw	r1, #371	; 0x173
 8004d38:	2007      	movs	r0, #7
 8004d3a:	f7fb ff73 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(50);
 8004d3e:	2032      	movs	r0, #50	; 0x32
 8004d40:	f001 ffb4 	bl	8006cac <HAL_Delay>
 8004d44:	f001 b8f2 	b.w	8005f2c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8004d48:	4b8d      	ldr	r3, [pc, #564]	; (8004f80 <LCD_Init+0x2e88>)
 8004d4a:	889b      	ldrh	r3, [r3, #4]
 8004d4c:	f241 5205 	movw	r2, #5381	; 0x1505
 8004d50:	4293      	cmp	r3, r2
 8004d52:	f040 8117 	bne.w	8004f84 <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 8004d56:	2100      	movs	r1, #0
 8004d58:	2007      	movs	r0, #7
 8004d5a:	f7fb ff63 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(50);
 8004d5e:	2032      	movs	r0, #50	; 0x32
 8004d60:	f001 ffa4 	bl	8006cac <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 8004d64:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004d68:	2012      	movs	r0, #18
 8004d6a:	f7fb ff5b 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 8004d6e:	2101      	movs	r1, #1
 8004d70:	20a4      	movs	r0, #164	; 0xa4
 8004d72:	f7fb ff57 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 8004d76:	210f      	movs	r1, #15
 8004d78:	2008      	movs	r0, #8
 8004d7a:	f7fb ff53 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 8004d7e:	2108      	movs	r1, #8
 8004d80:	200a      	movs	r0, #10
 8004d82:	f7fb ff4f 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 8004d86:	2108      	movs	r1, #8
 8004d88:	200d      	movs	r0, #13
 8004d8a:	f7fb ff4b 	bl	8000c24 <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 8004d8e:	f240 7107 	movw	r1, #1799	; 0x707
 8004d92:	2030      	movs	r0, #48	; 0x30
 8004d94:	f7fb ff46 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 8004d98:	2107      	movs	r1, #7
 8004d9a:	2031      	movs	r0, #49	; 0x31
 8004d9c:	f7fb ff42 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 8004da0:	f240 6103 	movw	r1, #1539	; 0x603
 8004da4:	2032      	movs	r0, #50	; 0x32
 8004da6:	f7fb ff3d 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 8004daa:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004dae:	2033      	movs	r0, #51	; 0x33
 8004db0:	f7fb ff38 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 8004db4:	f240 2102 	movw	r1, #514	; 0x202
 8004db8:	2034      	movs	r0, #52	; 0x34
 8004dba:	f7fb ff33 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 8004dbe:	2102      	movs	r1, #2
 8004dc0:	2035      	movs	r0, #53	; 0x35
 8004dc2:	f7fb ff2f 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 8004dc6:	f641 710f 	movw	r1, #7951	; 0x1f0f
 8004dca:	2036      	movs	r0, #54	; 0x36
 8004dcc:	f7fb ff2a 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8004dd0:	f240 7107 	movw	r1, #1799	; 0x707
 8004dd4:	2037      	movs	r0, #55	; 0x37
 8004dd6:	f7fb ff25 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 8004dda:	2100      	movs	r1, #0
 8004ddc:	2038      	movs	r0, #56	; 0x38
 8004dde:	f7fb ff21 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 8004de2:	2100      	movs	r1, #0
 8004de4:	2039      	movs	r0, #57	; 0x39
 8004de6:	f7fb ff1d 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 8004dea:	f240 7107 	movw	r1, #1799	; 0x707
 8004dee:	203a      	movs	r0, #58	; 0x3a
 8004df0:	f7fb ff18 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 8004df4:	2100      	movs	r1, #0
 8004df6:	203b      	movs	r0, #59	; 0x3b
 8004df8:	f7fb ff14 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 8004dfc:	2107      	movs	r1, #7
 8004dfe:	203c      	movs	r0, #60	; 0x3c
 8004e00:	f7fb ff10 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 8004e04:	2100      	movs	r1, #0
 8004e06:	203d      	movs	r0, #61	; 0x3d
 8004e08:	f7fb ff0c 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(50);
 8004e0c:	2032      	movs	r0, #50	; 0x32
 8004e0e:	f001 ff4d 	bl	8006cac <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 8004e12:	2101      	movs	r1, #1
 8004e14:	2007      	movs	r0, #7
 8004e16:	f7fb ff05 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	2017      	movs	r0, #23
 8004e1e:	f7fb ff01 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(50);
 8004e22:	2032      	movs	r0, #50	; 0x32
 8004e24:	f001 ff42 	bl	8006cac <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 8004e28:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 8004e2c:	2010      	movs	r0, #16
 8004e2e:	f7fb fef9 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8004e32:	f240 2117 	movw	r1, #535	; 0x217
 8004e36:	2011      	movs	r0, #17
 8004e38:	f7fb fef4 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8004e3c:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004e40:	2012      	movs	r0, #18
 8004e42:	f7fb feef 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8004e46:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004e4a:	2013      	movs	r0, #19
 8004e4c:	f7fb feea 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8004e50:	2100      	movs	r1, #0
 8004e52:	202a      	movs	r0, #42	; 0x2a
 8004e54:	f7fb fee6 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8004e58:	210a      	movs	r1, #10
 8004e5a:	2029      	movs	r0, #41	; 0x29
 8004e5c:	f7fb fee2 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 8004e60:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8004e64:	2012      	movs	r0, #18
 8004e66:	f7fb fedd 	bl	8000c24 <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	2050      	movs	r0, #80	; 0x50
 8004e6e:	f7fb fed9 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8004e72:	21ef      	movs	r1, #239	; 0xef
 8004e74:	2051      	movs	r0, #81	; 0x51
 8004e76:	f7fb fed5 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	2052      	movs	r0, #82	; 0x52
 8004e7e:	f7fb fed1 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004e82:	f240 113f 	movw	r1, #319	; 0x13f
 8004e86:	2053      	movs	r0, #83	; 0x53
 8004e88:	f7fb fecc 	bl	8000c24 <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 8004e8c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004e90:	2060      	movs	r0, #96	; 0x60
 8004e92:	f7fb fec7 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004e96:	2101      	movs	r1, #1
 8004e98:	2061      	movs	r0, #97	; 0x61
 8004e9a:	f7fb fec3 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	206a      	movs	r0, #106	; 0x6a
 8004ea2:	f7fb febf 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	2080      	movs	r0, #128	; 0x80
 8004eaa:	f7fb febb 	bl	8000c24 <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 8004eae:	2100      	movs	r1, #0
 8004eb0:	2081      	movs	r0, #129	; 0x81
 8004eb2:	f7fb feb7 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	2082      	movs	r0, #130	; 0x82
 8004eba:	f7fb feb3 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	2083      	movs	r0, #131	; 0x83
 8004ec2:	f7fb feaf 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	2084      	movs	r0, #132	; 0x84
 8004eca:	f7fb feab 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004ece:	2100      	movs	r1, #0
 8004ed0:	2085      	movs	r0, #133	; 0x85
 8004ed2:	f7fb fea7 	bl	8000c24 <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 8004ed6:	2113      	movs	r1, #19
 8004ed8:	2090      	movs	r0, #144	; 0x90
 8004eda:	f7fb fea3 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8004ede:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004ee2:	2092      	movs	r0, #146	; 0x92
 8004ee4:	f7fb fe9e 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 8004ee8:	2105      	movs	r1, #5
 8004eea:	2093      	movs	r0, #147	; 0x93
 8004eec:	f7fb fe9a 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	2095      	movs	r0, #149	; 0x95
 8004ef4:	f7fb fe96 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 8004ef8:	2100      	movs	r1, #0
 8004efa:	2097      	movs	r0, #151	; 0x97
 8004efc:	f7fb fe92 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 8004f00:	2100      	movs	r1, #0
 8004f02:	2098      	movs	r0, #152	; 0x98
 8004f04:	f7fb fe8e 	bl	8000c24 <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 8004f08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f0c:	2001      	movs	r0, #1
 8004f0e:	f7fb fe89 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004f12:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004f16:	2002      	movs	r0, #2
 8004f18:	f7fb fe84 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004f1c:	f241 0138 	movw	r1, #4152	; 0x1038
 8004f20:	2003      	movs	r0, #3
 8004f22:	f7fb fe7f 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004f26:	2100      	movs	r1, #0
 8004f28:	2004      	movs	r0, #4
 8004f2a:	f7fb fe7b 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004f2e:	2100      	movs	r1, #0
 8004f30:	200c      	movs	r0, #12
 8004f32:	f7fb fe77 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004f36:	2100      	movs	r1, #0
 8004f38:	200f      	movs	r0, #15
 8004f3a:	f7fb fe73 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 8004f3e:	2100      	movs	r1, #0
 8004f40:	2020      	movs	r0, #32
 8004f42:	f7fb fe6f 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004f46:	2100      	movs	r1, #0
 8004f48:	2021      	movs	r0, #33	; 0x21
 8004f4a:	f7fb fe6b 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 8004f4e:	2121      	movs	r1, #33	; 0x21
 8004f50:	2007      	movs	r0, #7
 8004f52:	f7fb fe67 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(20);
 8004f56:	2014      	movs	r0, #20
 8004f58:	f001 fea8 	bl	8006cac <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004f5c:	2161      	movs	r1, #97	; 0x61
 8004f5e:	2007      	movs	r0, #7
 8004f60:	f7fb fe60 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(20);
 8004f64:	2014      	movs	r0, #20
 8004f66:	f001 fea1 	bl	8006cac <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 8004f6a:	f240 1173 	movw	r1, #371	; 0x173
 8004f6e:	2007      	movs	r0, #7
 8004f70:	f7fb fe58 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(20);
 8004f74:	2014      	movs	r0, #20
 8004f76:	f001 fe99 	bl	8006cac <HAL_Delay>
 8004f7a:	f000 bfd7 	b.w	8005f2c <LCD_Init+0x3e34>
 8004f7e:	bf00      	nop
 8004f80:	20000030 	.word	0x20000030
	} else if (lcddev.id == 0xB505) {
 8004f84:	4bf0      	ldr	r3, [pc, #960]	; (8005348 <LCD_Init+0x3250>)
 8004f86:	889b      	ldrh	r3, [r3, #4]
 8004f88:	f24b 5205 	movw	r2, #46341	; 0xb505
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	f040 8103 	bne.w	8005198 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 8004f92:	2100      	movs	r1, #0
 8004f94:	2000      	movs	r0, #0
 8004f96:	f7fb fe45 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	f7fb fe41 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	f7fb fe3d 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004faa:	2100      	movs	r1, #0
 8004fac:	2000      	movs	r0, #0
 8004fae:	f7fb fe39 	bl	8000c24 <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	20a4      	movs	r0, #164	; 0xa4
 8004fb6:	f7fb fe35 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(20);
 8004fba:	2014      	movs	r0, #20
 8004fbc:	f001 fe76 	bl	8006cac <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8004fc0:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004fc4:	2060      	movs	r0, #96	; 0x60
 8004fc6:	f7fb fe2d 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004fca:	f240 2102 	movw	r1, #514	; 0x202
 8004fce:	2008      	movs	r0, #8
 8004fd0:	f7fb fe28 	bl	8000c24 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 8004fd4:	f44f 7105 	mov.w	r1, #532	; 0x214
 8004fd8:	2030      	movs	r0, #48	; 0x30
 8004fda:	f7fb fe23 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 8004fde:	f243 7115 	movw	r1, #14101	; 0x3715
 8004fe2:	2031      	movs	r0, #49	; 0x31
 8004fe4:	f7fb fe1e 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 8004fe8:	f240 6104 	movw	r1, #1540	; 0x604
 8004fec:	2032      	movs	r0, #50	; 0x32
 8004fee:	f7fb fe19 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 8004ff2:	f640 6116 	movw	r1, #3606	; 0xe16
 8004ff6:	2033      	movs	r0, #51	; 0x33
 8004ff8:	f7fb fe14 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 8004ffc:	f242 2111 	movw	r1, #8721	; 0x2211
 8005000:	2034      	movs	r0, #52	; 0x34
 8005002:	f7fb fe0f 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 8005006:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 800500a:	2035      	movs	r0, #53	; 0x35
 800500c:	f7fb fe0a 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 8005010:	f248 5107 	movw	r1, #34055	; 0x8507
 8005014:	2036      	movs	r0, #54	; 0x36
 8005016:	f7fb fe05 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 800501a:	f241 4107 	movw	r1, #5127	; 0x1407
 800501e:	2037      	movs	r0, #55	; 0x37
 8005020:	f7fb fe00 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 8005024:	f241 4103 	movw	r1, #5123	; 0x1403
 8005028:	2038      	movs	r0, #56	; 0x38
 800502a:	f7fb fdfb 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 800502e:	2120      	movs	r1, #32
 8005030:	2039      	movs	r0, #57	; 0x39
 8005032:	f7fb fdf7 	bl	8000c24 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 8005036:	211a      	movs	r1, #26
 8005038:	2090      	movs	r0, #144	; 0x90
 800503a:	f7fb fdf3 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 800503e:	2100      	movs	r1, #0
 8005040:	2010      	movs	r0, #16
 8005042:	f7fb fdef 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8005046:	2107      	movs	r1, #7
 8005048:	2011      	movs	r0, #17
 800504a:	f7fb fdeb 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 800504e:	2100      	movs	r1, #0
 8005050:	2012      	movs	r0, #18
 8005052:	f7fb fde7 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8005056:	2100      	movs	r1, #0
 8005058:	2013      	movs	r0, #19
 800505a:	f7fb fde3 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(20);
 800505e:	2014      	movs	r0, #20
 8005060:	f001 fe24 	bl	8006cac <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 8005064:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8005068:	2010      	movs	r0, #16
 800506a:	f7fb fddb 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 800506e:	f240 1137 	movw	r1, #311	; 0x137
 8005072:	2011      	movs	r0, #17
 8005074:	f7fb fdd6 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(20);
 8005078:	2014      	movs	r0, #20
 800507a:	f001 fe17 	bl	8006cac <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 800507e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8005082:	2012      	movs	r0, #18
 8005084:	f7fb fdce 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(20);
 8005088:	2014      	movs	r0, #20
 800508a:	f001 fe0f 	bl	8006cac <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 800508e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8005092:	2013      	movs	r0, #19
 8005094:	f7fb fdc6 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 8005098:	2180      	movs	r1, #128	; 0x80
 800509a:	202a      	movs	r0, #42	; 0x2a
 800509c:	f7fb fdc2 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 80050a0:	2148      	movs	r1, #72	; 0x48
 80050a2:	2029      	movs	r0, #41	; 0x29
 80050a4:	f7fb fdbe 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(20);
 80050a8:	2014      	movs	r0, #20
 80050aa:	f001 fdff 	bl	8006cac <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 80050ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050b2:	2001      	movs	r0, #1
 80050b4:	f7fb fdb6 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 80050b8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80050bc:	2002      	movs	r0, #2
 80050be:	f7fb fdb1 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 80050c2:	f241 0138 	movw	r1, #4152	; 0x1038
 80050c6:	2003      	movs	r0, #3
 80050c8:	f7fb fdac 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 80050cc:	f240 2102 	movw	r1, #514	; 0x202
 80050d0:	2008      	movs	r0, #8
 80050d2:	f7fb fda7 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 80050d6:	2100      	movs	r1, #0
 80050d8:	200a      	movs	r0, #10
 80050da:	f7fb fda3 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 80050de:	2100      	movs	r1, #0
 80050e0:	200c      	movs	r0, #12
 80050e2:	f7fb fd9f 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 80050e6:	2100      	movs	r1, #0
 80050e8:	200d      	movs	r0, #13
 80050ea:	f7fb fd9b 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 80050ee:	2130      	movs	r1, #48	; 0x30
 80050f0:	200e      	movs	r0, #14
 80050f2:	f7fb fd97 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 80050f6:	2100      	movs	r1, #0
 80050f8:	2050      	movs	r0, #80	; 0x50
 80050fa:	f7fb fd93 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 80050fe:	21ef      	movs	r1, #239	; 0xef
 8005100:	2051      	movs	r0, #81	; 0x51
 8005102:	f7fb fd8f 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8005106:	2100      	movs	r1, #0
 8005108:	2052      	movs	r0, #82	; 0x52
 800510a:	f7fb fd8b 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 800510e:	f240 113f 	movw	r1, #319	; 0x13f
 8005112:	2053      	movs	r0, #83	; 0x53
 8005114:	f7fb fd86 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 8005118:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800511c:	2060      	movs	r0, #96	; 0x60
 800511e:	f7fb fd81 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8005122:	2101      	movs	r1, #1
 8005124:	2061      	movs	r0, #97	; 0x61
 8005126:	f7fb fd7d 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 800512a:	2100      	movs	r1, #0
 800512c:	206a      	movs	r0, #106	; 0x6a
 800512e:	f7fb fd79 	bl	8000c24 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 8005132:	2111      	movs	r1, #17
 8005134:	2090      	movs	r0, #144	; 0x90
 8005136:	f7fb fd75 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 800513a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800513e:	2092      	movs	r0, #146	; 0x92
 8005140:	f7fb fd70 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 8005144:	f240 4102 	movw	r1, #1026	; 0x402
 8005148:	2093      	movs	r0, #147	; 0x93
 800514a:	f7fb fd6b 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 800514e:	2102      	movs	r1, #2
 8005150:	2094      	movs	r0, #148	; 0x94
 8005152:	f7fb fd67 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(20);
 8005156:	2014      	movs	r0, #20
 8005158:	f001 fda8 	bl	8006cac <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 800515c:	2101      	movs	r1, #1
 800515e:	2007      	movs	r0, #7
 8005160:	f7fb fd60 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(20);
 8005164:	2014      	movs	r0, #20
 8005166:	f001 fda1 	bl	8006cac <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 800516a:	2161      	movs	r1, #97	; 0x61
 800516c:	2007      	movs	r0, #7
 800516e:	f7fb fd59 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 8005172:	f240 1173 	movw	r1, #371	; 0x173
 8005176:	2007      	movs	r0, #7
 8005178:	f7fb fd54 	bl	8000c24 <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 800517c:	2100      	movs	r1, #0
 800517e:	2020      	movs	r0, #32
 8005180:	f7fb fd50 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8005184:	2100      	movs	r1, #0
 8005186:	2021      	movs	r0, #33	; 0x21
 8005188:	f7fb fd4c 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 800518c:	2122      	movs	r1, #34	; 0x22
 800518e:	2000      	movs	r0, #0
 8005190:	f7fb fd48 	bl	8000c24 <LCD_WriteReg>
 8005194:	f000 beca 	b.w	8005f2c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 8005198:	4b6b      	ldr	r3, [pc, #428]	; (8005348 <LCD_Init+0x3250>)
 800519a:	889b      	ldrh	r3, [r3, #4]
 800519c:	f24c 5205 	movw	r2, #50437	; 0xc505
 80051a0:	4293      	cmp	r3, r2
 80051a2:	f040 80d3 	bne.w	800534c <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 80051a6:	2100      	movs	r1, #0
 80051a8:	2000      	movs	r0, #0
 80051aa:	f7fb fd3b 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80051ae:	2100      	movs	r1, #0
 80051b0:	2000      	movs	r0, #0
 80051b2:	f7fb fd37 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(20);
 80051b6:	2014      	movs	r0, #20
 80051b8:	f001 fd78 	bl	8006cac <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 80051bc:	2100      	movs	r1, #0
 80051be:	2000      	movs	r0, #0
 80051c0:	f7fb fd30 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80051c4:	2100      	movs	r1, #0
 80051c6:	2000      	movs	r0, #0
 80051c8:	f7fb fd2c 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80051cc:	2100      	movs	r1, #0
 80051ce:	2000      	movs	r0, #0
 80051d0:	f7fb fd28 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80051d4:	2100      	movs	r1, #0
 80051d6:	2000      	movs	r0, #0
 80051d8:	f7fb fd24 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 80051dc:	2101      	movs	r1, #1
 80051de:	20a4      	movs	r0, #164	; 0xa4
 80051e0:	f7fb fd20 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(20);
 80051e4:	2014      	movs	r0, #20
 80051e6:	f001 fd61 	bl	8006cac <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 80051ea:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80051ee:	2060      	movs	r0, #96	; 0x60
 80051f0:	f7fb fd18 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 80051f4:	f640 0106 	movw	r1, #2054	; 0x806
 80051f8:	2008      	movs	r0, #8
 80051fa:	f7fb fd13 	bl	8000c24 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 80051fe:	f240 7103 	movw	r1, #1795	; 0x703
 8005202:	2030      	movs	r0, #48	; 0x30
 8005204:	f7fb fd0e 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 8005208:	2101      	movs	r1, #1
 800520a:	2031      	movs	r0, #49	; 0x31
 800520c:	f7fb fd0a 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 8005210:	2104      	movs	r1, #4
 8005212:	2032      	movs	r0, #50	; 0x32
 8005214:	f7fb fd06 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 8005218:	f44f 7181 	mov.w	r1, #258	; 0x102
 800521c:	2033      	movs	r0, #51	; 0x33
 800521e:	f7fb fd01 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 8005222:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005226:	2034      	movs	r0, #52	; 0x34
 8005228:	f7fb fcfc 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 800522c:	f240 1103 	movw	r1, #259	; 0x103
 8005230:	2035      	movs	r0, #53	; 0x35
 8005232:	f7fb fcf7 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 8005236:	211f      	movs	r1, #31
 8005238:	2036      	movs	r0, #54	; 0x36
 800523a:	f7fb fcf3 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 800523e:	f240 7103 	movw	r1, #1795	; 0x703
 8005242:	2037      	movs	r0, #55	; 0x37
 8005244:	f7fb fcee 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 8005248:	2101      	movs	r1, #1
 800524a:	2038      	movs	r0, #56	; 0x38
 800524c:	f7fb fcea 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 8005250:	2104      	movs	r1, #4
 8005252:	2039      	movs	r0, #57	; 0x39
 8005254:	f7fb fce6 	bl	8000c24 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 8005258:	2115      	movs	r1, #21
 800525a:	2090      	movs	r0, #144	; 0x90
 800525c:	f7fb fce2 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 8005260:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8005264:	2010      	movs	r0, #16
 8005266:	f7fb fcdd 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 800526a:	f240 2147 	movw	r1, #583	; 0x247
 800526e:	2011      	movs	r0, #17
 8005270:	f7fb fcd8 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 8005274:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8005278:	2012      	movs	r0, #18
 800527a:	f7fb fcd3 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 800527e:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8005282:	2013      	movs	r0, #19
 8005284:	f7fb fcce 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(120);
 8005288:	2078      	movs	r0, #120	; 0x78
 800528a:	f001 fd0f 	bl	8006cac <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 800528e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005292:	2001      	movs	r0, #1
 8005294:	f7fb fcc6 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8005298:	f44f 7100 	mov.w	r1, #512	; 0x200
 800529c:	2002      	movs	r0, #2
 800529e:	f7fb fcc1 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 80052a2:	f241 0130 	movw	r1, #4144	; 0x1030
 80052a6:	2003      	movs	r0, #3
 80052a8:	f7fb fcbc 	bl	8000c24 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 80052ac:	2108      	movs	r1, #8
 80052ae:	200a      	movs	r0, #10
 80052b0:	f7fb fcb8 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80052b4:	2100      	movs	r1, #0
 80052b6:	200c      	movs	r0, #12
 80052b8:	f7fb fcb4 	bl	8000c24 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 80052bc:	2120      	movs	r1, #32
 80052be:	200e      	movs	r0, #14
 80052c0:	f7fb fcb0 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 80052c4:	2100      	movs	r1, #0
 80052c6:	200f      	movs	r0, #15
 80052c8:	f7fb fcac 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 80052cc:	2100      	movs	r1, #0
 80052ce:	2020      	movs	r0, #32
 80052d0:	f7fb fca8 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 80052d4:	2100      	movs	r1, #0
 80052d6:	2021      	movs	r0, #33	; 0x21
 80052d8:	f7fb fca4 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 80052dc:	213d      	movs	r1, #61	; 0x3d
 80052de:	202a      	movs	r0, #42	; 0x2a
 80052e0:	f7fb fca0 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(20);
 80052e4:	2014      	movs	r0, #20
 80052e6:	f001 fce1 	bl	8006cac <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 80052ea:	212d      	movs	r1, #45	; 0x2d
 80052ec:	2029      	movs	r0, #41	; 0x29
 80052ee:	f7fb fc99 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 80052f2:	2100      	movs	r1, #0
 80052f4:	2050      	movs	r0, #80	; 0x50
 80052f6:	f7fb fc95 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 80052fa:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 80052fe:	2051      	movs	r0, #81	; 0x51
 8005300:	f7fb fc90 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8005304:	2100      	movs	r1, #0
 8005306:	2052      	movs	r0, #82	; 0x52
 8005308:	f7fb fc8c 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 800530c:	f240 113f 	movw	r1, #319	; 0x13f
 8005310:	2053      	movs	r0, #83	; 0x53
 8005312:	f7fb fc87 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 8005316:	2100      	movs	r1, #0
 8005318:	2061      	movs	r0, #97	; 0x61
 800531a:	f7fb fc83 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 800531e:	2100      	movs	r1, #0
 8005320:	206a      	movs	r0, #106	; 0x6a
 8005322:	f7fb fc7f 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8005326:	f44f 7140 	mov.w	r1, #768	; 0x300
 800532a:	2092      	movs	r0, #146	; 0x92
 800532c:	f7fb fc7a 	bl	8000c24 <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 8005330:	2105      	movs	r1, #5
 8005332:	2093      	movs	r0, #147	; 0x93
 8005334:	f7fb fc76 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 8005338:	f44f 7180 	mov.w	r1, #256	; 0x100
 800533c:	2007      	movs	r0, #7
 800533e:	f7fb fc71 	bl	8000c24 <LCD_WriteReg>
 8005342:	f000 bdf3 	b.w	8005f2c <LCD_Init+0x3e34>
 8005346:	bf00      	nop
 8005348:	20000030 	.word	0x20000030
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 800534c:	4bc2      	ldr	r3, [pc, #776]	; (8005658 <LCD_Init+0x3560>)
 800534e:	889b      	ldrh	r3, [r3, #4]
 8005350:	f648 1289 	movw	r2, #35209	; 0x8989
 8005354:	4293      	cmp	r3, r2
 8005356:	f040 80bc 	bne.w	80054d2 <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 800535a:	2101      	movs	r1, #1
 800535c:	2000      	movs	r0, #0
 800535e:	f7fb fc61 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 8005362:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 8005366:	2003      	movs	r0, #3
 8005368:	f7fb fc5c 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 800536c:	2100      	movs	r1, #0
 800536e:	200c      	movs	r0, #12
 8005370:	f7fb fc58 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 8005374:	f640 010c 	movw	r1, #2060	; 0x80c
 8005378:	200d      	movs	r0, #13
 800537a:	f7fb fc53 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 800537e:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 8005382:	200e      	movs	r0, #14
 8005384:	f7fb fc4e 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 8005388:	21b0      	movs	r1, #176	; 0xb0
 800538a:	201e      	movs	r0, #30
 800538c:	f7fb fc4a 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 8005390:	f642 313f 	movw	r1, #11071	; 0x2b3f
 8005394:	2001      	movs	r0, #1
 8005396:	f7fb fc45 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 800539a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800539e:	2002      	movs	r0, #2
 80053a0:	f7fb fc40 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 80053a4:	2100      	movs	r1, #0
 80053a6:	2010      	movs	r0, #16
 80053a8:	f7fb fc3c 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 80053ac:	f246 0178 	movw	r1, #24696	; 0x6078
 80053b0:	2011      	movs	r0, #17
 80053b2:	f7fb fc37 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 80053b6:	2100      	movs	r1, #0
 80053b8:	2005      	movs	r0, #5
 80053ba:	f7fb fc33 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 80053be:	2100      	movs	r1, #0
 80053c0:	2006      	movs	r0, #6
 80053c2:	f7fb fc2f 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 80053c6:	f64e 711c 	movw	r1, #61212	; 0xef1c
 80053ca:	2016      	movs	r0, #22
 80053cc:	f7fb fc2a 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 80053d0:	2103      	movs	r1, #3
 80053d2:	2017      	movs	r0, #23
 80053d4:	f7fb fc26 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 80053d8:	f240 2133 	movw	r1, #563	; 0x233
 80053dc:	2007      	movs	r0, #7
 80053de:	f7fb fc21 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 80053e2:	2100      	movs	r1, #0
 80053e4:	200b      	movs	r0, #11
 80053e6:	f7fb fc1d 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 80053ea:	2100      	movs	r1, #0
 80053ec:	200f      	movs	r0, #15
 80053ee:	f7fb fc19 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 80053f2:	2100      	movs	r1, #0
 80053f4:	2041      	movs	r0, #65	; 0x41
 80053f6:	f7fb fc15 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 80053fa:	2100      	movs	r1, #0
 80053fc:	2042      	movs	r0, #66	; 0x42
 80053fe:	f7fb fc11 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 8005402:	2100      	movs	r1, #0
 8005404:	2048      	movs	r0, #72	; 0x48
 8005406:	f7fb fc0d 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 800540a:	f240 113f 	movw	r1, #319	; 0x13f
 800540e:	2049      	movs	r0, #73	; 0x49
 8005410:	f7fb fc08 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 8005414:	2100      	movs	r1, #0
 8005416:	204a      	movs	r0, #74	; 0x4a
 8005418:	f7fb fc04 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 800541c:	2100      	movs	r1, #0
 800541e:	204b      	movs	r0, #75	; 0x4b
 8005420:	f7fb fc00 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 8005424:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8005428:	2044      	movs	r0, #68	; 0x44
 800542a:	f7fb fbfb 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 800542e:	2100      	movs	r1, #0
 8005430:	2045      	movs	r0, #69	; 0x45
 8005432:	f7fb fbf7 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 8005436:	f240 113f 	movw	r1, #319	; 0x13f
 800543a:	2046      	movs	r0, #70	; 0x46
 800543c:	f7fb fbf2 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 8005440:	f240 7107 	movw	r1, #1799	; 0x707
 8005444:	2030      	movs	r0, #48	; 0x30
 8005446:	f7fb fbed 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 800544a:	f44f 7101 	mov.w	r1, #516	; 0x204
 800544e:	2031      	movs	r0, #49	; 0x31
 8005450:	f7fb fbe8 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 8005454:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005458:	2032      	movs	r0, #50	; 0x32
 800545a:	f7fb fbe3 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 800545e:	f240 5102 	movw	r1, #1282	; 0x502
 8005462:	2033      	movs	r0, #51	; 0x33
 8005464:	f7fb fbde 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 8005468:	f240 5107 	movw	r1, #1287	; 0x507
 800546c:	2034      	movs	r0, #52	; 0x34
 800546e:	f7fb fbd9 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8005472:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005476:	2035      	movs	r0, #53	; 0x35
 8005478:	f7fb fbd4 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 800547c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005480:	2036      	movs	r0, #54	; 0x36
 8005482:	f7fb fbcf 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 8005486:	f240 5102 	movw	r1, #1282	; 0x502
 800548a:	2037      	movs	r0, #55	; 0x37
 800548c:	f7fb fbca 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 8005490:	f240 3102 	movw	r1, #770	; 0x302
 8005494:	203a      	movs	r0, #58	; 0x3a
 8005496:	f7fb fbc5 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 800549a:	f240 3102 	movw	r1, #770	; 0x302
 800549e:	203b      	movs	r0, #59	; 0x3b
 80054a0:	f7fb fbc0 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 80054a4:	2100      	movs	r1, #0
 80054a6:	2023      	movs	r0, #35	; 0x23
 80054a8:	f7fb fbbc 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 80054ac:	2100      	movs	r1, #0
 80054ae:	2024      	movs	r0, #36	; 0x24
 80054b0:	f7fb fbb8 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 80054b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054b8:	2025      	movs	r0, #37	; 0x25
 80054ba:	f7fb fbb3 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 80054be:	2100      	movs	r1, #0
 80054c0:	204f      	movs	r0, #79	; 0x4f
 80054c2:	f7fb fbaf 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 80054c6:	2100      	movs	r1, #0
 80054c8:	204e      	movs	r0, #78	; 0x4e
 80054ca:	f7fb fbab 	bl	8000c24 <LCD_WriteReg>
 80054ce:	f000 bd2d 	b.w	8005f2c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 80054d2:	4b61      	ldr	r3, [pc, #388]	; (8005658 <LCD_Init+0x3560>)
 80054d4:	889b      	ldrh	r3, [r3, #4]
 80054d6:	f244 5231 	movw	r2, #17713	; 0x4531
 80054da:	4293      	cmp	r3, r2
 80054dc:	f040 80be 	bne.w	800565c <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 80054e0:	2101      	movs	r1, #1
 80054e2:	2000      	movs	r0, #0
 80054e4:	f7fb fb9e 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(10);
 80054e8:	200a      	movs	r0, #10
 80054ea:	f001 fbdf 	bl	8006cac <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 80054ee:	f241 6128 	movw	r1, #5672	; 0x1628
 80054f2:	2010      	movs	r0, #16
 80054f4:	f7fb fb96 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 80054f8:	210e      	movs	r1, #14
 80054fa:	2012      	movs	r0, #18
 80054fc:	f7fb fb92 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 8005500:	f640 2139 	movw	r1, #2617	; 0xa39
 8005504:	2013      	movs	r0, #19
 8005506:	f7fb fb8d 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(10);
 800550a:	200a      	movs	r0, #10
 800550c:	f001 fbce 	bl	8006cac <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 8005510:	2140      	movs	r1, #64	; 0x40
 8005512:	2011      	movs	r0, #17
 8005514:	f7fb fb86 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 8005518:	2150      	movs	r1, #80	; 0x50
 800551a:	2015      	movs	r0, #21
 800551c:	f7fb fb82 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(10);
 8005520:	200a      	movs	r0, #10
 8005522:	f001 fbc3 	bl	8006cac <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 8005526:	211e      	movs	r1, #30
 8005528:	2012      	movs	r0, #18
 800552a:	f7fb fb7b 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(10);
 800552e:	200a      	movs	r0, #10
 8005530:	f001 fbbc 	bl	8006cac <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 8005534:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 8005538:	2010      	movs	r0, #16
 800553a:	f7fb fb73 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 800553e:	f642 2139 	movw	r1, #10809	; 0x2a39
 8005542:	2013      	movs	r0, #19
 8005544:	f7fb fb6e 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(10);
 8005548:	200a      	movs	r0, #10
 800554a:	f001 fbaf 	bl	8006cac <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 800554e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005552:	2001      	movs	r0, #1
 8005554:	f7fb fb66 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8005558:	f44f 7140 	mov.w	r1, #768	; 0x300
 800555c:	2002      	movs	r0, #2
 800555e:	f7fb fb61 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 8005562:	f241 0138 	movw	r1, #4152	; 0x1038
 8005566:	2003      	movs	r0, #3
 8005568:	f7fb fb5c 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 800556c:	f240 2102 	movw	r1, #514	; 0x202
 8005570:	2008      	movs	r0, #8
 8005572:	f7fb fb57 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 8005576:	2108      	movs	r1, #8
 8005578:	200a      	movs	r0, #10
 800557a:	f7fb fb53 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 800557e:	2100      	movs	r1, #0
 8005580:	2030      	movs	r0, #48	; 0x30
 8005582:	f7fb fb4f 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8005586:	f240 4102 	movw	r1, #1026	; 0x402
 800558a:	2031      	movs	r0, #49	; 0x31
 800558c:	f7fb fb4a 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 8005590:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005594:	2032      	movs	r0, #50	; 0x32
 8005596:	f7fb fb45 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 800559a:	f240 5103 	movw	r1, #1283	; 0x503
 800559e:	2033      	movs	r0, #51	; 0x33
 80055a0:	f7fb fb40 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 80055a4:	f44f 7182 	mov.w	r1, #260	; 0x104
 80055a8:	2034      	movs	r0, #52	; 0x34
 80055aa:	f7fb fb3b 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 80055ae:	f240 3101 	movw	r1, #769	; 0x301
 80055b2:	2035      	movs	r0, #53	; 0x35
 80055b4:	f7fb fb36 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 80055b8:	f240 7107 	movw	r1, #1799	; 0x707
 80055bc:	2036      	movs	r0, #54	; 0x36
 80055be:	f7fb fb31 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 80055c2:	f240 3105 	movw	r1, #773	; 0x305
 80055c6:	2037      	movs	r0, #55	; 0x37
 80055c8:	f7fb fb2c 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 80055cc:	f44f 7102 	mov.w	r1, #520	; 0x208
 80055d0:	2038      	movs	r0, #56	; 0x38
 80055d2:	f7fb fb27 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 80055d6:	f640 710b 	movw	r1, #3851	; 0xf0b
 80055da:	2039      	movs	r0, #57	; 0x39
 80055dc:	f7fb fb22 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 80055e0:	2102      	movs	r1, #2
 80055e2:	2041      	movs	r0, #65	; 0x41
 80055e4:	f7fb fb1e 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 80055e8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80055ec:	2060      	movs	r0, #96	; 0x60
 80055ee:	f7fb fb19 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 80055f2:	2101      	movs	r1, #1
 80055f4:	2061      	movs	r0, #97	; 0x61
 80055f6:	f7fb fb15 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 80055fa:	f44f 7104 	mov.w	r1, #528	; 0x210
 80055fe:	2090      	movs	r0, #144	; 0x90
 8005600:	f7fb fb10 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 8005604:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005608:	2092      	movs	r0, #146	; 0x92
 800560a:	f7fb fb0b 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 800560e:	2104      	movs	r1, #4
 8005610:	2093      	movs	r0, #147	; 0x93
 8005612:	f7fb fb07 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 8005616:	f44f 7180 	mov.w	r1, #256	; 0x100
 800561a:	20a0      	movs	r0, #160	; 0xa0
 800561c:	f7fb fb02 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8005620:	2101      	movs	r1, #1
 8005622:	2007      	movs	r0, #7
 8005624:	f7fb fafe 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8005628:	2121      	movs	r1, #33	; 0x21
 800562a:	2007      	movs	r0, #7
 800562c:	f7fb fafa 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8005630:	2123      	movs	r1, #35	; 0x23
 8005632:	2007      	movs	r0, #7
 8005634:	f7fb faf6 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8005638:	2133      	movs	r1, #51	; 0x33
 800563a:	2007      	movs	r0, #7
 800563c:	f7fb faf2 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8005640:	f240 1133 	movw	r1, #307	; 0x133
 8005644:	2007      	movs	r0, #7
 8005646:	f7fb faed 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 800564a:	2100      	movs	r1, #0
 800564c:	20a0      	movs	r0, #160	; 0xa0
 800564e:	f7fb fae9 	bl	8000c24 <LCD_WriteReg>
 8005652:	f000 bc6b 	b.w	8005f2c <LCD_Init+0x3e34>
 8005656:	bf00      	nop
 8005658:	20000030 	.word	0x20000030
	} else if (lcddev.id == 0x4535) {
 800565c:	4b5b      	ldr	r3, [pc, #364]	; (80057cc <LCD_Init+0x36d4>)
 800565e:	889b      	ldrh	r3, [r3, #4]
 8005660:	f244 5235 	movw	r2, #17717	; 0x4535
 8005664:	4293      	cmp	r3, r2
 8005666:	f040 80b3 	bne.w	80057d0 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 800566a:	2130      	movs	r1, #48	; 0x30
 800566c:	2015      	movs	r0, #21
 800566e:	f7fb fad9 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 8005672:	2110      	movs	r1, #16
 8005674:	209a      	movs	r0, #154	; 0x9a
 8005676:	f7fb fad5 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 800567a:	2120      	movs	r1, #32
 800567c:	2011      	movs	r0, #17
 800567e:	f7fb fad1 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 8005682:	f243 4128 	movw	r1, #13352	; 0x3428
 8005686:	2010      	movs	r0, #16
 8005688:	f7fb facc 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 800568c:	2102      	movs	r1, #2
 800568e:	2012      	movs	r0, #18
 8005690:	f7fb fac8 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 8005694:	f241 0138 	movw	r1, #4152	; 0x1038
 8005698:	2013      	movs	r0, #19
 800569a:	f7fb fac3 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(40);
 800569e:	2028      	movs	r0, #40	; 0x28
 80056a0:	f001 fb04 	bl	8006cac <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 80056a4:	2112      	movs	r1, #18
 80056a6:	2012      	movs	r0, #18
 80056a8:	f7fb fabc 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(40);
 80056ac:	2028      	movs	r0, #40	; 0x28
 80056ae:	f001 fafd 	bl	8006cac <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 80056b2:	f243 4120 	movw	r1, #13344	; 0x3420
 80056b6:	2010      	movs	r0, #16
 80056b8:	f7fb fab4 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 80056bc:	f243 0138 	movw	r1, #12344	; 0x3038
 80056c0:	2013      	movs	r0, #19
 80056c2:	f7fb faaf 	bl	8000c24 <LCD_WriteReg>
		HAL_Delay(70);
 80056c6:	2046      	movs	r0, #70	; 0x46
 80056c8:	f001 faf0 	bl	8006cac <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 80056cc:	2100      	movs	r1, #0
 80056ce:	2030      	movs	r0, #48	; 0x30
 80056d0:	f7fb faa8 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 80056d4:	f240 4102 	movw	r1, #1026	; 0x402
 80056d8:	2031      	movs	r0, #49	; 0x31
 80056da:	f7fb faa3 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 80056de:	f240 3107 	movw	r1, #775	; 0x307
 80056e2:	2032      	movs	r0, #50	; 0x32
 80056e4:	f7fb fa9e 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 80056e8:	f44f 7141 	mov.w	r1, #772	; 0x304
 80056ec:	2033      	movs	r0, #51	; 0x33
 80056ee:	f7fb fa99 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 80056f2:	2104      	movs	r1, #4
 80056f4:	2034      	movs	r0, #52	; 0x34
 80056f6:	f7fb fa95 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 80056fa:	f240 4101 	movw	r1, #1025	; 0x401
 80056fe:	2035      	movs	r0, #53	; 0x35
 8005700:	f7fb fa90 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8005704:	f240 7107 	movw	r1, #1799	; 0x707
 8005708:	2036      	movs	r0, #54	; 0x36
 800570a:	f7fb fa8b 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 800570e:	f240 3105 	movw	r1, #773	; 0x305
 8005712:	2037      	movs	r0, #55	; 0x37
 8005714:	f7fb fa86 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 8005718:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800571c:	2038      	movs	r0, #56	; 0x38
 800571e:	f7fb fa81 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 8005722:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8005726:	2039      	movs	r0, #57	; 0x39
 8005728:	f7fb fa7c 	bl	8000c24 <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 800572c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005730:	2001      	movs	r0, #1
 8005732:	f7fb fa77 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8005736:	f44f 7140 	mov.w	r1, #768	; 0x300
 800573a:	2002      	movs	r0, #2
 800573c:	f7fb fa72 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 8005740:	f241 0130 	movw	r1, #4144	; 0x1030
 8005744:	2003      	movs	r0, #3
 8005746:	f7fb fa6d 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 800574a:	f640 0108 	movw	r1, #2056	; 0x808
 800574e:	2008      	movs	r0, #8
 8005750:	f7fb fa68 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 8005754:	2108      	movs	r1, #8
 8005756:	200a      	movs	r0, #10
 8005758:	f7fb fa64 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 800575c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005760:	2060      	movs	r0, #96	; 0x60
 8005762:	f7fb fa5f 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8005766:	2101      	movs	r1, #1
 8005768:	2061      	movs	r0, #97	; 0x61
 800576a:	f7fb fa5b 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 800576e:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8005772:	2090      	movs	r0, #144	; 0x90
 8005774:	f7fb fa56 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 8005778:	f44f 7180 	mov.w	r1, #256	; 0x100
 800577c:	2092      	movs	r0, #146	; 0x92
 800577e:	f7fb fa51 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 8005782:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005786:	2093      	movs	r0, #147	; 0x93
 8005788:	f7fb fa4c 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 800578c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005790:	20a0      	movs	r0, #160	; 0xa0
 8005792:	f7fb fa47 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 8005796:	2110      	movs	r1, #16
 8005798:	20a3      	movs	r0, #163	; 0xa3
 800579a:	f7fb fa43 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 800579e:	2101      	movs	r1, #1
 80057a0:	2007      	movs	r0, #7
 80057a2:	f7fb fa3f 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 80057a6:	2121      	movs	r1, #33	; 0x21
 80057a8:	2007      	movs	r0, #7
 80057aa:	f7fb fa3b 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 80057ae:	2123      	movs	r1, #35	; 0x23
 80057b0:	2007      	movs	r0, #7
 80057b2:	f7fb fa37 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 80057b6:	2133      	movs	r1, #51	; 0x33
 80057b8:	2007      	movs	r0, #7
 80057ba:	f7fb fa33 	bl	8000c24 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 80057be:	f240 1133 	movw	r1, #307	; 0x133
 80057c2:	2007      	movs	r0, #7
 80057c4:	f7fb fa2e 	bl	8000c24 <LCD_WriteReg>
 80057c8:	e3b0      	b.n	8005f2c <LCD_Init+0x3e34>
 80057ca:	bf00      	nop
 80057cc:	20000030 	.word	0x20000030
	} else if (lcddev.id == 0X1963) {
 80057d0:	4ba8      	ldr	r3, [pc, #672]	; (8005a74 <LCD_Init+0x397c>)
 80057d2:	889b      	ldrh	r3, [r3, #4]
 80057d4:	f641 1263 	movw	r2, #6499	; 0x1963
 80057d8:	4293      	cmp	r3, r2
 80057da:	f040 83a7 	bne.w	8005f2c <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 80057de:	20e2      	movs	r0, #226	; 0xe2
 80057e0:	f7fb f994 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 80057e4:	4ba4      	ldr	r3, [pc, #656]	; (8005a78 <LCD_Init+0x3980>)
 80057e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057ea:	611a      	str	r2, [r3, #16]
 80057ec:	4ba2      	ldr	r3, [pc, #648]	; (8005a78 <LCD_Init+0x3980>)
 80057ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057f2:	615a      	str	r2, [r3, #20]
 80057f4:	4ba1      	ldr	r3, [pc, #644]	; (8005a7c <LCD_Init+0x3984>)
 80057f6:	221d      	movs	r2, #29
 80057f8:	60da      	str	r2, [r3, #12]
 80057fa:	4b9f      	ldr	r3, [pc, #636]	; (8005a78 <LCD_Init+0x3980>)
 80057fc:	2280      	movs	r2, #128	; 0x80
 80057fe:	615a      	str	r2, [r3, #20]
 8005800:	4b9d      	ldr	r3, [pc, #628]	; (8005a78 <LCD_Init+0x3980>)
 8005802:	2280      	movs	r2, #128	; 0x80
 8005804:	611a      	str	r2, [r3, #16]
 8005806:	4b9c      	ldr	r3, [pc, #624]	; (8005a78 <LCD_Init+0x3980>)
 8005808:	f44f 7200 	mov.w	r2, #512	; 0x200
 800580c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 800580e:	4b9a      	ldr	r3, [pc, #616]	; (8005a78 <LCD_Init+0x3980>)
 8005810:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005814:	611a      	str	r2, [r3, #16]
 8005816:	4b98      	ldr	r3, [pc, #608]	; (8005a78 <LCD_Init+0x3980>)
 8005818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800581c:	615a      	str	r2, [r3, #20]
 800581e:	4b97      	ldr	r3, [pc, #604]	; (8005a7c <LCD_Init+0x3984>)
 8005820:	2202      	movs	r2, #2
 8005822:	60da      	str	r2, [r3, #12]
 8005824:	4b94      	ldr	r3, [pc, #592]	; (8005a78 <LCD_Init+0x3980>)
 8005826:	2280      	movs	r2, #128	; 0x80
 8005828:	615a      	str	r2, [r3, #20]
 800582a:	4b93      	ldr	r3, [pc, #588]	; (8005a78 <LCD_Init+0x3980>)
 800582c:	2280      	movs	r2, #128	; 0x80
 800582e:	611a      	str	r2, [r3, #16]
 8005830:	4b91      	ldr	r3, [pc, #580]	; (8005a78 <LCD_Init+0x3980>)
 8005832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005836:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 8005838:	4b8f      	ldr	r3, [pc, #572]	; (8005a78 <LCD_Init+0x3980>)
 800583a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800583e:	611a      	str	r2, [r3, #16]
 8005840:	4b8d      	ldr	r3, [pc, #564]	; (8005a78 <LCD_Init+0x3980>)
 8005842:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005846:	615a      	str	r2, [r3, #20]
 8005848:	4b8c      	ldr	r3, [pc, #560]	; (8005a7c <LCD_Init+0x3984>)
 800584a:	2204      	movs	r2, #4
 800584c:	60da      	str	r2, [r3, #12]
 800584e:	4b8a      	ldr	r3, [pc, #552]	; (8005a78 <LCD_Init+0x3980>)
 8005850:	2280      	movs	r2, #128	; 0x80
 8005852:	615a      	str	r2, [r3, #20]
 8005854:	4b88      	ldr	r3, [pc, #544]	; (8005a78 <LCD_Init+0x3980>)
 8005856:	2280      	movs	r2, #128	; 0x80
 8005858:	611a      	str	r2, [r3, #16]
 800585a:	4b87      	ldr	r3, [pc, #540]	; (8005a78 <LCD_Init+0x3980>)
 800585c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005860:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 8005862:	2001      	movs	r0, #1
 8005864:	f001 fa22 	bl	8006cac <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 8005868:	20e0      	movs	r0, #224	; 0xe0
 800586a:	f7fb f94f 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 800586e:	4b82      	ldr	r3, [pc, #520]	; (8005a78 <LCD_Init+0x3980>)
 8005870:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005874:	611a      	str	r2, [r3, #16]
 8005876:	4b80      	ldr	r3, [pc, #512]	; (8005a78 <LCD_Init+0x3980>)
 8005878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800587c:	615a      	str	r2, [r3, #20]
 800587e:	4b7f      	ldr	r3, [pc, #508]	; (8005a7c <LCD_Init+0x3984>)
 8005880:	2201      	movs	r2, #1
 8005882:	60da      	str	r2, [r3, #12]
 8005884:	4b7c      	ldr	r3, [pc, #496]	; (8005a78 <LCD_Init+0x3980>)
 8005886:	2280      	movs	r2, #128	; 0x80
 8005888:	615a      	str	r2, [r3, #20]
 800588a:	4b7b      	ldr	r3, [pc, #492]	; (8005a78 <LCD_Init+0x3980>)
 800588c:	2280      	movs	r2, #128	; 0x80
 800588e:	611a      	str	r2, [r3, #16]
 8005890:	4b79      	ldr	r3, [pc, #484]	; (8005a78 <LCD_Init+0x3980>)
 8005892:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005896:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 8005898:	200a      	movs	r0, #10
 800589a:	f001 fa07 	bl	8006cac <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 800589e:	20e0      	movs	r0, #224	; 0xe0
 80058a0:	f7fb f934 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 80058a4:	4b74      	ldr	r3, [pc, #464]	; (8005a78 <LCD_Init+0x3980>)
 80058a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058aa:	611a      	str	r2, [r3, #16]
 80058ac:	4b72      	ldr	r3, [pc, #456]	; (8005a78 <LCD_Init+0x3980>)
 80058ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058b2:	615a      	str	r2, [r3, #20]
 80058b4:	4b71      	ldr	r3, [pc, #452]	; (8005a7c <LCD_Init+0x3984>)
 80058b6:	2203      	movs	r2, #3
 80058b8:	60da      	str	r2, [r3, #12]
 80058ba:	4b6f      	ldr	r3, [pc, #444]	; (8005a78 <LCD_Init+0x3980>)
 80058bc:	2280      	movs	r2, #128	; 0x80
 80058be:	615a      	str	r2, [r3, #20]
 80058c0:	4b6d      	ldr	r3, [pc, #436]	; (8005a78 <LCD_Init+0x3980>)
 80058c2:	2280      	movs	r2, #128	; 0x80
 80058c4:	611a      	str	r2, [r3, #16]
 80058c6:	4b6c      	ldr	r3, [pc, #432]	; (8005a78 <LCD_Init+0x3980>)
 80058c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058cc:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 80058ce:	200c      	movs	r0, #12
 80058d0:	f001 f9ec 	bl	8006cac <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 80058d4:	2001      	movs	r0, #1
 80058d6:	f7fb f919 	bl	8000b0c <LCD_WR_REG>
		HAL_Delay(10);
 80058da:	200a      	movs	r0, #10
 80058dc:	f001 f9e6 	bl	8006cac <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 80058e0:	20e6      	movs	r0, #230	; 0xe6
 80058e2:	f7fb f913 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 80058e6:	4b64      	ldr	r3, [pc, #400]	; (8005a78 <LCD_Init+0x3980>)
 80058e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058ec:	611a      	str	r2, [r3, #16]
 80058ee:	4b62      	ldr	r3, [pc, #392]	; (8005a78 <LCD_Init+0x3980>)
 80058f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058f4:	615a      	str	r2, [r3, #20]
 80058f6:	4b61      	ldr	r3, [pc, #388]	; (8005a7c <LCD_Init+0x3984>)
 80058f8:	222f      	movs	r2, #47	; 0x2f
 80058fa:	60da      	str	r2, [r3, #12]
 80058fc:	4b5e      	ldr	r3, [pc, #376]	; (8005a78 <LCD_Init+0x3980>)
 80058fe:	2280      	movs	r2, #128	; 0x80
 8005900:	615a      	str	r2, [r3, #20]
 8005902:	4b5d      	ldr	r3, [pc, #372]	; (8005a78 <LCD_Init+0x3980>)
 8005904:	2280      	movs	r2, #128	; 0x80
 8005906:	611a      	str	r2, [r3, #16]
 8005908:	4b5b      	ldr	r3, [pc, #364]	; (8005a78 <LCD_Init+0x3980>)
 800590a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800590e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8005910:	4b59      	ldr	r3, [pc, #356]	; (8005a78 <LCD_Init+0x3980>)
 8005912:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005916:	611a      	str	r2, [r3, #16]
 8005918:	4b57      	ldr	r3, [pc, #348]	; (8005a78 <LCD_Init+0x3980>)
 800591a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800591e:	615a      	str	r2, [r3, #20]
 8005920:	4b56      	ldr	r3, [pc, #344]	; (8005a7c <LCD_Init+0x3984>)
 8005922:	22ff      	movs	r2, #255	; 0xff
 8005924:	60da      	str	r2, [r3, #12]
 8005926:	4b54      	ldr	r3, [pc, #336]	; (8005a78 <LCD_Init+0x3980>)
 8005928:	2280      	movs	r2, #128	; 0x80
 800592a:	615a      	str	r2, [r3, #20]
 800592c:	4b52      	ldr	r3, [pc, #328]	; (8005a78 <LCD_Init+0x3980>)
 800592e:	2280      	movs	r2, #128	; 0x80
 8005930:	611a      	str	r2, [r3, #16]
 8005932:	4b51      	ldr	r3, [pc, #324]	; (8005a78 <LCD_Init+0x3980>)
 8005934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005938:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 800593a:	4b4f      	ldr	r3, [pc, #316]	; (8005a78 <LCD_Init+0x3980>)
 800593c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005940:	611a      	str	r2, [r3, #16]
 8005942:	4b4d      	ldr	r3, [pc, #308]	; (8005a78 <LCD_Init+0x3980>)
 8005944:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005948:	615a      	str	r2, [r3, #20]
 800594a:	4b4c      	ldr	r3, [pc, #304]	; (8005a7c <LCD_Init+0x3984>)
 800594c:	22ff      	movs	r2, #255	; 0xff
 800594e:	60da      	str	r2, [r3, #12]
 8005950:	4b49      	ldr	r3, [pc, #292]	; (8005a78 <LCD_Init+0x3980>)
 8005952:	2280      	movs	r2, #128	; 0x80
 8005954:	615a      	str	r2, [r3, #20]
 8005956:	4b48      	ldr	r3, [pc, #288]	; (8005a78 <LCD_Init+0x3980>)
 8005958:	2280      	movs	r2, #128	; 0x80
 800595a:	611a      	str	r2, [r3, #16]
 800595c:	4b46      	ldr	r3, [pc, #280]	; (8005a78 <LCD_Init+0x3980>)
 800595e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005962:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 8005964:	20b0      	movs	r0, #176	; 0xb0
 8005966:	f7fb f8d1 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 800596a:	4b43      	ldr	r3, [pc, #268]	; (8005a78 <LCD_Init+0x3980>)
 800596c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005970:	611a      	str	r2, [r3, #16]
 8005972:	4b41      	ldr	r3, [pc, #260]	; (8005a78 <LCD_Init+0x3980>)
 8005974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005978:	615a      	str	r2, [r3, #20]
 800597a:	4b40      	ldr	r3, [pc, #256]	; (8005a7c <LCD_Init+0x3984>)
 800597c:	2220      	movs	r2, #32
 800597e:	60da      	str	r2, [r3, #12]
 8005980:	4b3d      	ldr	r3, [pc, #244]	; (8005a78 <LCD_Init+0x3980>)
 8005982:	2280      	movs	r2, #128	; 0x80
 8005984:	615a      	str	r2, [r3, #20]
 8005986:	4b3c      	ldr	r3, [pc, #240]	; (8005a78 <LCD_Init+0x3980>)
 8005988:	2280      	movs	r2, #128	; 0x80
 800598a:	611a      	str	r2, [r3, #16]
 800598c:	4b3a      	ldr	r3, [pc, #232]	; (8005a78 <LCD_Init+0x3980>)
 800598e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005992:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 8005994:	4b38      	ldr	r3, [pc, #224]	; (8005a78 <LCD_Init+0x3980>)
 8005996:	f44f 7280 	mov.w	r2, #256	; 0x100
 800599a:	611a      	str	r2, [r3, #16]
 800599c:	4b36      	ldr	r3, [pc, #216]	; (8005a78 <LCD_Init+0x3980>)
 800599e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059a2:	615a      	str	r2, [r3, #20]
 80059a4:	4b35      	ldr	r3, [pc, #212]	; (8005a7c <LCD_Init+0x3984>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	60da      	str	r2, [r3, #12]
 80059aa:	4b33      	ldr	r3, [pc, #204]	; (8005a78 <LCD_Init+0x3980>)
 80059ac:	2280      	movs	r2, #128	; 0x80
 80059ae:	615a      	str	r2, [r3, #20]
 80059b0:	4b31      	ldr	r3, [pc, #196]	; (8005a78 <LCD_Init+0x3980>)
 80059b2:	2280      	movs	r2, #128	; 0x80
 80059b4:	611a      	str	r2, [r3, #16]
 80059b6:	4b30      	ldr	r3, [pc, #192]	; (8005a78 <LCD_Init+0x3980>)
 80059b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059bc:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 80059be:	4b2e      	ldr	r3, [pc, #184]	; (8005a78 <LCD_Init+0x3980>)
 80059c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059c4:	611a      	str	r2, [r3, #16]
 80059c6:	4b2c      	ldr	r3, [pc, #176]	; (8005a78 <LCD_Init+0x3980>)
 80059c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059cc:	615a      	str	r2, [r3, #20]
 80059ce:	4b2b      	ldr	r3, [pc, #172]	; (8005a7c <LCD_Init+0x3984>)
 80059d0:	2203      	movs	r2, #3
 80059d2:	60da      	str	r2, [r3, #12]
 80059d4:	4b28      	ldr	r3, [pc, #160]	; (8005a78 <LCD_Init+0x3980>)
 80059d6:	2280      	movs	r2, #128	; 0x80
 80059d8:	615a      	str	r2, [r3, #20]
 80059da:	4b27      	ldr	r3, [pc, #156]	; (8005a78 <LCD_Init+0x3980>)
 80059dc:	2280      	movs	r2, #128	; 0x80
 80059de:	611a      	str	r2, [r3, #16]
 80059e0:	4b25      	ldr	r3, [pc, #148]	; (8005a78 <LCD_Init+0x3980>)
 80059e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059e6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 80059e8:	4b23      	ldr	r3, [pc, #140]	; (8005a78 <LCD_Init+0x3980>)
 80059ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059ee:	611a      	str	r2, [r3, #16]
 80059f0:	4b21      	ldr	r3, [pc, #132]	; (8005a78 <LCD_Init+0x3980>)
 80059f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059f6:	615a      	str	r2, [r3, #20]
 80059f8:	4b20      	ldr	r3, [pc, #128]	; (8005a7c <LCD_Init+0x3984>)
 80059fa:	f240 321f 	movw	r2, #799	; 0x31f
 80059fe:	60da      	str	r2, [r3, #12]
 8005a00:	4b1d      	ldr	r3, [pc, #116]	; (8005a78 <LCD_Init+0x3980>)
 8005a02:	2280      	movs	r2, #128	; 0x80
 8005a04:	615a      	str	r2, [r3, #20]
 8005a06:	4b1c      	ldr	r3, [pc, #112]	; (8005a78 <LCD_Init+0x3980>)
 8005a08:	2280      	movs	r2, #128	; 0x80
 8005a0a:	611a      	str	r2, [r3, #16]
 8005a0c:	4b1a      	ldr	r3, [pc, #104]	; (8005a78 <LCD_Init+0x3980>)
 8005a0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a12:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 8005a14:	4b18      	ldr	r3, [pc, #96]	; (8005a78 <LCD_Init+0x3980>)
 8005a16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a1a:	611a      	str	r2, [r3, #16]
 8005a1c:	4b16      	ldr	r3, [pc, #88]	; (8005a78 <LCD_Init+0x3980>)
 8005a1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a22:	615a      	str	r2, [r3, #20]
 8005a24:	4b15      	ldr	r3, [pc, #84]	; (8005a7c <LCD_Init+0x3984>)
 8005a26:	2201      	movs	r2, #1
 8005a28:	60da      	str	r2, [r3, #12]
 8005a2a:	4b13      	ldr	r3, [pc, #76]	; (8005a78 <LCD_Init+0x3980>)
 8005a2c:	2280      	movs	r2, #128	; 0x80
 8005a2e:	615a      	str	r2, [r3, #20]
 8005a30:	4b11      	ldr	r3, [pc, #68]	; (8005a78 <LCD_Init+0x3980>)
 8005a32:	2280      	movs	r2, #128	; 0x80
 8005a34:	611a      	str	r2, [r3, #16]
 8005a36:	4b10      	ldr	r3, [pc, #64]	; (8005a78 <LCD_Init+0x3980>)
 8005a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a3c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 8005a3e:	4b0e      	ldr	r3, [pc, #56]	; (8005a78 <LCD_Init+0x3980>)
 8005a40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a44:	611a      	str	r2, [r3, #16]
 8005a46:	4b0c      	ldr	r3, [pc, #48]	; (8005a78 <LCD_Init+0x3980>)
 8005a48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a4c:	615a      	str	r2, [r3, #20]
 8005a4e:	4b0b      	ldr	r3, [pc, #44]	; (8005a7c <LCD_Init+0x3984>)
 8005a50:	f240 12df 	movw	r2, #479	; 0x1df
 8005a54:	60da      	str	r2, [r3, #12]
 8005a56:	4b08      	ldr	r3, [pc, #32]	; (8005a78 <LCD_Init+0x3980>)
 8005a58:	2280      	movs	r2, #128	; 0x80
 8005a5a:	615a      	str	r2, [r3, #20]
 8005a5c:	4b06      	ldr	r3, [pc, #24]	; (8005a78 <LCD_Init+0x3980>)
 8005a5e:	2280      	movs	r2, #128	; 0x80
 8005a60:	611a      	str	r2, [r3, #16]
 8005a62:	4b05      	ldr	r3, [pc, #20]	; (8005a78 <LCD_Init+0x3980>)
 8005a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a68:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 8005a6a:	4b03      	ldr	r3, [pc, #12]	; (8005a78 <LCD_Init+0x3980>)
 8005a6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a70:	e006      	b.n	8005a80 <LCD_Init+0x3988>
 8005a72:	bf00      	nop
 8005a74:	20000030 	.word	0x20000030
 8005a78:	40011000 	.word	0x40011000
 8005a7c:	40010c00 	.word	0x40010c00
 8005a80:	611a      	str	r2, [r3, #16]
 8005a82:	4ba3      	ldr	r3, [pc, #652]	; (8005d10 <LCD_Init+0x3c18>)
 8005a84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a88:	615a      	str	r2, [r3, #20]
 8005a8a:	4ba2      	ldr	r3, [pc, #648]	; (8005d14 <LCD_Init+0x3c1c>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	60da      	str	r2, [r3, #12]
 8005a90:	4b9f      	ldr	r3, [pc, #636]	; (8005d10 <LCD_Init+0x3c18>)
 8005a92:	2280      	movs	r2, #128	; 0x80
 8005a94:	615a      	str	r2, [r3, #20]
 8005a96:	4b9e      	ldr	r3, [pc, #632]	; (8005d10 <LCD_Init+0x3c18>)
 8005a98:	2280      	movs	r2, #128	; 0x80
 8005a9a:	611a      	str	r2, [r3, #16]
 8005a9c:	4b9c      	ldr	r3, [pc, #624]	; (8005d10 <LCD_Init+0x3c18>)
 8005a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aa2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 8005aa4:	20b4      	movs	r0, #180	; 0xb4
 8005aa6:	f7fb f831 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 8005aaa:	4b99      	ldr	r3, [pc, #612]	; (8005d10 <LCD_Init+0x3c18>)
 8005aac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ab0:	611a      	str	r2, [r3, #16]
 8005ab2:	4b97      	ldr	r3, [pc, #604]	; (8005d10 <LCD_Init+0x3c18>)
 8005ab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ab8:	615a      	str	r2, [r3, #20]
 8005aba:	4b96      	ldr	r3, [pc, #600]	; (8005d14 <LCD_Init+0x3c1c>)
 8005abc:	2204      	movs	r2, #4
 8005abe:	60da      	str	r2, [r3, #12]
 8005ac0:	4b93      	ldr	r3, [pc, #588]	; (8005d10 <LCD_Init+0x3c18>)
 8005ac2:	2280      	movs	r2, #128	; 0x80
 8005ac4:	615a      	str	r2, [r3, #20]
 8005ac6:	4b92      	ldr	r3, [pc, #584]	; (8005d10 <LCD_Init+0x3c18>)
 8005ac8:	2280      	movs	r2, #128	; 0x80
 8005aca:	611a      	str	r2, [r3, #16]
 8005acc:	4b90      	ldr	r3, [pc, #576]	; (8005d10 <LCD_Init+0x3c18>)
 8005ace:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ad2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 8005ad4:	4b8e      	ldr	r3, [pc, #568]	; (8005d10 <LCD_Init+0x3c18>)
 8005ad6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ada:	611a      	str	r2, [r3, #16]
 8005adc:	4b8c      	ldr	r3, [pc, #560]	; (8005d10 <LCD_Init+0x3c18>)
 8005ade:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ae2:	615a      	str	r2, [r3, #20]
 8005ae4:	4b8b      	ldr	r3, [pc, #556]	; (8005d14 <LCD_Init+0x3c1c>)
 8005ae6:	f240 421f 	movw	r2, #1055	; 0x41f
 8005aea:	60da      	str	r2, [r3, #12]
 8005aec:	4b88      	ldr	r3, [pc, #544]	; (8005d10 <LCD_Init+0x3c18>)
 8005aee:	2280      	movs	r2, #128	; 0x80
 8005af0:	615a      	str	r2, [r3, #20]
 8005af2:	4b87      	ldr	r3, [pc, #540]	; (8005d10 <LCD_Init+0x3c18>)
 8005af4:	2280      	movs	r2, #128	; 0x80
 8005af6:	611a      	str	r2, [r3, #16]
 8005af8:	4b85      	ldr	r3, [pc, #532]	; (8005d10 <LCD_Init+0x3c18>)
 8005afa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005afe:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 8005b00:	4b83      	ldr	r3, [pc, #524]	; (8005d10 <LCD_Init+0x3c18>)
 8005b02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b06:	611a      	str	r2, [r3, #16]
 8005b08:	4b81      	ldr	r3, [pc, #516]	; (8005d10 <LCD_Init+0x3c18>)
 8005b0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b0e:	615a      	str	r2, [r3, #20]
 8005b10:	4b80      	ldr	r3, [pc, #512]	; (8005d14 <LCD_Init+0x3c1c>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	60da      	str	r2, [r3, #12]
 8005b16:	4b7e      	ldr	r3, [pc, #504]	; (8005d10 <LCD_Init+0x3c18>)
 8005b18:	2280      	movs	r2, #128	; 0x80
 8005b1a:	615a      	str	r2, [r3, #20]
 8005b1c:	4b7c      	ldr	r3, [pc, #496]	; (8005d10 <LCD_Init+0x3c18>)
 8005b1e:	2280      	movs	r2, #128	; 0x80
 8005b20:	611a      	str	r2, [r3, #16]
 8005b22:	4b7b      	ldr	r3, [pc, #492]	; (8005d10 <LCD_Init+0x3c18>)
 8005b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b28:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 8005b2a:	4b79      	ldr	r3, [pc, #484]	; (8005d10 <LCD_Init+0x3c18>)
 8005b2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b30:	611a      	str	r2, [r3, #16]
 8005b32:	4b77      	ldr	r3, [pc, #476]	; (8005d10 <LCD_Init+0x3c18>)
 8005b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b38:	615a      	str	r2, [r3, #20]
 8005b3a:	4b76      	ldr	r3, [pc, #472]	; (8005d14 <LCD_Init+0x3c1c>)
 8005b3c:	222e      	movs	r2, #46	; 0x2e
 8005b3e:	60da      	str	r2, [r3, #12]
 8005b40:	4b73      	ldr	r3, [pc, #460]	; (8005d10 <LCD_Init+0x3c18>)
 8005b42:	2280      	movs	r2, #128	; 0x80
 8005b44:	615a      	str	r2, [r3, #20]
 8005b46:	4b72      	ldr	r3, [pc, #456]	; (8005d10 <LCD_Init+0x3c18>)
 8005b48:	2280      	movs	r2, #128	; 0x80
 8005b4a:	611a      	str	r2, [r3, #16]
 8005b4c:	4b70      	ldr	r3, [pc, #448]	; (8005d10 <LCD_Init+0x3c18>)
 8005b4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b52:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8005b54:	4b6e      	ldr	r3, [pc, #440]	; (8005d10 <LCD_Init+0x3c18>)
 8005b56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b5a:	611a      	str	r2, [r3, #16]
 8005b5c:	4b6c      	ldr	r3, [pc, #432]	; (8005d10 <LCD_Init+0x3c18>)
 8005b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b62:	615a      	str	r2, [r3, #20]
 8005b64:	4b6b      	ldr	r3, [pc, #428]	; (8005d14 <LCD_Init+0x3c1c>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	60da      	str	r2, [r3, #12]
 8005b6a:	4b69      	ldr	r3, [pc, #420]	; (8005d10 <LCD_Init+0x3c18>)
 8005b6c:	2280      	movs	r2, #128	; 0x80
 8005b6e:	615a      	str	r2, [r3, #20]
 8005b70:	4b67      	ldr	r3, [pc, #412]	; (8005d10 <LCD_Init+0x3c18>)
 8005b72:	2280      	movs	r2, #128	; 0x80
 8005b74:	611a      	str	r2, [r3, #16]
 8005b76:	4b66      	ldr	r3, [pc, #408]	; (8005d10 <LCD_Init+0x3c18>)
 8005b78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b7c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005b7e:	4b64      	ldr	r3, [pc, #400]	; (8005d10 <LCD_Init+0x3c18>)
 8005b80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b84:	611a      	str	r2, [r3, #16]
 8005b86:	4b62      	ldr	r3, [pc, #392]	; (8005d10 <LCD_Init+0x3c18>)
 8005b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b8c:	615a      	str	r2, [r3, #20]
 8005b8e:	4b61      	ldr	r3, [pc, #388]	; (8005d14 <LCD_Init+0x3c1c>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	60da      	str	r2, [r3, #12]
 8005b94:	4b5e      	ldr	r3, [pc, #376]	; (8005d10 <LCD_Init+0x3c18>)
 8005b96:	2280      	movs	r2, #128	; 0x80
 8005b98:	615a      	str	r2, [r3, #20]
 8005b9a:	4b5d      	ldr	r3, [pc, #372]	; (8005d10 <LCD_Init+0x3c18>)
 8005b9c:	2280      	movs	r2, #128	; 0x80
 8005b9e:	611a      	str	r2, [r3, #16]
 8005ba0:	4b5b      	ldr	r3, [pc, #364]	; (8005d10 <LCD_Init+0x3c18>)
 8005ba2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ba6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005ba8:	4b59      	ldr	r3, [pc, #356]	; (8005d10 <LCD_Init+0x3c18>)
 8005baa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bae:	611a      	str	r2, [r3, #16]
 8005bb0:	4b57      	ldr	r3, [pc, #348]	; (8005d10 <LCD_Init+0x3c18>)
 8005bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bb6:	615a      	str	r2, [r3, #20]
 8005bb8:	4b56      	ldr	r3, [pc, #344]	; (8005d14 <LCD_Init+0x3c1c>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	60da      	str	r2, [r3, #12]
 8005bbe:	4b54      	ldr	r3, [pc, #336]	; (8005d10 <LCD_Init+0x3c18>)
 8005bc0:	2280      	movs	r2, #128	; 0x80
 8005bc2:	615a      	str	r2, [r3, #20]
 8005bc4:	4b52      	ldr	r3, [pc, #328]	; (8005d10 <LCD_Init+0x3c18>)
 8005bc6:	2280      	movs	r2, #128	; 0x80
 8005bc8:	611a      	str	r2, [r3, #16]
 8005bca:	4b51      	ldr	r3, [pc, #324]	; (8005d10 <LCD_Init+0x3c18>)
 8005bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bd0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005bd2:	4b4f      	ldr	r3, [pc, #316]	; (8005d10 <LCD_Init+0x3c18>)
 8005bd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bd8:	611a      	str	r2, [r3, #16]
 8005bda:	4b4d      	ldr	r3, [pc, #308]	; (8005d10 <LCD_Init+0x3c18>)
 8005bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005be0:	615a      	str	r2, [r3, #20]
 8005be2:	4b4c      	ldr	r3, [pc, #304]	; (8005d14 <LCD_Init+0x3c1c>)
 8005be4:	2200      	movs	r2, #0
 8005be6:	60da      	str	r2, [r3, #12]
 8005be8:	4b49      	ldr	r3, [pc, #292]	; (8005d10 <LCD_Init+0x3c18>)
 8005bea:	2280      	movs	r2, #128	; 0x80
 8005bec:	615a      	str	r2, [r3, #20]
 8005bee:	4b48      	ldr	r3, [pc, #288]	; (8005d10 <LCD_Init+0x3c18>)
 8005bf0:	2280      	movs	r2, #128	; 0x80
 8005bf2:	611a      	str	r2, [r3, #16]
 8005bf4:	4b46      	ldr	r3, [pc, #280]	; (8005d10 <LCD_Init+0x3c18>)
 8005bf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bfa:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 8005bfc:	20b6      	movs	r0, #182	; 0xb6
 8005bfe:	f7fa ff85 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8005c02:	4b43      	ldr	r3, [pc, #268]	; (8005d10 <LCD_Init+0x3c18>)
 8005c04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c08:	611a      	str	r2, [r3, #16]
 8005c0a:	4b41      	ldr	r3, [pc, #260]	; (8005d10 <LCD_Init+0x3c18>)
 8005c0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c10:	615a      	str	r2, [r3, #20]
 8005c12:	4b40      	ldr	r3, [pc, #256]	; (8005d14 <LCD_Init+0x3c1c>)
 8005c14:	2202      	movs	r2, #2
 8005c16:	60da      	str	r2, [r3, #12]
 8005c18:	4b3d      	ldr	r3, [pc, #244]	; (8005d10 <LCD_Init+0x3c18>)
 8005c1a:	2280      	movs	r2, #128	; 0x80
 8005c1c:	615a      	str	r2, [r3, #20]
 8005c1e:	4b3c      	ldr	r3, [pc, #240]	; (8005d10 <LCD_Init+0x3c18>)
 8005c20:	2280      	movs	r2, #128	; 0x80
 8005c22:	611a      	str	r2, [r3, #16]
 8005c24:	4b3a      	ldr	r3, [pc, #232]	; (8005d10 <LCD_Init+0x3c18>)
 8005c26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c2a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 8005c2c:	4b38      	ldr	r3, [pc, #224]	; (8005d10 <LCD_Init+0x3c18>)
 8005c2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c32:	611a      	str	r2, [r3, #16]
 8005c34:	4b36      	ldr	r3, [pc, #216]	; (8005d10 <LCD_Init+0x3c18>)
 8005c36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c3a:	615a      	str	r2, [r3, #20]
 8005c3c:	4b35      	ldr	r3, [pc, #212]	; (8005d14 <LCD_Init+0x3c1c>)
 8005c3e:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8005c42:	60da      	str	r2, [r3, #12]
 8005c44:	4b32      	ldr	r3, [pc, #200]	; (8005d10 <LCD_Init+0x3c18>)
 8005c46:	2280      	movs	r2, #128	; 0x80
 8005c48:	615a      	str	r2, [r3, #20]
 8005c4a:	4b31      	ldr	r3, [pc, #196]	; (8005d10 <LCD_Init+0x3c18>)
 8005c4c:	2280      	movs	r2, #128	; 0x80
 8005c4e:	611a      	str	r2, [r3, #16]
 8005c50:	4b2f      	ldr	r3, [pc, #188]	; (8005d10 <LCD_Init+0x3c18>)
 8005c52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c56:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 8005c58:	4b2d      	ldr	r3, [pc, #180]	; (8005d10 <LCD_Init+0x3c18>)
 8005c5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c5e:	611a      	str	r2, [r3, #16]
 8005c60:	4b2b      	ldr	r3, [pc, #172]	; (8005d10 <LCD_Init+0x3c18>)
 8005c62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c66:	615a      	str	r2, [r3, #20]
 8005c68:	4b2a      	ldr	r3, [pc, #168]	; (8005d14 <LCD_Init+0x3c1c>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	60da      	str	r2, [r3, #12]
 8005c6e:	4b28      	ldr	r3, [pc, #160]	; (8005d10 <LCD_Init+0x3c18>)
 8005c70:	2280      	movs	r2, #128	; 0x80
 8005c72:	615a      	str	r2, [r3, #20]
 8005c74:	4b26      	ldr	r3, [pc, #152]	; (8005d10 <LCD_Init+0x3c18>)
 8005c76:	2280      	movs	r2, #128	; 0x80
 8005c78:	611a      	str	r2, [r3, #16]
 8005c7a:	4b25      	ldr	r3, [pc, #148]	; (8005d10 <LCD_Init+0x3c18>)
 8005c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c80:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 8005c82:	4b23      	ldr	r3, [pc, #140]	; (8005d10 <LCD_Init+0x3c18>)
 8005c84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c88:	611a      	str	r2, [r3, #16]
 8005c8a:	4b21      	ldr	r3, [pc, #132]	; (8005d10 <LCD_Init+0x3c18>)
 8005c8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c90:	615a      	str	r2, [r3, #20]
 8005c92:	4b20      	ldr	r3, [pc, #128]	; (8005d14 <LCD_Init+0x3c1c>)
 8005c94:	2217      	movs	r2, #23
 8005c96:	60da      	str	r2, [r3, #12]
 8005c98:	4b1d      	ldr	r3, [pc, #116]	; (8005d10 <LCD_Init+0x3c18>)
 8005c9a:	2280      	movs	r2, #128	; 0x80
 8005c9c:	615a      	str	r2, [r3, #20]
 8005c9e:	4b1c      	ldr	r3, [pc, #112]	; (8005d10 <LCD_Init+0x3c18>)
 8005ca0:	2280      	movs	r2, #128	; 0x80
 8005ca2:	611a      	str	r2, [r3, #16]
 8005ca4:	4b1a      	ldr	r3, [pc, #104]	; (8005d10 <LCD_Init+0x3c18>)
 8005ca6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005caa:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 8005cac:	4b18      	ldr	r3, [pc, #96]	; (8005d10 <LCD_Init+0x3c18>)
 8005cae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cb2:	611a      	str	r2, [r3, #16]
 8005cb4:	4b16      	ldr	r3, [pc, #88]	; (8005d10 <LCD_Init+0x3c18>)
 8005cb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cba:	615a      	str	r2, [r3, #20]
 8005cbc:	4b15      	ldr	r3, [pc, #84]	; (8005d14 <LCD_Init+0x3c1c>)
 8005cbe:	2215      	movs	r2, #21
 8005cc0:	60da      	str	r2, [r3, #12]
 8005cc2:	4b13      	ldr	r3, [pc, #76]	; (8005d10 <LCD_Init+0x3c18>)
 8005cc4:	2280      	movs	r2, #128	; 0x80
 8005cc6:	615a      	str	r2, [r3, #20]
 8005cc8:	4b11      	ldr	r3, [pc, #68]	; (8005d10 <LCD_Init+0x3c18>)
 8005cca:	2280      	movs	r2, #128	; 0x80
 8005ccc:	611a      	str	r2, [r3, #16]
 8005cce:	4b10      	ldr	r3, [pc, #64]	; (8005d10 <LCD_Init+0x3c18>)
 8005cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cd4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005cd6:	4b0e      	ldr	r3, [pc, #56]	; (8005d10 <LCD_Init+0x3c18>)
 8005cd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cdc:	611a      	str	r2, [r3, #16]
 8005cde:	4b0c      	ldr	r3, [pc, #48]	; (8005d10 <LCD_Init+0x3c18>)
 8005ce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ce4:	615a      	str	r2, [r3, #20]
 8005ce6:	4b0b      	ldr	r3, [pc, #44]	; (8005d14 <LCD_Init+0x3c1c>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	60da      	str	r2, [r3, #12]
 8005cec:	4b08      	ldr	r3, [pc, #32]	; (8005d10 <LCD_Init+0x3c18>)
 8005cee:	2280      	movs	r2, #128	; 0x80
 8005cf0:	615a      	str	r2, [r3, #20]
 8005cf2:	4b07      	ldr	r3, [pc, #28]	; (8005d10 <LCD_Init+0x3c18>)
 8005cf4:	2280      	movs	r2, #128	; 0x80
 8005cf6:	611a      	str	r2, [r3, #16]
 8005cf8:	4b05      	ldr	r3, [pc, #20]	; (8005d10 <LCD_Init+0x3c18>)
 8005cfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cfe:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005d00:	4b03      	ldr	r3, [pc, #12]	; (8005d10 <LCD_Init+0x3c18>)
 8005d02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d06:	611a      	str	r2, [r3, #16]
 8005d08:	4b01      	ldr	r3, [pc, #4]	; (8005d10 <LCD_Init+0x3c18>)
 8005d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d0e:	e003      	b.n	8005d18 <LCD_Init+0x3c20>
 8005d10:	40011000 	.word	0x40011000
 8005d14:	40010c00 	.word	0x40010c00
 8005d18:	615a      	str	r2, [r3, #20]
 8005d1a:	4b8b      	ldr	r3, [pc, #556]	; (8005f48 <LCD_Init+0x3e50>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	60da      	str	r2, [r3, #12]
 8005d20:	4b8a      	ldr	r3, [pc, #552]	; (8005f4c <LCD_Init+0x3e54>)
 8005d22:	2280      	movs	r2, #128	; 0x80
 8005d24:	615a      	str	r2, [r3, #20]
 8005d26:	4b89      	ldr	r3, [pc, #548]	; (8005f4c <LCD_Init+0x3e54>)
 8005d28:	2280      	movs	r2, #128	; 0x80
 8005d2a:	611a      	str	r2, [r3, #16]
 8005d2c:	4b87      	ldr	r3, [pc, #540]	; (8005f4c <LCD_Init+0x3e54>)
 8005d2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d32:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 8005d34:	20f0      	movs	r0, #240	; 0xf0
 8005d36:	f7fa fee9 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 8005d3a:	4b84      	ldr	r3, [pc, #528]	; (8005f4c <LCD_Init+0x3e54>)
 8005d3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d40:	611a      	str	r2, [r3, #16]
 8005d42:	4b82      	ldr	r3, [pc, #520]	; (8005f4c <LCD_Init+0x3e54>)
 8005d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d48:	615a      	str	r2, [r3, #20]
 8005d4a:	4b7f      	ldr	r3, [pc, #508]	; (8005f48 <LCD_Init+0x3e50>)
 8005d4c:	2203      	movs	r2, #3
 8005d4e:	60da      	str	r2, [r3, #12]
 8005d50:	4b7e      	ldr	r3, [pc, #504]	; (8005f4c <LCD_Init+0x3e54>)
 8005d52:	2280      	movs	r2, #128	; 0x80
 8005d54:	615a      	str	r2, [r3, #20]
 8005d56:	4b7d      	ldr	r3, [pc, #500]	; (8005f4c <LCD_Init+0x3e54>)
 8005d58:	2280      	movs	r2, #128	; 0x80
 8005d5a:	611a      	str	r2, [r3, #16]
 8005d5c:	4b7b      	ldr	r3, [pc, #492]	; (8005f4c <LCD_Init+0x3e54>)
 8005d5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d62:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 8005d64:	2029      	movs	r0, #41	; 0x29
 8005d66:	f7fa fed1 	bl	8000b0c <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8005d6a:	20d0      	movs	r0, #208	; 0xd0
 8005d6c:	f7fa fece 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8005d70:	4b76      	ldr	r3, [pc, #472]	; (8005f4c <LCD_Init+0x3e54>)
 8005d72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d76:	611a      	str	r2, [r3, #16]
 8005d78:	4b74      	ldr	r3, [pc, #464]	; (8005f4c <LCD_Init+0x3e54>)
 8005d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d7e:	615a      	str	r2, [r3, #20]
 8005d80:	4b71      	ldr	r3, [pc, #452]	; (8005f48 <LCD_Init+0x3e50>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	60da      	str	r2, [r3, #12]
 8005d86:	4b71      	ldr	r3, [pc, #452]	; (8005f4c <LCD_Init+0x3e54>)
 8005d88:	2280      	movs	r2, #128	; 0x80
 8005d8a:	615a      	str	r2, [r3, #20]
 8005d8c:	4b6f      	ldr	r3, [pc, #444]	; (8005f4c <LCD_Init+0x3e54>)
 8005d8e:	2280      	movs	r2, #128	; 0x80
 8005d90:	611a      	str	r2, [r3, #16]
 8005d92:	4b6e      	ldr	r3, [pc, #440]	; (8005f4c <LCD_Init+0x3e54>)
 8005d94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d98:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 8005d9a:	20be      	movs	r0, #190	; 0xbe
 8005d9c:	f7fa feb6 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8005da0:	4b6a      	ldr	r3, [pc, #424]	; (8005f4c <LCD_Init+0x3e54>)
 8005da2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005da6:	611a      	str	r2, [r3, #16]
 8005da8:	4b68      	ldr	r3, [pc, #416]	; (8005f4c <LCD_Init+0x3e54>)
 8005daa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dae:	615a      	str	r2, [r3, #20]
 8005db0:	4b65      	ldr	r3, [pc, #404]	; (8005f48 <LCD_Init+0x3e50>)
 8005db2:	2205      	movs	r2, #5
 8005db4:	60da      	str	r2, [r3, #12]
 8005db6:	4b65      	ldr	r3, [pc, #404]	; (8005f4c <LCD_Init+0x3e54>)
 8005db8:	2280      	movs	r2, #128	; 0x80
 8005dba:	615a      	str	r2, [r3, #20]
 8005dbc:	4b63      	ldr	r3, [pc, #396]	; (8005f4c <LCD_Init+0x3e54>)
 8005dbe:	2280      	movs	r2, #128	; 0x80
 8005dc0:	611a      	str	r2, [r3, #16]
 8005dc2:	4b62      	ldr	r3, [pc, #392]	; (8005f4c <LCD_Init+0x3e54>)
 8005dc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dc8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8005dca:	4b60      	ldr	r3, [pc, #384]	; (8005f4c <LCD_Init+0x3e54>)
 8005dcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005dd0:	611a      	str	r2, [r3, #16]
 8005dd2:	4b5e      	ldr	r3, [pc, #376]	; (8005f4c <LCD_Init+0x3e54>)
 8005dd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dd8:	615a      	str	r2, [r3, #20]
 8005dda:	4b5b      	ldr	r3, [pc, #364]	; (8005f48 <LCD_Init+0x3e50>)
 8005ddc:	22fe      	movs	r2, #254	; 0xfe
 8005dde:	60da      	str	r2, [r3, #12]
 8005de0:	4b5a      	ldr	r3, [pc, #360]	; (8005f4c <LCD_Init+0x3e54>)
 8005de2:	2280      	movs	r2, #128	; 0x80
 8005de4:	615a      	str	r2, [r3, #20]
 8005de6:	4b59      	ldr	r3, [pc, #356]	; (8005f4c <LCD_Init+0x3e54>)
 8005de8:	2280      	movs	r2, #128	; 0x80
 8005dea:	611a      	str	r2, [r3, #16]
 8005dec:	4b57      	ldr	r3, [pc, #348]	; (8005f4c <LCD_Init+0x3e54>)
 8005dee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005df2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 8005df4:	4b55      	ldr	r3, [pc, #340]	; (8005f4c <LCD_Init+0x3e54>)
 8005df6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005dfa:	611a      	str	r2, [r3, #16]
 8005dfc:	4b53      	ldr	r3, [pc, #332]	; (8005f4c <LCD_Init+0x3e54>)
 8005dfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e02:	615a      	str	r2, [r3, #20]
 8005e04:	4b50      	ldr	r3, [pc, #320]	; (8005f48 <LCD_Init+0x3e50>)
 8005e06:	2201      	movs	r2, #1
 8005e08:	60da      	str	r2, [r3, #12]
 8005e0a:	4b50      	ldr	r3, [pc, #320]	; (8005f4c <LCD_Init+0x3e54>)
 8005e0c:	2280      	movs	r2, #128	; 0x80
 8005e0e:	615a      	str	r2, [r3, #20]
 8005e10:	4b4e      	ldr	r3, [pc, #312]	; (8005f4c <LCD_Init+0x3e54>)
 8005e12:	2280      	movs	r2, #128	; 0x80
 8005e14:	611a      	str	r2, [r3, #16]
 8005e16:	4b4d      	ldr	r3, [pc, #308]	; (8005f4c <LCD_Init+0x3e54>)
 8005e18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e1c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 8005e1e:	4b4b      	ldr	r3, [pc, #300]	; (8005f4c <LCD_Init+0x3e54>)
 8005e20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e24:	611a      	str	r2, [r3, #16]
 8005e26:	4b49      	ldr	r3, [pc, #292]	; (8005f4c <LCD_Init+0x3e54>)
 8005e28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e2c:	615a      	str	r2, [r3, #20]
 8005e2e:	4b46      	ldr	r3, [pc, #280]	; (8005f48 <LCD_Init+0x3e50>)
 8005e30:	2200      	movs	r2, #0
 8005e32:	60da      	str	r2, [r3, #12]
 8005e34:	4b45      	ldr	r3, [pc, #276]	; (8005f4c <LCD_Init+0x3e54>)
 8005e36:	2280      	movs	r2, #128	; 0x80
 8005e38:	615a      	str	r2, [r3, #20]
 8005e3a:	4b44      	ldr	r3, [pc, #272]	; (8005f4c <LCD_Init+0x3e54>)
 8005e3c:	2280      	movs	r2, #128	; 0x80
 8005e3e:	611a      	str	r2, [r3, #16]
 8005e40:	4b42      	ldr	r3, [pc, #264]	; (8005f4c <LCD_Init+0x3e54>)
 8005e42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e46:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8005e48:	4b40      	ldr	r3, [pc, #256]	; (8005f4c <LCD_Init+0x3e54>)
 8005e4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e4e:	611a      	str	r2, [r3, #16]
 8005e50:	4b3e      	ldr	r3, [pc, #248]	; (8005f4c <LCD_Init+0x3e54>)
 8005e52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e56:	615a      	str	r2, [r3, #20]
 8005e58:	4b3b      	ldr	r3, [pc, #236]	; (8005f48 <LCD_Init+0x3e50>)
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	60da      	str	r2, [r3, #12]
 8005e5e:	4b3b      	ldr	r3, [pc, #236]	; (8005f4c <LCD_Init+0x3e54>)
 8005e60:	2280      	movs	r2, #128	; 0x80
 8005e62:	615a      	str	r2, [r3, #20]
 8005e64:	4b39      	ldr	r3, [pc, #228]	; (8005f4c <LCD_Init+0x3e54>)
 8005e66:	2280      	movs	r2, #128	; 0x80
 8005e68:	611a      	str	r2, [r3, #16]
 8005e6a:	4b38      	ldr	r3, [pc, #224]	; (8005f4c <LCD_Init+0x3e54>)
 8005e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e70:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 8005e72:	4b36      	ldr	r3, [pc, #216]	; (8005f4c <LCD_Init+0x3e54>)
 8005e74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e78:	611a      	str	r2, [r3, #16]
 8005e7a:	4b34      	ldr	r3, [pc, #208]	; (8005f4c <LCD_Init+0x3e54>)
 8005e7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e80:	615a      	str	r2, [r3, #20]
 8005e82:	4b31      	ldr	r3, [pc, #196]	; (8005f48 <LCD_Init+0x3e50>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	60da      	str	r2, [r3, #12]
 8005e88:	4b30      	ldr	r3, [pc, #192]	; (8005f4c <LCD_Init+0x3e54>)
 8005e8a:	2280      	movs	r2, #128	; 0x80
 8005e8c:	615a      	str	r2, [r3, #20]
 8005e8e:	4b2f      	ldr	r3, [pc, #188]	; (8005f4c <LCD_Init+0x3e54>)
 8005e90:	2280      	movs	r2, #128	; 0x80
 8005e92:	611a      	str	r2, [r3, #16]
 8005e94:	4b2d      	ldr	r3, [pc, #180]	; (8005f4c <LCD_Init+0x3e54>)
 8005e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e9a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8005e9c:	20b8      	movs	r0, #184	; 0xb8
 8005e9e:	f7fa fe35 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8005ea2:	4b2a      	ldr	r3, [pc, #168]	; (8005f4c <LCD_Init+0x3e54>)
 8005ea4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ea8:	611a      	str	r2, [r3, #16]
 8005eaa:	4b28      	ldr	r3, [pc, #160]	; (8005f4c <LCD_Init+0x3e54>)
 8005eac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eb0:	615a      	str	r2, [r3, #20]
 8005eb2:	4b25      	ldr	r3, [pc, #148]	; (8005f48 <LCD_Init+0x3e50>)
 8005eb4:	2203      	movs	r2, #3
 8005eb6:	60da      	str	r2, [r3, #12]
 8005eb8:	4b24      	ldr	r3, [pc, #144]	; (8005f4c <LCD_Init+0x3e54>)
 8005eba:	2280      	movs	r2, #128	; 0x80
 8005ebc:	615a      	str	r2, [r3, #20]
 8005ebe:	4b23      	ldr	r3, [pc, #140]	; (8005f4c <LCD_Init+0x3e54>)
 8005ec0:	2280      	movs	r2, #128	; 0x80
 8005ec2:	611a      	str	r2, [r3, #16]
 8005ec4:	4b21      	ldr	r3, [pc, #132]	; (8005f4c <LCD_Init+0x3e54>)
 8005ec6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eca:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 8005ecc:	4b1f      	ldr	r3, [pc, #124]	; (8005f4c <LCD_Init+0x3e54>)
 8005ece:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ed2:	611a      	str	r2, [r3, #16]
 8005ed4:	4b1d      	ldr	r3, [pc, #116]	; (8005f4c <LCD_Init+0x3e54>)
 8005ed6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eda:	615a      	str	r2, [r3, #20]
 8005edc:	4b1a      	ldr	r3, [pc, #104]	; (8005f48 <LCD_Init+0x3e50>)
 8005ede:	2201      	movs	r2, #1
 8005ee0:	60da      	str	r2, [r3, #12]
 8005ee2:	4b1a      	ldr	r3, [pc, #104]	; (8005f4c <LCD_Init+0x3e54>)
 8005ee4:	2280      	movs	r2, #128	; 0x80
 8005ee6:	615a      	str	r2, [r3, #20]
 8005ee8:	4b18      	ldr	r3, [pc, #96]	; (8005f4c <LCD_Init+0x3e54>)
 8005eea:	2280      	movs	r2, #128	; 0x80
 8005eec:	611a      	str	r2, [r3, #16]
 8005eee:	4b17      	ldr	r3, [pc, #92]	; (8005f4c <LCD_Init+0x3e54>)
 8005ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ef4:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 8005ef6:	20ba      	movs	r0, #186	; 0xba
 8005ef8:	f7fa fe08 	bl	8000b0c <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8005efc:	4b13      	ldr	r3, [pc, #76]	; (8005f4c <LCD_Init+0x3e54>)
 8005efe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f02:	611a      	str	r2, [r3, #16]
 8005f04:	4b11      	ldr	r3, [pc, #68]	; (8005f4c <LCD_Init+0x3e54>)
 8005f06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f0a:	615a      	str	r2, [r3, #20]
 8005f0c:	4b0e      	ldr	r3, [pc, #56]	; (8005f48 <LCD_Init+0x3e50>)
 8005f0e:	2201      	movs	r2, #1
 8005f10:	60da      	str	r2, [r3, #12]
 8005f12:	4b0e      	ldr	r3, [pc, #56]	; (8005f4c <LCD_Init+0x3e54>)
 8005f14:	2280      	movs	r2, #128	; 0x80
 8005f16:	615a      	str	r2, [r3, #20]
 8005f18:	4b0c      	ldr	r3, [pc, #48]	; (8005f4c <LCD_Init+0x3e54>)
 8005f1a:	2280      	movs	r2, #128	; 0x80
 8005f1c:	611a      	str	r2, [r3, #16]
 8005f1e:	4b0b      	ldr	r3, [pc, #44]	; (8005f4c <LCD_Init+0x3e54>)
 8005f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f24:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 8005f26:	2064      	movs	r0, #100	; 0x64
 8005f28:	f7fb ff36 	bl	8001d98 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 8005f2c:	2000      	movs	r0, #0
 8005f2e:	f7fb ffd7 	bl	8001ee0 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 8005f32:	4b07      	ldr	r3, [pc, #28]	; (8005f50 <LCD_Init+0x3e58>)
 8005f34:	2201      	movs	r2, #1
 8005f36:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8005f38:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005f3c:	f000 f80a 	bl	8005f54 <LCD_Clear>
}
 8005f40:	bf00      	nop
 8005f42:	3718      	adds	r7, #24
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	40010c00 	.word	0x40010c00
 8005f4c:	40011000 	.word	0x40011000
 8005f50:	422201a8 	.word	0x422201a8

08005f54 <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 8005f62:	4b2a      	ldr	r3, [pc, #168]	; (800600c <LCD_Clear+0xb8>)
 8005f64:	881b      	ldrh	r3, [r3, #0]
 8005f66:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 8005f68:	4b28      	ldr	r3, [pc, #160]	; (800600c <LCD_Clear+0xb8>)
 8005f6a:	885b      	ldrh	r3, [r3, #2]
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	fb02 f303 	mul.w	r3, r2, r3
 8005f74:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 8005f76:	4b25      	ldr	r3, [pc, #148]	; (800600c <LCD_Clear+0xb8>)
 8005f78:	889b      	ldrh	r3, [r3, #4]
 8005f7a:	f646 0204 	movw	r2, #26628	; 0x6804
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d11a      	bne.n	8005fb8 <LCD_Clear+0x64>
 8005f82:	4b22      	ldr	r3, [pc, #136]	; (800600c <LCD_Clear+0xb8>)
 8005f84:	799b      	ldrb	r3, [r3, #6]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d116      	bne.n	8005fb8 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 8005f8a:	4b20      	ldr	r3, [pc, #128]	; (800600c <LCD_Clear+0xb8>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8005f90:	4b1e      	ldr	r3, [pc, #120]	; (800600c <LCD_Clear+0xb8>)
 8005f92:	222a      	movs	r2, #42	; 0x2a
 8005f94:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8005f96:	4b1d      	ldr	r3, [pc, #116]	; (800600c <LCD_Clear+0xb8>)
 8005f98:	222b      	movs	r2, #43	; 0x2b
 8005f9a:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	2000      	movs	r0, #0
 8005fa0:	f7fa fe86 	bl	8000cb0 <LCD_SetCursor>
		lcddev.dir = 1;
 8005fa4:	4b19      	ldr	r3, [pc, #100]	; (800600c <LCD_Clear+0xb8>)
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8005faa:	4b18      	ldr	r3, [pc, #96]	; (800600c <LCD_Clear+0xb8>)
 8005fac:	222b      	movs	r2, #43	; 0x2b
 8005fae:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8005fb0:	4b16      	ldr	r3, [pc, #88]	; (800600c <LCD_Clear+0xb8>)
 8005fb2:	222a      	movs	r2, #42	; 0x2a
 8005fb4:	819a      	strh	r2, [r3, #12]
 8005fb6:	e003      	b.n	8005fc0 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 8005fb8:	2100      	movs	r1, #0
 8005fba:	2000      	movs	r0, #0
 8005fbc:	f7fa fe78 	bl	8000cb0 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 8005fc0:	f7fa fe6a 	bl	8000c98 <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	60fb      	str	r3, [r7, #12]
 8005fc8:	e017      	b.n	8005ffa <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 8005fca:	4b11      	ldr	r3, [pc, #68]	; (8006010 <LCD_Clear+0xbc>)
 8005fcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fd0:	611a      	str	r2, [r3, #16]
 8005fd2:	4b0f      	ldr	r3, [pc, #60]	; (8006010 <LCD_Clear+0xbc>)
 8005fd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fd8:	615a      	str	r2, [r3, #20]
 8005fda:	4a0e      	ldr	r2, [pc, #56]	; (8006014 <LCD_Clear+0xc0>)
 8005fdc:	88fb      	ldrh	r3, [r7, #6]
 8005fde:	60d3      	str	r3, [r2, #12]
 8005fe0:	4b0b      	ldr	r3, [pc, #44]	; (8006010 <LCD_Clear+0xbc>)
 8005fe2:	2280      	movs	r2, #128	; 0x80
 8005fe4:	615a      	str	r2, [r3, #20]
 8005fe6:	4b0a      	ldr	r3, [pc, #40]	; (8006010 <LCD_Clear+0xbc>)
 8005fe8:	2280      	movs	r2, #128	; 0x80
 8005fea:	611a      	str	r2, [r3, #16]
 8005fec:	4b08      	ldr	r3, [pc, #32]	; (8006010 <LCD_Clear+0xbc>)
 8005fee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ff2:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	60fb      	str	r3, [r7, #12]
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d3e3      	bcc.n	8005fca <LCD_Clear+0x76>
}
 8006002:	bf00      	nop
 8006004:	bf00      	nop
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	20000030 	.word	0x20000030
 8006010:	40011000 	.word	0x40011000
 8006014:	40010c00 	.word	0x40010c00

08006018 <LCD_Fill>:
// Fill the area with color
// :(xend-xsta+1)*(yend-ysta+1)
void LCD_Fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey,
		uint16_t color) {
 8006018:	b590      	push	{r4, r7, lr}
 800601a:	b087      	sub	sp, #28
 800601c:	af02      	add	r7, sp, #8
 800601e:	4604      	mov	r4, r0
 8006020:	4608      	mov	r0, r1
 8006022:	4611      	mov	r1, r2
 8006024:	461a      	mov	r2, r3
 8006026:	4623      	mov	r3, r4
 8006028:	80fb      	strh	r3, [r7, #6]
 800602a:	4603      	mov	r3, r0
 800602c:	80bb      	strh	r3, [r7, #4]
 800602e:	460b      	mov	r3, r1
 8006030:	807b      	strh	r3, [r7, #2]
 8006032:	4613      	mov	r3, r2
 8006034:	803b      	strh	r3, [r7, #0]
	uint16_t i, j;
	uint16_t xlen = 0;
 8006036:	2300      	movs	r3, #0
 8006038:	817b      	strh	r3, [r7, #10]
	uint16_t temp;
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1))	//6804横屏的时候特殊处理
 800603a:	4b3b      	ldr	r3, [pc, #236]	; (8006128 <LCD_Fill+0x110>)
 800603c:	889b      	ldrh	r3, [r3, #4]
 800603e:	f646 0204 	movw	r2, #26628	; 0x6804
 8006042:	4293      	cmp	r3, r2
 8006044:	d133      	bne.n	80060ae <LCD_Fill+0x96>
 8006046:	4b38      	ldr	r3, [pc, #224]	; (8006128 <LCD_Fill+0x110>)
 8006048:	799b      	ldrb	r3, [r3, #6]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d12f      	bne.n	80060ae <LCD_Fill+0x96>
			{
		temp = sx;
 800604e:	88fb      	ldrh	r3, [r7, #6]
 8006050:	813b      	strh	r3, [r7, #8]
		sx = sy;
 8006052:	88bb      	ldrh	r3, [r7, #4]
 8006054:	80fb      	strh	r3, [r7, #6]
		sy = lcddev.width - ex - 1;
 8006056:	4b34      	ldr	r3, [pc, #208]	; (8006128 <LCD_Fill+0x110>)
 8006058:	881a      	ldrh	r2, [r3, #0]
 800605a:	887b      	ldrh	r3, [r7, #2]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	b29b      	uxth	r3, r3
 8006060:	3b01      	subs	r3, #1
 8006062:	80bb      	strh	r3, [r7, #4]
		ex = ey;
 8006064:	883b      	ldrh	r3, [r7, #0]
 8006066:	807b      	strh	r3, [r7, #2]
		ey = lcddev.width - temp - 1;
 8006068:	4b2f      	ldr	r3, [pc, #188]	; (8006128 <LCD_Fill+0x110>)
 800606a:	881a      	ldrh	r2, [r3, #0]
 800606c:	893b      	ldrh	r3, [r7, #8]
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	b29b      	uxth	r3, r3
 8006072:	3b01      	subs	r3, #1
 8006074:	803b      	strh	r3, [r7, #0]
		lcddev.dir = 0;
 8006076:	4b2c      	ldr	r3, [pc, #176]	; (8006128 <LCD_Fill+0x110>)
 8006078:	2200      	movs	r2, #0
 800607a:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 800607c:	4b2a      	ldr	r3, [pc, #168]	; (8006128 <LCD_Fill+0x110>)
 800607e:	222a      	movs	r2, #42	; 0x2a
 8006080:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8006082:	4b29      	ldr	r3, [pc, #164]	; (8006128 <LCD_Fill+0x110>)
 8006084:	222b      	movs	r2, #43	; 0x2b
 8006086:	819a      	strh	r2, [r3, #12]
		LCD_Fill(sx, sy, ex, ey, color);
 8006088:	883c      	ldrh	r4, [r7, #0]
 800608a:	887a      	ldrh	r2, [r7, #2]
 800608c:	88b9      	ldrh	r1, [r7, #4]
 800608e:	88f8      	ldrh	r0, [r7, #6]
 8006090:	8c3b      	ldrh	r3, [r7, #32]
 8006092:	9300      	str	r3, [sp, #0]
 8006094:	4623      	mov	r3, r4
 8006096:	f7ff ffbf 	bl	8006018 <LCD_Fill>
		lcddev.dir = 1;
 800609a:	4b23      	ldr	r3, [pc, #140]	; (8006128 <LCD_Fill+0x110>)
 800609c:	2201      	movs	r2, #1
 800609e:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 80060a0:	4b21      	ldr	r3, [pc, #132]	; (8006128 <LCD_Fill+0x110>)
 80060a2:	222b      	movs	r2, #43	; 0x2b
 80060a4:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 80060a6:	4b20      	ldr	r3, [pc, #128]	; (8006128 <LCD_Fill+0x110>)
 80060a8:	222a      	movs	r2, #42	; 0x2a
 80060aa:	819a      	strh	r2, [r3, #12]
 80060ac:	e037      	b.n	800611e <LCD_Fill+0x106>
	} else {
		xlen = ex - sx + 1;
 80060ae:	887a      	ldrh	r2, [r7, #2]
 80060b0:	88fb      	ldrh	r3, [r7, #6]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	3301      	adds	r3, #1
 80060b8:	817b      	strh	r3, [r7, #10]
		for (i = sy; i <= ey; i++) {
 80060ba:	88bb      	ldrh	r3, [r7, #4]
 80060bc:	81fb      	strh	r3, [r7, #14]
 80060be:	e029      	b.n	8006114 <LCD_Fill+0xfc>
			LCD_SetCursor(sx, i);      				//设置光标位置
 80060c0:	89fa      	ldrh	r2, [r7, #14]
 80060c2:	88fb      	ldrh	r3, [r7, #6]
 80060c4:	4611      	mov	r1, r2
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7fa fdf2 	bl	8000cb0 <LCD_SetCursor>
			LCD_WriteRAM_Prepare();     			//开始写入GRAM	  
 80060cc:	f7fa fde4 	bl	8000c98 <LCD_WriteRAM_Prepare>
			for (j = 0; j < xlen; j++)
 80060d0:	2300      	movs	r3, #0
 80060d2:	81bb      	strh	r3, [r7, #12]
 80060d4:	e017      	b.n	8006106 <LCD_Fill+0xee>
				LCD_WR_DATA(color);	//设置光标位置
 80060d6:	4b15      	ldr	r3, [pc, #84]	; (800612c <LCD_Fill+0x114>)
 80060d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060dc:	611a      	str	r2, [r3, #16]
 80060de:	4b13      	ldr	r3, [pc, #76]	; (800612c <LCD_Fill+0x114>)
 80060e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060e4:	615a      	str	r2, [r3, #20]
 80060e6:	4a12      	ldr	r2, [pc, #72]	; (8006130 <LCD_Fill+0x118>)
 80060e8:	8c3b      	ldrh	r3, [r7, #32]
 80060ea:	60d3      	str	r3, [r2, #12]
 80060ec:	4b0f      	ldr	r3, [pc, #60]	; (800612c <LCD_Fill+0x114>)
 80060ee:	2280      	movs	r2, #128	; 0x80
 80060f0:	615a      	str	r2, [r3, #20]
 80060f2:	4b0e      	ldr	r3, [pc, #56]	; (800612c <LCD_Fill+0x114>)
 80060f4:	2280      	movs	r2, #128	; 0x80
 80060f6:	611a      	str	r2, [r3, #16]
 80060f8:	4b0c      	ldr	r3, [pc, #48]	; (800612c <LCD_Fill+0x114>)
 80060fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060fe:	611a      	str	r2, [r3, #16]
			for (j = 0; j < xlen; j++)
 8006100:	89bb      	ldrh	r3, [r7, #12]
 8006102:	3301      	adds	r3, #1
 8006104:	81bb      	strh	r3, [r7, #12]
 8006106:	89ba      	ldrh	r2, [r7, #12]
 8006108:	897b      	ldrh	r3, [r7, #10]
 800610a:	429a      	cmp	r2, r3
 800610c:	d3e3      	bcc.n	80060d6 <LCD_Fill+0xbe>
		for (i = sy; i <= ey; i++) {
 800610e:	89fb      	ldrh	r3, [r7, #14]
 8006110:	3301      	adds	r3, #1
 8006112:	81fb      	strh	r3, [r7, #14]
 8006114:	89fa      	ldrh	r2, [r7, #14]
 8006116:	883b      	ldrh	r3, [r7, #0]
 8006118:	429a      	cmp	r2, r3
 800611a:	d9d1      	bls.n	80060c0 <LCD_Fill+0xa8>
		}
	}
}
 800611c:	bf00      	nop
 800611e:	bf00      	nop
 8006120:	3714      	adds	r7, #20
 8006122:	46bd      	mov	sp, r7
 8006124:	bd90      	pop	{r4, r7, pc}
 8006126:	bf00      	nop
 8006128:	20000030 	.word	0x20000030
 800612c:	40011000 	.word	0x40011000
 8006130:	40010c00 	.word	0x40010c00

08006134 <LCD_ShowChar>:
// num: char to be displayed
// size: font size 12/16/24
// mode: display characters on the displayed content and do not wipe away the displayed content(1)
//       display characters on the displayed content and wipe away the displayed content(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size,
		uint8_t mode) {
 8006134:	b590      	push	{r4, r7, lr}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	4604      	mov	r4, r0
 800613c:	4608      	mov	r0, r1
 800613e:	4611      	mov	r1, r2
 8006140:	461a      	mov	r2, r3
 8006142:	4623      	mov	r3, r4
 8006144:	80fb      	strh	r3, [r7, #6]
 8006146:	4603      	mov	r3, r0
 8006148:	80bb      	strh	r3, [r7, #4]
 800614a:	460b      	mov	r3, r1
 800614c:	70fb      	strb	r3, [r7, #3]
 800614e:	4613      	mov	r3, r2
 8006150:	70bb      	strb	r3, [r7, #2]
	uint8_t temp, t1, t;
	uint16_t y0 = y;
 8006152:	88bb      	ldrh	r3, [r7, #4]
 8006154:	817b      	strh	r3, [r7, #10]
	uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);	//得到字体一个字符对应点阵集所占的字节数
 8006156:	78bb      	ldrb	r3, [r7, #2]
 8006158:	08db      	lsrs	r3, r3, #3
 800615a:	b2db      	uxtb	r3, r3
 800615c:	461a      	mov	r2, r3
 800615e:	78bb      	ldrb	r3, [r7, #2]
 8006160:	f003 0307 	and.w	r3, r3, #7
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	bf14      	ite	ne
 800616a:	2301      	movne	r3, #1
 800616c:	2300      	moveq	r3, #0
 800616e:	b2db      	uxtb	r3, r3
 8006170:	4413      	add	r3, r2
 8006172:	b2db      	uxtb	r3, r3
 8006174:	78ba      	ldrb	r2, [r7, #2]
 8006176:	0852      	lsrs	r2, r2, #1
 8006178:	b2d2      	uxtb	r2, r2
 800617a:	fb02 f303 	mul.w	r3, r2, r3
 800617e:	727b      	strb	r3, [r7, #9]
	num = num - ' ';		//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8006180:	78fb      	ldrb	r3, [r7, #3]
 8006182:	3b20      	subs	r3, #32
 8006184:	70fb      	strb	r3, [r7, #3]
	for (t = 0; t < csize; t++) {
 8006186:	2300      	movs	r3, #0
 8006188:	737b      	strb	r3, [r7, #13]
 800618a:	e069      	b.n	8006260 <LCD_ShowChar+0x12c>
		if (size == 12)
 800618c:	78bb      	ldrb	r3, [r7, #2]
 800618e:	2b0c      	cmp	r3, #12
 8006190:	d10b      	bne.n	80061aa <LCD_ShowChar+0x76>
			temp = asc2_1206[num][t]; 	 	//调用1206字体
 8006192:	78fa      	ldrb	r2, [r7, #3]
 8006194:	7b79      	ldrb	r1, [r7, #13]
 8006196:	4838      	ldr	r0, [pc, #224]	; (8006278 <LCD_ShowChar+0x144>)
 8006198:	4613      	mov	r3, r2
 800619a:	005b      	lsls	r3, r3, #1
 800619c:	4413      	add	r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4403      	add	r3, r0
 80061a2:	440b      	add	r3, r1
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	73fb      	strb	r3, [r7, #15]
 80061a8:	e019      	b.n	80061de <LCD_ShowChar+0xaa>
		else if (size == 16)
 80061aa:	78bb      	ldrb	r3, [r7, #2]
 80061ac:	2b10      	cmp	r3, #16
 80061ae:	d108      	bne.n	80061c2 <LCD_ShowChar+0x8e>
			temp = asc2_1608[num][t];	//调用1608字体
 80061b0:	78fa      	ldrb	r2, [r7, #3]
 80061b2:	7b7b      	ldrb	r3, [r7, #13]
 80061b4:	4931      	ldr	r1, [pc, #196]	; (800627c <LCD_ShowChar+0x148>)
 80061b6:	0112      	lsls	r2, r2, #4
 80061b8:	440a      	add	r2, r1
 80061ba:	4413      	add	r3, r2
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	73fb      	strb	r3, [r7, #15]
 80061c0:	e00d      	b.n	80061de <LCD_ShowChar+0xaa>
		else if (size == 24)
 80061c2:	78bb      	ldrb	r3, [r7, #2]
 80061c4:	2b18      	cmp	r3, #24
 80061c6:	d150      	bne.n	800626a <LCD_ShowChar+0x136>
			temp = asc2_2412[num][t];	//调用2412字体
 80061c8:	78fa      	ldrb	r2, [r7, #3]
 80061ca:	7b79      	ldrb	r1, [r7, #13]
 80061cc:	482c      	ldr	r0, [pc, #176]	; (8006280 <LCD_ShowChar+0x14c>)
 80061ce:	4613      	mov	r3, r2
 80061d0:	00db      	lsls	r3, r3, #3
 80061d2:	4413      	add	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4403      	add	r3, r0
 80061d8:	440b      	add	r3, r1
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	73fb      	strb	r3, [r7, #15]
		else
			return;								//没有的字库
		for (t1 = 0; t1 < 8; t1++) {
 80061de:	2300      	movs	r3, #0
 80061e0:	73bb      	strb	r3, [r7, #14]
 80061e2:	e035      	b.n	8006250 <LCD_ShowChar+0x11c>
			if (temp & 0x80)
 80061e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	da07      	bge.n	80061fc <LCD_ShowChar+0xc8>
				LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 80061ec:	4b25      	ldr	r3, [pc, #148]	; (8006284 <LCD_ShowChar+0x150>)
 80061ee:	881a      	ldrh	r2, [r3, #0]
 80061f0:	88b9      	ldrh	r1, [r7, #4]
 80061f2:	88fb      	ldrh	r3, [r7, #6]
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7fb fb39 	bl	800186c <LCD_Fast_DrawPoint>
 80061fa:	e00a      	b.n	8006212 <LCD_ShowChar+0xde>
			else if (mode == 0)
 80061fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d106      	bne.n	8006212 <LCD_ShowChar+0xde>
				LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 8006204:	4b20      	ldr	r3, [pc, #128]	; (8006288 <LCD_ShowChar+0x154>)
 8006206:	881a      	ldrh	r2, [r3, #0]
 8006208:	88b9      	ldrh	r1, [r7, #4]
 800620a:	88fb      	ldrh	r3, [r7, #6]
 800620c:	4618      	mov	r0, r3
 800620e:	f7fb fb2d 	bl	800186c <LCD_Fast_DrawPoint>
			temp <<= 1;
 8006212:	7bfb      	ldrb	r3, [r7, #15]
 8006214:	005b      	lsls	r3, r3, #1
 8006216:	73fb      	strb	r3, [r7, #15]
			y++;
 8006218:	88bb      	ldrh	r3, [r7, #4]
 800621a:	3301      	adds	r3, #1
 800621c:	80bb      	strh	r3, [r7, #4]
			if (y >= lcddev.height)
 800621e:	4b1b      	ldr	r3, [pc, #108]	; (800628c <LCD_ShowChar+0x158>)
 8006220:	885b      	ldrh	r3, [r3, #2]
 8006222:	88ba      	ldrh	r2, [r7, #4]
 8006224:	429a      	cmp	r2, r3
 8006226:	d222      	bcs.n	800626e <LCD_ShowChar+0x13a>
				return;		//超区域了
			if ((y - y0) == size) {
 8006228:	88ba      	ldrh	r2, [r7, #4]
 800622a:	897b      	ldrh	r3, [r7, #10]
 800622c:	1ad2      	subs	r2, r2, r3
 800622e:	78bb      	ldrb	r3, [r7, #2]
 8006230:	429a      	cmp	r2, r3
 8006232:	d10a      	bne.n	800624a <LCD_ShowChar+0x116>
				y = y0;
 8006234:	897b      	ldrh	r3, [r7, #10]
 8006236:	80bb      	strh	r3, [r7, #4]
				x++;
 8006238:	88fb      	ldrh	r3, [r7, #6]
 800623a:	3301      	adds	r3, #1
 800623c:	80fb      	strh	r3, [r7, #6]
				if (x >= lcddev.width)
 800623e:	4b13      	ldr	r3, [pc, #76]	; (800628c <LCD_ShowChar+0x158>)
 8006240:	881b      	ldrh	r3, [r3, #0]
 8006242:	88fa      	ldrh	r2, [r7, #6]
 8006244:	429a      	cmp	r2, r3
 8006246:	d307      	bcc.n	8006258 <LCD_ShowChar+0x124>
					return;	//超区域了
 8006248:	e012      	b.n	8006270 <LCD_ShowChar+0x13c>
		for (t1 = 0; t1 < 8; t1++) {
 800624a:	7bbb      	ldrb	r3, [r7, #14]
 800624c:	3301      	adds	r3, #1
 800624e:	73bb      	strb	r3, [r7, #14]
 8006250:	7bbb      	ldrb	r3, [r7, #14]
 8006252:	2b07      	cmp	r3, #7
 8006254:	d9c6      	bls.n	80061e4 <LCD_ShowChar+0xb0>
 8006256:	e000      	b.n	800625a <LCD_ShowChar+0x126>
				break;
 8006258:	bf00      	nop
	for (t = 0; t < csize; t++) {
 800625a:	7b7b      	ldrb	r3, [r7, #13]
 800625c:	3301      	adds	r3, #1
 800625e:	737b      	strb	r3, [r7, #13]
 8006260:	7b7a      	ldrb	r2, [r7, #13]
 8006262:	7a7b      	ldrb	r3, [r7, #9]
 8006264:	429a      	cmp	r2, r3
 8006266:	d391      	bcc.n	800618c <LCD_ShowChar+0x58>
 8006268:	e002      	b.n	8006270 <LCD_ShowChar+0x13c>
			return;								//没有的字库
 800626a:	bf00      	nop
 800626c:	e000      	b.n	8006270 <LCD_ShowChar+0x13c>
				return;		//超区域了
 800626e:	bf00      	nop
			}
		}
	}
}
 8006270:	3714      	adds	r7, #20
 8006272:	46bd      	mov	sp, r7
 8006274:	bd90      	pop	{r4, r7, pc}
 8006276:	bf00      	nop
 8006278:	08008bcc 	.word	0x08008bcc
 800627c:	08009040 	.word	0x08009040
 8006280:	08009630 	.word	0x08009630
 8006284:	2000002c 	.word	0x2000002c
 8006288:	20000000 	.word	0x20000000
 800628c:	20000030 	.word	0x20000030

08006290 <LCD_ShowString>:
// x,y: starting coordinate
// width, height: display area size
// size: font size // x,y: starting coordinate
// *p: string
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
		uint8_t size, uint8_t *p) {
 8006290:	b590      	push	{r4, r7, lr}
 8006292:	b087      	sub	sp, #28
 8006294:	af02      	add	r7, sp, #8
 8006296:	4604      	mov	r4, r0
 8006298:	4608      	mov	r0, r1
 800629a:	4611      	mov	r1, r2
 800629c:	461a      	mov	r2, r3
 800629e:	4623      	mov	r3, r4
 80062a0:	80fb      	strh	r3, [r7, #6]
 80062a2:	4603      	mov	r3, r0
 80062a4:	80bb      	strh	r3, [r7, #4]
 80062a6:	460b      	mov	r3, r1
 80062a8:	807b      	strh	r3, [r7, #2]
 80062aa:	4613      	mov	r3, r2
 80062ac:	803b      	strh	r3, [r7, #0]
	uint8_t x0 = x;
 80062ae:	88fb      	ldrh	r3, [r7, #6]
 80062b0:	73fb      	strb	r3, [r7, #15]
	width += x;
 80062b2:	887a      	ldrh	r2, [r7, #2]
 80062b4:	88fb      	ldrh	r3, [r7, #6]
 80062b6:	4413      	add	r3, r2
 80062b8:	807b      	strh	r3, [r7, #2]
	height += y;
 80062ba:	883a      	ldrh	r2, [r7, #0]
 80062bc:	88bb      	ldrh	r3, [r7, #4]
 80062be:	4413      	add	r3, r2
 80062c0:	803b      	strh	r3, [r7, #0]
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 80062c2:	e024      	b.n	800630e <LCD_ShowString+0x7e>
	{
		if (x >= width) {
 80062c4:	88fa      	ldrh	r2, [r7, #6]
 80062c6:	887b      	ldrh	r3, [r7, #2]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d307      	bcc.n	80062dc <LCD_ShowString+0x4c>
			x = x0;
 80062cc:	7bfb      	ldrb	r3, [r7, #15]
 80062ce:	80fb      	strh	r3, [r7, #6]
			y += size;
 80062d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	88bb      	ldrh	r3, [r7, #4]
 80062d8:	4413      	add	r3, r2
 80062da:	80bb      	strh	r3, [r7, #4]
		}
		if (y >= height)
 80062dc:	88ba      	ldrh	r2, [r7, #4]
 80062de:	883b      	ldrh	r3, [r7, #0]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d21d      	bcs.n	8006320 <LCD_ShowString+0x90>
			break;	//退出
		LCD_ShowChar(x, y, *p, size, 0);
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e6:	781a      	ldrb	r2, [r3, #0]
 80062e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80062ec:	88b9      	ldrh	r1, [r7, #4]
 80062ee:	88f8      	ldrh	r0, [r7, #6]
 80062f0:	2400      	movs	r4, #0
 80062f2:	9400      	str	r4, [sp, #0]
 80062f4:	f7ff ff1e 	bl	8006134 <LCD_ShowChar>
		x += size / 2;
 80062f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80062fc:	085b      	lsrs	r3, r3, #1
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	b29a      	uxth	r2, r3
 8006302:	88fb      	ldrh	r3, [r7, #6]
 8006304:	4413      	add	r3, r2
 8006306:	80fb      	strh	r3, [r7, #6]
		p++;
 8006308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630a:	3301      	adds	r3, #1
 800630c:	627b      	str	r3, [r7, #36]	; 0x24
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 800630e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	2b7e      	cmp	r3, #126	; 0x7e
 8006314:	d805      	bhi.n	8006322 <LCD_ShowString+0x92>
 8006316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	2b1f      	cmp	r3, #31
 800631c:	d8d2      	bhi.n	80062c4 <LCD_ShowString+0x34>
	}
}
 800631e:	e000      	b.n	8006322 <LCD_ShowString+0x92>
			break;	//退出
 8006320:	bf00      	nop
}
 8006322:	bf00      	nop
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	bd90      	pop	{r4, r7, pc}
	...

0800632c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b08a      	sub	sp, #40	; 0x28
 8006330:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006332:	f000 fc59 	bl	8006be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006336:	f000 f91b 	bl	8006570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800633a:	f7fa fb3d 	bl	80009b8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800633e:	f000 fbaf 	bl	8006aa0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,(uint8_t*)rxBuffer,1);
 8006342:	2201      	movs	r2, #1
 8006344:	4979      	ldr	r1, [pc, #484]	; (800652c <main+0x200>)
 8006346:	487a      	ldr	r0, [pc, #488]	; (8006530 <main+0x204>)
 8006348:	f001 fde3 	bl	8007f12 <HAL_UART_Receive_IT>

  uint16_t i=0;
 800634c:	2300      	movs	r3, #0
 800634e:	83fb      	strh	r3, [r7, #30]
  uint8_t datatemp[SIZE];
  LCD_Init();
 8006350:	f7fb fed2 	bl	80020f8 <LCD_Init>
  AT24CXX_Init();			//IIC初始�??
 8006354:	f7fa fa6e 	bl	8000834 <AT24CXX_Init>

   	POINT_COLOR=RED;//设置字体为红�???
 8006358:	4b76      	ldr	r3, [pc, #472]	; (8006534 <main+0x208>)
 800635a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800635e:	801a      	strh	r2, [r3, #0]
  	LCD_ShowString(40,50,200,16,16,"CS301");
 8006360:	4b75      	ldr	r3, [pc, #468]	; (8006538 <main+0x20c>)
 8006362:	9301      	str	r3, [sp, #4]
 8006364:	2310      	movs	r3, #16
 8006366:	9300      	str	r3, [sp, #0]
 8006368:	2310      	movs	r3, #16
 800636a:	22c8      	movs	r2, #200	; 0xc8
 800636c:	2132      	movs	r1, #50	; 0x32
 800636e:	2028      	movs	r0, #40	; 0x28
 8006370:	f7ff ff8e 	bl	8006290 <LCD_ShowString>
  	LCD_ShowString(40,70,200,16,16,"IIC TEST");
 8006374:	4b71      	ldr	r3, [pc, #452]	; (800653c <main+0x210>)
 8006376:	9301      	str	r3, [sp, #4]
 8006378:	2310      	movs	r3, #16
 800637a:	9300      	str	r3, [sp, #0]
 800637c:	2310      	movs	r3, #16
 800637e:	22c8      	movs	r2, #200	; 0xc8
 8006380:	2146      	movs	r1, #70	; 0x46
 8006382:	2028      	movs	r0, #40	; 0x28
 8006384:	f7ff ff84 	bl	8006290 <LCD_ShowString>
  	LCD_ShowString(40,90,200,16,16,"KEY1:Write  KEY0:Read");	//显示提示信息
 8006388:	4b6d      	ldr	r3, [pc, #436]	; (8006540 <main+0x214>)
 800638a:	9301      	str	r3, [sp, #4]
 800638c:	2310      	movs	r3, #16
 800638e:	9300      	str	r3, [sp, #0]
 8006390:	2310      	movs	r3, #16
 8006392:	22c8      	movs	r2, #200	; 0xc8
 8006394:	215a      	movs	r1, #90	; 0x5a
 8006396:	2028      	movs	r0, #40	; 0x28
 8006398:	f7ff ff7a 	bl	8006290 <LCD_ShowString>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	while(AT24CXX_Check())
 800639c:	e020      	b.n	80063e0 <main+0xb4>
  	{
  		LCD_ShowString(40,120,200,16,16,"24C02 Check Failed!");
 800639e:	4b69      	ldr	r3, [pc, #420]	; (8006544 <main+0x218>)
 80063a0:	9301      	str	r3, [sp, #4]
 80063a2:	2310      	movs	r3, #16
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	2310      	movs	r3, #16
 80063a8:	22c8      	movs	r2, #200	; 0xc8
 80063aa:	2178      	movs	r1, #120	; 0x78
 80063ac:	2028      	movs	r0, #40	; 0x28
 80063ae:	f7ff ff6f 	bl	8006290 <LCD_ShowString>
  		HAL_Delay(500);
 80063b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80063b6:	f000 fc79 	bl	8006cac <HAL_Delay>
  		LCD_ShowString(40,120,200,16,16,"Please Check!      ");
 80063ba:	4b63      	ldr	r3, [pc, #396]	; (8006548 <main+0x21c>)
 80063bc:	9301      	str	r3, [sp, #4]
 80063be:	2310      	movs	r3, #16
 80063c0:	9300      	str	r3, [sp, #0]
 80063c2:	2310      	movs	r3, #16
 80063c4:	22c8      	movs	r2, #200	; 0xc8
 80063c6:	2178      	movs	r1, #120	; 0x78
 80063c8:	2028      	movs	r0, #40	; 0x28
 80063ca:	f7ff ff61 	bl	8006290 <LCD_ShowString>
  		HAL_Delay(500);
 80063ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80063d2:	f000 fc6b 	bl	8006cac <HAL_Delay>
  		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);//LED0闪烁
 80063d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063da:	485c      	ldr	r0, [pc, #368]	; (800654c <main+0x220>)
 80063dc:	f001 f89d 	bl	800751a <HAL_GPIO_TogglePin>
  	while(AT24CXX_Check())
 80063e0:	f7fa fa8b 	bl	80008fa <AT24CXX_Check>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1d9      	bne.n	800639e <main+0x72>
  	}

  	LCD_ShowString(40,120,200,16,16,"24C02 Ready!");
 80063ea:	4b59      	ldr	r3, [pc, #356]	; (8006550 <main+0x224>)
 80063ec:	9301      	str	r3, [sp, #4]
 80063ee:	2310      	movs	r3, #16
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	2310      	movs	r3, #16
 80063f4:	22c8      	movs	r2, #200	; 0xc8
 80063f6:	2178      	movs	r1, #120	; 0x78
 80063f8:	2028      	movs	r0, #40	; 0x28
 80063fa:	f7ff ff49 	bl	8006290 <LCD_ShowString>
  	POINT_COLOR=BLUE;//设置字体为蓝�??
 80063fe:	4b4d      	ldr	r3, [pc, #308]	; (8006534 <main+0x208>)
 8006400:	221f      	movs	r2, #31
 8006402:	801a      	strh	r2, [r3, #0]

    /* USER CODE BEGIN 3 */
//	  LCD_ShowString(40,240,200,16,16,data);


	  		if(HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET)//KEY1按下,写入24C02
 8006404:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006408:	4850      	ldr	r0, [pc, #320]	; (800654c <main+0x220>)
 800640a:	f001 f857 	bl	80074bc <HAL_GPIO_ReadPin>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d12c      	bne.n	800646e <main+0x142>
	  		{
	  			LCD_Fill(0,170,239,319,WHITE);//清除半屏
 8006414:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	f240 133f 	movw	r3, #319	; 0x13f
 800641e:	22ef      	movs	r2, #239	; 0xef
 8006420:	21aa      	movs	r1, #170	; 0xaa
 8006422:	2000      	movs	r0, #0
 8006424:	f7ff fdf8 	bl	8006018 <LCD_Fill>
	   			LCD_ShowString(40,170,200,16,16,"Start Writing 24C02....");
 8006428:	4b4a      	ldr	r3, [pc, #296]	; (8006554 <main+0x228>)
 800642a:	9301      	str	r3, [sp, #4]
 800642c:	2310      	movs	r3, #16
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	2310      	movs	r3, #16
 8006432:	22c8      	movs	r2, #200	; 0xc8
 8006434:	21aa      	movs	r1, #170	; 0xaa
 8006436:	2028      	movs	r0, #40	; 0x28
 8006438:	f7ff ff2a 	bl	8006290 <LCD_ShowString>
//	  			AT24CXX_Write(0,(uint8_t*)TEXT_Buffer,SIZE);
	   			AT24CXX_Write(0,(uint8_t*)data,SIZE);
 800643c:	221e      	movs	r2, #30
 800643e:	4946      	ldr	r1, [pc, #280]	; (8006558 <main+0x22c>)
 8006440:	2000      	movs	r0, #0
 8006442:	f7fa fa99 	bl	8000978 <AT24CXX_Write>
	  			LCD_Fill(0,170,239,319,WHITE);
 8006446:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800644a:	9300      	str	r3, [sp, #0]
 800644c:	f240 133f 	movw	r3, #319	; 0x13f
 8006450:	22ef      	movs	r2, #239	; 0xef
 8006452:	21aa      	movs	r1, #170	; 0xaa
 8006454:	2000      	movs	r0, #0
 8006456:	f7ff fddf 	bl	8006018 <LCD_Fill>
	  			LCD_ShowString(40,170,200,16,16,"24C02 Write Finished!");//提示传�?�完�???
 800645a:	4b40      	ldr	r3, [pc, #256]	; (800655c <main+0x230>)
 800645c:	9301      	str	r3, [sp, #4]
 800645e:	2310      	movs	r3, #16
 8006460:	9300      	str	r3, [sp, #0]
 8006462:	2310      	movs	r3, #16
 8006464:	22c8      	movs	r2, #200	; 0xc8
 8006466:	21aa      	movs	r1, #170	; 0xaa
 8006468:	2028      	movs	r0, #40	; 0x28
 800646a:	f7ff ff11 	bl	8006290 <LCD_ShowString>
	  		}
	  		if(HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET)//KEY0按下,读取字符串并显示
 800646e:	2120      	movs	r1, #32
 8006470:	483b      	ldr	r0, [pc, #236]	; (8006560 <main+0x234>)
 8006472:	f001 f823 	bl	80074bc <HAL_GPIO_ReadPin>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d145      	bne.n	8006508 <main+0x1dc>
	  		{
	  			LCD_Fill(0,170,239,319,WHITE);
 800647c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006480:	9300      	str	r3, [sp, #0]
 8006482:	f240 133f 	movw	r3, #319	; 0x13f
 8006486:	22ef      	movs	r2, #239	; 0xef
 8006488:	21aa      	movs	r1, #170	; 0xaa
 800648a:	2000      	movs	r0, #0
 800648c:	f7ff fdc4 	bl	8006018 <LCD_Fill>
	  			LCD_ShowString(40,170,200,16,16,"Start Reading 24C02.... ");
 8006490:	4b34      	ldr	r3, [pc, #208]	; (8006564 <main+0x238>)
 8006492:	9301      	str	r3, [sp, #4]
 8006494:	2310      	movs	r3, #16
 8006496:	9300      	str	r3, [sp, #0]
 8006498:	2310      	movs	r3, #16
 800649a:	22c8      	movs	r2, #200	; 0xc8
 800649c:	21aa      	movs	r1, #170	; 0xaa
 800649e:	2028      	movs	r0, #40	; 0x28
 80064a0:	f7ff fef6 	bl	8006290 <LCD_ShowString>
	  			AT24CXX_Read(0,datatemp,SIZE);
 80064a4:	463b      	mov	r3, r7
 80064a6:	221e      	movs	r2, #30
 80064a8:	4619      	mov	r1, r3
 80064aa:	2000      	movs	r0, #0
 80064ac:	f7fa fa45 	bl	800093a <AT24CXX_Read>
	  			LCD_Fill(0,170,239,319,WHITE);
 80064b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	f240 133f 	movw	r3, #319	; 0x13f
 80064ba:	22ef      	movs	r2, #239	; 0xef
 80064bc:	21aa      	movs	r1, #170	; 0xaa
 80064be:	2000      	movs	r0, #0
 80064c0:	f7ff fdaa 	bl	8006018 <LCD_Fill>
	  			LCD_ShowString(40,170,200,16,16,"The Data Read Is:  ");//提示传�?�完�???
 80064c4:	4b28      	ldr	r3, [pc, #160]	; (8006568 <main+0x23c>)
 80064c6:	9301      	str	r3, [sp, #4]
 80064c8:	2310      	movs	r3, #16
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	2310      	movs	r3, #16
 80064ce:	22c8      	movs	r2, #200	; 0xc8
 80064d0:	21aa      	movs	r1, #170	; 0xaa
 80064d2:	2028      	movs	r0, #40	; 0x28
 80064d4:	f7ff fedc 	bl	8006290 <LCD_ShowString>
	  			LCD_ShowString(40,190,200,16,16,datatemp);//显示读到的字符串
 80064d8:	463b      	mov	r3, r7
 80064da:	9301      	str	r3, [sp, #4]
 80064dc:	2310      	movs	r3, #16
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	2310      	movs	r3, #16
 80064e2:	22c8      	movs	r2, #200	; 0xc8
 80064e4:	21be      	movs	r1, #190	; 0xbe
 80064e6:	2028      	movs	r0, #40	; 0x28
 80064e8:	f7ff fed2 	bl	8006290 <LCD_ShowString>
	  			HAL_UART_Transmit(&huart1, "The read Data is\n", 17, 0xffff);
 80064ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80064f0:	2211      	movs	r2, #17
 80064f2:	491e      	ldr	r1, [pc, #120]	; (800656c <main+0x240>)
 80064f4:	480e      	ldr	r0, [pc, #56]	; (8006530 <main+0x204>)
 80064f6:	f001 fc89 	bl	8007e0c <HAL_UART_Transmit>
	  			HAL_UART_Transmit(&huart1, datatemp, 30, 0xffff);
 80064fa:	4639      	mov	r1, r7
 80064fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006500:	221e      	movs	r2, #30
 8006502:	480b      	ldr	r0, [pc, #44]	; (8006530 <main+0x204>)
 8006504:	f001 fc82 	bl	8007e0c <HAL_UART_Transmit>
	  		}
	  		i++;
 8006508:	8bfb      	ldrh	r3, [r7, #30]
 800650a:	3301      	adds	r3, #1
 800650c:	83fb      	strh	r3, [r7, #30]
	  		HAL_Delay(10);
 800650e:	200a      	movs	r0, #10
 8006510:	f000 fbcc 	bl	8006cac <HAL_Delay>
	  		if(i==20)
 8006514:	8bfb      	ldrh	r3, [r7, #30]
 8006516:	2b14      	cmp	r3, #20
 8006518:	f47f af74 	bne.w	8006404 <main+0xd8>
	  		{
	  			HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);//提示系统正在运行
 800651c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006520:	480a      	ldr	r0, [pc, #40]	; (800654c <main+0x220>)
 8006522:	f000 fffa 	bl	800751a <HAL_GPIO_TogglePin>
	  			i=0;
 8006526:	2300      	movs	r3, #0
 8006528:	83fb      	strh	r3, [r7, #30]
	  		if(HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET)//KEY1按下,写入24C02
 800652a:	e76b      	b.n	8006404 <main+0xd8>
 800652c:	20000040 	.word	0x20000040
 8006530:	20000478 	.word	0x20000478
 8006534:	2000002c 	.word	0x2000002c
 8006538:	08008af4 	.word	0x08008af4
 800653c:	08008afc 	.word	0x08008afc
 8006540:	08008b08 	.word	0x08008b08
 8006544:	08008b20 	.word	0x08008b20
 8006548:	08008b34 	.word	0x08008b34
 800654c:	40010800 	.word	0x40010800
 8006550:	08008b48 	.word	0x08008b48
 8006554:	08008b58 	.word	0x08008b58
 8006558:	20000054 	.word	0x20000054
 800655c:	08008b70 	.word	0x08008b70
 8006560:	40011000 	.word	0x40011000
 8006564:	08008b88 	.word	0x08008b88
 8006568:	08008ba4 	.word	0x08008ba4
 800656c:	08008bb8 	.word	0x08008bb8

08006570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b090      	sub	sp, #64	; 0x40
 8006574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006576:	f107 0318 	add.w	r3, r7, #24
 800657a:	2228      	movs	r2, #40	; 0x28
 800657c:	2100      	movs	r1, #0
 800657e:	4618      	mov	r0, r3
 8006580:	f002 fa6c 	bl	8008a5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006584:	1d3b      	adds	r3, r7, #4
 8006586:	2200      	movs	r2, #0
 8006588:	601a      	str	r2, [r3, #0]
 800658a:	605a      	str	r2, [r3, #4]
 800658c:	609a      	str	r2, [r3, #8]
 800658e:	60da      	str	r2, [r3, #12]
 8006590:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006592:	2301      	movs	r3, #1
 8006594:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006596:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800659a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800659c:	2300      	movs	r3, #0
 800659e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80065a0:	2301      	movs	r3, #1
 80065a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80065a4:	2302      	movs	r3, #2
 80065a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80065a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80065ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80065ae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80065b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80065b4:	f107 0318 	add.w	r3, r7, #24
 80065b8:	4618      	mov	r0, r3
 80065ba:	f000 ffc7 	bl	800754c <HAL_RCC_OscConfig>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d001      	beq.n	80065c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80065c4:	f000 f819 	bl	80065fa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80065c8:	230f      	movs	r3, #15
 80065ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80065cc:	2302      	movs	r3, #2
 80065ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80065d0:	2300      	movs	r3, #0
 80065d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80065d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80065da:	2300      	movs	r3, #0
 80065dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80065de:	1d3b      	adds	r3, r7, #4
 80065e0:	2102      	movs	r1, #2
 80065e2:	4618      	mov	r0, r3
 80065e4:	f001 fa34 	bl	8007a50 <HAL_RCC_ClockConfig>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80065ee:	f000 f804 	bl	80065fa <Error_Handler>
  }
}
 80065f2:	bf00      	nop
 80065f4:	3740      	adds	r7, #64	; 0x40
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80065fa:	b480      	push	{r7}
 80065fc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80065fe:	b672      	cpsid	i
}
 8006600:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006602:	e7fe      	b.n	8006602 <Error_Handler+0x8>

08006604 <IIC_Init>:
//All rights reserved
////////////////////////////////////////////////////////////////////////////////// 	  

//初始化IIC
void IIC_Init(void)
{					     
 8006604:	b580      	push	{r7, lr}
 8006606:	af00      	add	r7, sp, #0
	IIC_SCL(1);
 8006608:	2201      	movs	r2, #1
 800660a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800660e:	4805      	ldr	r0, [pc, #20]	; (8006624 <IIC_Init+0x20>)
 8006610:	f000 ff6b 	bl	80074ea <HAL_GPIO_WritePin>
	IIC_SDA(1);
 8006614:	2201      	movs	r2, #1
 8006616:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800661a:	4802      	ldr	r0, [pc, #8]	; (8006624 <IIC_Init+0x20>)
 800661c:	f000 ff65 	bl	80074ea <HAL_GPIO_WritePin>

}
 8006620:	bf00      	nop
 8006622:	bd80      	pop	{r7, pc}
 8006624:	40011000 	.word	0x40011000

08006628 <IIC_Start>:
//产生IIC起始信号
void IIC_Start(void)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	af00      	add	r7, sp, #0
	SDA_OUT();     //sda线输出
 800662c:	4b15      	ldr	r3, [pc, #84]	; (8006684 <IIC_Start+0x5c>)
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	4a14      	ldr	r2, [pc, #80]	; (8006684 <IIC_Start+0x5c>)
 8006632:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006636:	6053      	str	r3, [r2, #4]
 8006638:	4b12      	ldr	r3, [pc, #72]	; (8006684 <IIC_Start+0x5c>)
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	4a11      	ldr	r2, [pc, #68]	; (8006684 <IIC_Start+0x5c>)
 800663e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8006642:	6053      	str	r3, [r2, #4]
	IIC_SDA(1);
 8006644:	2201      	movs	r2, #1
 8006646:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800664a:	480e      	ldr	r0, [pc, #56]	; (8006684 <IIC_Start+0x5c>)
 800664c:	f000 ff4d 	bl	80074ea <HAL_GPIO_WritePin>
	IIC_SCL(1);
 8006650:	2201      	movs	r2, #1
 8006652:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006656:	480b      	ldr	r0, [pc, #44]	; (8006684 <IIC_Start+0x5c>)
 8006658:	f000 ff47 	bl	80074ea <HAL_GPIO_WritePin>
	delay_us(4);
 800665c:	2004      	movs	r0, #4
 800665e:	f7fa fa4b 	bl	8000af8 <delay_us>
	IIC_SDA(0);//START:when CLK is high,DATA change form high to low
 8006662:	2200      	movs	r2, #0
 8006664:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006668:	4806      	ldr	r0, [pc, #24]	; (8006684 <IIC_Start+0x5c>)
 800666a:	f000 ff3e 	bl	80074ea <HAL_GPIO_WritePin>
	delay_us(4);
 800666e:	2004      	movs	r0, #4
 8006670:	f7fa fa42 	bl	8000af8 <delay_us>
	IIC_SCL(0);//钳住I2C总线，准备发送或接收数据
 8006674:	2200      	movs	r2, #0
 8006676:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800667a:	4802      	ldr	r0, [pc, #8]	; (8006684 <IIC_Start+0x5c>)
 800667c:	f000 ff35 	bl	80074ea <HAL_GPIO_WritePin>
}	  
 8006680:	bf00      	nop
 8006682:	bd80      	pop	{r7, pc}
 8006684:	40011000 	.word	0x40011000

08006688 <IIC_Stop>:
//产生IIC停止信号
void IIC_Stop(void)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	af00      	add	r7, sp, #0
	SDA_OUT();//sda线输出
 800668c:	4b15      	ldr	r3, [pc, #84]	; (80066e4 <IIC_Stop+0x5c>)
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	4a14      	ldr	r2, [pc, #80]	; (80066e4 <IIC_Stop+0x5c>)
 8006692:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006696:	6053      	str	r3, [r2, #4]
 8006698:	4b12      	ldr	r3, [pc, #72]	; (80066e4 <IIC_Stop+0x5c>)
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	4a11      	ldr	r2, [pc, #68]	; (80066e4 <IIC_Stop+0x5c>)
 800669e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80066a2:	6053      	str	r3, [r2, #4]
	IIC_SCL(0);
 80066a4:	2200      	movs	r2, #0
 80066a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80066aa:	480e      	ldr	r0, [pc, #56]	; (80066e4 <IIC_Stop+0x5c>)
 80066ac:	f000 ff1d 	bl	80074ea <HAL_GPIO_WritePin>
	IIC_SDA(0);//STOP:when CLK is high DATA change form low to high
 80066b0:	2200      	movs	r2, #0
 80066b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80066b6:	480b      	ldr	r0, [pc, #44]	; (80066e4 <IIC_Stop+0x5c>)
 80066b8:	f000 ff17 	bl	80074ea <HAL_GPIO_WritePin>
 	delay_us(4);
 80066bc:	2004      	movs	r0, #4
 80066be:	f7fa fa1b 	bl	8000af8 <delay_us>
 	IIC_SCL(1);
 80066c2:	2201      	movs	r2, #1
 80066c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80066c8:	4806      	ldr	r0, [pc, #24]	; (80066e4 <IIC_Stop+0x5c>)
 80066ca:	f000 ff0e 	bl	80074ea <HAL_GPIO_WritePin>
	IIC_SDA(1);//发送I2C总线结束信号
 80066ce:	2201      	movs	r2, #1
 80066d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80066d4:	4803      	ldr	r0, [pc, #12]	; (80066e4 <IIC_Stop+0x5c>)
 80066d6:	f000 ff08 	bl	80074ea <HAL_GPIO_WritePin>
	delay_us(4);							   	
 80066da:	2004      	movs	r0, #4
 80066dc:	f7fa fa0c 	bl	8000af8 <delay_us>
}
 80066e0:	bf00      	nop
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	40011000 	.word	0x40011000

080066e8 <IIC_Wait_Ack>:
//等待应答信号到来
//返回值：1，接收应答失败
//        0，接收应答成功
uint8_t IIC_Wait_Ack(void)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
	uint8_t ucErrTime=0;
 80066ee:	2300      	movs	r3, #0
 80066f0:	71fb      	strb	r3, [r7, #7]
	SDA_IN();      //SDA设置为输入
 80066f2:	4b1e      	ldr	r3, [pc, #120]	; (800676c <IIC_Wait_Ack+0x84>)
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	4a1d      	ldr	r2, [pc, #116]	; (800676c <IIC_Wait_Ack+0x84>)
 80066f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066fc:	6053      	str	r3, [r2, #4]
 80066fe:	4b1b      	ldr	r3, [pc, #108]	; (800676c <IIC_Wait_Ack+0x84>)
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	4a1a      	ldr	r2, [pc, #104]	; (800676c <IIC_Wait_Ack+0x84>)
 8006704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006708:	6053      	str	r3, [r2, #4]
	IIC_SDA(1);delay_us(1);
 800670a:	2201      	movs	r2, #1
 800670c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006710:	4816      	ldr	r0, [pc, #88]	; (800676c <IIC_Wait_Ack+0x84>)
 8006712:	f000 feea 	bl	80074ea <HAL_GPIO_WritePin>
 8006716:	2001      	movs	r0, #1
 8006718:	f7fa f9ee 	bl	8000af8 <delay_us>
	IIC_SCL(1);delay_us(1);
 800671c:	2201      	movs	r2, #1
 800671e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006722:	4812      	ldr	r0, [pc, #72]	; (800676c <IIC_Wait_Ack+0x84>)
 8006724:	f000 fee1 	bl	80074ea <HAL_GPIO_WritePin>
 8006728:	2001      	movs	r0, #1
 800672a:	f7fa f9e5 	bl	8000af8 <delay_us>
	while(IIC_READ_SDA)
 800672e:	e009      	b.n	8006744 <IIC_Wait_Ack+0x5c>
	{
		ucErrTime++;
 8006730:	79fb      	ldrb	r3, [r7, #7]
 8006732:	3301      	adds	r3, #1
 8006734:	71fb      	strb	r3, [r7, #7]
		if(ucErrTime>250)
 8006736:	79fb      	ldrb	r3, [r7, #7]
 8006738:	2bfa      	cmp	r3, #250	; 0xfa
 800673a:	d903      	bls.n	8006744 <IIC_Wait_Ack+0x5c>
		{
			IIC_Stop();
 800673c:	f7ff ffa4 	bl	8006688 <IIC_Stop>
			return 1;
 8006740:	2301      	movs	r3, #1
 8006742:	e00e      	b.n	8006762 <IIC_Wait_Ack+0x7a>
	while(IIC_READ_SDA)
 8006744:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006748:	4808      	ldr	r0, [pc, #32]	; (800676c <IIC_Wait_Ack+0x84>)
 800674a:	f000 feb7 	bl	80074bc <HAL_GPIO_ReadPin>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1ed      	bne.n	8006730 <IIC_Wait_Ack+0x48>
		}
	}
	IIC_SCL(0);//时钟输出0
 8006754:	2200      	movs	r2, #0
 8006756:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800675a:	4804      	ldr	r0, [pc, #16]	; (800676c <IIC_Wait_Ack+0x84>)
 800675c:	f000 fec5 	bl	80074ea <HAL_GPIO_WritePin>
	return 0;  
 8006760:	2300      	movs	r3, #0
} 
 8006762:	4618      	mov	r0, r3
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	40011000 	.word	0x40011000

08006770 <IIC_Ack>:
//产生ACK应答
void IIC_Ack(void)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	af00      	add	r7, sp, #0
	IIC_SCL(0);
 8006774:	2200      	movs	r2, #0
 8006776:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800677a:	4814      	ldr	r0, [pc, #80]	; (80067cc <IIC_Ack+0x5c>)
 800677c:	f000 feb5 	bl	80074ea <HAL_GPIO_WritePin>
	SDA_OUT();
 8006780:	4b12      	ldr	r3, [pc, #72]	; (80067cc <IIC_Ack+0x5c>)
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	4a11      	ldr	r2, [pc, #68]	; (80067cc <IIC_Ack+0x5c>)
 8006786:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800678a:	6053      	str	r3, [r2, #4]
 800678c:	4b0f      	ldr	r3, [pc, #60]	; (80067cc <IIC_Ack+0x5c>)
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	4a0e      	ldr	r2, [pc, #56]	; (80067cc <IIC_Ack+0x5c>)
 8006792:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8006796:	6053      	str	r3, [r2, #4]
	IIC_SDA(0);
 8006798:	2200      	movs	r2, #0
 800679a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800679e:	480b      	ldr	r0, [pc, #44]	; (80067cc <IIC_Ack+0x5c>)
 80067a0:	f000 fea3 	bl	80074ea <HAL_GPIO_WritePin>
	delay_us(2);
 80067a4:	2002      	movs	r0, #2
 80067a6:	f7fa f9a7 	bl	8000af8 <delay_us>
	IIC_SCL(1);
 80067aa:	2201      	movs	r2, #1
 80067ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80067b0:	4806      	ldr	r0, [pc, #24]	; (80067cc <IIC_Ack+0x5c>)
 80067b2:	f000 fe9a 	bl	80074ea <HAL_GPIO_WritePin>
	delay_us(2);
 80067b6:	2002      	movs	r0, #2
 80067b8:	f7fa f99e 	bl	8000af8 <delay_us>
	IIC_SCL(0);
 80067bc:	2200      	movs	r2, #0
 80067be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80067c2:	4802      	ldr	r0, [pc, #8]	; (80067cc <IIC_Ack+0x5c>)
 80067c4:	f000 fe91 	bl	80074ea <HAL_GPIO_WritePin>
}
 80067c8:	bf00      	nop
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	40011000 	.word	0x40011000

080067d0 <IIC_NAck>:
//不产生ACK应答
void IIC_NAck(void)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	af00      	add	r7, sp, #0
	IIC_SCL(0);
 80067d4:	2200      	movs	r2, #0
 80067d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80067da:	4814      	ldr	r0, [pc, #80]	; (800682c <IIC_NAck+0x5c>)
 80067dc:	f000 fe85 	bl	80074ea <HAL_GPIO_WritePin>
	SDA_OUT();
 80067e0:	4b12      	ldr	r3, [pc, #72]	; (800682c <IIC_NAck+0x5c>)
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	4a11      	ldr	r2, [pc, #68]	; (800682c <IIC_NAck+0x5c>)
 80067e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067ea:	6053      	str	r3, [r2, #4]
 80067ec:	4b0f      	ldr	r3, [pc, #60]	; (800682c <IIC_NAck+0x5c>)
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	4a0e      	ldr	r2, [pc, #56]	; (800682c <IIC_NAck+0x5c>)
 80067f2:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80067f6:	6053      	str	r3, [r2, #4]
	IIC_SDA(1);
 80067f8:	2201      	movs	r2, #1
 80067fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80067fe:	480b      	ldr	r0, [pc, #44]	; (800682c <IIC_NAck+0x5c>)
 8006800:	f000 fe73 	bl	80074ea <HAL_GPIO_WritePin>
	delay_us(2);
 8006804:	2002      	movs	r0, #2
 8006806:	f7fa f977 	bl	8000af8 <delay_us>
	IIC_SCL(1);
 800680a:	2201      	movs	r2, #1
 800680c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006810:	4806      	ldr	r0, [pc, #24]	; (800682c <IIC_NAck+0x5c>)
 8006812:	f000 fe6a 	bl	80074ea <HAL_GPIO_WritePin>
	delay_us(2);
 8006816:	2002      	movs	r0, #2
 8006818:	f7fa f96e 	bl	8000af8 <delay_us>
	IIC_SCL(0);
 800681c:	2200      	movs	r2, #0
 800681e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006822:	4802      	ldr	r0, [pc, #8]	; (800682c <IIC_NAck+0x5c>)
 8006824:	f000 fe61 	bl	80074ea <HAL_GPIO_WritePin>
}					 				     
 8006828:	bf00      	nop
 800682a:	bd80      	pop	{r7, pc}
 800682c:	40011000 	.word	0x40011000

08006830 <IIC_Send_Byte>:
//IIC发送一个字节
//返回从机有无应答
//1，有应答
//0，无应答
void IIC_Send_Byte(uint8_t txd)
{                        
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	4603      	mov	r3, r0
 8006838:	71fb      	strb	r3, [r7, #7]
	uint8_t t;
	SDA_OUT(); 	    
 800683a:	4b20      	ldr	r3, [pc, #128]	; (80068bc <IIC_Send_Byte+0x8c>)
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	4a1f      	ldr	r2, [pc, #124]	; (80068bc <IIC_Send_Byte+0x8c>)
 8006840:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006844:	6053      	str	r3, [r2, #4]
 8006846:	4b1d      	ldr	r3, [pc, #116]	; (80068bc <IIC_Send_Byte+0x8c>)
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	4a1c      	ldr	r2, [pc, #112]	; (80068bc <IIC_Send_Byte+0x8c>)
 800684c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8006850:	6053      	str	r3, [r2, #4]
	IIC_SCL(0);//拉低时钟开始数据传输
 8006852:	2200      	movs	r2, #0
 8006854:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006858:	4818      	ldr	r0, [pc, #96]	; (80068bc <IIC_Send_Byte+0x8c>)
 800685a:	f000 fe46 	bl	80074ea <HAL_GPIO_WritePin>
    for(t=0;t<8;t++)
 800685e:	2300      	movs	r3, #0
 8006860:	73fb      	strb	r3, [r7, #15]
 8006862:	e023      	b.n	80068ac <IIC_Send_Byte+0x7c>
    {              
    	HAL_GPIO_WritePin(IIC_SDA_GPIO_Port, IIC_SDA_Pin, (txd&0x80)>>7);
 8006864:	79fb      	ldrb	r3, [r7, #7]
 8006866:	09db      	lsrs	r3, r3, #7
 8006868:	b2db      	uxtb	r3, r3
 800686a:	461a      	mov	r2, r3
 800686c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006870:	4812      	ldr	r0, [pc, #72]	; (80068bc <IIC_Send_Byte+0x8c>)
 8006872:	f000 fe3a 	bl	80074ea <HAL_GPIO_WritePin>
        txd<<=1; 	  
 8006876:	79fb      	ldrb	r3, [r7, #7]
 8006878:	005b      	lsls	r3, r3, #1
 800687a:	71fb      	strb	r3, [r7, #7]
		delay_us(2);   //对TEA5767这三个延时都是必须的
 800687c:	2002      	movs	r0, #2
 800687e:	f7fa f93b 	bl	8000af8 <delay_us>
		IIC_SCL(1);
 8006882:	2201      	movs	r2, #1
 8006884:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006888:	480c      	ldr	r0, [pc, #48]	; (80068bc <IIC_Send_Byte+0x8c>)
 800688a:	f000 fe2e 	bl	80074ea <HAL_GPIO_WritePin>
		delay_us(2); 
 800688e:	2002      	movs	r0, #2
 8006890:	f7fa f932 	bl	8000af8 <delay_us>
		IIC_SCL(0);
 8006894:	2200      	movs	r2, #0
 8006896:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800689a:	4808      	ldr	r0, [pc, #32]	; (80068bc <IIC_Send_Byte+0x8c>)
 800689c:	f000 fe25 	bl	80074ea <HAL_GPIO_WritePin>
		delay_us(2);
 80068a0:	2002      	movs	r0, #2
 80068a2:	f7fa f929 	bl	8000af8 <delay_us>
    for(t=0;t<8;t++)
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
 80068a8:	3301      	adds	r3, #1
 80068aa:	73fb      	strb	r3, [r7, #15]
 80068ac:	7bfb      	ldrb	r3, [r7, #15]
 80068ae:	2b07      	cmp	r3, #7
 80068b0:	d9d8      	bls.n	8006864 <IIC_Send_Byte+0x34>
    }	 
} 	    
 80068b2:	bf00      	nop
 80068b4:	bf00      	nop
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	40011000 	.word	0x40011000

080068c0 <IIC_Read_Byte>:
//读1个字节，ack=1时，发送ACK，ack=0，发送nACK
uint8_t IIC_Read_Byte(unsigned char ack)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	4603      	mov	r3, r0
 80068c8:	71fb      	strb	r3, [r7, #7]
	unsigned char i,receive=0;
 80068ca:	2300      	movs	r3, #0
 80068cc:	73bb      	strb	r3, [r7, #14]
	SDA_IN();//SDA设置为输入
 80068ce:	4b21      	ldr	r3, [pc, #132]	; (8006954 <IIC_Read_Byte+0x94>)
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	4a20      	ldr	r2, [pc, #128]	; (8006954 <IIC_Read_Byte+0x94>)
 80068d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068d8:	6053      	str	r3, [r2, #4]
 80068da:	4b1e      	ldr	r3, [pc, #120]	; (8006954 <IIC_Read_Byte+0x94>)
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	4a1d      	ldr	r2, [pc, #116]	; (8006954 <IIC_Read_Byte+0x94>)
 80068e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068e4:	6053      	str	r3, [r2, #4]
    for(i=0;i<8;i++ )
 80068e6:	2300      	movs	r3, #0
 80068e8:	73fb      	strb	r3, [r7, #15]
 80068ea:	e022      	b.n	8006932 <IIC_Read_Byte+0x72>
	{
    	IIC_SCL(0);
 80068ec:	2200      	movs	r2, #0
 80068ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80068f2:	4818      	ldr	r0, [pc, #96]	; (8006954 <IIC_Read_Byte+0x94>)
 80068f4:	f000 fdf9 	bl	80074ea <HAL_GPIO_WritePin>
        delay_us(2);
 80068f8:	2002      	movs	r0, #2
 80068fa:	f7fa f8fd 	bl	8000af8 <delay_us>
        IIC_SCL(1);
 80068fe:	2201      	movs	r2, #1
 8006900:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006904:	4813      	ldr	r0, [pc, #76]	; (8006954 <IIC_Read_Byte+0x94>)
 8006906:	f000 fdf0 	bl	80074ea <HAL_GPIO_WritePin>
        receive<<=1;
 800690a:	7bbb      	ldrb	r3, [r7, #14]
 800690c:	005b      	lsls	r3, r3, #1
 800690e:	73bb      	strb	r3, [r7, #14]
        if(IIC_READ_SDA)
 8006910:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006914:	480f      	ldr	r0, [pc, #60]	; (8006954 <IIC_Read_Byte+0x94>)
 8006916:	f000 fdd1 	bl	80074bc <HAL_GPIO_ReadPin>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d002      	beq.n	8006926 <IIC_Read_Byte+0x66>
        	receive++;
 8006920:	7bbb      	ldrb	r3, [r7, #14]
 8006922:	3301      	adds	r3, #1
 8006924:	73bb      	strb	r3, [r7, #14]
		delay_us(1); 
 8006926:	2001      	movs	r0, #1
 8006928:	f7fa f8e6 	bl	8000af8 <delay_us>
    for(i=0;i<8;i++ )
 800692c:	7bfb      	ldrb	r3, [r7, #15]
 800692e:	3301      	adds	r3, #1
 8006930:	73fb      	strb	r3, [r7, #15]
 8006932:	7bfb      	ldrb	r3, [r7, #15]
 8006934:	2b07      	cmp	r3, #7
 8006936:	d9d9      	bls.n	80068ec <IIC_Read_Byte+0x2c>
    }					 
    if (!ack)
 8006938:	79fb      	ldrb	r3, [r7, #7]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d102      	bne.n	8006944 <IIC_Read_Byte+0x84>
        IIC_NAck();//发送nACK
 800693e:	f7ff ff47 	bl	80067d0 <IIC_NAck>
 8006942:	e001      	b.n	8006948 <IIC_Read_Byte+0x88>
    else
        IIC_Ack(); //发送ACK
 8006944:	f7ff ff14 	bl	8006770 <IIC_Ack>
    return receive;
 8006948:	7bbb      	ldrb	r3, [r7, #14]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	40011000 	.word	0x40011000

08006958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800695e:	4b16      	ldr	r3, [pc, #88]	; (80069b8 <HAL_MspInit+0x60>)
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	4a15      	ldr	r2, [pc, #84]	; (80069b8 <HAL_MspInit+0x60>)
 8006964:	f043 0301 	orr.w	r3, r3, #1
 8006968:	6193      	str	r3, [r2, #24]
 800696a:	4b13      	ldr	r3, [pc, #76]	; (80069b8 <HAL_MspInit+0x60>)
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	60bb      	str	r3, [r7, #8]
 8006974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006976:	4b10      	ldr	r3, [pc, #64]	; (80069b8 <HAL_MspInit+0x60>)
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	4a0f      	ldr	r2, [pc, #60]	; (80069b8 <HAL_MspInit+0x60>)
 800697c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006980:	61d3      	str	r3, [r2, #28]
 8006982:	4b0d      	ldr	r3, [pc, #52]	; (80069b8 <HAL_MspInit+0x60>)
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800698a:	607b      	str	r3, [r7, #4]
 800698c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800698e:	2005      	movs	r0, #5
 8006990:	f000 fa7c 	bl	8006e8c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006994:	4b09      	ldr	r3, [pc, #36]	; (80069bc <HAL_MspInit+0x64>)
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	60fb      	str	r3, [r7, #12]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80069a0:	60fb      	str	r3, [r7, #12]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80069a8:	60fb      	str	r3, [r7, #12]
 80069aa:	4a04      	ldr	r2, [pc, #16]	; (80069bc <HAL_MspInit+0x64>)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80069b0:	bf00      	nop
 80069b2:	3710      	adds	r7, #16
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	40021000 	.word	0x40021000
 80069bc:	40010000 	.word	0x40010000

080069c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80069c0:	b480      	push	{r7}
 80069c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80069c4:	e7fe      	b.n	80069c4 <NMI_Handler+0x4>

080069c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80069c6:	b480      	push	{r7}
 80069c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80069ca:	e7fe      	b.n	80069ca <HardFault_Handler+0x4>

080069cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80069cc:	b480      	push	{r7}
 80069ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80069d0:	e7fe      	b.n	80069d0 <MemManage_Handler+0x4>

080069d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80069d2:	b480      	push	{r7}
 80069d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80069d6:	e7fe      	b.n	80069d6 <BusFault_Handler+0x4>

080069d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80069d8:	b480      	push	{r7}
 80069da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80069dc:	e7fe      	b.n	80069dc <UsageFault_Handler+0x4>

080069de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80069de:	b480      	push	{r7}
 80069e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80069e2:	bf00      	nop
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bc80      	pop	{r7}
 80069e8:	4770      	bx	lr

080069ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80069ea:	b480      	push	{r7}
 80069ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80069ee:	bf00      	nop
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bc80      	pop	{r7}
 80069f4:	4770      	bx	lr

080069f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80069f6:	b480      	push	{r7}
 80069f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80069fa:	bf00      	nop
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bc80      	pop	{r7}
 8006a00:	4770      	bx	lr

08006a02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006a06:	f000 f935 	bl	8006c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006a0a:	bf00      	nop
 8006a0c:	bd80      	pop	{r7, pc}
	...

08006a10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006a14:	4804      	ldr	r0, [pc, #16]	; (8006a28 <USART1_IRQHandler+0x18>)
 8006a16:	f001 faa1 	bl	8007f5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_Receive_IT(&huart1,(uint8_t *)rxBuffer,1);
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	4903      	ldr	r1, [pc, #12]	; (8006a2c <USART1_IRQHandler+0x1c>)
 8006a1e:	4802      	ldr	r0, [pc, #8]	; (8006a28 <USART1_IRQHandler+0x18>)
 8006a20:	f001 fa77 	bl	8007f12 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_IRQn 1 */
}
 8006a24:	bf00      	nop
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	20000478 	.word	0x20000478
 8006a2c:	20000040 	.word	0x20000040

08006a30 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 1 */

uint8_t data[30];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a10      	ldr	r2, [pc, #64]	; (8006a80 <HAL_UART_RxCpltCallback+0x50>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d119      	bne.n	8006a76 <HAL_UART_RxCpltCallback+0x46>
		static unsigned char uRx_Data[1024] = {0};
		static unsigned char uLength = 0;
		if(rxBuffer[0] == '\n'){
 8006a42:	4b10      	ldr	r3, [pc, #64]	; (8006a84 <HAL_UART_RxCpltCallback+0x54>)
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	2b0a      	cmp	r3, #10
 8006a48:	d108      	bne.n	8006a5c <HAL_UART_RxCpltCallback+0x2c>
//		HAL_UART_Transmit(&huart1, uRx_Data, uLength, 0xffff);
		strncpy(data,uRx_Data,30);
 8006a4a:	221e      	movs	r2, #30
 8006a4c:	490e      	ldr	r1, [pc, #56]	; (8006a88 <HAL_UART_RxCpltCallback+0x58>)
 8006a4e:	480f      	ldr	r0, [pc, #60]	; (8006a8c <HAL_UART_RxCpltCallback+0x5c>)
 8006a50:	f002 f80c 	bl	8008a6c <strncpy>
//		LCD_ShowString(40,240,200,16,16,data);
		uLength = 0;
 8006a54:	4b0e      	ldr	r3, [pc, #56]	; (8006a90 <HAL_UART_RxCpltCallback+0x60>)
 8006a56:	2200      	movs	r2, #0
 8006a58:	701a      	strb	r2, [r3, #0]
	}else{
		uRx_Data[uLength] = rxBuffer[0];
		uLength++;
		}
	}
}
 8006a5a:	e00c      	b.n	8006a76 <HAL_UART_RxCpltCallback+0x46>
		uRx_Data[uLength] = rxBuffer[0];
 8006a5c:	4b0c      	ldr	r3, [pc, #48]	; (8006a90 <HAL_UART_RxCpltCallback+0x60>)
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	461a      	mov	r2, r3
 8006a62:	4b08      	ldr	r3, [pc, #32]	; (8006a84 <HAL_UART_RxCpltCallback+0x54>)
 8006a64:	7819      	ldrb	r1, [r3, #0]
 8006a66:	4b08      	ldr	r3, [pc, #32]	; (8006a88 <HAL_UART_RxCpltCallback+0x58>)
 8006a68:	5499      	strb	r1, [r3, r2]
		uLength++;
 8006a6a:	4b09      	ldr	r3, [pc, #36]	; (8006a90 <HAL_UART_RxCpltCallback+0x60>)
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	b2da      	uxtb	r2, r3
 8006a72:	4b07      	ldr	r3, [pc, #28]	; (8006a90 <HAL_UART_RxCpltCallback+0x60>)
 8006a74:	701a      	strb	r2, [r3, #0]
}
 8006a76:	bf00      	nop
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	40013800 	.word	0x40013800
 8006a84:	20000040 	.word	0x20000040
 8006a88:	20000074 	.word	0x20000074
 8006a8c:	20000054 	.word	0x20000054
 8006a90:	20000474 	.word	0x20000474

08006a94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006a94:	b480      	push	{r7}
 8006a96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006a98:	bf00      	nop
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bc80      	pop	{r7}
 8006a9e:	4770      	bx	lr

08006aa0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006aa4:	4b11      	ldr	r3, [pc, #68]	; (8006aec <MX_USART1_UART_Init+0x4c>)
 8006aa6:	4a12      	ldr	r2, [pc, #72]	; (8006af0 <MX_USART1_UART_Init+0x50>)
 8006aa8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006aaa:	4b10      	ldr	r3, [pc, #64]	; (8006aec <MX_USART1_UART_Init+0x4c>)
 8006aac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006ab0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006ab2:	4b0e      	ldr	r3, [pc, #56]	; (8006aec <MX_USART1_UART_Init+0x4c>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006ab8:	4b0c      	ldr	r3, [pc, #48]	; (8006aec <MX_USART1_UART_Init+0x4c>)
 8006aba:	2200      	movs	r2, #0
 8006abc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006abe:	4b0b      	ldr	r3, [pc, #44]	; (8006aec <MX_USART1_UART_Init+0x4c>)
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006ac4:	4b09      	ldr	r3, [pc, #36]	; (8006aec <MX_USART1_UART_Init+0x4c>)
 8006ac6:	220c      	movs	r2, #12
 8006ac8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006aca:	4b08      	ldr	r3, [pc, #32]	; (8006aec <MX_USART1_UART_Init+0x4c>)
 8006acc:	2200      	movs	r2, #0
 8006ace:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006ad0:	4b06      	ldr	r3, [pc, #24]	; (8006aec <MX_USART1_UART_Init+0x4c>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006ad6:	4805      	ldr	r0, [pc, #20]	; (8006aec <MX_USART1_UART_Init+0x4c>)
 8006ad8:	f001 f948 	bl	8007d6c <HAL_UART_Init>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d001      	beq.n	8006ae6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006ae2:	f7ff fd8a 	bl	80065fa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006ae6:	bf00      	nop
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	20000478 	.word	0x20000478
 8006af0:	40013800 	.word	0x40013800

08006af4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b088      	sub	sp, #32
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006afc:	f107 0310 	add.w	r3, r7, #16
 8006b00:	2200      	movs	r2, #0
 8006b02:	601a      	str	r2, [r3, #0]
 8006b04:	605a      	str	r2, [r3, #4]
 8006b06:	609a      	str	r2, [r3, #8]
 8006b08:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a20      	ldr	r2, [pc, #128]	; (8006b90 <HAL_UART_MspInit+0x9c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d139      	bne.n	8006b88 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006b14:	4b1f      	ldr	r3, [pc, #124]	; (8006b94 <HAL_UART_MspInit+0xa0>)
 8006b16:	699b      	ldr	r3, [r3, #24]
 8006b18:	4a1e      	ldr	r2, [pc, #120]	; (8006b94 <HAL_UART_MspInit+0xa0>)
 8006b1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b1e:	6193      	str	r3, [r2, #24]
 8006b20:	4b1c      	ldr	r3, [pc, #112]	; (8006b94 <HAL_UART_MspInit+0xa0>)
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b28:	60fb      	str	r3, [r7, #12]
 8006b2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b2c:	4b19      	ldr	r3, [pc, #100]	; (8006b94 <HAL_UART_MspInit+0xa0>)
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	4a18      	ldr	r2, [pc, #96]	; (8006b94 <HAL_UART_MspInit+0xa0>)
 8006b32:	f043 0304 	orr.w	r3, r3, #4
 8006b36:	6193      	str	r3, [r2, #24]
 8006b38:	4b16      	ldr	r3, [pc, #88]	; (8006b94 <HAL_UART_MspInit+0xa0>)
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	f003 0304 	and.w	r3, r3, #4
 8006b40:	60bb      	str	r3, [r7, #8]
 8006b42:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006b44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b52:	f107 0310 	add.w	r3, r7, #16
 8006b56:	4619      	mov	r1, r3
 8006b58:	480f      	ldr	r0, [pc, #60]	; (8006b98 <HAL_UART_MspInit+0xa4>)
 8006b5a:	f000 fb1b 	bl	8007194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b64:	2300      	movs	r3, #0
 8006b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b6c:	f107 0310 	add.w	r3, r7, #16
 8006b70:	4619      	mov	r1, r3
 8006b72:	4809      	ldr	r0, [pc, #36]	; (8006b98 <HAL_UART_MspInit+0xa4>)
 8006b74:	f000 fb0e 	bl	8007194 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8006b78:	2200      	movs	r2, #0
 8006b7a:	2101      	movs	r1, #1
 8006b7c:	2025      	movs	r0, #37	; 0x25
 8006b7e:	f000 f990 	bl	8006ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006b82:	2025      	movs	r0, #37	; 0x25
 8006b84:	f000 f9a9 	bl	8006eda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006b88:	bf00      	nop
 8006b8a:	3720      	adds	r7, #32
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	40013800 	.word	0x40013800
 8006b94:	40021000 	.word	0x40021000
 8006b98:	40010800 	.word	0x40010800

08006b9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006b9c:	f7ff ff7a 	bl	8006a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006ba0:	480b      	ldr	r0, [pc, #44]	; (8006bd0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8006ba2:	490c      	ldr	r1, [pc, #48]	; (8006bd4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8006ba4:	4a0c      	ldr	r2, [pc, #48]	; (8006bd8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8006ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006ba8:	e002      	b.n	8006bb0 <LoopCopyDataInit>

08006baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006bae:	3304      	adds	r3, #4

08006bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006bb4:	d3f9      	bcc.n	8006baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006bb6:	4a09      	ldr	r2, [pc, #36]	; (8006bdc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8006bb8:	4c09      	ldr	r4, [pc, #36]	; (8006be0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006bbc:	e001      	b.n	8006bc2 <LoopFillZerobss>

08006bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006bc0:	3204      	adds	r2, #4

08006bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006bc4:	d3fb      	bcc.n	8006bbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006bc6:	f001 ff65 	bl	8008a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006bca:	f7ff fbaf 	bl	800632c <main>
  bx lr
 8006bce:	4770      	bx	lr
  ldr r0, =_sdata
 8006bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006bd4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8006bd8:	0800a3c0 	.word	0x0800a3c0
  ldr r2, =_sbss
 8006bdc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8006be0:	200004c4 	.word	0x200004c4

08006be4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006be4:	e7fe      	b.n	8006be4 <ADC1_2_IRQHandler>
	...

08006be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006bec:	4b08      	ldr	r3, [pc, #32]	; (8006c10 <HAL_Init+0x28>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a07      	ldr	r2, [pc, #28]	; (8006c10 <HAL_Init+0x28>)
 8006bf2:	f043 0310 	orr.w	r3, r3, #16
 8006bf6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006bf8:	2003      	movs	r0, #3
 8006bfa:	f000 f947 	bl	8006e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006bfe:	2000      	movs	r0, #0
 8006c00:	f000 f808 	bl	8006c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006c04:	f7ff fea8 	bl	8006958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	40022000 	.word	0x40022000

08006c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006c1c:	4b12      	ldr	r3, [pc, #72]	; (8006c68 <HAL_InitTick+0x54>)
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	4b12      	ldr	r3, [pc, #72]	; (8006c6c <HAL_InitTick+0x58>)
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	4619      	mov	r1, r3
 8006c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c32:	4618      	mov	r0, r3
 8006c34:	f000 f95f 	bl	8006ef6 <HAL_SYSTICK_Config>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e00e      	b.n	8006c60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b0f      	cmp	r3, #15
 8006c46:	d80a      	bhi.n	8006c5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006c48:	2200      	movs	r2, #0
 8006c4a:	6879      	ldr	r1, [r7, #4]
 8006c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c50:	f000 f927 	bl	8006ea2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006c54:	4a06      	ldr	r2, [pc, #24]	; (8006c70 <HAL_InitTick+0x5c>)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	e000      	b.n	8006c60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	20000004 	.word	0x20000004
 8006c6c:	2000000c 	.word	0x2000000c
 8006c70:	20000008 	.word	0x20000008

08006c74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006c74:	b480      	push	{r7}
 8006c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006c78:	4b05      	ldr	r3, [pc, #20]	; (8006c90 <HAL_IncTick+0x1c>)
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	4b05      	ldr	r3, [pc, #20]	; (8006c94 <HAL_IncTick+0x20>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4413      	add	r3, r2
 8006c84:	4a03      	ldr	r2, [pc, #12]	; (8006c94 <HAL_IncTick+0x20>)
 8006c86:	6013      	str	r3, [r2, #0]
}
 8006c88:	bf00      	nop
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bc80      	pop	{r7}
 8006c8e:	4770      	bx	lr
 8006c90:	2000000c 	.word	0x2000000c
 8006c94:	200004c0 	.word	0x200004c0

08006c98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8006c9c:	4b02      	ldr	r3, [pc, #8]	; (8006ca8 <HAL_GetTick+0x10>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bc80      	pop	{r7}
 8006ca6:	4770      	bx	lr
 8006ca8:	200004c0 	.word	0x200004c0

08006cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006cb4:	f7ff fff0 	bl	8006c98 <HAL_GetTick>
 8006cb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc4:	d005      	beq.n	8006cd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006cc6:	4b0a      	ldr	r3, [pc, #40]	; (8006cf0 <HAL_Delay+0x44>)
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	461a      	mov	r2, r3
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	4413      	add	r3, r2
 8006cd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006cd2:	bf00      	nop
 8006cd4:	f7ff ffe0 	bl	8006c98 <HAL_GetTick>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d8f7      	bhi.n	8006cd4 <HAL_Delay+0x28>
  {
  }
}
 8006ce4:	bf00      	nop
 8006ce6:	bf00      	nop
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	2000000c 	.word	0x2000000c

08006cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f003 0307 	and.w	r3, r3, #7
 8006d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d04:	4b0c      	ldr	r3, [pc, #48]	; (8006d38 <__NVIC_SetPriorityGrouping+0x44>)
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006d10:	4013      	ands	r3, r2
 8006d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006d26:	4a04      	ldr	r2, [pc, #16]	; (8006d38 <__NVIC_SetPriorityGrouping+0x44>)
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	60d3      	str	r3, [r2, #12]
}
 8006d2c:	bf00      	nop
 8006d2e:	3714      	adds	r7, #20
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bc80      	pop	{r7}
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	e000ed00 	.word	0xe000ed00

08006d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006d40:	4b04      	ldr	r3, [pc, #16]	; (8006d54 <__NVIC_GetPriorityGrouping+0x18>)
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	0a1b      	lsrs	r3, r3, #8
 8006d46:	f003 0307 	and.w	r3, r3, #7
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bc80      	pop	{r7}
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	e000ed00 	.word	0xe000ed00

08006d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	4603      	mov	r3, r0
 8006d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	db0b      	blt.n	8006d82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d6a:	79fb      	ldrb	r3, [r7, #7]
 8006d6c:	f003 021f 	and.w	r2, r3, #31
 8006d70:	4906      	ldr	r1, [pc, #24]	; (8006d8c <__NVIC_EnableIRQ+0x34>)
 8006d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d76:	095b      	lsrs	r3, r3, #5
 8006d78:	2001      	movs	r0, #1
 8006d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8006d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006d82:	bf00      	nop
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bc80      	pop	{r7}
 8006d8a:	4770      	bx	lr
 8006d8c:	e000e100 	.word	0xe000e100

08006d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	4603      	mov	r3, r0
 8006d98:	6039      	str	r1, [r7, #0]
 8006d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	db0a      	blt.n	8006dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	b2da      	uxtb	r2, r3
 8006da8:	490c      	ldr	r1, [pc, #48]	; (8006ddc <__NVIC_SetPriority+0x4c>)
 8006daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dae:	0112      	lsls	r2, r2, #4
 8006db0:	b2d2      	uxtb	r2, r2
 8006db2:	440b      	add	r3, r1
 8006db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006db8:	e00a      	b.n	8006dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	b2da      	uxtb	r2, r3
 8006dbe:	4908      	ldr	r1, [pc, #32]	; (8006de0 <__NVIC_SetPriority+0x50>)
 8006dc0:	79fb      	ldrb	r3, [r7, #7]
 8006dc2:	f003 030f 	and.w	r3, r3, #15
 8006dc6:	3b04      	subs	r3, #4
 8006dc8:	0112      	lsls	r2, r2, #4
 8006dca:	b2d2      	uxtb	r2, r2
 8006dcc:	440b      	add	r3, r1
 8006dce:	761a      	strb	r2, [r3, #24]
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bc80      	pop	{r7}
 8006dd8:	4770      	bx	lr
 8006dda:	bf00      	nop
 8006ddc:	e000e100 	.word	0xe000e100
 8006de0:	e000ed00 	.word	0xe000ed00

08006de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b089      	sub	sp, #36	; 0x24
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f003 0307 	and.w	r3, r3, #7
 8006df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	f1c3 0307 	rsb	r3, r3, #7
 8006dfe:	2b04      	cmp	r3, #4
 8006e00:	bf28      	it	cs
 8006e02:	2304      	movcs	r3, #4
 8006e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	3304      	adds	r3, #4
 8006e0a:	2b06      	cmp	r3, #6
 8006e0c:	d902      	bls.n	8006e14 <NVIC_EncodePriority+0x30>
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	3b03      	subs	r3, #3
 8006e12:	e000      	b.n	8006e16 <NVIC_EncodePriority+0x32>
 8006e14:	2300      	movs	r3, #0
 8006e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e18:	f04f 32ff 	mov.w	r2, #4294967295
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e22:	43da      	mvns	r2, r3
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	401a      	ands	r2, r3
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	fa01 f303 	lsl.w	r3, r1, r3
 8006e36:	43d9      	mvns	r1, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e3c:	4313      	orrs	r3, r2
         );
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3724      	adds	r7, #36	; 0x24
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bc80      	pop	{r7}
 8006e46:	4770      	bx	lr

08006e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	3b01      	subs	r3, #1
 8006e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e58:	d301      	bcc.n	8006e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e00f      	b.n	8006e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006e5e:	4a0a      	ldr	r2, [pc, #40]	; (8006e88 <SysTick_Config+0x40>)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	3b01      	subs	r3, #1
 8006e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006e66:	210f      	movs	r1, #15
 8006e68:	f04f 30ff 	mov.w	r0, #4294967295
 8006e6c:	f7ff ff90 	bl	8006d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006e70:	4b05      	ldr	r3, [pc, #20]	; (8006e88 <SysTick_Config+0x40>)
 8006e72:	2200      	movs	r2, #0
 8006e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006e76:	4b04      	ldr	r3, [pc, #16]	; (8006e88 <SysTick_Config+0x40>)
 8006e78:	2207      	movs	r2, #7
 8006e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3708      	adds	r7, #8
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	e000e010 	.word	0xe000e010

08006e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f7ff ff2d 	bl	8006cf4 <__NVIC_SetPriorityGrouping>
}
 8006e9a:	bf00      	nop
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b086      	sub	sp, #24
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	60b9      	str	r1, [r7, #8]
 8006eac:	607a      	str	r2, [r7, #4]
 8006eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006eb4:	f7ff ff42 	bl	8006d3c <__NVIC_GetPriorityGrouping>
 8006eb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	68b9      	ldr	r1, [r7, #8]
 8006ebe:	6978      	ldr	r0, [r7, #20]
 8006ec0:	f7ff ff90 	bl	8006de4 <NVIC_EncodePriority>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006eca:	4611      	mov	r1, r2
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7ff ff5f 	bl	8006d90 <__NVIC_SetPriority>
}
 8006ed2:	bf00      	nop
 8006ed4:	3718      	adds	r7, #24
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b082      	sub	sp, #8
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7ff ff35 	bl	8006d58 <__NVIC_EnableIRQ>
}
 8006eee:	bf00      	nop
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b082      	sub	sp, #8
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f7ff ffa2 	bl	8006e48 <SysTick_Config>
 8006f04:	4603      	mov	r3, r0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3708      	adds	r7, #8
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b085      	sub	sp, #20
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f16:	2300      	movs	r3, #0
 8006f18:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d008      	beq.n	8006f38 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2204      	movs	r2, #4
 8006f2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e020      	b.n	8006f7a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f022 020e 	bic.w	r2, r2, #14
 8006f46:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f022 0201 	bic.w	r2, r2, #1
 8006f56:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f60:	2101      	movs	r1, #1
 8006f62:	fa01 f202 	lsl.w	r2, r1, r2
 8006f66:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8006f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3714      	adds	r7, #20
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bc80      	pop	{r7}
 8006f82:	4770      	bx	lr

08006f84 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d005      	beq.n	8006fa8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2204      	movs	r2, #4
 8006fa0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	73fb      	strb	r3, [r7, #15]
 8006fa6:	e0d6      	b.n	8007156 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f022 020e 	bic.w	r2, r2, #14
 8006fb6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 0201 	bic.w	r2, r2, #1
 8006fc6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	461a      	mov	r2, r3
 8006fce:	4b64      	ldr	r3, [pc, #400]	; (8007160 <HAL_DMA_Abort_IT+0x1dc>)
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d958      	bls.n	8007086 <HAL_DMA_Abort_IT+0x102>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a62      	ldr	r2, [pc, #392]	; (8007164 <HAL_DMA_Abort_IT+0x1e0>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d04f      	beq.n	800707e <HAL_DMA_Abort_IT+0xfa>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a61      	ldr	r2, [pc, #388]	; (8007168 <HAL_DMA_Abort_IT+0x1e4>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d048      	beq.n	800707a <HAL_DMA_Abort_IT+0xf6>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a5f      	ldr	r2, [pc, #380]	; (800716c <HAL_DMA_Abort_IT+0x1e8>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d040      	beq.n	8007074 <HAL_DMA_Abort_IT+0xf0>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a5e      	ldr	r2, [pc, #376]	; (8007170 <HAL_DMA_Abort_IT+0x1ec>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d038      	beq.n	800706e <HAL_DMA_Abort_IT+0xea>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a5c      	ldr	r2, [pc, #368]	; (8007174 <HAL_DMA_Abort_IT+0x1f0>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d030      	beq.n	8007068 <HAL_DMA_Abort_IT+0xe4>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a5b      	ldr	r2, [pc, #364]	; (8007178 <HAL_DMA_Abort_IT+0x1f4>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d028      	beq.n	8007062 <HAL_DMA_Abort_IT+0xde>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a52      	ldr	r2, [pc, #328]	; (8007160 <HAL_DMA_Abort_IT+0x1dc>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d020      	beq.n	800705c <HAL_DMA_Abort_IT+0xd8>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a57      	ldr	r2, [pc, #348]	; (800717c <HAL_DMA_Abort_IT+0x1f8>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d019      	beq.n	8007058 <HAL_DMA_Abort_IT+0xd4>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a55      	ldr	r2, [pc, #340]	; (8007180 <HAL_DMA_Abort_IT+0x1fc>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d012      	beq.n	8007054 <HAL_DMA_Abort_IT+0xd0>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a54      	ldr	r2, [pc, #336]	; (8007184 <HAL_DMA_Abort_IT+0x200>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d00a      	beq.n	800704e <HAL_DMA_Abort_IT+0xca>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a52      	ldr	r2, [pc, #328]	; (8007188 <HAL_DMA_Abort_IT+0x204>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d102      	bne.n	8007048 <HAL_DMA_Abort_IT+0xc4>
 8007042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007046:	e01b      	b.n	8007080 <HAL_DMA_Abort_IT+0xfc>
 8007048:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800704c:	e018      	b.n	8007080 <HAL_DMA_Abort_IT+0xfc>
 800704e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007052:	e015      	b.n	8007080 <HAL_DMA_Abort_IT+0xfc>
 8007054:	2310      	movs	r3, #16
 8007056:	e013      	b.n	8007080 <HAL_DMA_Abort_IT+0xfc>
 8007058:	2301      	movs	r3, #1
 800705a:	e011      	b.n	8007080 <HAL_DMA_Abort_IT+0xfc>
 800705c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007060:	e00e      	b.n	8007080 <HAL_DMA_Abort_IT+0xfc>
 8007062:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007066:	e00b      	b.n	8007080 <HAL_DMA_Abort_IT+0xfc>
 8007068:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800706c:	e008      	b.n	8007080 <HAL_DMA_Abort_IT+0xfc>
 800706e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007072:	e005      	b.n	8007080 <HAL_DMA_Abort_IT+0xfc>
 8007074:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007078:	e002      	b.n	8007080 <HAL_DMA_Abort_IT+0xfc>
 800707a:	2310      	movs	r3, #16
 800707c:	e000      	b.n	8007080 <HAL_DMA_Abort_IT+0xfc>
 800707e:	2301      	movs	r3, #1
 8007080:	4a42      	ldr	r2, [pc, #264]	; (800718c <HAL_DMA_Abort_IT+0x208>)
 8007082:	6053      	str	r3, [r2, #4]
 8007084:	e057      	b.n	8007136 <HAL_DMA_Abort_IT+0x1b2>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a36      	ldr	r2, [pc, #216]	; (8007164 <HAL_DMA_Abort_IT+0x1e0>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d04f      	beq.n	8007130 <HAL_DMA_Abort_IT+0x1ac>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a34      	ldr	r2, [pc, #208]	; (8007168 <HAL_DMA_Abort_IT+0x1e4>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d048      	beq.n	800712c <HAL_DMA_Abort_IT+0x1a8>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a33      	ldr	r2, [pc, #204]	; (800716c <HAL_DMA_Abort_IT+0x1e8>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d040      	beq.n	8007126 <HAL_DMA_Abort_IT+0x1a2>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a31      	ldr	r2, [pc, #196]	; (8007170 <HAL_DMA_Abort_IT+0x1ec>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d038      	beq.n	8007120 <HAL_DMA_Abort_IT+0x19c>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a30      	ldr	r2, [pc, #192]	; (8007174 <HAL_DMA_Abort_IT+0x1f0>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d030      	beq.n	800711a <HAL_DMA_Abort_IT+0x196>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a2e      	ldr	r2, [pc, #184]	; (8007178 <HAL_DMA_Abort_IT+0x1f4>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d028      	beq.n	8007114 <HAL_DMA_Abort_IT+0x190>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a26      	ldr	r2, [pc, #152]	; (8007160 <HAL_DMA_Abort_IT+0x1dc>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d020      	beq.n	800710e <HAL_DMA_Abort_IT+0x18a>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a2a      	ldr	r2, [pc, #168]	; (800717c <HAL_DMA_Abort_IT+0x1f8>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d019      	beq.n	800710a <HAL_DMA_Abort_IT+0x186>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a29      	ldr	r2, [pc, #164]	; (8007180 <HAL_DMA_Abort_IT+0x1fc>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d012      	beq.n	8007106 <HAL_DMA_Abort_IT+0x182>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a27      	ldr	r2, [pc, #156]	; (8007184 <HAL_DMA_Abort_IT+0x200>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d00a      	beq.n	8007100 <HAL_DMA_Abort_IT+0x17c>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a26      	ldr	r2, [pc, #152]	; (8007188 <HAL_DMA_Abort_IT+0x204>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d102      	bne.n	80070fa <HAL_DMA_Abort_IT+0x176>
 80070f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070f8:	e01b      	b.n	8007132 <HAL_DMA_Abort_IT+0x1ae>
 80070fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80070fe:	e018      	b.n	8007132 <HAL_DMA_Abort_IT+0x1ae>
 8007100:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007104:	e015      	b.n	8007132 <HAL_DMA_Abort_IT+0x1ae>
 8007106:	2310      	movs	r3, #16
 8007108:	e013      	b.n	8007132 <HAL_DMA_Abort_IT+0x1ae>
 800710a:	2301      	movs	r3, #1
 800710c:	e011      	b.n	8007132 <HAL_DMA_Abort_IT+0x1ae>
 800710e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007112:	e00e      	b.n	8007132 <HAL_DMA_Abort_IT+0x1ae>
 8007114:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007118:	e00b      	b.n	8007132 <HAL_DMA_Abort_IT+0x1ae>
 800711a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800711e:	e008      	b.n	8007132 <HAL_DMA_Abort_IT+0x1ae>
 8007120:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007124:	e005      	b.n	8007132 <HAL_DMA_Abort_IT+0x1ae>
 8007126:	f44f 7380 	mov.w	r3, #256	; 0x100
 800712a:	e002      	b.n	8007132 <HAL_DMA_Abort_IT+0x1ae>
 800712c:	2310      	movs	r3, #16
 800712e:	e000      	b.n	8007132 <HAL_DMA_Abort_IT+0x1ae>
 8007130:	2301      	movs	r3, #1
 8007132:	4a17      	ldr	r2, [pc, #92]	; (8007190 <HAL_DMA_Abort_IT+0x20c>)
 8007134:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2201      	movs	r2, #1
 800713a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800714a:	2b00      	cmp	r3, #0
 800714c:	d003      	beq.n	8007156 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	4798      	blx	r3
    } 
  }
  return status;
 8007156:	7bfb      	ldrb	r3, [r7, #15]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	40020080 	.word	0x40020080
 8007164:	40020008 	.word	0x40020008
 8007168:	4002001c 	.word	0x4002001c
 800716c:	40020030 	.word	0x40020030
 8007170:	40020044 	.word	0x40020044
 8007174:	40020058 	.word	0x40020058
 8007178:	4002006c 	.word	0x4002006c
 800717c:	40020408 	.word	0x40020408
 8007180:	4002041c 	.word	0x4002041c
 8007184:	40020430 	.word	0x40020430
 8007188:	40020444 	.word	0x40020444
 800718c:	40020400 	.word	0x40020400
 8007190:	40020000 	.word	0x40020000

08007194 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007194:	b480      	push	{r7}
 8007196:	b08b      	sub	sp, #44	; 0x2c
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800719e:	2300      	movs	r3, #0
 80071a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80071a2:	2300      	movs	r3, #0
 80071a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80071a6:	e179      	b.n	800749c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80071a8:	2201      	movs	r2, #1
 80071aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ac:	fa02 f303 	lsl.w	r3, r2, r3
 80071b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	69fa      	ldr	r2, [r7, #28]
 80071b8:	4013      	ands	r3, r2
 80071ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80071bc:	69ba      	ldr	r2, [r7, #24]
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	f040 8168 	bne.w	8007496 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	4a96      	ldr	r2, [pc, #600]	; (8007424 <HAL_GPIO_Init+0x290>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d05e      	beq.n	800728e <HAL_GPIO_Init+0xfa>
 80071d0:	4a94      	ldr	r2, [pc, #592]	; (8007424 <HAL_GPIO_Init+0x290>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d875      	bhi.n	80072c2 <HAL_GPIO_Init+0x12e>
 80071d6:	4a94      	ldr	r2, [pc, #592]	; (8007428 <HAL_GPIO_Init+0x294>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d058      	beq.n	800728e <HAL_GPIO_Init+0xfa>
 80071dc:	4a92      	ldr	r2, [pc, #584]	; (8007428 <HAL_GPIO_Init+0x294>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d86f      	bhi.n	80072c2 <HAL_GPIO_Init+0x12e>
 80071e2:	4a92      	ldr	r2, [pc, #584]	; (800742c <HAL_GPIO_Init+0x298>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d052      	beq.n	800728e <HAL_GPIO_Init+0xfa>
 80071e8:	4a90      	ldr	r2, [pc, #576]	; (800742c <HAL_GPIO_Init+0x298>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d869      	bhi.n	80072c2 <HAL_GPIO_Init+0x12e>
 80071ee:	4a90      	ldr	r2, [pc, #576]	; (8007430 <HAL_GPIO_Init+0x29c>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d04c      	beq.n	800728e <HAL_GPIO_Init+0xfa>
 80071f4:	4a8e      	ldr	r2, [pc, #568]	; (8007430 <HAL_GPIO_Init+0x29c>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d863      	bhi.n	80072c2 <HAL_GPIO_Init+0x12e>
 80071fa:	4a8e      	ldr	r2, [pc, #568]	; (8007434 <HAL_GPIO_Init+0x2a0>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d046      	beq.n	800728e <HAL_GPIO_Init+0xfa>
 8007200:	4a8c      	ldr	r2, [pc, #560]	; (8007434 <HAL_GPIO_Init+0x2a0>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d85d      	bhi.n	80072c2 <HAL_GPIO_Init+0x12e>
 8007206:	2b12      	cmp	r3, #18
 8007208:	d82a      	bhi.n	8007260 <HAL_GPIO_Init+0xcc>
 800720a:	2b12      	cmp	r3, #18
 800720c:	d859      	bhi.n	80072c2 <HAL_GPIO_Init+0x12e>
 800720e:	a201      	add	r2, pc, #4	; (adr r2, 8007214 <HAL_GPIO_Init+0x80>)
 8007210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007214:	0800728f 	.word	0x0800728f
 8007218:	08007269 	.word	0x08007269
 800721c:	0800727b 	.word	0x0800727b
 8007220:	080072bd 	.word	0x080072bd
 8007224:	080072c3 	.word	0x080072c3
 8007228:	080072c3 	.word	0x080072c3
 800722c:	080072c3 	.word	0x080072c3
 8007230:	080072c3 	.word	0x080072c3
 8007234:	080072c3 	.word	0x080072c3
 8007238:	080072c3 	.word	0x080072c3
 800723c:	080072c3 	.word	0x080072c3
 8007240:	080072c3 	.word	0x080072c3
 8007244:	080072c3 	.word	0x080072c3
 8007248:	080072c3 	.word	0x080072c3
 800724c:	080072c3 	.word	0x080072c3
 8007250:	080072c3 	.word	0x080072c3
 8007254:	080072c3 	.word	0x080072c3
 8007258:	08007271 	.word	0x08007271
 800725c:	08007285 	.word	0x08007285
 8007260:	4a75      	ldr	r2, [pc, #468]	; (8007438 <HAL_GPIO_Init+0x2a4>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d013      	beq.n	800728e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007266:	e02c      	b.n	80072c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	623b      	str	r3, [r7, #32]
          break;
 800726e:	e029      	b.n	80072c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	3304      	adds	r3, #4
 8007276:	623b      	str	r3, [r7, #32]
          break;
 8007278:	e024      	b.n	80072c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	3308      	adds	r3, #8
 8007280:	623b      	str	r3, [r7, #32]
          break;
 8007282:	e01f      	b.n	80072c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	330c      	adds	r3, #12
 800728a:	623b      	str	r3, [r7, #32]
          break;
 800728c:	e01a      	b.n	80072c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d102      	bne.n	800729c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007296:	2304      	movs	r3, #4
 8007298:	623b      	str	r3, [r7, #32]
          break;
 800729a:	e013      	b.n	80072c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d105      	bne.n	80072b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80072a4:	2308      	movs	r3, #8
 80072a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	69fa      	ldr	r2, [r7, #28]
 80072ac:	611a      	str	r2, [r3, #16]
          break;
 80072ae:	e009      	b.n	80072c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80072b0:	2308      	movs	r3, #8
 80072b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	69fa      	ldr	r2, [r7, #28]
 80072b8:	615a      	str	r2, [r3, #20]
          break;
 80072ba:	e003      	b.n	80072c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80072bc:	2300      	movs	r3, #0
 80072be:	623b      	str	r3, [r7, #32]
          break;
 80072c0:	e000      	b.n	80072c4 <HAL_GPIO_Init+0x130>
          break;
 80072c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	2bff      	cmp	r3, #255	; 0xff
 80072c8:	d801      	bhi.n	80072ce <HAL_GPIO_Init+0x13a>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	e001      	b.n	80072d2 <HAL_GPIO_Init+0x13e>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	3304      	adds	r3, #4
 80072d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	2bff      	cmp	r3, #255	; 0xff
 80072d8:	d802      	bhi.n	80072e0 <HAL_GPIO_Init+0x14c>
 80072da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	e002      	b.n	80072e6 <HAL_GPIO_Init+0x152>
 80072e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e2:	3b08      	subs	r3, #8
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	210f      	movs	r1, #15
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	fa01 f303 	lsl.w	r3, r1, r3
 80072f4:	43db      	mvns	r3, r3
 80072f6:	401a      	ands	r2, r3
 80072f8:	6a39      	ldr	r1, [r7, #32]
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007300:	431a      	orrs	r2, r3
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800730e:	2b00      	cmp	r3, #0
 8007310:	f000 80c1 	beq.w	8007496 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007314:	4b49      	ldr	r3, [pc, #292]	; (800743c <HAL_GPIO_Init+0x2a8>)
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	4a48      	ldr	r2, [pc, #288]	; (800743c <HAL_GPIO_Init+0x2a8>)
 800731a:	f043 0301 	orr.w	r3, r3, #1
 800731e:	6193      	str	r3, [r2, #24]
 8007320:	4b46      	ldr	r3, [pc, #280]	; (800743c <HAL_GPIO_Init+0x2a8>)
 8007322:	699b      	ldr	r3, [r3, #24]
 8007324:	f003 0301 	and.w	r3, r3, #1
 8007328:	60bb      	str	r3, [r7, #8]
 800732a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800732c:	4a44      	ldr	r2, [pc, #272]	; (8007440 <HAL_GPIO_Init+0x2ac>)
 800732e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007330:	089b      	lsrs	r3, r3, #2
 8007332:	3302      	adds	r3, #2
 8007334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007338:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800733a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733c:	f003 0303 	and.w	r3, r3, #3
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	220f      	movs	r2, #15
 8007344:	fa02 f303 	lsl.w	r3, r2, r3
 8007348:	43db      	mvns	r3, r3
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	4013      	ands	r3, r2
 800734e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a3c      	ldr	r2, [pc, #240]	; (8007444 <HAL_GPIO_Init+0x2b0>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d01f      	beq.n	8007398 <HAL_GPIO_Init+0x204>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a3b      	ldr	r2, [pc, #236]	; (8007448 <HAL_GPIO_Init+0x2b4>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d019      	beq.n	8007394 <HAL_GPIO_Init+0x200>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a3a      	ldr	r2, [pc, #232]	; (800744c <HAL_GPIO_Init+0x2b8>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d013      	beq.n	8007390 <HAL_GPIO_Init+0x1fc>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a39      	ldr	r2, [pc, #228]	; (8007450 <HAL_GPIO_Init+0x2bc>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d00d      	beq.n	800738c <HAL_GPIO_Init+0x1f8>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a38      	ldr	r2, [pc, #224]	; (8007454 <HAL_GPIO_Init+0x2c0>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d007      	beq.n	8007388 <HAL_GPIO_Init+0x1f4>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a37      	ldr	r2, [pc, #220]	; (8007458 <HAL_GPIO_Init+0x2c4>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d101      	bne.n	8007384 <HAL_GPIO_Init+0x1f0>
 8007380:	2305      	movs	r3, #5
 8007382:	e00a      	b.n	800739a <HAL_GPIO_Init+0x206>
 8007384:	2306      	movs	r3, #6
 8007386:	e008      	b.n	800739a <HAL_GPIO_Init+0x206>
 8007388:	2304      	movs	r3, #4
 800738a:	e006      	b.n	800739a <HAL_GPIO_Init+0x206>
 800738c:	2303      	movs	r3, #3
 800738e:	e004      	b.n	800739a <HAL_GPIO_Init+0x206>
 8007390:	2302      	movs	r3, #2
 8007392:	e002      	b.n	800739a <HAL_GPIO_Init+0x206>
 8007394:	2301      	movs	r3, #1
 8007396:	e000      	b.n	800739a <HAL_GPIO_Init+0x206>
 8007398:	2300      	movs	r3, #0
 800739a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800739c:	f002 0203 	and.w	r2, r2, #3
 80073a0:	0092      	lsls	r2, r2, #2
 80073a2:	4093      	lsls	r3, r2
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80073aa:	4925      	ldr	r1, [pc, #148]	; (8007440 <HAL_GPIO_Init+0x2ac>)
 80073ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ae:	089b      	lsrs	r3, r3, #2
 80073b0:	3302      	adds	r3, #2
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d006      	beq.n	80073d2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80073c4:	4b25      	ldr	r3, [pc, #148]	; (800745c <HAL_GPIO_Init+0x2c8>)
 80073c6:	689a      	ldr	r2, [r3, #8]
 80073c8:	4924      	ldr	r1, [pc, #144]	; (800745c <HAL_GPIO_Init+0x2c8>)
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	608b      	str	r3, [r1, #8]
 80073d0:	e006      	b.n	80073e0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80073d2:	4b22      	ldr	r3, [pc, #136]	; (800745c <HAL_GPIO_Init+0x2c8>)
 80073d4:	689a      	ldr	r2, [r3, #8]
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	43db      	mvns	r3, r3
 80073da:	4920      	ldr	r1, [pc, #128]	; (800745c <HAL_GPIO_Init+0x2c8>)
 80073dc:	4013      	ands	r3, r2
 80073de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d006      	beq.n	80073fa <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80073ec:	4b1b      	ldr	r3, [pc, #108]	; (800745c <HAL_GPIO_Init+0x2c8>)
 80073ee:	68da      	ldr	r2, [r3, #12]
 80073f0:	491a      	ldr	r1, [pc, #104]	; (800745c <HAL_GPIO_Init+0x2c8>)
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	60cb      	str	r3, [r1, #12]
 80073f8:	e006      	b.n	8007408 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80073fa:	4b18      	ldr	r3, [pc, #96]	; (800745c <HAL_GPIO_Init+0x2c8>)
 80073fc:	68da      	ldr	r2, [r3, #12]
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	43db      	mvns	r3, r3
 8007402:	4916      	ldr	r1, [pc, #88]	; (800745c <HAL_GPIO_Init+0x2c8>)
 8007404:	4013      	ands	r3, r2
 8007406:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007410:	2b00      	cmp	r3, #0
 8007412:	d025      	beq.n	8007460 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007414:	4b11      	ldr	r3, [pc, #68]	; (800745c <HAL_GPIO_Init+0x2c8>)
 8007416:	685a      	ldr	r2, [r3, #4]
 8007418:	4910      	ldr	r1, [pc, #64]	; (800745c <HAL_GPIO_Init+0x2c8>)
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	4313      	orrs	r3, r2
 800741e:	604b      	str	r3, [r1, #4]
 8007420:	e025      	b.n	800746e <HAL_GPIO_Init+0x2da>
 8007422:	bf00      	nop
 8007424:	10320000 	.word	0x10320000
 8007428:	10310000 	.word	0x10310000
 800742c:	10220000 	.word	0x10220000
 8007430:	10210000 	.word	0x10210000
 8007434:	10120000 	.word	0x10120000
 8007438:	10110000 	.word	0x10110000
 800743c:	40021000 	.word	0x40021000
 8007440:	40010000 	.word	0x40010000
 8007444:	40010800 	.word	0x40010800
 8007448:	40010c00 	.word	0x40010c00
 800744c:	40011000 	.word	0x40011000
 8007450:	40011400 	.word	0x40011400
 8007454:	40011800 	.word	0x40011800
 8007458:	40011c00 	.word	0x40011c00
 800745c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007460:	4b15      	ldr	r3, [pc, #84]	; (80074b8 <HAL_GPIO_Init+0x324>)
 8007462:	685a      	ldr	r2, [r3, #4]
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	43db      	mvns	r3, r3
 8007468:	4913      	ldr	r1, [pc, #76]	; (80074b8 <HAL_GPIO_Init+0x324>)
 800746a:	4013      	ands	r3, r2
 800746c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007476:	2b00      	cmp	r3, #0
 8007478:	d006      	beq.n	8007488 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800747a:	4b0f      	ldr	r3, [pc, #60]	; (80074b8 <HAL_GPIO_Init+0x324>)
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	490e      	ldr	r1, [pc, #56]	; (80074b8 <HAL_GPIO_Init+0x324>)
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	4313      	orrs	r3, r2
 8007484:	600b      	str	r3, [r1, #0]
 8007486:	e006      	b.n	8007496 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007488:	4b0b      	ldr	r3, [pc, #44]	; (80074b8 <HAL_GPIO_Init+0x324>)
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	43db      	mvns	r3, r3
 8007490:	4909      	ldr	r1, [pc, #36]	; (80074b8 <HAL_GPIO_Init+0x324>)
 8007492:	4013      	ands	r3, r2
 8007494:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8007496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007498:	3301      	adds	r3, #1
 800749a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a2:	fa22 f303 	lsr.w	r3, r2, r3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	f47f ae7e 	bne.w	80071a8 <HAL_GPIO_Init+0x14>
  }
}
 80074ac:	bf00      	nop
 80074ae:	bf00      	nop
 80074b0:	372c      	adds	r7, #44	; 0x2c
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bc80      	pop	{r7}
 80074b6:	4770      	bx	lr
 80074b8:	40010400 	.word	0x40010400

080074bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	460b      	mov	r3, r1
 80074c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	689a      	ldr	r2, [r3, #8]
 80074cc:	887b      	ldrh	r3, [r7, #2]
 80074ce:	4013      	ands	r3, r2
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d002      	beq.n	80074da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80074d4:	2301      	movs	r3, #1
 80074d6:	73fb      	strb	r3, [r7, #15]
 80074d8:	e001      	b.n	80074de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80074da:	2300      	movs	r3, #0
 80074dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80074de:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3714      	adds	r7, #20
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bc80      	pop	{r7}
 80074e8:	4770      	bx	lr

080074ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b083      	sub	sp, #12
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
 80074f2:	460b      	mov	r3, r1
 80074f4:	807b      	strh	r3, [r7, #2]
 80074f6:	4613      	mov	r3, r2
 80074f8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80074fa:	787b      	ldrb	r3, [r7, #1]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d003      	beq.n	8007508 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007500:	887a      	ldrh	r2, [r7, #2]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8007506:	e003      	b.n	8007510 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007508:	887b      	ldrh	r3, [r7, #2]
 800750a:	041a      	lsls	r2, r3, #16
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	611a      	str	r2, [r3, #16]
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	bc80      	pop	{r7}
 8007518:	4770      	bx	lr

0800751a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800751a:	b480      	push	{r7}
 800751c:	b085      	sub	sp, #20
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
 8007522:	460b      	mov	r3, r1
 8007524:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800752c:	887a      	ldrh	r2, [r7, #2]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	4013      	ands	r3, r2
 8007532:	041a      	lsls	r2, r3, #16
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	43d9      	mvns	r1, r3
 8007538:	887b      	ldrh	r3, [r7, #2]
 800753a:	400b      	ands	r3, r1
 800753c:	431a      	orrs	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	611a      	str	r2, [r3, #16]
}
 8007542:	bf00      	nop
 8007544:	3714      	adds	r7, #20
 8007546:	46bd      	mov	sp, r7
 8007548:	bc80      	pop	{r7}
 800754a:	4770      	bx	lr

0800754c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b086      	sub	sp, #24
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d101      	bne.n	800755e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e272      	b.n	8007a44 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	2b00      	cmp	r3, #0
 8007568:	f000 8087 	beq.w	800767a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800756c:	4b92      	ldr	r3, [pc, #584]	; (80077b8 <HAL_RCC_OscConfig+0x26c>)
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	f003 030c 	and.w	r3, r3, #12
 8007574:	2b04      	cmp	r3, #4
 8007576:	d00c      	beq.n	8007592 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007578:	4b8f      	ldr	r3, [pc, #572]	; (80077b8 <HAL_RCC_OscConfig+0x26c>)
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	f003 030c 	and.w	r3, r3, #12
 8007580:	2b08      	cmp	r3, #8
 8007582:	d112      	bne.n	80075aa <HAL_RCC_OscConfig+0x5e>
 8007584:	4b8c      	ldr	r3, [pc, #560]	; (80077b8 <HAL_RCC_OscConfig+0x26c>)
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800758c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007590:	d10b      	bne.n	80075aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007592:	4b89      	ldr	r3, [pc, #548]	; (80077b8 <HAL_RCC_OscConfig+0x26c>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800759a:	2b00      	cmp	r3, #0
 800759c:	d06c      	beq.n	8007678 <HAL_RCC_OscConfig+0x12c>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d168      	bne.n	8007678 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e24c      	b.n	8007a44 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075b2:	d106      	bne.n	80075c2 <HAL_RCC_OscConfig+0x76>
 80075b4:	4b80      	ldr	r3, [pc, #512]	; (80077b8 <HAL_RCC_OscConfig+0x26c>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a7f      	ldr	r2, [pc, #508]	; (80077b8 <HAL_RCC_OscConfig+0x26c>)
 80075ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075be:	6013      	str	r3, [r2, #0]
 80075c0:	e02e      	b.n	8007620 <HAL_RCC_OscConfig+0xd4>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d10c      	bne.n	80075e4 <HAL_RCC_OscConfig+0x98>
 80075ca:	4b7b      	ldr	r3, [pc, #492]	; (80077b8 <HAL_RCC_OscConfig+0x26c>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a7a      	ldr	r2, [pc, #488]	; (80077b8 <HAL_RCC_OscConfig+0x26c>)
 80075d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075d4:	6013      	str	r3, [r2, #0]
 80075d6:	4b78      	ldr	r3, [pc, #480]	; (80077b8 <HAL_RCC_OscConfig+0x26c>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a77      	ldr	r2, [pc, #476]	; (80077b8 <HAL_RCC_OscConfig+0x26c>)
 80075dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075e0:	6013      	str	r3, [r2, #0]
 80075e2:	e01d      	b.n	8007620 <HAL_RCC_OscConfig+0xd4>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075ec:	d10c      	bne.n	8007608 <HAL_RCC_OscConfig+0xbc>
 80075ee:	4b72      	ldr	r3, [pc, #456]	; (80077b8 <HAL_RCC_OscConfig+0x26c>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a71      	ldr	r2, [pc, #452]	; (80077b8 <HAL_RCC_OscConfig+0x26c>)
 80075f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075f8:	6013      	str	r3, [r2, #0]
 80075fa:	4b6f      	ldr	r3, [pc, #444]	; (80077b8 <HAL_RCC_OscConfig+0x26c>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a6e      	ldr	r2, [pc, #440]	; (80077b8 <HAL_RCC_OscConfig+0x26c>)
 8007600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007604:	6013      	str	r3, [r2, #0]
 8007606:	e00b      	b.n	8007620 <HAL_RCC_OscConfig+0xd4>
 8007608:	4b6b      	ldr	r3, [pc, #428]	; (80077b8 <HAL_RCC_OscConfig+0x26c>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a6a      	ldr	r2, [pc, #424]	; (80077b8 <HAL_RCC_OscConfig+0x26c>)
 800760e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007612:	6013      	str	r3, [r2, #0]
 8007614:	4b68      	ldr	r3, [pc, #416]	; (80077b8 <HAL_RCC_OscConfig+0x26c>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a67      	ldr	r2, [pc, #412]	; (80077b8 <HAL_RCC_OscConfig+0x26c>)
 800761a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800761e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d013      	beq.n	8007650 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007628:	f7ff fb36 	bl	8006c98 <HAL_GetTick>
 800762c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800762e:	e008      	b.n	8007642 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007630:	f7ff fb32 	bl	8006c98 <HAL_GetTick>
 8007634:	4602      	mov	r2, r0
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	2b64      	cmp	r3, #100	; 0x64
 800763c:	d901      	bls.n	8007642 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800763e:	2303      	movs	r3, #3
 8007640:	e200      	b.n	8007a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007642:	4b5d      	ldr	r3, [pc, #372]	; (80077b8 <HAL_RCC_OscConfig+0x26c>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800764a:	2b00      	cmp	r3, #0
 800764c:	d0f0      	beq.n	8007630 <HAL_RCC_OscConfig+0xe4>
 800764e:	e014      	b.n	800767a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007650:	f7ff fb22 	bl	8006c98 <HAL_GetTick>
 8007654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007656:	e008      	b.n	800766a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007658:	f7ff fb1e 	bl	8006c98 <HAL_GetTick>
 800765c:	4602      	mov	r2, r0
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	2b64      	cmp	r3, #100	; 0x64
 8007664:	d901      	bls.n	800766a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007666:	2303      	movs	r3, #3
 8007668:	e1ec      	b.n	8007a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800766a:	4b53      	ldr	r3, [pc, #332]	; (80077b8 <HAL_RCC_OscConfig+0x26c>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1f0      	bne.n	8007658 <HAL_RCC_OscConfig+0x10c>
 8007676:	e000      	b.n	800767a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 0302 	and.w	r3, r3, #2
 8007682:	2b00      	cmp	r3, #0
 8007684:	d063      	beq.n	800774e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007686:	4b4c      	ldr	r3, [pc, #304]	; (80077b8 <HAL_RCC_OscConfig+0x26c>)
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	f003 030c 	and.w	r3, r3, #12
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00b      	beq.n	80076aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007692:	4b49      	ldr	r3, [pc, #292]	; (80077b8 <HAL_RCC_OscConfig+0x26c>)
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	f003 030c 	and.w	r3, r3, #12
 800769a:	2b08      	cmp	r3, #8
 800769c:	d11c      	bne.n	80076d8 <HAL_RCC_OscConfig+0x18c>
 800769e:	4b46      	ldr	r3, [pc, #280]	; (80077b8 <HAL_RCC_OscConfig+0x26c>)
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d116      	bne.n	80076d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076aa:	4b43      	ldr	r3, [pc, #268]	; (80077b8 <HAL_RCC_OscConfig+0x26c>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 0302 	and.w	r3, r3, #2
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d005      	beq.n	80076c2 <HAL_RCC_OscConfig+0x176>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d001      	beq.n	80076c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e1c0      	b.n	8007a44 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076c2:	4b3d      	ldr	r3, [pc, #244]	; (80077b8 <HAL_RCC_OscConfig+0x26c>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	695b      	ldr	r3, [r3, #20]
 80076ce:	00db      	lsls	r3, r3, #3
 80076d0:	4939      	ldr	r1, [pc, #228]	; (80077b8 <HAL_RCC_OscConfig+0x26c>)
 80076d2:	4313      	orrs	r3, r2
 80076d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076d6:	e03a      	b.n	800774e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d020      	beq.n	8007722 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076e0:	4b36      	ldr	r3, [pc, #216]	; (80077bc <HAL_RCC_OscConfig+0x270>)
 80076e2:	2201      	movs	r2, #1
 80076e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076e6:	f7ff fad7 	bl	8006c98 <HAL_GetTick>
 80076ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076ec:	e008      	b.n	8007700 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076ee:	f7ff fad3 	bl	8006c98 <HAL_GetTick>
 80076f2:	4602      	mov	r2, r0
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	1ad3      	subs	r3, r2, r3
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d901      	bls.n	8007700 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80076fc:	2303      	movs	r3, #3
 80076fe:	e1a1      	b.n	8007a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007700:	4b2d      	ldr	r3, [pc, #180]	; (80077b8 <HAL_RCC_OscConfig+0x26c>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0302 	and.w	r3, r3, #2
 8007708:	2b00      	cmp	r3, #0
 800770a:	d0f0      	beq.n	80076ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800770c:	4b2a      	ldr	r3, [pc, #168]	; (80077b8 <HAL_RCC_OscConfig+0x26c>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	695b      	ldr	r3, [r3, #20]
 8007718:	00db      	lsls	r3, r3, #3
 800771a:	4927      	ldr	r1, [pc, #156]	; (80077b8 <HAL_RCC_OscConfig+0x26c>)
 800771c:	4313      	orrs	r3, r2
 800771e:	600b      	str	r3, [r1, #0]
 8007720:	e015      	b.n	800774e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007722:	4b26      	ldr	r3, [pc, #152]	; (80077bc <HAL_RCC_OscConfig+0x270>)
 8007724:	2200      	movs	r2, #0
 8007726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007728:	f7ff fab6 	bl	8006c98 <HAL_GetTick>
 800772c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800772e:	e008      	b.n	8007742 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007730:	f7ff fab2 	bl	8006c98 <HAL_GetTick>
 8007734:	4602      	mov	r2, r0
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	2b02      	cmp	r3, #2
 800773c:	d901      	bls.n	8007742 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e180      	b.n	8007a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007742:	4b1d      	ldr	r3, [pc, #116]	; (80077b8 <HAL_RCC_OscConfig+0x26c>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0302 	and.w	r3, r3, #2
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1f0      	bne.n	8007730 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 0308 	and.w	r3, r3, #8
 8007756:	2b00      	cmp	r3, #0
 8007758:	d03a      	beq.n	80077d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	699b      	ldr	r3, [r3, #24]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d019      	beq.n	8007796 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007762:	4b17      	ldr	r3, [pc, #92]	; (80077c0 <HAL_RCC_OscConfig+0x274>)
 8007764:	2201      	movs	r2, #1
 8007766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007768:	f7ff fa96 	bl	8006c98 <HAL_GetTick>
 800776c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800776e:	e008      	b.n	8007782 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007770:	f7ff fa92 	bl	8006c98 <HAL_GetTick>
 8007774:	4602      	mov	r2, r0
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	2b02      	cmp	r3, #2
 800777c:	d901      	bls.n	8007782 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800777e:	2303      	movs	r3, #3
 8007780:	e160      	b.n	8007a44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007782:	4b0d      	ldr	r3, [pc, #52]	; (80077b8 <HAL_RCC_OscConfig+0x26c>)
 8007784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007786:	f003 0302 	and.w	r3, r3, #2
 800778a:	2b00      	cmp	r3, #0
 800778c:	d0f0      	beq.n	8007770 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800778e:	2001      	movs	r0, #1
 8007790:	f000 face 	bl	8007d30 <RCC_Delay>
 8007794:	e01c      	b.n	80077d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007796:	4b0a      	ldr	r3, [pc, #40]	; (80077c0 <HAL_RCC_OscConfig+0x274>)
 8007798:	2200      	movs	r2, #0
 800779a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800779c:	f7ff fa7c 	bl	8006c98 <HAL_GetTick>
 80077a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077a2:	e00f      	b.n	80077c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077a4:	f7ff fa78 	bl	8006c98 <HAL_GetTick>
 80077a8:	4602      	mov	r2, r0
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d908      	bls.n	80077c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e146      	b.n	8007a44 <HAL_RCC_OscConfig+0x4f8>
 80077b6:	bf00      	nop
 80077b8:	40021000 	.word	0x40021000
 80077bc:	42420000 	.word	0x42420000
 80077c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077c4:	4b92      	ldr	r3, [pc, #584]	; (8007a10 <HAL_RCC_OscConfig+0x4c4>)
 80077c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c8:	f003 0302 	and.w	r3, r3, #2
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d1e9      	bne.n	80077a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 0304 	and.w	r3, r3, #4
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f000 80a6 	beq.w	800792a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077de:	2300      	movs	r3, #0
 80077e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077e2:	4b8b      	ldr	r3, [pc, #556]	; (8007a10 <HAL_RCC_OscConfig+0x4c4>)
 80077e4:	69db      	ldr	r3, [r3, #28]
 80077e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d10d      	bne.n	800780a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077ee:	4b88      	ldr	r3, [pc, #544]	; (8007a10 <HAL_RCC_OscConfig+0x4c4>)
 80077f0:	69db      	ldr	r3, [r3, #28]
 80077f2:	4a87      	ldr	r2, [pc, #540]	; (8007a10 <HAL_RCC_OscConfig+0x4c4>)
 80077f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077f8:	61d3      	str	r3, [r2, #28]
 80077fa:	4b85      	ldr	r3, [pc, #532]	; (8007a10 <HAL_RCC_OscConfig+0x4c4>)
 80077fc:	69db      	ldr	r3, [r3, #28]
 80077fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007802:	60bb      	str	r3, [r7, #8]
 8007804:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007806:	2301      	movs	r3, #1
 8007808:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800780a:	4b82      	ldr	r3, [pc, #520]	; (8007a14 <HAL_RCC_OscConfig+0x4c8>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007812:	2b00      	cmp	r3, #0
 8007814:	d118      	bne.n	8007848 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007816:	4b7f      	ldr	r3, [pc, #508]	; (8007a14 <HAL_RCC_OscConfig+0x4c8>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a7e      	ldr	r2, [pc, #504]	; (8007a14 <HAL_RCC_OscConfig+0x4c8>)
 800781c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007820:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007822:	f7ff fa39 	bl	8006c98 <HAL_GetTick>
 8007826:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007828:	e008      	b.n	800783c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800782a:	f7ff fa35 	bl	8006c98 <HAL_GetTick>
 800782e:	4602      	mov	r2, r0
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	2b64      	cmp	r3, #100	; 0x64
 8007836:	d901      	bls.n	800783c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007838:	2303      	movs	r3, #3
 800783a:	e103      	b.n	8007a44 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800783c:	4b75      	ldr	r3, [pc, #468]	; (8007a14 <HAL_RCC_OscConfig+0x4c8>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007844:	2b00      	cmp	r3, #0
 8007846:	d0f0      	beq.n	800782a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d106      	bne.n	800785e <HAL_RCC_OscConfig+0x312>
 8007850:	4b6f      	ldr	r3, [pc, #444]	; (8007a10 <HAL_RCC_OscConfig+0x4c4>)
 8007852:	6a1b      	ldr	r3, [r3, #32]
 8007854:	4a6e      	ldr	r2, [pc, #440]	; (8007a10 <HAL_RCC_OscConfig+0x4c4>)
 8007856:	f043 0301 	orr.w	r3, r3, #1
 800785a:	6213      	str	r3, [r2, #32]
 800785c:	e02d      	b.n	80078ba <HAL_RCC_OscConfig+0x36e>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10c      	bne.n	8007880 <HAL_RCC_OscConfig+0x334>
 8007866:	4b6a      	ldr	r3, [pc, #424]	; (8007a10 <HAL_RCC_OscConfig+0x4c4>)
 8007868:	6a1b      	ldr	r3, [r3, #32]
 800786a:	4a69      	ldr	r2, [pc, #420]	; (8007a10 <HAL_RCC_OscConfig+0x4c4>)
 800786c:	f023 0301 	bic.w	r3, r3, #1
 8007870:	6213      	str	r3, [r2, #32]
 8007872:	4b67      	ldr	r3, [pc, #412]	; (8007a10 <HAL_RCC_OscConfig+0x4c4>)
 8007874:	6a1b      	ldr	r3, [r3, #32]
 8007876:	4a66      	ldr	r2, [pc, #408]	; (8007a10 <HAL_RCC_OscConfig+0x4c4>)
 8007878:	f023 0304 	bic.w	r3, r3, #4
 800787c:	6213      	str	r3, [r2, #32]
 800787e:	e01c      	b.n	80078ba <HAL_RCC_OscConfig+0x36e>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	2b05      	cmp	r3, #5
 8007886:	d10c      	bne.n	80078a2 <HAL_RCC_OscConfig+0x356>
 8007888:	4b61      	ldr	r3, [pc, #388]	; (8007a10 <HAL_RCC_OscConfig+0x4c4>)
 800788a:	6a1b      	ldr	r3, [r3, #32]
 800788c:	4a60      	ldr	r2, [pc, #384]	; (8007a10 <HAL_RCC_OscConfig+0x4c4>)
 800788e:	f043 0304 	orr.w	r3, r3, #4
 8007892:	6213      	str	r3, [r2, #32]
 8007894:	4b5e      	ldr	r3, [pc, #376]	; (8007a10 <HAL_RCC_OscConfig+0x4c4>)
 8007896:	6a1b      	ldr	r3, [r3, #32]
 8007898:	4a5d      	ldr	r2, [pc, #372]	; (8007a10 <HAL_RCC_OscConfig+0x4c4>)
 800789a:	f043 0301 	orr.w	r3, r3, #1
 800789e:	6213      	str	r3, [r2, #32]
 80078a0:	e00b      	b.n	80078ba <HAL_RCC_OscConfig+0x36e>
 80078a2:	4b5b      	ldr	r3, [pc, #364]	; (8007a10 <HAL_RCC_OscConfig+0x4c4>)
 80078a4:	6a1b      	ldr	r3, [r3, #32]
 80078a6:	4a5a      	ldr	r2, [pc, #360]	; (8007a10 <HAL_RCC_OscConfig+0x4c4>)
 80078a8:	f023 0301 	bic.w	r3, r3, #1
 80078ac:	6213      	str	r3, [r2, #32]
 80078ae:	4b58      	ldr	r3, [pc, #352]	; (8007a10 <HAL_RCC_OscConfig+0x4c4>)
 80078b0:	6a1b      	ldr	r3, [r3, #32]
 80078b2:	4a57      	ldr	r2, [pc, #348]	; (8007a10 <HAL_RCC_OscConfig+0x4c4>)
 80078b4:	f023 0304 	bic.w	r3, r3, #4
 80078b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d015      	beq.n	80078ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078c2:	f7ff f9e9 	bl	8006c98 <HAL_GetTick>
 80078c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078c8:	e00a      	b.n	80078e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078ca:	f7ff f9e5 	bl	8006c98 <HAL_GetTick>
 80078ce:	4602      	mov	r2, r0
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	1ad3      	subs	r3, r2, r3
 80078d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80078d8:	4293      	cmp	r3, r2
 80078da:	d901      	bls.n	80078e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80078dc:	2303      	movs	r3, #3
 80078de:	e0b1      	b.n	8007a44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078e0:	4b4b      	ldr	r3, [pc, #300]	; (8007a10 <HAL_RCC_OscConfig+0x4c4>)
 80078e2:	6a1b      	ldr	r3, [r3, #32]
 80078e4:	f003 0302 	and.w	r3, r3, #2
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d0ee      	beq.n	80078ca <HAL_RCC_OscConfig+0x37e>
 80078ec:	e014      	b.n	8007918 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078ee:	f7ff f9d3 	bl	8006c98 <HAL_GetTick>
 80078f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078f4:	e00a      	b.n	800790c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078f6:	f7ff f9cf 	bl	8006c98 <HAL_GetTick>
 80078fa:	4602      	mov	r2, r0
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	f241 3288 	movw	r2, #5000	; 0x1388
 8007904:	4293      	cmp	r3, r2
 8007906:	d901      	bls.n	800790c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007908:	2303      	movs	r3, #3
 800790a:	e09b      	b.n	8007a44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800790c:	4b40      	ldr	r3, [pc, #256]	; (8007a10 <HAL_RCC_OscConfig+0x4c4>)
 800790e:	6a1b      	ldr	r3, [r3, #32]
 8007910:	f003 0302 	and.w	r3, r3, #2
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1ee      	bne.n	80078f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007918:	7dfb      	ldrb	r3, [r7, #23]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d105      	bne.n	800792a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800791e:	4b3c      	ldr	r3, [pc, #240]	; (8007a10 <HAL_RCC_OscConfig+0x4c4>)
 8007920:	69db      	ldr	r3, [r3, #28]
 8007922:	4a3b      	ldr	r2, [pc, #236]	; (8007a10 <HAL_RCC_OscConfig+0x4c4>)
 8007924:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007928:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	69db      	ldr	r3, [r3, #28]
 800792e:	2b00      	cmp	r3, #0
 8007930:	f000 8087 	beq.w	8007a42 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007934:	4b36      	ldr	r3, [pc, #216]	; (8007a10 <HAL_RCC_OscConfig+0x4c4>)
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	f003 030c 	and.w	r3, r3, #12
 800793c:	2b08      	cmp	r3, #8
 800793e:	d061      	beq.n	8007a04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	69db      	ldr	r3, [r3, #28]
 8007944:	2b02      	cmp	r3, #2
 8007946:	d146      	bne.n	80079d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007948:	4b33      	ldr	r3, [pc, #204]	; (8007a18 <HAL_RCC_OscConfig+0x4cc>)
 800794a:	2200      	movs	r2, #0
 800794c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800794e:	f7ff f9a3 	bl	8006c98 <HAL_GetTick>
 8007952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007954:	e008      	b.n	8007968 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007956:	f7ff f99f 	bl	8006c98 <HAL_GetTick>
 800795a:	4602      	mov	r2, r0
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	1ad3      	subs	r3, r2, r3
 8007960:	2b02      	cmp	r3, #2
 8007962:	d901      	bls.n	8007968 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007964:	2303      	movs	r3, #3
 8007966:	e06d      	b.n	8007a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007968:	4b29      	ldr	r3, [pc, #164]	; (8007a10 <HAL_RCC_OscConfig+0x4c4>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007970:	2b00      	cmp	r3, #0
 8007972:	d1f0      	bne.n	8007956 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a1b      	ldr	r3, [r3, #32]
 8007978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800797c:	d108      	bne.n	8007990 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800797e:	4b24      	ldr	r3, [pc, #144]	; (8007a10 <HAL_RCC_OscConfig+0x4c4>)
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	4921      	ldr	r1, [pc, #132]	; (8007a10 <HAL_RCC_OscConfig+0x4c4>)
 800798c:	4313      	orrs	r3, r2
 800798e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007990:	4b1f      	ldr	r3, [pc, #124]	; (8007a10 <HAL_RCC_OscConfig+0x4c4>)
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6a19      	ldr	r1, [r3, #32]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a0:	430b      	orrs	r3, r1
 80079a2:	491b      	ldr	r1, [pc, #108]	; (8007a10 <HAL_RCC_OscConfig+0x4c4>)
 80079a4:	4313      	orrs	r3, r2
 80079a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079a8:	4b1b      	ldr	r3, [pc, #108]	; (8007a18 <HAL_RCC_OscConfig+0x4cc>)
 80079aa:	2201      	movs	r2, #1
 80079ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079ae:	f7ff f973 	bl	8006c98 <HAL_GetTick>
 80079b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80079b4:	e008      	b.n	80079c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079b6:	f7ff f96f 	bl	8006c98 <HAL_GetTick>
 80079ba:	4602      	mov	r2, r0
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	1ad3      	subs	r3, r2, r3
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d901      	bls.n	80079c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80079c4:	2303      	movs	r3, #3
 80079c6:	e03d      	b.n	8007a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80079c8:	4b11      	ldr	r3, [pc, #68]	; (8007a10 <HAL_RCC_OscConfig+0x4c4>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d0f0      	beq.n	80079b6 <HAL_RCC_OscConfig+0x46a>
 80079d4:	e035      	b.n	8007a42 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079d6:	4b10      	ldr	r3, [pc, #64]	; (8007a18 <HAL_RCC_OscConfig+0x4cc>)
 80079d8:	2200      	movs	r2, #0
 80079da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079dc:	f7ff f95c 	bl	8006c98 <HAL_GetTick>
 80079e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80079e2:	e008      	b.n	80079f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079e4:	f7ff f958 	bl	8006c98 <HAL_GetTick>
 80079e8:	4602      	mov	r2, r0
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	d901      	bls.n	80079f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80079f2:	2303      	movs	r3, #3
 80079f4:	e026      	b.n	8007a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80079f6:	4b06      	ldr	r3, [pc, #24]	; (8007a10 <HAL_RCC_OscConfig+0x4c4>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1f0      	bne.n	80079e4 <HAL_RCC_OscConfig+0x498>
 8007a02:	e01e      	b.n	8007a42 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	69db      	ldr	r3, [r3, #28]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d107      	bne.n	8007a1c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e019      	b.n	8007a44 <HAL_RCC_OscConfig+0x4f8>
 8007a10:	40021000 	.word	0x40021000
 8007a14:	40007000 	.word	0x40007000
 8007a18:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007a1c:	4b0b      	ldr	r3, [pc, #44]	; (8007a4c <HAL_RCC_OscConfig+0x500>)
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6a1b      	ldr	r3, [r3, #32]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d106      	bne.n	8007a3e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d001      	beq.n	8007a42 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e000      	b.n	8007a44 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3718      	adds	r7, #24
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	40021000 	.word	0x40021000

08007a50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d101      	bne.n	8007a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e0d0      	b.n	8007c06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a64:	4b6a      	ldr	r3, [pc, #424]	; (8007c10 <HAL_RCC_ClockConfig+0x1c0>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f003 0307 	and.w	r3, r3, #7
 8007a6c:	683a      	ldr	r2, [r7, #0]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d910      	bls.n	8007a94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a72:	4b67      	ldr	r3, [pc, #412]	; (8007c10 <HAL_RCC_ClockConfig+0x1c0>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f023 0207 	bic.w	r2, r3, #7
 8007a7a:	4965      	ldr	r1, [pc, #404]	; (8007c10 <HAL_RCC_ClockConfig+0x1c0>)
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a82:	4b63      	ldr	r3, [pc, #396]	; (8007c10 <HAL_RCC_ClockConfig+0x1c0>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 0307 	and.w	r3, r3, #7
 8007a8a:	683a      	ldr	r2, [r7, #0]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d001      	beq.n	8007a94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	e0b8      	b.n	8007c06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 0302 	and.w	r3, r3, #2
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d020      	beq.n	8007ae2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0304 	and.w	r3, r3, #4
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d005      	beq.n	8007ab8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007aac:	4b59      	ldr	r3, [pc, #356]	; (8007c14 <HAL_RCC_ClockConfig+0x1c4>)
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	4a58      	ldr	r2, [pc, #352]	; (8007c14 <HAL_RCC_ClockConfig+0x1c4>)
 8007ab2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007ab6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 0308 	and.w	r3, r3, #8
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d005      	beq.n	8007ad0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ac4:	4b53      	ldr	r3, [pc, #332]	; (8007c14 <HAL_RCC_ClockConfig+0x1c4>)
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	4a52      	ldr	r2, [pc, #328]	; (8007c14 <HAL_RCC_ClockConfig+0x1c4>)
 8007aca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007ace:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ad0:	4b50      	ldr	r3, [pc, #320]	; (8007c14 <HAL_RCC_ClockConfig+0x1c4>)
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	494d      	ldr	r1, [pc, #308]	; (8007c14 <HAL_RCC_ClockConfig+0x1c4>)
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f003 0301 	and.w	r3, r3, #1
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d040      	beq.n	8007b70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d107      	bne.n	8007b06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007af6:	4b47      	ldr	r3, [pc, #284]	; (8007c14 <HAL_RCC_ClockConfig+0x1c4>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d115      	bne.n	8007b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e07f      	b.n	8007c06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d107      	bne.n	8007b1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b0e:	4b41      	ldr	r3, [pc, #260]	; (8007c14 <HAL_RCC_ClockConfig+0x1c4>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d109      	bne.n	8007b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e073      	b.n	8007c06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b1e:	4b3d      	ldr	r3, [pc, #244]	; (8007c14 <HAL_RCC_ClockConfig+0x1c4>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 0302 	and.w	r3, r3, #2
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d101      	bne.n	8007b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e06b      	b.n	8007c06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b2e:	4b39      	ldr	r3, [pc, #228]	; (8007c14 <HAL_RCC_ClockConfig+0x1c4>)
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	f023 0203 	bic.w	r2, r3, #3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	4936      	ldr	r1, [pc, #216]	; (8007c14 <HAL_RCC_ClockConfig+0x1c4>)
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007b40:	f7ff f8aa 	bl	8006c98 <HAL_GetTick>
 8007b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b46:	e00a      	b.n	8007b5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b48:	f7ff f8a6 	bl	8006c98 <HAL_GetTick>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	1ad3      	subs	r3, r2, r3
 8007b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d901      	bls.n	8007b5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	e053      	b.n	8007c06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b5e:	4b2d      	ldr	r3, [pc, #180]	; (8007c14 <HAL_RCC_ClockConfig+0x1c4>)
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	f003 020c 	and.w	r2, r3, #12
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d1eb      	bne.n	8007b48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b70:	4b27      	ldr	r3, [pc, #156]	; (8007c10 <HAL_RCC_ClockConfig+0x1c0>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 0307 	and.w	r3, r3, #7
 8007b78:	683a      	ldr	r2, [r7, #0]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d210      	bcs.n	8007ba0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b7e:	4b24      	ldr	r3, [pc, #144]	; (8007c10 <HAL_RCC_ClockConfig+0x1c0>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f023 0207 	bic.w	r2, r3, #7
 8007b86:	4922      	ldr	r1, [pc, #136]	; (8007c10 <HAL_RCC_ClockConfig+0x1c0>)
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b8e:	4b20      	ldr	r3, [pc, #128]	; (8007c10 <HAL_RCC_ClockConfig+0x1c0>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 0307 	and.w	r3, r3, #7
 8007b96:	683a      	ldr	r2, [r7, #0]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d001      	beq.n	8007ba0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e032      	b.n	8007c06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 0304 	and.w	r3, r3, #4
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d008      	beq.n	8007bbe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bac:	4b19      	ldr	r3, [pc, #100]	; (8007c14 <HAL_RCC_ClockConfig+0x1c4>)
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	4916      	ldr	r1, [pc, #88]	; (8007c14 <HAL_RCC_ClockConfig+0x1c4>)
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f003 0308 	and.w	r3, r3, #8
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d009      	beq.n	8007bde <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007bca:	4b12      	ldr	r3, [pc, #72]	; (8007c14 <HAL_RCC_ClockConfig+0x1c4>)
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	00db      	lsls	r3, r3, #3
 8007bd8:	490e      	ldr	r1, [pc, #56]	; (8007c14 <HAL_RCC_ClockConfig+0x1c4>)
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007bde:	f000 f821 	bl	8007c24 <HAL_RCC_GetSysClockFreq>
 8007be2:	4602      	mov	r2, r0
 8007be4:	4b0b      	ldr	r3, [pc, #44]	; (8007c14 <HAL_RCC_ClockConfig+0x1c4>)
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	091b      	lsrs	r3, r3, #4
 8007bea:	f003 030f 	and.w	r3, r3, #15
 8007bee:	490a      	ldr	r1, [pc, #40]	; (8007c18 <HAL_RCC_ClockConfig+0x1c8>)
 8007bf0:	5ccb      	ldrb	r3, [r1, r3]
 8007bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8007bf6:	4a09      	ldr	r2, [pc, #36]	; (8007c1c <HAL_RCC_ClockConfig+0x1cc>)
 8007bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007bfa:	4b09      	ldr	r3, [pc, #36]	; (8007c20 <HAL_RCC_ClockConfig+0x1d0>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7ff f808 	bl	8006c14 <HAL_InitTick>

  return HAL_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	40022000 	.word	0x40022000
 8007c14:	40021000 	.word	0x40021000
 8007c18:	0800a38c 	.word	0x0800a38c
 8007c1c:	20000004 	.word	0x20000004
 8007c20:	20000008 	.word	0x20000008

08007c24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b087      	sub	sp, #28
 8007c28:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	60fb      	str	r3, [r7, #12]
 8007c2e:	2300      	movs	r3, #0
 8007c30:	60bb      	str	r3, [r7, #8]
 8007c32:	2300      	movs	r3, #0
 8007c34:	617b      	str	r3, [r7, #20]
 8007c36:	2300      	movs	r3, #0
 8007c38:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007c3e:	4b1e      	ldr	r3, [pc, #120]	; (8007cb8 <HAL_RCC_GetSysClockFreq+0x94>)
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f003 030c 	and.w	r3, r3, #12
 8007c4a:	2b04      	cmp	r3, #4
 8007c4c:	d002      	beq.n	8007c54 <HAL_RCC_GetSysClockFreq+0x30>
 8007c4e:	2b08      	cmp	r3, #8
 8007c50:	d003      	beq.n	8007c5a <HAL_RCC_GetSysClockFreq+0x36>
 8007c52:	e027      	b.n	8007ca4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007c54:	4b19      	ldr	r3, [pc, #100]	; (8007cbc <HAL_RCC_GetSysClockFreq+0x98>)
 8007c56:	613b      	str	r3, [r7, #16]
      break;
 8007c58:	e027      	b.n	8007caa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	0c9b      	lsrs	r3, r3, #18
 8007c5e:	f003 030f 	and.w	r3, r3, #15
 8007c62:	4a17      	ldr	r2, [pc, #92]	; (8007cc0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007c64:	5cd3      	ldrb	r3, [r2, r3]
 8007c66:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d010      	beq.n	8007c94 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007c72:	4b11      	ldr	r3, [pc, #68]	; (8007cb8 <HAL_RCC_GetSysClockFreq+0x94>)
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	0c5b      	lsrs	r3, r3, #17
 8007c78:	f003 0301 	and.w	r3, r3, #1
 8007c7c:	4a11      	ldr	r2, [pc, #68]	; (8007cc4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007c7e:	5cd3      	ldrb	r3, [r2, r3]
 8007c80:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4a0d      	ldr	r2, [pc, #52]	; (8007cbc <HAL_RCC_GetSysClockFreq+0x98>)
 8007c86:	fb03 f202 	mul.w	r2, r3, r2
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c90:	617b      	str	r3, [r7, #20]
 8007c92:	e004      	b.n	8007c9e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a0c      	ldr	r2, [pc, #48]	; (8007cc8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007c98:	fb02 f303 	mul.w	r3, r2, r3
 8007c9c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	613b      	str	r3, [r7, #16]
      break;
 8007ca2:	e002      	b.n	8007caa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007ca4:	4b05      	ldr	r3, [pc, #20]	; (8007cbc <HAL_RCC_GetSysClockFreq+0x98>)
 8007ca6:	613b      	str	r3, [r7, #16]
      break;
 8007ca8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007caa:	693b      	ldr	r3, [r7, #16]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	371c      	adds	r7, #28
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bc80      	pop	{r7}
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop
 8007cb8:	40021000 	.word	0x40021000
 8007cbc:	007a1200 	.word	0x007a1200
 8007cc0:	0800a3a4 	.word	0x0800a3a4
 8007cc4:	0800a3b4 	.word	0x0800a3b4
 8007cc8:	003d0900 	.word	0x003d0900

08007ccc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007cd0:	4b02      	ldr	r3, [pc, #8]	; (8007cdc <HAL_RCC_GetHCLKFreq+0x10>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bc80      	pop	{r7}
 8007cda:	4770      	bx	lr
 8007cdc:	20000004 	.word	0x20000004

08007ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007ce4:	f7ff fff2 	bl	8007ccc <HAL_RCC_GetHCLKFreq>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	4b05      	ldr	r3, [pc, #20]	; (8007d00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	0a1b      	lsrs	r3, r3, #8
 8007cf0:	f003 0307 	and.w	r3, r3, #7
 8007cf4:	4903      	ldr	r1, [pc, #12]	; (8007d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007cf6:	5ccb      	ldrb	r3, [r1, r3]
 8007cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	40021000 	.word	0x40021000
 8007d04:	0800a39c 	.word	0x0800a39c

08007d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007d0c:	f7ff ffde 	bl	8007ccc <HAL_RCC_GetHCLKFreq>
 8007d10:	4602      	mov	r2, r0
 8007d12:	4b05      	ldr	r3, [pc, #20]	; (8007d28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	0adb      	lsrs	r3, r3, #11
 8007d18:	f003 0307 	and.w	r3, r3, #7
 8007d1c:	4903      	ldr	r1, [pc, #12]	; (8007d2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d1e:	5ccb      	ldrb	r3, [r1, r3]
 8007d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	40021000 	.word	0x40021000
 8007d2c:	0800a39c 	.word	0x0800a39c

08007d30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007d38:	4b0a      	ldr	r3, [pc, #40]	; (8007d64 <RCC_Delay+0x34>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a0a      	ldr	r2, [pc, #40]	; (8007d68 <RCC_Delay+0x38>)
 8007d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d42:	0a5b      	lsrs	r3, r3, #9
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	fb02 f303 	mul.w	r3, r2, r3
 8007d4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007d4c:	bf00      	nop
  }
  while (Delay --);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	1e5a      	subs	r2, r3, #1
 8007d52:	60fa      	str	r2, [r7, #12]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d1f9      	bne.n	8007d4c <RCC_Delay+0x1c>
}
 8007d58:	bf00      	nop
 8007d5a:	bf00      	nop
 8007d5c:	3714      	adds	r7, #20
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bc80      	pop	{r7}
 8007d62:	4770      	bx	lr
 8007d64:	20000004 	.word	0x20000004
 8007d68:	10624dd3 	.word	0x10624dd3

08007d6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d101      	bne.n	8007d7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e042      	b.n	8007e04 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d106      	bne.n	8007d98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f7fe feae 	bl	8006af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2224      	movs	r2, #36	; 0x24
 8007d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	68da      	ldr	r2, [r3, #12]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007dae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 fdc5 	bl	8008940 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	691a      	ldr	r2, [r3, #16]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007dc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	695a      	ldr	r2, [r3, #20]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007dd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	68da      	ldr	r2, [r3, #12]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007de4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2220      	movs	r2, #32
 8007df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2220      	movs	r2, #32
 8007df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3708      	adds	r7, #8
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b08a      	sub	sp, #40	; 0x28
 8007e10:	af02      	add	r7, sp, #8
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	603b      	str	r3, [r7, #0]
 8007e18:	4613      	mov	r3, r2
 8007e1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	2b20      	cmp	r3, #32
 8007e2a:	d16d      	bne.n	8007f08 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d002      	beq.n	8007e38 <HAL_UART_Transmit+0x2c>
 8007e32:	88fb      	ldrh	r3, [r7, #6]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d101      	bne.n	8007e3c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	e066      	b.n	8007f0a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2221      	movs	r2, #33	; 0x21
 8007e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e4a:	f7fe ff25 	bl	8006c98 <HAL_GetTick>
 8007e4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	88fa      	ldrh	r2, [r7, #6]
 8007e54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	88fa      	ldrh	r2, [r7, #6]
 8007e5a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e64:	d108      	bne.n	8007e78 <HAL_UART_Transmit+0x6c>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d104      	bne.n	8007e78 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	61bb      	str	r3, [r7, #24]
 8007e76:	e003      	b.n	8007e80 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e80:	e02a      	b.n	8007ed8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	9300      	str	r3, [sp, #0]
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	2180      	movs	r1, #128	; 0x80
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f000 fb14 	bl	80084ba <UART_WaitOnFlagUntilTimeout>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d001      	beq.n	8007e9c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	e036      	b.n	8007f0a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d10b      	bne.n	8007eba <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	881b      	ldrh	r3, [r3, #0]
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007eb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	3302      	adds	r3, #2
 8007eb6:	61bb      	str	r3, [r7, #24]
 8007eb8:	e007      	b.n	8007eca <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	781a      	ldrb	r2, [r3, #0]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d1cf      	bne.n	8007e82 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	9300      	str	r3, [sp, #0]
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	2140      	movs	r1, #64	; 0x40
 8007eec:	68f8      	ldr	r0, [r7, #12]
 8007eee:	f000 fae4 	bl	80084ba <UART_WaitOnFlagUntilTimeout>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d001      	beq.n	8007efc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e006      	b.n	8007f0a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2220      	movs	r2, #32
 8007f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007f04:	2300      	movs	r3, #0
 8007f06:	e000      	b.n	8007f0a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007f08:	2302      	movs	r3, #2
  }
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3720      	adds	r7, #32
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b084      	sub	sp, #16
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	60f8      	str	r0, [r7, #12]
 8007f1a:	60b9      	str	r1, [r7, #8]
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	2b20      	cmp	r3, #32
 8007f2a:	d112      	bne.n	8007f52 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d002      	beq.n	8007f38 <HAL_UART_Receive_IT+0x26>
 8007f32:	88fb      	ldrh	r3, [r7, #6]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d101      	bne.n	8007f3c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	e00b      	b.n	8007f54 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007f42:	88fb      	ldrh	r3, [r7, #6]
 8007f44:	461a      	mov	r2, r3
 8007f46:	68b9      	ldr	r1, [r7, #8]
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f000 fb24 	bl	8008596 <UART_Start_Receive_IT>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	e000      	b.n	8007f54 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007f52:	2302      	movs	r3, #2
  }
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3710      	adds	r7, #16
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b0ba      	sub	sp, #232	; 0xe8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	695b      	ldr	r3, [r3, #20]
 8007f7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007f82:	2300      	movs	r3, #0
 8007f84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f92:	f003 030f 	and.w	r3, r3, #15
 8007f96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007f9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d10f      	bne.n	8007fc2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fa6:	f003 0320 	and.w	r3, r3, #32
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d009      	beq.n	8007fc2 <HAL_UART_IRQHandler+0x66>
 8007fae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fb2:	f003 0320 	and.w	r3, r3, #32
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d003      	beq.n	8007fc2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 fc01 	bl	80087c2 <UART_Receive_IT>
      return;
 8007fc0:	e25b      	b.n	800847a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007fc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	f000 80de 	beq.w	8008188 <HAL_UART_IRQHandler+0x22c>
 8007fcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fd0:	f003 0301 	and.w	r3, r3, #1
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d106      	bne.n	8007fe6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fdc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f000 80d1 	beq.w	8008188 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fea:	f003 0301 	and.w	r3, r3, #1
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00b      	beq.n	800800a <HAL_UART_IRQHandler+0xae>
 8007ff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d005      	beq.n	800800a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008002:	f043 0201 	orr.w	r2, r3, #1
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800800a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800800e:	f003 0304 	and.w	r3, r3, #4
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00b      	beq.n	800802e <HAL_UART_IRQHandler+0xd2>
 8008016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800801a:	f003 0301 	and.w	r3, r3, #1
 800801e:	2b00      	cmp	r3, #0
 8008020:	d005      	beq.n	800802e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008026:	f043 0202 	orr.w	r2, r3, #2
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800802e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008032:	f003 0302 	and.w	r3, r3, #2
 8008036:	2b00      	cmp	r3, #0
 8008038:	d00b      	beq.n	8008052 <HAL_UART_IRQHandler+0xf6>
 800803a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800803e:	f003 0301 	and.w	r3, r3, #1
 8008042:	2b00      	cmp	r3, #0
 8008044:	d005      	beq.n	8008052 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800804a:	f043 0204 	orr.w	r2, r3, #4
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008056:	f003 0308 	and.w	r3, r3, #8
 800805a:	2b00      	cmp	r3, #0
 800805c:	d011      	beq.n	8008082 <HAL_UART_IRQHandler+0x126>
 800805e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008062:	f003 0320 	and.w	r3, r3, #32
 8008066:	2b00      	cmp	r3, #0
 8008068:	d105      	bne.n	8008076 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800806a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800806e:	f003 0301 	and.w	r3, r3, #1
 8008072:	2b00      	cmp	r3, #0
 8008074:	d005      	beq.n	8008082 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800807a:	f043 0208 	orr.w	r2, r3, #8
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008086:	2b00      	cmp	r3, #0
 8008088:	f000 81f2 	beq.w	8008470 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800808c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008090:	f003 0320 	and.w	r3, r3, #32
 8008094:	2b00      	cmp	r3, #0
 8008096:	d008      	beq.n	80080aa <HAL_UART_IRQHandler+0x14e>
 8008098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800809c:	f003 0320 	and.w	r3, r3, #32
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d002      	beq.n	80080aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 fb8c 	bl	80087c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	695b      	ldr	r3, [r3, #20]
 80080b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	bf14      	ite	ne
 80080b8:	2301      	movne	r3, #1
 80080ba:	2300      	moveq	r3, #0
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080c6:	f003 0308 	and.w	r3, r3, #8
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d103      	bne.n	80080d6 <HAL_UART_IRQHandler+0x17a>
 80080ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d04f      	beq.n	8008176 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 fa96 	bl	8008608 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	695b      	ldr	r3, [r3, #20]
 80080e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d041      	beq.n	800816e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	3314      	adds	r3, #20
 80080f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080f8:	e853 3f00 	ldrex	r3, [r3]
 80080fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008100:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008108:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	3314      	adds	r3, #20
 8008112:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008116:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800811a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008122:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008126:	e841 2300 	strex	r3, r2, [r1]
 800812a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800812e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1d9      	bne.n	80080ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800813a:	2b00      	cmp	r3, #0
 800813c:	d013      	beq.n	8008166 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008142:	4a7e      	ldr	r2, [pc, #504]	; (800833c <HAL_UART_IRQHandler+0x3e0>)
 8008144:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800814a:	4618      	mov	r0, r3
 800814c:	f7fe ff1a 	bl	8006f84 <HAL_DMA_Abort_IT>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d016      	beq.n	8008184 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800815a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008160:	4610      	mov	r0, r2
 8008162:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008164:	e00e      	b.n	8008184 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f993 	bl	8008492 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800816c:	e00a      	b.n	8008184 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 f98f 	bl	8008492 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008174:	e006      	b.n	8008184 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f98b 	bl	8008492 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8008182:	e175      	b.n	8008470 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008184:	bf00      	nop
    return;
 8008186:	e173      	b.n	8008470 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800818c:	2b01      	cmp	r3, #1
 800818e:	f040 814f 	bne.w	8008430 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008196:	f003 0310 	and.w	r3, r3, #16
 800819a:	2b00      	cmp	r3, #0
 800819c:	f000 8148 	beq.w	8008430 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80081a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081a4:	f003 0310 	and.w	r3, r3, #16
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f000 8141 	beq.w	8008430 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80081ae:	2300      	movs	r3, #0
 80081b0:	60bb      	str	r3, [r7, #8]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	60bb      	str	r3, [r7, #8]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	60bb      	str	r3, [r7, #8]
 80081c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	695b      	ldr	r3, [r3, #20]
 80081ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	f000 80b6 	beq.w	8008340 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80081e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 8145 	beq.w	8008474 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80081ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80081f2:	429a      	cmp	r2, r3
 80081f4:	f080 813e 	bcs.w	8008474 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80081fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	2b20      	cmp	r3, #32
 8008208:	f000 8088 	beq.w	800831c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	330c      	adds	r3, #12
 8008212:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008216:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800821a:	e853 3f00 	ldrex	r3, [r3]
 800821e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008222:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008226:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800822a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	330c      	adds	r3, #12
 8008234:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008238:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800823c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008240:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008244:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008248:	e841 2300 	strex	r3, r2, [r1]
 800824c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008250:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008254:	2b00      	cmp	r3, #0
 8008256:	d1d9      	bne.n	800820c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	3314      	adds	r3, #20
 800825e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008260:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008262:	e853 3f00 	ldrex	r3, [r3]
 8008266:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008268:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800826a:	f023 0301 	bic.w	r3, r3, #1
 800826e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	3314      	adds	r3, #20
 8008278:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800827c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008280:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008282:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008284:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008288:	e841 2300 	strex	r3, r2, [r1]
 800828c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800828e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1e1      	bne.n	8008258 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	3314      	adds	r3, #20
 800829a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800829e:	e853 3f00 	ldrex	r3, [r3]
 80082a2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80082a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	3314      	adds	r3, #20
 80082b4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80082b8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80082ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082bc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80082be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80082c0:	e841 2300 	strex	r3, r2, [r1]
 80082c4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80082c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d1e3      	bne.n	8008294 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2220      	movs	r2, #32
 80082d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	330c      	adds	r3, #12
 80082e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082e4:	e853 3f00 	ldrex	r3, [r3]
 80082e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80082ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082ec:	f023 0310 	bic.w	r3, r3, #16
 80082f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	330c      	adds	r3, #12
 80082fa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80082fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8008300:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008302:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008304:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008306:	e841 2300 	strex	r3, r2, [r1]
 800830a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800830c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1e3      	bne.n	80082da <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008316:	4618      	mov	r0, r3
 8008318:	f7fe fdf9 	bl	8006f0e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2202      	movs	r2, #2
 8008320:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800832a:	b29b      	uxth	r3, r3
 800832c:	1ad3      	subs	r3, r2, r3
 800832e:	b29b      	uxth	r3, r3
 8008330:	4619      	mov	r1, r3
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f8b6 	bl	80084a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008338:	e09c      	b.n	8008474 <HAL_UART_IRQHandler+0x518>
 800833a:	bf00      	nop
 800833c:	080086cd 	.word	0x080086cd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008348:	b29b      	uxth	r3, r3
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008354:	b29b      	uxth	r3, r3
 8008356:	2b00      	cmp	r3, #0
 8008358:	f000 808e 	beq.w	8008478 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800835c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008360:	2b00      	cmp	r3, #0
 8008362:	f000 8089 	beq.w	8008478 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	330c      	adds	r3, #12
 800836c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008370:	e853 3f00 	ldrex	r3, [r3]
 8008374:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008378:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800837c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	330c      	adds	r3, #12
 8008386:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800838a:	647a      	str	r2, [r7, #68]	; 0x44
 800838c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008390:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008392:	e841 2300 	strex	r3, r2, [r1]
 8008396:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800839a:	2b00      	cmp	r3, #0
 800839c:	d1e3      	bne.n	8008366 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	3314      	adds	r3, #20
 80083a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a8:	e853 3f00 	ldrex	r3, [r3]
 80083ac:	623b      	str	r3, [r7, #32]
   return(result);
 80083ae:	6a3b      	ldr	r3, [r7, #32]
 80083b0:	f023 0301 	bic.w	r3, r3, #1
 80083b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	3314      	adds	r3, #20
 80083be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80083c2:	633a      	str	r2, [r7, #48]	; 0x30
 80083c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083ca:	e841 2300 	strex	r3, r2, [r1]
 80083ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d1e3      	bne.n	800839e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2220      	movs	r2, #32
 80083da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	330c      	adds	r3, #12
 80083ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	e853 3f00 	ldrex	r3, [r3]
 80083f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f023 0310 	bic.w	r3, r3, #16
 80083fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	330c      	adds	r3, #12
 8008404:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008408:	61fa      	str	r2, [r7, #28]
 800840a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840c:	69b9      	ldr	r1, [r7, #24]
 800840e:	69fa      	ldr	r2, [r7, #28]
 8008410:	e841 2300 	strex	r3, r2, [r1]
 8008414:	617b      	str	r3, [r7, #20]
   return(result);
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1e3      	bne.n	80083e4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2202      	movs	r2, #2
 8008420:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008422:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008426:	4619      	mov	r1, r3
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 f83b 	bl	80084a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800842e:	e023      	b.n	8008478 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008438:	2b00      	cmp	r3, #0
 800843a:	d009      	beq.n	8008450 <HAL_UART_IRQHandler+0x4f4>
 800843c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008444:	2b00      	cmp	r3, #0
 8008446:	d003      	beq.n	8008450 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 f953 	bl	80086f4 <UART_Transmit_IT>
    return;
 800844e:	e014      	b.n	800847a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008458:	2b00      	cmp	r3, #0
 800845a:	d00e      	beq.n	800847a <HAL_UART_IRQHandler+0x51e>
 800845c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008464:	2b00      	cmp	r3, #0
 8008466:	d008      	beq.n	800847a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 f992 	bl	8008792 <UART_EndTransmit_IT>
    return;
 800846e:	e004      	b.n	800847a <HAL_UART_IRQHandler+0x51e>
    return;
 8008470:	bf00      	nop
 8008472:	e002      	b.n	800847a <HAL_UART_IRQHandler+0x51e>
      return;
 8008474:	bf00      	nop
 8008476:	e000      	b.n	800847a <HAL_UART_IRQHandler+0x51e>
      return;
 8008478:	bf00      	nop
  }
}
 800847a:	37e8      	adds	r7, #232	; 0xe8
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008488:	bf00      	nop
 800848a:	370c      	adds	r7, #12
 800848c:	46bd      	mov	sp, r7
 800848e:	bc80      	pop	{r7}
 8008490:	4770      	bx	lr

08008492 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008492:	b480      	push	{r7}
 8008494:	b083      	sub	sp, #12
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800849a:	bf00      	nop
 800849c:	370c      	adds	r7, #12
 800849e:	46bd      	mov	sp, r7
 80084a0:	bc80      	pop	{r7}
 80084a2:	4770      	bx	lr

080084a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	460b      	mov	r3, r1
 80084ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80084b0:	bf00      	nop
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bc80      	pop	{r7}
 80084b8:	4770      	bx	lr

080084ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b090      	sub	sp, #64	; 0x40
 80084be:	af00      	add	r7, sp, #0
 80084c0:	60f8      	str	r0, [r7, #12]
 80084c2:	60b9      	str	r1, [r7, #8]
 80084c4:	603b      	str	r3, [r7, #0]
 80084c6:	4613      	mov	r3, r2
 80084c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084ca:	e050      	b.n	800856e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084d2:	d04c      	beq.n	800856e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80084d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d007      	beq.n	80084ea <UART_WaitOnFlagUntilTimeout+0x30>
 80084da:	f7fe fbdd 	bl	8006c98 <HAL_GetTick>
 80084de:	4602      	mov	r2, r0
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	1ad3      	subs	r3, r2, r3
 80084e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d241      	bcs.n	800856e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	330c      	adds	r3, #12
 80084f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f4:	e853 3f00 	ldrex	r3, [r3]
 80084f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008500:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	330c      	adds	r3, #12
 8008508:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800850a:	637a      	str	r2, [r7, #52]	; 0x34
 800850c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008510:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008512:	e841 2300 	strex	r3, r2, [r1]
 8008516:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851a:	2b00      	cmp	r3, #0
 800851c:	d1e5      	bne.n	80084ea <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	3314      	adds	r3, #20
 8008524:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	e853 3f00 	ldrex	r3, [r3]
 800852c:	613b      	str	r3, [r7, #16]
   return(result);
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	f023 0301 	bic.w	r3, r3, #1
 8008534:	63bb      	str	r3, [r7, #56]	; 0x38
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	3314      	adds	r3, #20
 800853c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800853e:	623a      	str	r2, [r7, #32]
 8008540:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008542:	69f9      	ldr	r1, [r7, #28]
 8008544:	6a3a      	ldr	r2, [r7, #32]
 8008546:	e841 2300 	strex	r3, r2, [r1]
 800854a:	61bb      	str	r3, [r7, #24]
   return(result);
 800854c:	69bb      	ldr	r3, [r7, #24]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d1e5      	bne.n	800851e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2220      	movs	r2, #32
 8008556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2220      	movs	r2, #32
 800855e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2200      	movs	r2, #0
 8008566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800856a:	2303      	movs	r3, #3
 800856c:	e00f      	b.n	800858e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	4013      	ands	r3, r2
 8008578:	68ba      	ldr	r2, [r7, #8]
 800857a:	429a      	cmp	r2, r3
 800857c:	bf0c      	ite	eq
 800857e:	2301      	moveq	r3, #1
 8008580:	2300      	movne	r3, #0
 8008582:	b2db      	uxtb	r3, r3
 8008584:	461a      	mov	r2, r3
 8008586:	79fb      	ldrb	r3, [r7, #7]
 8008588:	429a      	cmp	r2, r3
 800858a:	d09f      	beq.n	80084cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3740      	adds	r7, #64	; 0x40
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008596:	b480      	push	{r7}
 8008598:	b085      	sub	sp, #20
 800859a:	af00      	add	r7, sp, #0
 800859c:	60f8      	str	r0, [r7, #12]
 800859e:	60b9      	str	r1, [r7, #8]
 80085a0:	4613      	mov	r3, r2
 80085a2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	68ba      	ldr	r2, [r7, #8]
 80085a8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	88fa      	ldrh	r2, [r7, #6]
 80085ae:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	88fa      	ldrh	r2, [r7, #6]
 80085b4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2200      	movs	r2, #0
 80085ba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2222      	movs	r2, #34	; 0x22
 80085c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d007      	beq.n	80085dc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	68da      	ldr	r2, [r3, #12]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085da:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	695a      	ldr	r2, [r3, #20]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f042 0201 	orr.w	r2, r2, #1
 80085ea:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68da      	ldr	r2, [r3, #12]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f042 0220 	orr.w	r2, r2, #32
 80085fa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3714      	adds	r7, #20
 8008602:	46bd      	mov	sp, r7
 8008604:	bc80      	pop	{r7}
 8008606:	4770      	bx	lr

08008608 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008608:	b480      	push	{r7}
 800860a:	b095      	sub	sp, #84	; 0x54
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	330c      	adds	r3, #12
 8008616:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800861a:	e853 3f00 	ldrex	r3, [r3]
 800861e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008622:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008626:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	330c      	adds	r3, #12
 800862e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008630:	643a      	str	r2, [r7, #64]	; 0x40
 8008632:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008634:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008636:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008638:	e841 2300 	strex	r3, r2, [r1]
 800863c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800863e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008640:	2b00      	cmp	r3, #0
 8008642:	d1e5      	bne.n	8008610 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	3314      	adds	r3, #20
 800864a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864c:	6a3b      	ldr	r3, [r7, #32]
 800864e:	e853 3f00 	ldrex	r3, [r3]
 8008652:	61fb      	str	r3, [r7, #28]
   return(result);
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	f023 0301 	bic.w	r3, r3, #1
 800865a:	64bb      	str	r3, [r7, #72]	; 0x48
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	3314      	adds	r3, #20
 8008662:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008664:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008666:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008668:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800866a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800866c:	e841 2300 	strex	r3, r2, [r1]
 8008670:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1e5      	bne.n	8008644 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800867c:	2b01      	cmp	r3, #1
 800867e:	d119      	bne.n	80086b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	330c      	adds	r3, #12
 8008686:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	e853 3f00 	ldrex	r3, [r3]
 800868e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	f023 0310 	bic.w	r3, r3, #16
 8008696:	647b      	str	r3, [r7, #68]	; 0x44
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	330c      	adds	r3, #12
 800869e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086a0:	61ba      	str	r2, [r7, #24]
 80086a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a4:	6979      	ldr	r1, [r7, #20]
 80086a6:	69ba      	ldr	r2, [r7, #24]
 80086a8:	e841 2300 	strex	r3, r2, [r1]
 80086ac:	613b      	str	r3, [r7, #16]
   return(result);
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d1e5      	bne.n	8008680 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2220      	movs	r2, #32
 80086b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80086c2:	bf00      	nop
 80086c4:	3754      	adds	r7, #84	; 0x54
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bc80      	pop	{r7}
 80086ca:	4770      	bx	lr

080086cc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2200      	movs	r2, #0
 80086de:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2200      	movs	r2, #0
 80086e4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80086e6:	68f8      	ldr	r0, [r7, #12]
 80086e8:	f7ff fed3 	bl	8008492 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086ec:	bf00      	nop
 80086ee:	3710      	adds	r7, #16
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008702:	b2db      	uxtb	r3, r3
 8008704:	2b21      	cmp	r3, #33	; 0x21
 8008706:	d13e      	bne.n	8008786 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008710:	d114      	bne.n	800873c <UART_Transmit_IT+0x48>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d110      	bne.n	800873c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a1b      	ldr	r3, [r3, #32]
 800871e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	881b      	ldrh	r3, [r3, #0]
 8008724:	461a      	mov	r2, r3
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800872e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6a1b      	ldr	r3, [r3, #32]
 8008734:	1c9a      	adds	r2, r3, #2
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	621a      	str	r2, [r3, #32]
 800873a:	e008      	b.n	800874e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6a1b      	ldr	r3, [r3, #32]
 8008740:	1c59      	adds	r1, r3, #1
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	6211      	str	r1, [r2, #32]
 8008746:	781a      	ldrb	r2, [r3, #0]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008752:	b29b      	uxth	r3, r3
 8008754:	3b01      	subs	r3, #1
 8008756:	b29b      	uxth	r3, r3
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	4619      	mov	r1, r3
 800875c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800875e:	2b00      	cmp	r3, #0
 8008760:	d10f      	bne.n	8008782 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	68da      	ldr	r2, [r3, #12]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008770:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	68da      	ldr	r2, [r3, #12]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008780:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008782:	2300      	movs	r3, #0
 8008784:	e000      	b.n	8008788 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008786:	2302      	movs	r3, #2
  }
}
 8008788:	4618      	mov	r0, r3
 800878a:	3714      	adds	r7, #20
 800878c:	46bd      	mov	sp, r7
 800878e:	bc80      	pop	{r7}
 8008790:	4770      	bx	lr

08008792 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b082      	sub	sp, #8
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	68da      	ldr	r2, [r3, #12]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2220      	movs	r2, #32
 80087ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f7ff fe64 	bl	8008480 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3708      	adds	r7, #8
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b08c      	sub	sp, #48	; 0x30
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	2b22      	cmp	r3, #34	; 0x22
 80087d4:	f040 80ae 	bne.w	8008934 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087e0:	d117      	bne.n	8008812 <UART_Receive_IT+0x50>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d113      	bne.n	8008812 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80087ea:	2300      	movs	r3, #0
 80087ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008800:	b29a      	uxth	r2, r3
 8008802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008804:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800880a:	1c9a      	adds	r2, r3, #2
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	629a      	str	r2, [r3, #40]	; 0x28
 8008810:	e026      	b.n	8008860 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008816:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008818:	2300      	movs	r3, #0
 800881a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008824:	d007      	beq.n	8008836 <UART_Receive_IT+0x74>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d10a      	bne.n	8008844 <UART_Receive_IT+0x82>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	691b      	ldr	r3, [r3, #16]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d106      	bne.n	8008844 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	b2da      	uxtb	r2, r3
 800883e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008840:	701a      	strb	r2, [r3, #0]
 8008842:	e008      	b.n	8008856 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	b2db      	uxtb	r3, r3
 800884c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008850:	b2da      	uxtb	r2, r3
 8008852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008854:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800885a:	1c5a      	adds	r2, r3, #1
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008864:	b29b      	uxth	r3, r3
 8008866:	3b01      	subs	r3, #1
 8008868:	b29b      	uxth	r3, r3
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	4619      	mov	r1, r3
 800886e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008870:	2b00      	cmp	r3, #0
 8008872:	d15d      	bne.n	8008930 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	68da      	ldr	r2, [r3, #12]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f022 0220 	bic.w	r2, r2, #32
 8008882:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	68da      	ldr	r2, [r3, #12]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008892:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	695a      	ldr	r2, [r3, #20]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f022 0201 	bic.w	r2, r2, #1
 80088a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2220      	movs	r2, #32
 80088a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d135      	bne.n	8008926 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	330c      	adds	r3, #12
 80088c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	e853 3f00 	ldrex	r3, [r3]
 80088ce:	613b      	str	r3, [r7, #16]
   return(result);
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	f023 0310 	bic.w	r3, r3, #16
 80088d6:	627b      	str	r3, [r7, #36]	; 0x24
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	330c      	adds	r3, #12
 80088de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088e0:	623a      	str	r2, [r7, #32]
 80088e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e4:	69f9      	ldr	r1, [r7, #28]
 80088e6:	6a3a      	ldr	r2, [r7, #32]
 80088e8:	e841 2300 	strex	r3, r2, [r1]
 80088ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1e5      	bne.n	80088c0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f003 0310 	and.w	r3, r3, #16
 80088fe:	2b10      	cmp	r3, #16
 8008900:	d10a      	bne.n	8008918 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008902:	2300      	movs	r3, #0
 8008904:	60fb      	str	r3, [r7, #12]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	60fb      	str	r3, [r7, #12]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	60fb      	str	r3, [r7, #12]
 8008916:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800891c:	4619      	mov	r1, r3
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f7ff fdc0 	bl	80084a4 <HAL_UARTEx_RxEventCallback>
 8008924:	e002      	b.n	800892c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f7fe f882 	bl	8006a30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800892c:	2300      	movs	r3, #0
 800892e:	e002      	b.n	8008936 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008930:	2300      	movs	r3, #0
 8008932:	e000      	b.n	8008936 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008934:	2302      	movs	r3, #2
  }
}
 8008936:	4618      	mov	r0, r3
 8008938:	3730      	adds	r7, #48	; 0x30
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
	...

08008940 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	691b      	ldr	r3, [r3, #16]
 800894e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	68da      	ldr	r2, [r3, #12]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	430a      	orrs	r2, r1
 800895c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	689a      	ldr	r2, [r3, #8]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	691b      	ldr	r3, [r3, #16]
 8008966:	431a      	orrs	r2, r3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	695b      	ldr	r3, [r3, #20]
 800896c:	4313      	orrs	r3, r2
 800896e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800897a:	f023 030c 	bic.w	r3, r3, #12
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	6812      	ldr	r2, [r2, #0]
 8008982:	68b9      	ldr	r1, [r7, #8]
 8008984:	430b      	orrs	r3, r1
 8008986:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	695b      	ldr	r3, [r3, #20]
 800898e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	699a      	ldr	r2, [r3, #24]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	430a      	orrs	r2, r1
 800899c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a2c      	ldr	r2, [pc, #176]	; (8008a54 <UART_SetConfig+0x114>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d103      	bne.n	80089b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80089a8:	f7ff f9ae 	bl	8007d08 <HAL_RCC_GetPCLK2Freq>
 80089ac:	60f8      	str	r0, [r7, #12]
 80089ae:	e002      	b.n	80089b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80089b0:	f7ff f996 	bl	8007ce0 <HAL_RCC_GetPCLK1Freq>
 80089b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	4613      	mov	r3, r2
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	4413      	add	r3, r2
 80089be:	009a      	lsls	r2, r3, #2
 80089c0:	441a      	add	r2, r3
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80089cc:	4a22      	ldr	r2, [pc, #136]	; (8008a58 <UART_SetConfig+0x118>)
 80089ce:	fba2 2303 	umull	r2, r3, r2, r3
 80089d2:	095b      	lsrs	r3, r3, #5
 80089d4:	0119      	lsls	r1, r3, #4
 80089d6:	68fa      	ldr	r2, [r7, #12]
 80089d8:	4613      	mov	r3, r2
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	4413      	add	r3, r2
 80089de:	009a      	lsls	r2, r3, #2
 80089e0:	441a      	add	r2, r3
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80089ec:	4b1a      	ldr	r3, [pc, #104]	; (8008a58 <UART_SetConfig+0x118>)
 80089ee:	fba3 0302 	umull	r0, r3, r3, r2
 80089f2:	095b      	lsrs	r3, r3, #5
 80089f4:	2064      	movs	r0, #100	; 0x64
 80089f6:	fb00 f303 	mul.w	r3, r0, r3
 80089fa:	1ad3      	subs	r3, r2, r3
 80089fc:	011b      	lsls	r3, r3, #4
 80089fe:	3332      	adds	r3, #50	; 0x32
 8008a00:	4a15      	ldr	r2, [pc, #84]	; (8008a58 <UART_SetConfig+0x118>)
 8008a02:	fba2 2303 	umull	r2, r3, r2, r3
 8008a06:	095b      	lsrs	r3, r3, #5
 8008a08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a0c:	4419      	add	r1, r3
 8008a0e:	68fa      	ldr	r2, [r7, #12]
 8008a10:	4613      	mov	r3, r2
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	4413      	add	r3, r2
 8008a16:	009a      	lsls	r2, r3, #2
 8008a18:	441a      	add	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	fbb2 f2f3 	udiv	r2, r2, r3
 8008a24:	4b0c      	ldr	r3, [pc, #48]	; (8008a58 <UART_SetConfig+0x118>)
 8008a26:	fba3 0302 	umull	r0, r3, r3, r2
 8008a2a:	095b      	lsrs	r3, r3, #5
 8008a2c:	2064      	movs	r0, #100	; 0x64
 8008a2e:	fb00 f303 	mul.w	r3, r0, r3
 8008a32:	1ad3      	subs	r3, r2, r3
 8008a34:	011b      	lsls	r3, r3, #4
 8008a36:	3332      	adds	r3, #50	; 0x32
 8008a38:	4a07      	ldr	r2, [pc, #28]	; (8008a58 <UART_SetConfig+0x118>)
 8008a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a3e:	095b      	lsrs	r3, r3, #5
 8008a40:	f003 020f 	and.w	r2, r3, #15
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	440a      	add	r2, r1
 8008a4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008a4c:	bf00      	nop
 8008a4e:	3710      	adds	r7, #16
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}
 8008a54:	40013800 	.word	0x40013800
 8008a58:	51eb851f 	.word	0x51eb851f

08008a5c <memset>:
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	4402      	add	r2, r0
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d100      	bne.n	8008a66 <memset+0xa>
 8008a64:	4770      	bx	lr
 8008a66:	f803 1b01 	strb.w	r1, [r3], #1
 8008a6a:	e7f9      	b.n	8008a60 <memset+0x4>

08008a6c <strncpy>:
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	b510      	push	{r4, lr}
 8008a70:	3901      	subs	r1, #1
 8008a72:	b132      	cbz	r2, 8008a82 <strncpy+0x16>
 8008a74:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008a78:	3a01      	subs	r2, #1
 8008a7a:	f803 4b01 	strb.w	r4, [r3], #1
 8008a7e:	2c00      	cmp	r4, #0
 8008a80:	d1f7      	bne.n	8008a72 <strncpy+0x6>
 8008a82:	2100      	movs	r1, #0
 8008a84:	441a      	add	r2, r3
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d100      	bne.n	8008a8c <strncpy+0x20>
 8008a8a:	bd10      	pop	{r4, pc}
 8008a8c:	f803 1b01 	strb.w	r1, [r3], #1
 8008a90:	e7f9      	b.n	8008a86 <strncpy+0x1a>
	...

08008a94 <__libc_init_array>:
 8008a94:	b570      	push	{r4, r5, r6, lr}
 8008a96:	2600      	movs	r6, #0
 8008a98:	4d0c      	ldr	r5, [pc, #48]	; (8008acc <__libc_init_array+0x38>)
 8008a9a:	4c0d      	ldr	r4, [pc, #52]	; (8008ad0 <__libc_init_array+0x3c>)
 8008a9c:	1b64      	subs	r4, r4, r5
 8008a9e:	10a4      	asrs	r4, r4, #2
 8008aa0:	42a6      	cmp	r6, r4
 8008aa2:	d109      	bne.n	8008ab8 <__libc_init_array+0x24>
 8008aa4:	f000 f81a 	bl	8008adc <_init>
 8008aa8:	2600      	movs	r6, #0
 8008aaa:	4d0a      	ldr	r5, [pc, #40]	; (8008ad4 <__libc_init_array+0x40>)
 8008aac:	4c0a      	ldr	r4, [pc, #40]	; (8008ad8 <__libc_init_array+0x44>)
 8008aae:	1b64      	subs	r4, r4, r5
 8008ab0:	10a4      	asrs	r4, r4, #2
 8008ab2:	42a6      	cmp	r6, r4
 8008ab4:	d105      	bne.n	8008ac2 <__libc_init_array+0x2e>
 8008ab6:	bd70      	pop	{r4, r5, r6, pc}
 8008ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008abc:	4798      	blx	r3
 8008abe:	3601      	adds	r6, #1
 8008ac0:	e7ee      	b.n	8008aa0 <__libc_init_array+0xc>
 8008ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ac6:	4798      	blx	r3
 8008ac8:	3601      	adds	r6, #1
 8008aca:	e7f2      	b.n	8008ab2 <__libc_init_array+0x1e>
 8008acc:	0800a3b8 	.word	0x0800a3b8
 8008ad0:	0800a3b8 	.word	0x0800a3b8
 8008ad4:	0800a3b8 	.word	0x0800a3b8
 8008ad8:	0800a3bc 	.word	0x0800a3bc

08008adc <_init>:
 8008adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ade:	bf00      	nop
 8008ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ae2:	bc08      	pop	{r3}
 8008ae4:	469e      	mov	lr, r3
 8008ae6:	4770      	bx	lr

08008ae8 <_fini>:
 8008ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aea:	bf00      	nop
 8008aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aee:	bc08      	pop	{r3}
 8008af0:	469e      	mov	lr, r3
 8008af2:	4770      	bx	lr
